/*! Fiera.js Copyright 2016, www.homeTLT.ru (Denis Ponomarev <ponomarevtlt@gmail.com>) */
var fiera =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 42);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = fabric;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {
var utils = __webpack_require__(3);
utils.object = __webpack_require__(2);
utils.compile = __webpack_require__(4);

function capitalize(string, firstLetterOnly) {
  return string.charAt(0).toUpperCase() +
    (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());
}

function toDashed (str) {
  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}


var Toolbar = function(PARENT, el, options, menu){
  this.buttons = [];
  //todo это не совсем хорошо. нельзя создать улбраы с разными конфигами кнопок
  // this.tools = utils.object.cloneDeep(this.tools);

  if (options) {
    if (options.button) {
      utils.object.extend(this.tools.button, options.button);
    }
  }
  if (!PARENT.generatedActions) {
    Toolbar.makeActions(PARENT, menu);
  }

  if(el.constructor === String){
    el = $(document.getElementById(el));
  }
  if(el.length && Object.keys(PARENT.generatedActions).length){
    this.generateMenu(PARENT, el, options, PARENT.generatedActions);
    this.onCreate();
    el.show();
  }
  Toolbar.initKeys(PARENT.generatedActions);
};


Toolbar._getKeyString = function (config) {
  var string = "";

  if (config.ctrlKey)string += "Ctrl + ";
  if (config.altKey)string += "Alt + ";
  if (config.shiftKey)string += "Shift + ";

  var _code = config.key;
  if(_code){
    string += config.key;
  }
  return string;
};

Toolbar._getActionValue = function (object, property) {
  do{
    if(object.actions && object.actions[property]){
      return object.actions[property];
    }
  }while(object = object.__proto__);
  return null;
};

Toolbar.makeActions = function (PARENT, actions) {
    if(!actions){
      actions = {};
      _.each(PARENT.tools, function(tool){

        var _val = Toolbar._getActionValue(PARENT,tool);

        if(_val){
          actions[tool] = _val;
        }else{
          console.warn("tool " + tool + " is undefined");
        }
      });
    }

    var result = {};

    for (var i in actions) {
      var _action = this.makeAction(i, actions[i], PARENT);
      if(_action){
        result[i] = _action;
      }
    }
    PARENT.generatedActions = result;
};
Toolbar.makeAction = function (id, _ORIGINAL, parent) {

  var self = this;

  if (_ORIGINAL.constructor === Function) {
    _ORIGINAL = _ORIGINAL.call(target);
  }

  var target;

  if (_ORIGINAL.target && _ORIGINAL.target.constructor == Function) {
    target = _ORIGINAL.target.call(parent);
  } else {
    target = _ORIGINAL.target || parent;
  }

  var ___target = _ORIGINAL.target;
  var ___parent = _ORIGINAL.parent;
  delete _ORIGINAL.parent;
  delete _ORIGINAL.target;
  var RES = utils.object.cloneDeep(_ORIGINAL);
  _ORIGINAL.parent = ___parent;
  _ORIGINAL.target = ___target;


  RES.parent = ___parent;
  RES.target = target;
  RES.id = toDashed(id);


  function createGetter(property,useParent) {
    if (property.constructor == String) {
      var negative = false;
      if (property[0] == "!") {
        property = property.substr(1);
        negative = true;
      }
      if(useParent){
        return function () {
          return parent && !!parent[property] ^ negative;
        }
      }else{
        return function () {
          return target && !!target[property] ^ negative;
        }
      }
    }
    if (property.constructor == Function) {
      return property.bind(target);
    }
    return null;
  }


  /*var _insert = _ORIGINAL.insert;
  if (!_insert || _insert.constructor == String) {

    if(_ORIGINAL.parent){
      var insertproperty = fabric.util.string.capitalize(fabric.util.string.camelize(_ORIGINAL.parent.id))
    }else{
      var insertproperty = _insert || "insert" + fabric.util.string.capitalize(id,true);
    }

    if(target[insertproperty] !== undefined){
      _insert = target[insertproperty]// createGetter(insertproperty,true)()
    }else{
      _insert = true;
    }
  }

  if(!_insert)return;*/

  if (!RES.type) {
    if (RES.menu) {
      RES.type = "menu";
    }else{
      RES.type = "button";
    }
  }
  if (!RES.action) {
    if(RES.type == "button"){
      RES.action = id;
    }
  }


  if (RES.action) {
    if (RES.action.constructor == String) {
      RES.action = target[RES.action];
    }
    //RES = RES.action.bind(target);
    //RES.action = RES.action.bind(target);
    //_.extend(RES, _act);
    //arguments for action function
    if (_ORIGINAL.args) {
      RES._action = RES.action.bind(target, _ORIGINAL.args);
    } else {
      RES._action = RES.action.bind(target);
    }
    RES.action = function(){
      if(RES.disabled)return;
      RES._action.apply(this,arguments);
    }
  }


  if (_ORIGINAL.menu && _ORIGINAL.menu.constructor == Function) {
    RES.menu = _ORIGINAL.menu.bind(target);
  }
  if (_ORIGINAL.active) {
    RES.active = createGetter(_ORIGINAL.active);
  }
  if (_ORIGINAL.visible) {
    RES.visible = createGetter(_ORIGINAL.visible);
  }
  if (_ORIGINAL.enabled) {
    RES.enabled = createGetter(_ORIGINAL.enabled);
  }
  if (!_ORIGINAL.value) {
    switch(_ORIGINAL.type){
      case "color":
      case "text":
      case "number":
      case "range":
      case "label":
      case "select":
      case "checkbox":
        _ORIGINAL.value = id;
      // console.log(id, _ORIGINAL);
    }
  }
  if (_ORIGINAL.value) {
    var _set, _get, _options;
    if (_ORIGINAL.value.constructor == String) {

      var setFunctionName = "set" + capitalize(_ORIGINAL.value, true),
        getFunctionName = "get" + capitalize(_ORIGINAL.value, true),
        minName = "min" + capitalize(_ORIGINAL.value, true),
        maxName = "max" + capitalize(_ORIGINAL.value, true),
        setFoo = function(val){
          target[setFunctionName](val);
          // todo self.setFunctionCallback(target);
        },
        getFoo = target[getFunctionName],
        minFoo = target[minName],
        maxFoo = target[maxName];

      _set = setFoo || (_ORIGINAL.args ?
          function (val, args) {
            this[_ORIGINAL.value][args] = val;
          } :
          function (val) {
            this[_ORIGINAL.value] = val;
          });

      _get = getFoo || (_ORIGINAL.args ?
          function (args) {
            return this[_ORIGINAL.value][args];
          } :
          function () {
            return this[_ORIGINAL.value];
          });


      RES.value = {
        min: minFoo,
        max: maxFoo
      }

    } else {
      _set = _ORIGINAL.value.set;
      _get = _ORIGINAL.value.get;
      _options = _ORIGINAL.value.options;
    }

    if(RES.value.min !== undefined && RES.value.min.constructor == String){
      RES.value.min = target[RES.value.min];
    }
    if(RES.value.max !== undefined && RES.value.max.constructor == String){
      RES.value.max = target[RES.value.max];
    }
    if(RES.value.step !== undefined && RES.value.step.constructor == String){
      RES.value.step = target[RES.value.step];
    }
    var _min = RES.value.min, _max = RES.value.max, _step = RES.value.step;

    if (_set) {
      RES.value.set = ( _ORIGINAL.args ? _set.bind(target, _ORIGINAL.args) : _set.bind(target));
    }
    if (_get) {
      RES.value.get = ( _ORIGINAL.args ? _get.bind(target, _ORIGINAL.args) : _get.bind(target));
    }
    if (_min && _min.constructor == Function) {
      RES.value.min = ( _ORIGINAL.args ? _min.bind(target, _ORIGINAL.args) : _min.bind(target));
    }
    if (_max && _max.constructor == Function) {
      RES.value.max = ( _ORIGINAL.args ? _max.bind(target, _ORIGINAL.args) : _max.bind(target));
    }
    if (_step && _step.constructor == Function) {
      RES.value.step = ( _ORIGINAL.args ? _step.bind(target, _ORIGINAL.args) : _step.bind(target));
    }
    if (_options) {
      RES.value.options = ( _ORIGINAL.args ? _options.bind(target, _ORIGINAL.args) : _options.bind(target));
    }
  }

  if (_ORIGINAL.data) {
    RES.data = _ORIGINAL.data.call(target);
  }
  if (RES.menu) {
    if (_ORIGINAL.menu.constructor === Function){
      RES.menu =  _ORIGINAL.menu.call(target);
    }
    if (RES.type == "options") {
      for (var i in RES.menu) {
        RES.menu[i].parent = RES;
        RES.menu[i].type = "option";
        if(!RES.menu[i].title){
          RES.menu[i].title = i;
        }
        if(!RES.menu[i].option) {
          RES.menu[i].option = i;
        }
      }
    }
    for (var i in RES.menu) {
      if(RES.menu[i].constructor == String){
        RES.menu[i] = fabric.util.object.clone(RES.target.actions[RES.menu[i]]);
        RES.menu[i].parent = RES;
      }
      RES.menu[i] = Toolbar.makeAction(i, RES.menu[i], target);
      if(!RES.menu[i]){
        delete RES.menu[i];
      }
    }
  }



  if (_ORIGINAL.keyboard !== false && (_ORIGINAL.key || _ORIGINAL.shiftKey || _ORIGINAL.altKey || _ORIGINAL.ctrlKey || _ORIGINAL.metaKey)) {
    if(_ORIGINAL.keyCode && _ORIGINAL.keyCode.constructor == String){
      RES.keyCode = _ORIGINAL.keyCode.toUpperCase().charCodeAt(0);
      RES.key = String.fromCharCode(RES.keyCode);
    }
    RES.keyboard = true
  };

  return RES;
};

Toolbar.getButtons = function (actions) {
  var _buttons = [];
  for(var i in actions){
    var action = actions[i];
    if(action.keyboard){
      action.title += " (" + Toolbar._getKeyString(action) + ")";
      _buttons.push(action);
    }
    if (actions.menu) {
      _buttons = _buttons.concat(Toolbar.getButtons(actions.menu));
    }
  };

  return _buttons;
};
Toolbar.initKeys = function (actions) {

  var buttons = Toolbar.getButtons(actions);

  var self = this;
  $("body").on( "keydown",function (e) {
    for (var i in buttons) {
      var _config = buttons[i];

      if(_config.enabled && !_config.enabled()){
        continue;
      }
      if(_config.disabled || _config.disabled){
        continue;
      }
      if ((!_config.disabled && !_config.hidden) &&
        (_config.keyCode == e.keyCode || _config.key == e.key) &&
        (_config.ctrlKey === undefined || _config.ctrlKey == e.ctrlKey ) &&
        (_config.altKey === undefined || _config.altKey == e.altKey ) &&
        (_config.shiftKey === undefined || _config.shiftKey == e.shiftKey ) &&
        (_config.metaKey === undefined || _config.metaKey == e.metaKey )) {

        e.preventDefault();
        e.stopPropagation();
        if (_config.option !== undefined) {
          _config.action.call(_config.target, _config.option, e)
        } else {
          _config.action.call(_config.target, e)
        }
      }
    }
  });

  //$(window).on("mousewheel", function (event) {
  //  for (var i in self.buttons) {
  //    var data = self.buttons[i];
  //    if (!data.mousewheel)continue;
  //    if (!data.ctrlKey || data.ctrlKey && event.ctrlKey) {
  //      if (event.deltaY > 0 && data.mousewheel == ">") {
  //        data.action.call(target, data.option || event, event)
  //      }
  //      if (event.deltaY < 0 && data.mousewheel == "<") {
  //        data.action.call(target, data.option || event, event)
  //      }
  //      event.preventDefault();
  //      event.stopPropagation();
  //      return false;
  //    }
  //  }
  //});

};

Toolbar.prototype = {

  // setFunctionCallback: function(){},
  tools: {

    "label": {
      scope: function (data, options) {
        return {
          getValue: data.value.get,
          valueCurrent: data.value.get()
        }
      },
      template: '<span class="object-menu-item object-menu-label" title="{title}">',
      render: function ($item, data, options, tool, val) {
        var scope = fabric.util.object.defaults(tool.scope.call(this, data, options),data);
        $item.html(data.template.format(data.value.get()));
        utils.compile.compileElement($item,scope);
      }
    },
    "number": {
      scope: function (data, options) {
        return {
          getInputValue: function(){
            return parseFloat(data.$item.find("input").val());
          },
          getValue: data.value.get,
          setValue: data.value.set,
          minValue: data.value.min && data.value.min(),
          maxValue: data.value.max && data.value.max(),
          valueCurrent: data.value.get(),
          onchange: function (e) {
            data.value.set(parseFloat($(e.target).val()));
          }
        }
      },
      template: '<span class="object-menu-item object-menu-number" title="{title}">' +
      '<input type="number" min="{minValue}" max="{maxValue}" value="{valueCurrent}" onchange="onchange(event)">',
      render: function ($item, data, options, tool, val) {
        $item.find("input").val(data.value.get());
      }
    },
    "range": {
      scope: function (data, options) {
        return {
          minValue: data.value.min ? typeof data.value.min == "function" ? data.value.min() : data.value.min: 0,
          maxValue: data.value.max ? typeof data.value.max == "function" ? data.value.max() : data.value.max: 1,
          valueStep: data.value.step ? typeof data.value.step == "function" ? data.value.step() : data.value.step: 0.1,
          valueCurrent: data.value.get(),
          onchange: function (e) {
            data.value.set(parseFloat($(e.target).val()));
          }
        }
      },
      template: '<span class="object-menu-item object-menu-range" title="{title}">' +
      '<input type="range" step="{valueStep}" min="{minValue}" max="{maxValue}" value="{valueCurrent}" onchange="onchange(event)">',
      render: function ($item, data, options, tool, val) {
        $item.find("input").val(data.value.get());
      }
    },
    "checkbox": {
      scope: function (data, options) {
        return {
          onchange: function (e) {
            data.value.set(e.target.checked)
          },
          valueCurrent: data.value.get()
        }
      },
      template:
      '<span class="object-menu-item object-menu-checkbox" title="{title}">' +
      '<input type="checkbox" onchange="onchange(event)" dp-checked="{valueCurrent}" id="checkbox-{id}">' +
      '<label for="checkbox-{id}"  class="btn button-{id} {className}">',
      render: function ($item, data, options, tool, val) {
        $item.find("input").val(val);
      }
    },
    "menu": {
      template: '<div class="object-menu-item object-menu-menu" title="{title}">' +
      '<label dp-if="title" for="button-{id}">{title}</label>' +
      '<button class="btn button-menu-trigger button-{id} {className}" id="button-{id}"/>' +
      '<div class="object-menu submenu" transclude/>',
      post: function ($item, data, options, transclude) {
        //$item.find(".button-menu-trigger").click(function () {
        //  $item.find(".object-menu").toggle();
        //})
        if (data.hovered) {
          $item.addClass("hovered");
          this.toggleByHover($item, transclude, null, data)
        }
        if (data.toggled) {
          $item.addClass("toggled");
          this.toggleByButton($item, transclude)
        };
        this.generateMenu(data.target, transclude, options, data.menu);
      }
    },
    "button": {
      scope: function (data, options) {
        return {
          buttonsTitle: options.buttons && options.buttons.title || false,
          buttonscClassName: (options.buttons && options.buttons.className || '')
        }
      },
      template:
      '<span class="object-menu-item" title="{title}">' +
      '<button class="btn button-{id} {className} {buttonscClassName}"  onclick="!disabled && option ? action(option) : action()">' +
      '<img dp-if="icon" dp-src="icon">' +
      '<span dp-include="svg" dp-if="svg"></span>' +
      '<span dp-if="buttonsTitle" class="button-title">{title}</span>'
    }
  },
  onCreate: function () {

  },
  destroy: function (target) {
    for (var i = this.buttons.length;i--;) {
      var _config = this.buttons[i];
      if(target && _config.target != target ){
        continue;
      }
      this.buttons.splice(i,1);
    }
  },
  createInput: function ($item, data, type) {

    var target = data.target;
    var $input = $("<input>")
      .attr("type", type)
      .attr("min", data.value.min())
      .attr("max", data.value.max());

    $input.val(data.value.get());
    if (data.value.observe) {
      target.on(data.value.observe, function (val) {
        $input.val(data.value.get());
      });
    }
    $input.change(function (e) {
      data.value.set(parseFloat($input.val()))
    });
    $item.append($input);
  },
  initItem: function ($item, data) {

    if (data.active) {
      if (data.active.call(data.target, data.option)) {
        $item.addClass("active");
      }
    }

    if (data.visible !== undefined) {
      if (data.visible.constructor == Function) {
        if (!data.visible.call(data.target)) {
          $item.hide();
        }
      } else if (!data.visible) {
        $item.hide();
      }
    }

    data.disabled = false;
    if (data.enabled !== undefined) {
      if (data.enabled.constructor == Function) {
        if (!data.enabled.call(data.target)) {
          $item.attr("disabled", true);
          data.disabled = true;
        }
      }
    }

    if (data.observe) {
      //todo
      if (data.visible && data.visible.constructor == Function) {
        data.target && data.target.on(data.observe, function () {
          if (!data.visible.call(data.target)) {
            $item.hide();
            data.hidden = true;
          } else {
            $item.show();
            data.hidden = false;
          }
        });
      }

      if (data.type == "options") {
        data.target && data.target.on(data.observe, function () {
          var _val = data.value.get();
          $("[name=" + data.id + "]").prop("checked",false);
          $("[name=" + data.id + "][value=" + _val +"]").prop("checked",true);
        });
      }

      if (data.enabled && data.enabled.constructor == Function) {
        data.target && data.target.on(data.observe, function () {
          if (!data.enabled.call(data.target)) {
            $item.attr("disabled", true);
            data.disabled = true;
          } else {
            $item.removeAttr("disabled");
            data.disabled = false;
          }
        });
      }
    }
  },
  toggleByHover: function ($item, $toggleElement, foo,data) {

    var onClose;

    $toggleElement.hide();
    $item.mouseout(function () {
      $toggleElement.hide();
      onClose && onClose();
    });
    $item.mouseover(function () {
      $toggleElement.show();
      onClose = foo && foo();
    });

    $item.click(function () {
      if (data && data.immediately) {
        data.action();
      }
    });
  },
  toggleByButton: function ($item, $toggleElement, foo,data) {

    var onClose;
    var _try_hide = function (e) {
      var _parents = $(e.target).parents();
      for (var i in _parents) {
        if (_parents[i] === $item[0]) {
          return false;
        }
      }
      if ($toggleElement.css("display") !== "none") {
        $toggleElement.hide();
        onClose && onClose();
      }
    };

    $toggleElement.click(function (e) {
      e.stopPropagation();
    });
    $toggleElement.hide();
    $item.click(function () {

      if ($toggleElement.css("display") !== "none") {
        $toggleElement.hide();
        onClose && onClose();
        $(window).off("click", _try_hide);
      } else {
        $toggleElement.show();
        $(window).on("click", _try_hide);

        onClose = foo && foo();

        if(data && data.immediately){
          data.action();
        }
      }
    })
  },
  generateMenu: function (target, $el, options, menu) {

    options = options || {
        title: false
      };
    options.buttons = options.buttons || {
        className: "",
        title: false
      };

    $el.empty();

    var _this =  this;
    for (var i in menu) {
      var data = menu[i];
      if (!data || data.insert !== undefined && !data.insert) {
        continue;
      }
      data.type = data.type || "button";

      //todo непонятно зачем аргумент target в начале
      var target = data.target;

      var tool = this.tools[data.type];

      if (!tool) {
        console.warn("tool '" + data.type + "' undefined");
        continue;
      }
      var scope = data;
      if (tool.scope) {
        scope = fabric.util.object.defaults(tool.scope.call(this, data, options),data);
      }

      var $item = $(tool.template.format(scope));
      var transclude = $item.find("[transclude]");
      scope.$item = data.$item = $item;
      if(data.template){
        $item.html(data.template.format(data.value.get()));
      }

      utils.compile.compileElement($item,scope);

      if (data.value && data.value.observe) {

        target.on(data.value.observe, function (val) {

          if (tool.post) {
            tool.post.call(_this,$item, scope, options, transclude.length ? transclude : null);
          }
          if(tool.render){
            tool.render.call(_this, $item, data, options, tool, val);
          }
          //this.fire(data.type + ":render",{item: $item, data: data, options: options, tool: tool, val: val})
        });
      }

      this.initItem($item, data);

      if (tool.post) {
        tool.post.call(this,$item, scope, options, transclude.length ? transclude : null);
      }

      this.fire(data.type + ":created",{item: $item, data: data, options: options, tool: tool});

      $el.append($item);
    }
  }
};
utils.observable(Toolbar.prototype);


Toolbar.single = function(data,element){
  data.$item = element;
  data.type = data.type || "button";

  var tool = Toolbar.prototype.tools[data.type];

  Toolbar.prototype.initItem(element,data);

  if (data.value && data.value.observe) {
    data.target.on(data.value.observe, function (val) {
      tool.render( element, data, {}, tool, val)
    });
  }

  if(tool.post){
    var transclude = element.find("[transclude]");

    tool.post.call(Toolbar.prototype, element, data, {}, transclude.length ? transclude : null);
  }

  var scope = data;
  if(tool.scope){
    scope = _.defaults(data, tool.scope.call(Toolbar.prototype, data, {}));
  }

  element.eachSelf("*",function(){
    var nodes=[], values=[];
    for (var att, i = 0, atts = this.attributes, n = atts.length; i < n; i++){
      att = atts[i];
      nodes.push(att.nodeName);
      values.push(att.nodeValue);
      this.setAttribute(att.nodeName,att.nodeValue.format(scope));
    }
  });
  utils.compile.compileElement(element,scope);
};


module.exports = Toolbar;




/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

var utils = {
  /**
   *
   * @param arr
   * @param arr2
   * @returns {{}}
   * @example
   *    x = {a: 1 ,b: 1, c: [1,2]}
   *    y = {a: 2 ,  c : 3 , d : 1}
   *
   *    extendArraysObject(x,y) = {a: [1,2] b : [1] c : [1,2,3], d [1] }
   */
  extendArraysObject : function(arr,arr2){
    var newArray = {};

    for(var i in arr){
      if(arr[i].constructor == Array){
        newArray[i]  = [].concat(arr[i]);
      }else{
        newArray[i] = [arr[i]];
      }
    }

    for(var i in arr2){
      if(newArray[i]){
        newArray[i].push(arr2[i]);
      }else{
        newArray[i] = [arr2[i]];
      }
    }
    return newArray;
  },
  filterValues: function (array, values) {
    var new_array = [];
    for (var i in array) {
      var _new_object = {};
      for (var j in values) {
        _new_object[values[j]] = array[i][values[j]]
      }
      new_array.push(_new_object);
    }
    return new_array;
  },

  /**
   *  Тасование Фишера–Йетса,случайное тасование множества
   * @param object
   * @returns {*}
   */
  shuffle: function (object) {
    if (!object.length) return;
    var i = object.length;
    while (--i) {
      var j = Math.floor(Math.random() * (i + 1));
      var temp = object[i];
      object[i] = object[j];
      object[j] = temp;
    }

    return object; // for convenience, in case we want a reference to the array
  },
  /**
   * Dependency: underscore.js ( http://documentcloud.github.com/underscore/ )
   *
   * Mix it in with underscore.js:
   * _.mixin({deepExtend: deepExtend});
   *
   * Call it like this:
   * var myObj = utils.deepExtend(grandparent, child, grandchild, greatgrandchild)
   *
   * Notes:
   * Keep it DRY.
   * This function is especially useful if you're working with JSON config documents. It allows you to create a default
   * config document with the most common settings, then override those settings for specific cases. It accepts any
   * number of objects as arguments, giving you fine-grained control over your config document hierarchy.
   *
   * Special Features and Considerations:
   * - parentRE allows you to concatenate strings. example:
   *   var obj = utils.deepExtend({url: "www.example.com"}, {url: "http://#{_}/path/to/file.html"});
   *   console.log(obj.url);
   *   output: "http://www.example.com/path/to/file.html"
   *
   * - parentRE also acts as a placeholder, which can be useful when you need to change one value in an array, while
   *   leaving the others untouched. example:
   *   var arr = utils.deepExtend([100,    {id: 1234}, true,  "foo",  [250, 500]],
   *                          ["#{_}", "#{_}",     false, "#{_}", "#{_}"]);
   *   console.log(arr);
   *   output: [100, {id: 1234}, false, "foo", [250, 500]]
   *
   * - The previous example can also be written like this:
   *   var arr = utils.deepExtend([100,    {id:1234},   true,  "foo",  [250, 500]],
   *                          ["#{_}", {},          false, "#{_}", []]);
   *   console.log(arr);
   *   output: [100, {id: 1234}, false, "foo", [250, 500]]
   *
   * - And also like this:
   *   var arr = utils.deepExtend([100,    {id:1234},   true,  "foo",  [250, 500]],
   *                          ["#{_}", {},          false]);
   *   console.log(arr);
   *   output: [100, {id: 1234}, false, "foo", [250, 500]]
   *
   * - Array order is important. example:
   *   var arr = utils.deepExtend([1, 2, 3, 4], [1, 4, 3, 2]);
   *   console.log(arr);
   *   output: [1, 4, 3, 2]
   *
   * - You can remove an array element set in a parent object by setting the same index value to null in a child object.
   *   example:
   *   var obj = utils.deepExtend({arr: [1, 2, 3, 4]}, {arr: ["#{_}", null]});
   *   console.log(obj.arr);
   *   output: [1, 3, 4]
   *
   **/
  deepExtend: function (/*obj_1, [obj_2], [obj_N]*/) {
    if (arguments.length < 1 || typeof arguments[0] !== 'object') {
      return false;
    }

    if (arguments.length < 2) return arguments[0];

    var target = arguments[0];

    // convert arguments to array and cut off target object
    var args = Array.prototype.slice.call(arguments, 1);

    var key, val, src, clone, tmpBuf;

    args.forEach(function (obj) {
      if (typeof obj !== 'object') return;

      for (key in obj) {
        if (!(key in obj)) continue;

        src = target[key];
        val = utils.cloneDeep(obj[key]);


        if (typeof src !== 'object' || src === null) {
          target[key] = val;
        }else if (Array.isArray(val)) {
          clone = (Array.isArray(src)) ? src : [];

          val.forEach(function(item){
            clone.push(utils.cloneDeep(item));
          });

          target[key] = clone;
          //todo  если заимствуем массив , то ссохраняем значения из обоих массивов
          //target[key] = utils.deepExtend(clone, val);

        } else {
          clone = (!Array.isArray(src)) ? src : {};
          target[key] = utils.deepExtend(clone, val);
        }

      }
    });

    return target;
  },
  cloneDeep: function (val) {

    if (typeof val === 'undefined') {
      return undefined;
    }

    if (val === null) {
      return null;
    } else if (val instanceof Date) {
      return new Date(val.getTime());
    } else if (val instanceof RegExp) {
      return new RegExp(val);
    }

    if(val.cloneSync){
      return val.cloneSync();
    }else if(val.constructor == Object){
      return utils.deepExtend({}, val);
    }else if(val.constructor == Array){
      var clone = [];
      for(var i =0 ;i < val.length; i++){
        clone.push(utils.cloneDeep(val[i]));
      }
      return clone;
    }else{
      return val;
    }
  },
  rearrange: function (object, keys) {
    var _newOrder = {};
    for (var i in keys) {
      if(object[keys[i]] !== undefined){
        _newOrder[keys[i]] = object[keys[i]]
      }
    }
    // for (i in object) {
    //   delete object[i];
    // }
    // for (i in _newOrder) {
    //   object[i] = _newOrder[i];
    // }
    return _newOrder;
  },
  sortBy: _.sortBy,
  defaults: _.defaults,
  where: _.where,
  findWhere: _.findWhere,
  filter: _.filter,
  pick: _.pick,
  extend: function (destination) {
    // JScript DontEnum bug is not taken care of
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var property in source) {
        destination[property] = source[property];
      }
    }
    return destination;
  }
};
module.exports =  utils;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var objectUtils = __webpack_require__(2)

var utils = {
  /**
   * will divide total width for every object in columnts array
   *
   *
   * @example
   *     var _flexArray = fabric.util.flex(200 , [{flex: 0},{value: 100, flex: 1},{flex: 0}] );
   * @param total
   * @param columns
   * @returns {Array}
   * @example [50,100,50]
   */
  flex: function (total,columns){
    var _return = [];
    var split = 0;
    columns.forEach(function(column, index){
      if(column.value === undefined){
        split++;
      }else{
        total -= column.value;
      }
    });
    var _w = total / split;
    columns.forEach(function(column){
      _return.push(column.value === undefined ? _w :  column.value );
    });
    return _return;
  },
  worker: function (foo) {
    if (window.Worker) {
      var str = foo.toString();
      var eventArg = str.substring(str.indexOf("(") + 1,str.indexOf(","));
      var postMessageArg = str.substring(str.indexOf(",") + 1,str.indexOf(")"));
      var _functionBody = str.substring(str.indexOf("{") + 1);
      str = "onmessage=function(" + eventArg + "){" + postMessageArg + "= postMessage;" + _functionBody;
      var blob = new Blob([str]);
      //"onmessage = function(e) { postMessage('msg from worker'); }"]);
      var blobURL = window.URL.createObjectURL(blob);
      return new Worker(blobURL);
    } else {
      var worker = {
        terminate: function () {
        },
        postMessage: function (data) {
          setTimeout(function () {
            foo({data: data}, function (responseData) {
              worker.onmessage && worker.onmessage({data: responseData});
            })
          });
        }
      };
      return worker;
    }
  },
  observable: function (obj) {
    _.extend(obj, {

      fire: function fire(eventName, options) {
        if (!this.__eventListeners) {
          return;
        }
        var listenersForEvent = this.__eventListeners[eventName];
        if (!listenersForEvent) {
          return;
        }
        for (var i = 0, len = listenersForEvent.length; i < len; i++) {
          listenersForEvent[i].call(this, options || {});
        }
        return this;
      },
      on: function (eventName, handler) {
        if (eventName.constructor == Object) {
          for (var i in eventName) {
            this.on(i, eventName[i])
          }
          return this;
        }
        var events = eventName.split(" ");
        for (var i in events) {
          this.observe(events[i], handler)
        }
        return this;
      },
      observe: function (eventName, handler) {
        if (!this.__eventListeners) {
          this.__eventListeners = {};
        }
        if (arguments.length === 1) {
          for (var prop in eventName) {
            this.on(prop, eventName[prop]);
          }
        }
        else {
          if (!this.__eventListeners[eventName]) {
            this.__eventListeners[eventName] = [];
          }
          this.__eventListeners[eventName].push(handler);
        }
        return this;
      },
      off: function stopObserving(eventName, handler) {
        function _removeEventListener(eventName, handler) {
          if (!this.__eventListeners[eventName]) {
            return;
          }

          if (handler) {
            var idx = this.__eventListeners[eventName].indexOf(handler);
            if (idx !== -1) {
              this.__eventListeners[eventName].splice(idx, 1);
            }
          }
          else {
            this.__eventListeners[eventName].length = 0;
          }
        }

        if (!this.__eventListeners) {
          return;
        }
        if (arguments.length === 0) {
          this.__eventListeners = {};
        }
        else if (arguments.length === 1 && typeof arguments[0] === 'object') {
          for (var prop in eventName) {
            _removeEventListener.call(this, prop, eventName[prop]);
          }
        }
        else {
          _removeEventListener.call(this, eventName, handler);
        }
        return this;
      }
    })
  },
  inOrder: function (array, foo, callback) {
    var _index = 0;
    function _inOrderIndex() {
      if (++_index < array.length) {
        foo(array[_index], _index, _inOrderIndex)
      } else {
        callback && callback();
      }
    }
    foo(array[_index], _index, _inOrderIndex)
  },
  /**
   * возвращает объект с ключами строки url
   * @returns {{}}
   */
  queryString: function (query) {
    if(query) {
      query = query.substr(query.indexOf("?") + 1) ;
    }else{
      query = window.location.search.substring(1);
    }
    var obj = {};
    var _length = 0;
    if (!query)return obj;
    var vars = query.split("&");
    for (var i = 0; i < vars.length; i++) {
      var pair = vars[i].split("=");
      var _vname = pair[0], val = pair[1];
      if (typeof obj[_vname] === "undefined") {
        obj[_vname] = val || "";
        Object.defineProperty(obj, _length, {value: _vname, enumerable: false});
        _length++;
        // If second entry with this name
      } else if (typeof obj[_vname] === "string") {
        var arr = [obj[_vname], val];
        obj[_vname] = arr;
        Object.defineProperty(obj, _length, {value: _vname, enumerable: false});
        _length++;
        // If third or later entry with this name
      } else {
        obj[_vname].push(val);
        Object.defineProperty(obj, _length, {value: _vname, enumerable: false});
        _length++;
      }
    }
    Object.defineProperty(obj, "length", {value: _length, enumerable: false});
    return obj;
  },
  copyValue: function (value) {
    if (value == null) {
      return null
    }
    if (value == undefined) {
      return undefined
    }
    switch (value.constructor) {
      case Object:
        return objectUtils.deepExtend({}, value);
      case Array:
        return objectUtils.deepExtend([], value);
      case String:
      case Number:
      case Boolean:
        return value;
      default:
        //console.log(value.constructor);
        return objectUtils.deepExtend({}, value);
    }
  },
  clearValue: function (value) {
    switch (value.constructor) {
      case Object:
        for (var member in value) delete value[member];
        break;
      case Array:
        value.length = 0;
        break;
      default:
        delete value;
    }
  },
  objectsDifference: function (prev, now) {
    var changes = {};
    for (var prop in now) {
      if (!prev || prev[prop] !== now[prop]) {
        if (typeof now[prop] == "object") {
          var c = utils.objectsDifference(prev[prop], now[prop]);
          if (!_.isEmpty(c)) // underscore
            changes[prop] = c;
        } else {
          changes[prop] = now[prop];
        }
      }
    }
    return changes;
  },
  splitBy: function (query, delimiter) {
    var traceQueries = [];
    var r = 0,
      f = 0,
      _p_start = 0;
    if (query == "") return [];
    for (var i = 0; i < query.length; i++) {
      var c = query[i];
      if (c == "(") {
        r++;
        f = 1;
      } else if (c == ")") {
        r--;
      }
      if (r == 0 && f == 1) f = 0;
      if (delimiter.indexOf(c) != -1 && r == 0 && f == 0) {
        traceQueries.push(query.substring(_p_start, i));
        _p_start = i + 1;
      }
    }
    traceQueries.push(query.substring(_p_start));
    return traceQueries;
  },
  queueLoad: function (total, completeCB, progressCB) {
    var loader = function (el) {
      loader.loaded.push(el);
      loader.progressCB && loader.progressCB(loader.loaded.length, loader.total, el, loader.loaded);

      if (loader.loaded.length == loader.total) {
        loader.completeCB && loader.completeCB(loader.loaded);
        loader.fire("loaded");
      }
    };
    loader.completeCB = completeCB;
    loader.progressCB = progressCB;
    loader.total = total;
    loader.loaded = [];
    utils.observable(loader);

    return loader;
  }
};
module.exports =  utils;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {


String.prototype.format  = function () {
  var str = this.toString();
  if (arguments.length) {
    var type = typeof arguments[0]
      , args = type == 'string' || type == 'number' ? Array.prototype.slice.call(arguments) : arguments[0]
    //
    // for (var arg in args) str = str.replace(new RegExp('\\{' + arg + '\\}', 'gi'), args[arg])

    str = str.replace(/\{([^}]*)\}/g,function(a,b){
      return utils.evalInContext(b,args)
    })
  }

  return str
};

utils = {
  extractVariables: function (str) {
    return str.match(/(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc][$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f]*/gi);
  },
  evalInContext: function (js) {
    js = js.replace(/\s+/g, '');


    var keys = [], values = [];

    for (var i = 1; i < arguments.length; i++) {
      keys = keys.concat(Object.keys(arguments[i]));
      for (var j in arguments[i]) {
        values.push(arguments[i][j]);
      }
    }

    //
    //if(_.isCorrectVariableName(js) && keys.indexOf(js) === -1){
    //  keys.push(js);
    //  values.push(undefined);
    //}

    var arr = utils.extractVariables(js);
    //console.log(arr);
    for (var i in arr) {
      if (keys.indexOf(arr[i]) === -1) {
        keys.push(arr[i]);
        values.push(undefined);
      }
    }
    js = "var foo = function(" + keys.join(",") + "){ var __return__value = " + js + " ;return __return__value;}; foo;";
    try {
      var foo = eval(js);
      return foo.apply(this, values);
    } catch (e) {
      return undefined;
    }

  },
  compileElement: function ($item, scope) {

    function _eachSelf(el, selector, foo) {
      el.find(selector).each(foo);
      if (el.is(selector)) {
        foo.call(el[0]);
      }
    }

    //.addBack('selector')
    _eachSelf($item, "[onclick]", function () {
      var onClick = $(this).attr("onclick");
      $(this).removeAttr("onclick");
      $(this).click(function (event) {
        utils.evalInContext(onClick, scope, {event: event});
      })
    })


    _eachSelf($item, "[onchange]", function () {
      var onChange = $(this).attr("onchange");
      $(this).removeAttr("onchange");
      $(this).change(function (event) {
        utils.evalInContext(onChange, scope, {event: event});
      })
    });

    _eachSelf($item, "[dp-checked]", function () {
      var _val = $(this).attr("dp-checked");
      var val = utils.evalInContext(_val, scope);
      if (val) {
        $(this).attr("checked", "checked");
      } else {
        $(this).removeAttr("checked");
      }

    });
    _eachSelf($item, "[dp-src]", function () {
      var _val = $(this).attr("dp-src");
      var val = utils.evalInContext(_val, scope);
      if (val) {
        $(this).attr("src", val);
      }

    });
    _eachSelf($item, "[dp-if]", function () {
      var _val = $(this).attr("dp-if");
      if (_val === "false") {
        $(this).remove();
      }
      if (_val === "true") {

      } else {
        var val = utils.evalInContext(_val, scope);
        if (!val) {
          $(this).remove();
        }
      }
    });
    _eachSelf($item, "[dp-include]", function () {
      var _el = $(this);
      var _val = _el.attr("dp-include");
      var val = utils.evalInContext(_val, scope);
      _el.load(val);
    });
  },
  parseTemplate: function (tpl, scope) {
    var $item = $(tpl.format(scope));
    _.compileElement($item, scope);
    return $item;
  }
};
if(true){
  module.exports = utils;
}


/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = {
  resolve: function (path) {
    var chunks = path.split("/");
    var prev = 0;
    for (var i = chunks.length; i-- > 0;) {
      if (chunks[i] == "..") {
        prev++;
      } else {
        while (prev > 0) {
          chunks.splice(i, 1);
          chunks.splice(i--, 1);
          prev--;
        }
      }
    }
    return chunks.join("/");
  },
  getParentDirectoryUrl: function (url) {
    return url.substr(0, url.lastIndexOf("/") + 1);
  }
}


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {
var ExtCanvasMixin = {
  animated: false,
  fitIndex: 0.8,
  optionsOrder: ["originalWidth","originalHeight","width","height","*"],
  /**
   * required to show video
   */
  setAnimated: function (val) {
    if(!val){
      return;
    }

    fabric.util.requestAnimFrame(function render() {
      this.renderAll();
      fabric.util.requestAnimFrame(render);
    }.bind(this));
  },
  find: function (options) {
    if (typeof options == "string"){
      options = {
        type: options
      }
    }
    return fabric.util.object.where(this._objects,options);
  },
  _update_background_image: function () {
    var photo = this.backgroundImage;
    if (!photo || photo.constructor == Object || photo.constructor == String) return;

    if (this.backgroundPosition == 'resize') {
      this.originalWidth = photo.width;
      this.originalHeight = photo.height;

    }else if (this.backgroundPosition != 'manual') {

      var _w  =  this.originalWidth || this.width,  _h = this.originalHeight || this.height;

      if(photo._originalElement){
        var size = fabric.util.getProportions(photo._originalElement, {
          width: _w,
          height: _h
        }, this.backgroundPosition);
      }else{
        size = {
          width: _w,
          height: _h
        }
      }

      var _l ;
      if(this.backgroundImage.originX == 'center'){
        _l = _w / 2;
      }else{
        _l = (_w - size.width) / 2 ;
      }
      var _t ;
      if(this.backgroundImage.originY == 'center'){
        _t = _h / 2;
      }else{
        _t = (_h - size.height) / 2 ;
      }

      this.backgroundImage.set({
        left: _l + this.viewportTransform[4],
        top:  _t + this.viewportTransform[5],
        width: size.width,
        height: size.height
      });
    } else {
      // var _orig = this.backgroundImage.getOriginalSize();
      // this.backgroundImage.set({
      //   originX: 'left',
      //   originY: 'top',
      //   left: 0, //this.viewportTransform[4],
      //   top: 0, //this.viewportTransform[5],
      //   width: _orig.width,
      //   height: _orig.height
      // });
    }
  },
  setBackgroundImage: function (bg, callback) {
    var _bgimageLoaded = function (el){

      this.backgroundImage = el;
      this.backgroundImage.canvas = this;
      this._update_background_image();
      if(!this.originalWidth && !this.originalHeight){
        this.originalWidth = el.width;
        this.originalHeight = el.height;
      }
      this.fire("background-image:loaded",{target: el});
      callback && callback();
    }


    if (!bg) {
      this.backgroundImage = null;
      return callback();
    }
    if (bg instanceof HTMLImageElement || bg instanceof Image){

      var el = new fabric.Image(bg,{
        width: bg.naturalWidth,
        height: bg.naturalHeight
      });

      _bgimageLoaded.call(this,el);
    }
    if (bg.constructor == String) {
      bg = {
        src: bg
      }
    }
    var _proto = this.application.prototypes;
    if(_proto && _proto.SlideCanvas && _proto.SlideCanvas.backgroundImageProperties){
      fabric.util.object.extend(bg,_proto.SlideCanvas.backgroundImageProperties);
    }
    bg.application = this.application;
    bg.type = bg.type || "image";
    // bg.width = bg.naturalWidth;
    // bg.height = bg.naturalHeight;
    //
    fabric.util.createObject(bg,_bgimageLoaded.bind(this));
  },
  createObjects: function(objects,callback){

    if(this.application){
      for(var i in objects){
        if(objects[i].constructor == String){
          objects[i] = this.application.objects[objects[i]];
        }
      }
    }

    var _canvas = this;

    function success(_objects) {
      _canvas.fire("progress:complete", {objects: objects});
      for (var i in _objects) {
        _canvas.add(_objects[i].object);
      }
      _canvas.renderAll();
      callback && callback.call(_canvas)
    }

    function progress(l, t) {
      _canvas.fire("progress", { loaded : l, total : t });
      if (fabric.util.loaderDebug) {
        console.log("loaded " + l + " / " + t);
      }
    }


    var _objects = [];
    if (!objects || !objects.length) {
      this.fire("progress:complete", 0);
      success(_objects);
      return;
    }

    var queueLoadCallback = fabric.util.queueLoad(objects.length, function(){
      success(_objects)
    }, progress);

    queueLoadCallback.data = (this.title || "") + "objects";

    for (var i in objects) {
      (function (options) {
        var _object_slot = {object: null, options: options};
        _objects.push(_object_slot);

        options.application = _canvas.application;
        fabric.util.createObject(options, function (el) {
          _object_slot.object = el;
          queueLoadCallback();
        });
      }).call(this, objects[i]);
    }
  },
  /**
   * apply options for group of filtered objects
   * @param filter
   * @param options
   */
  applyOptions: function(filter,options){
    this._objects.forEach(function(_obj){
      for(var prop in filter){
        if(_obj[prop] !==  filter[prop])return;
      }
      _obj.setOptions(options);
    })
  },
  /**
   * Create Object by type and options
   * @param type
   * @param options
   * @param callback
   */
  createObject: function (type, options,callback) {
    if(typeof type !== "string"){
      callback = options;
      options = fabric.util.object.clone(type);
      type = null;
    }else{
      options = fabric.util.object.clone(options);
      options.type = type;
    }

    var _self = this;
    options.application = this.application;
    var _active = options.active;
    var _position = options.position;
    delete options.active;
    delete options.position;


    function _add(el) {
      if(el.canvas)return;
      if(_position == "center") {
        _self.fitObject(el);
      }
      _self.add(el);

      if(_active){
        _self.setActiveObject(el);
      }
      callback && callback(el);
    }

    var el = fabric.util.createObject(options,_add );
    el && _add(el);
    return el;
  },
  onLoad: function (callback) {
    this.processing =false;
    this.loaded = true;
    this.fire("loading:end",{type: "slide", target: this});
    this.renderAll();
    callback && callback.call(this);
  },
  load: function (options,callback) {
    this.originalWidth = 0;
    this.originalHeight = 0;
    if (!options)return;

    if(!this.virtual){
      this.clear();
    }

    if(options.width){
      options.originalWidth = options.width;
      options.originalHeight = options.height;
    }

    this.processing = true;
    this.fire("loading:begin",{type: "slide", target: this});

    this.set(options,this.onLoad.bind(this,callback));


    //todo
    if(this.plugins){
      this.plugins.preloaders.forEach(function(preloader){
        preloader.call(this, options);
        this.onResize();
      }.bind(this));
    }


  },
  setObjects: function(objects,callback){

    this.createObjects(objects,function(){
      for(var i in this._objects){
        this._objects[i].setCoords();
      }
      callback();
    });
  },
  onResize: function(){
    var _scale = Math.min(1,800 /this.width );
    // this.setZoom(_scale);
    this.setDimensions({width: this.width,height: this.height});
  },
  getCenter: function (el) {
    return {
      top: (this.originalHeight  || this.getHeight()) / 2,
      left: (this.originalWidth || this.getWidth()) / 2
    };
  },
  fitObject: function (el) {
    var _rect, maxSize, offsets;

    if(el.movementLimits && el.movementLimits.constructor !== Function){
      var lim = el.movementLimits;
      _rect = {
        left:   lim.left * lim.scaleX,
        width:  lim.width * lim.scaleX ,
        top:    lim.top * lim.scaleY,
        height: lim.height * lim.scaleY
      };
      //maxSize = _rect;
     // offsets = lim;
    }else{
      var _zoom = this.getZoom();
      var _w = this.originalWidth || this.width / _zoom;
      var _h = this.originalHeight || this.height / _zoom;
      _rect = {
        width: this.offsets ? (_w - this.offsets.left - this.offsets.right) : _w,
        height: this.offsets ?(_h - this.offsets.top - this.offsets.bottom) : _h
      };
     /* offsets = {
        left: this.offsets && this.offsets.top ||0 ,
        top:  this.offsets &&  this.offsets.left ||0
      }*/
    }
    maxSize = {
      width: _rect.width * this.fitIndex,
      height: _rect.height * this.fitIndex
    };
    var size = fabric.util.getProportions(el, maxSize, 'fit');

    if(el.resizable){
      el.setOptions({
        width: el.width * size.scale,
        height: el.height * size.scale
      });
      el.updateElement();
    }else{
      el.setOptions({
        scaleX: size.scale,
        scaleY: size.scale
      });
    }
    this.centerObject(el);
    el.setCoords();
  },
  setOriginalSize: function (w, h) {
    this.originalWidth = h ? w : (w.naturalWidth || w.width);
    this.originalHeight = h ? h : (w.naturalHeight || w.height);
    return this;
  }
};

fabric.util.object.extend(fabric.StaticCanvas.prototype,ExtCanvasMixin);
fabric.util.object.extend(fabric.Canvas.prototype,ExtCanvasMixin);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {fabric.ImageMixin = {
  setElementFromMenu : function(data){
    this.setElement(data.image)
  },
  initProportinalSize : true,
  /**
   * @private
   * @param {Object} [options] Object with width/height properties
   */
  _setWidthHeight: function(options) {
    var _size = this.getOriginalSize();
    if('width' in options){
      this.width = options.width;
    }else{
      if(!_size.width){
        this.width = 0;
      }else{
        if(this.initProportinalSize && 'height' in options){
          this.width = (options.height  / _size.height ) * _size.width;
        } else {
          this.width = _size.width;
        }
      }
    }

    if('height' in options){
      this.height = options.height;
    }else{
      if(!_size.height){
        this.height = 0;
      }else{
        if(this.initProportinalSize && 'width' in options){
          this.height = (options.width  / _size.width ) * _size.height;
        } else {
          this.height = _size.height;
        }
      }
    }
  }
};

fabric.Application.prototype.getLibraryElements = function(options){
  return [];
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {// Magic Wand (Fuzzy Selection Tool) for Javascript
//
// The MIT License (MIT)
//
// Copyright (c) 2014, Ryasnoy Paul (ryasnoypaul@gmail.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var MagicWand = (function () {
  var lib = {};
  //var canvas = document.createElement("canvas");
  //var context = canvas.getContext("2d");

  function createCanvasElement(){
    if(typeof Canvas !== "undefined"){
      return new Canvas;
    }
    return document.createElement("canvas");
  }

  function SelectionMask(w,h,data){
    if(arguments.length == 1){
      for(var i in arguments[0] ){
        this[i] = arguments[0][i];
      }
    }else{
      this.data = new Uint8Array(data || w * h);
      this.width  = w;
      this.height = h;
      this.count  = 0;
      this.bounds = {
       minX: Infinity,
       minY: Infinity,
       maxY: -1,
       maxX: -1
      };
      // this.bounds = {
      //   minX: 0,
      //   minY: 0,
      //   maxY: h,
      //   maxX: w
      // };
    }
  }
  lib.SelectionMask = SelectionMask;


  SelectionMask.prototype.debug = function(){
    var canvas = document.createElement("canvas");
    canvas.width = this.width;
    canvas.height = this.height;
    var ctx = canvas.getContext('2d');
    this.render(ctx,{
      fill : "#fff",
      outerFill : "#000"
    });
    ctx.debug();
  };

  SelectionMask.prototype.makeCache = function(options ){
    this.cache = createCanvasElement();
    this.cache.width = this.bounds.maxX- this.bounds.minX + 1;
    this.cache.height = this.bounds.maxY- this.bounds.minY + 1;
    this.context = this.cache.getContext('2d');

    options = options || {}
    this.render(this.context,{
      fill : "#fff",
      outerFill : "#000",
      cache: false,
      left :-this.bounds.minX,
      top :-this.bounds.minY
    });

  };

  SelectionMask.prototype.add = function (mask) {
    var index, x, y;
    for (x = mask.bounds.minX; x <= mask.bounds.maxX; x++) {
      for (y = mask.bounds.minY; y <= mask.bounds.maxY; y++) {
        index = mask.width * y + x;
        if ( mask.data[index] && !this.data[index]){
          this.data[index] = 1;
          this.count++;
        }
      }
    }

    this.bounds.minX = Math.min(mask.bounds.minX, this.bounds.minX);
    this.bounds.maxX = Math.max(mask.bounds.maxX, this.bounds.maxX);
    this.bounds.minY = Math.min(mask.bounds.minY, this.bounds.minY);
    this.bounds.maxY = Math.max(mask.bounds.maxY, this.bounds.maxY);
  };
  function hexToRgb(hex) {
    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function(m, r, g, b) {
      return r + r + g + g + b + b;
    });

    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : null;
  }

  SelectionMask.prototype.render = function(ctx,options ){
    if(!this.count)return;

    options             = options             || {};
    options.left        = options.left        || 0 ;
    options.top         = options.top         || 0 ;
    options.fill        = options.fill        || false ;// [0,0,0,0];
    options.intersectionColor = options.intersectionColor ||false ;//  [0,0,0,0];

    options.outerFill        = options.outerFill        || false ;// [0,0,0,0];
    options.outerIntersectionColor = options.outerIntersectionColor ||false ;//  [0,0,0,0];

    //if(this.cache && options.cache !== false){
    //
    //  var _ctx = this.context;
    //  _ctx.save();
    //  _ctx.globalCompositeOperation="source-in";
    //  _ctx.fillStyle= options.fill;
    //  _ctx.fillRect(0,0,this.cache.width,this.cache.height);
    //  _ctx.restore();
    //
    //  ctx.save();
    //  ctx.globalAlpha = options.opacity;
    //  ctx.drawImage(this.cache,this.bounds.minX,this.bounds.minY)
    //  ctx.restore();
    //  return;
    //}

    //todo do not use fabric here!
    function convertColor(color){
      if(color.constructor  == String ){
        if(color[0] == "#"){
          var _rgb = hexToRgb(color);
          return [_rgb.r,_rgb.g,_rgb.b,255];
        }
        color = new fabric.Color(color)._source;
        color[3] *= 255;
      }
      return color;
    }

    var _w = this.bounds.maxX - this.bounds.minX + 1;
    var _h = this.bounds.maxY - this.bounds.minY + 1;

    //var imgData = ctx.getImageData(options.left,options.top,_w,_h);
    var imgData = ctx.getImageData(this.bounds.minX,this.bounds.minY,_w,_h);

    var color  = convertColor(options.fill);
    var color2 = convertColor(options.intersectionColor);
    var color3 = convertColor(options.outerFill);
    var color4 = convertColor(options.outerIntersectionColor);

    for(var x = this.bounds.minX ; x <= this.bounds.maxX;x++ ){
      for(var y = this.bounds.minY ; y <= this.bounds.maxY; y++ ){
        var index = this.width * y + x;
        var index_small = _w * (y - (this.bounds.minY)) + x - (this.bounds.minX);

        if(this.data[index] ){
          var _color = imgData.data[index_small * 4 + 3]? color2 : color ;
          if(!_color)continue;

          imgData.data[index_small * 4 ]    = _color[0];
          imgData.data[index_small * 4 + 1] = _color[1];
          imgData.data[index_small * 4 + 2] = _color[2];
          imgData.data[index_small * 4 + 3] = _color[3];
        }else{
          var _color = imgData.data[index_small * 4 + 3]? color4 : color3 ;
          if(!_color)continue;

          imgData.data[index_small * 4 ]    = _color[0];
          imgData.data[index_small * 4 + 1] = _color[1];
          imgData.data[index_small * 4 + 2] = _color[2];
          imgData.data[index_small * 4 + 3] = _color[3];
        }
      }
    }

    // ctx.putImageData(imgData, options.left  , options.top  );
    ctx.putImageData(imgData, this.bounds.minX,this.bounds.minY  );
  };


  /**
   * get array with begin and end indices of filled 1 intervals
   * @param ctx
   * @param options
   * @returns {Array}
   */
  SelectionMask.prototype.getIntervalsArray = function (ctx, options) {
    var _newData = [];
    for (var i = 0, _val = 0; i < array.length; i++) {
      if (_val != array[i]) {
        _newData.push(i);
        _val = array[i];
      }
    }
    return _newData;
  };

  SelectionMask.prototype.renderBorder = function (ctx, options) {

    options             = options             || {};
    options.left        = options.left        || 0 ;
    options.top         = options.top         || 0 ;
    options.hatchOffset = options.hatchOffset || 0 ;
    options.hatchLength = options.hatchLength || 4 ;
    options.opacity = options.opacity || 1 ;

    var imgData = ctx.getImageData(0,0,this.width,this.height);

    if(!this.cacheInd){
      this.cacheInd = MagicWand.getBorderIndices(this);
    }

    var x, y, i, j, k,
      w = imgData.width,
      h = imgData.height;
    var res = imgData.data;

    var len = this.cacheInd.length;
    for (j = 0; j < len; j++) {
      i = this.cacheInd[j];
      x = i % w; // calc x by index
      y = (i - x) / w; // calc y by index
      k = (y * w + x) * 4;

      if ((x + y + options.hatchOffset) % (options.hatchLength * 2) < options.hatchLength) { // detect hatch color

        res[k] = 0;
        res[k + 1] = 0;
        res[k + 2] = 0;
        res[k + 3] = 255; // black, change only alpha
      } else {
        res[k] = 255; // white
        res[k + 1] = 255;
        res[k + 2] = 255;
        res[k + 3] = 255;
      }
    }
    ctx.save();
    ctx.globalAlpha = options.opacity;
    ctx.putImageData(imgData, options.left || 0 , options.top || 0 );
    ctx.restore();
  };


  lib.createMask = function (w, h,data) {
    return new SelectionMask(w,h,data);
  };

  lib.difference = function (a, b) {
    return Math.max(
      b[0] !== false ? Math.abs(b[0] - a[0]): 0,
      b[1] !== false ? Math.abs(b[1] - a[1]): 0,
      b[2] !== false ? Math.abs(b[2] - a[2]): 0,
      b[3] !== false ? Math.abs(b[3] - a[3]): 0);
  };

  lib.acceptable = function (x, y, image, visited, sampleColor, colorThreshold) {
// check whether the point has been visited
    if (visited[y * image.width + x] === 1) {
      return false;
    }
    var i = (y * image.width + x) * lib.bytes,
      color2 = [image.data[i], image.data[i + 1], image.data[i + 2], image.data[i + 3]];


    if (sampleColor[0] !== false && Math.abs(sampleColor[0] - color2[0]) > colorThreshold)return false;
    if (sampleColor[1] !== false && Math.abs(sampleColor[1] - color2[1]) > colorThreshold)return false;
    if (sampleColor[2] !== false && Math.abs(sampleColor[2] - color2[2]) >colorThreshold)return false;
    if (sampleColor[3] !== false && Math.abs(sampleColor[3] - color2[3]) > colorThreshold)return false;
    return true;
  };

  lib.selectAll = function (image, px, py, colorThreshold) {
    var i = (py * image.width + px) * lib.bytes,
      data = image.data,
      sampleColor = [data[i], data[i + 1], data[i + 2], data[i + 3]]; // start point color (sample)
    return lib.selectAllByColor(image, sampleColor, colorThreshold)
  };


  /**
   * Converts an RGB color value to HSL. Conversion formula
   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
   * Assumes r, g, and b are contained in the set [0, 255] and
   * returns h, s, and l in the set [0, 1].
   *
   * @param   Number  r       The red color value
   * @param   Number  g       The green color value
   * @param   Number  b       The blue color value
   * @return  Array           The HSL representation
   */
  lib.rgbToHsl = function(r, g, b){
    r /= 255, g /= 255, b /= 255;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min){
      h = s = 0; // achromatic
    }else{
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch(max){
        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
        case g: h = (b - r) / d + 2; break;
        case b: h = (r - g) / d + 4; break;
      }
      h /= 6;
    }

    return [h, s, l];
  }

  lib.selectColored = function (image, options) {

    var mask = new SelectionMask(image.width, image.height);

    mask.bounds = {
      minX: image.width,
      minY: image.height,
      maxY: -1,
      maxX: -1
    };

    var x, y;
    for (y = 0; y < image.height; y++) {
      for (x = 0; x < image.width; x++) {
        var index = (y * image.width + x);
        var i = index * lib.bytes;
        //if (!image.data[i + 3]) continue;


        if (options.aMin && image.data[i + 3] < options.aMin)continue;

        var hsl = rgbToHsl(image.data[i], image.data[i + 1], image.data[i + 2]);


        if (options.sMin && hsl[1] < options.sMin)continue;
        if (options.sMax && hsl[1] > options.sMax)continue;
        if (options.bMin && hsl[2] < options.bMin)continue;
        if (options.bMax && hsl[2] > options.bMax)continue;


        mask.data[index] = 1;
        mask.count++;
        mask.bounds.minX = Math.min(mask.bounds.minX, x);
        mask.bounds.maxX = Math.max(mask.bounds.maxX, x);
        mask.bounds.minY = Math.min(mask.bounds.minY, y);
        mask.bounds.maxY = Math.max(mask.bounds.maxY, y);

      }
    }
    return mask;
  };




  lib.selectAllByColor = function (ctx, sampleColor, colorThreshold) {
    var image = _getImageData(ctx);

    var mask = new SelectionMask(image.width, image.height);

    mask.bounds = {
      minX: Infinity,
      minY: Infinity,
      maxY: -1,
      maxX: -1
    };


    var visited = new Uint8Array( image.width * image.height);
    var x, y;
    for (y = 0; y < image.height; y++) {
      for (x = 0; x < image.width; x++) {
        if(lib.acceptable(x, y, image, mask.data, sampleColor, colorThreshold)){
          MagicWand.floodFill(image, x, y, colorThreshold, {
            sampleColor:    sampleColor,
            activeMask :    mask,
            visitedPoints : visited
          });
        }
      }
    }
    return mask;
  };



  lib.drawImage = function (ctx,canvas, mask ,left, top) {

    var ctx2 = canvas.getContext('2d');


    var imgData = ctx.getImageData(0, 0, mask.width, mask.height);
    var imgDataOriginal = ctx2.getImageData(left, top, mask.width, mask.height);


    var b = mask.bounds;
    for (var x = b.minX; x <= b.maxX; x++)for (var y = b.minY; y <= b.maxY; y++) {
      var i = (y * mask.width + x);// * bytes; // point index in the image data
      if (mask.data[i]) {
        imgData.data[i * 4]     = imgDataOriginal.data[i * 4];
        imgData.data[i * 4 + 1] = imgDataOriginal.data[i * 4 + 1];
        imgData.data[i * 4 + 2] = imgDataOriginal.data[i * 4 + 2];
        imgData.data[i * 4 + 3] = imgDataOriginal.data[i * 4 + 3];
      }
    }
    ctx.putImageData(imgData,0, 0);
  };

  function _getImageData(ctx){
    if(ctx.constructor.name == "ImageData"){
      return ctx;
    }else{
      return ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
    }
  }

  lib.fillMask = function (ctx,mask, color) {
    var imgData = _getImageData(ctx);
    var b = mask.bounds;
    var w = imgData.width,
      h = imgData.height;

    for (var x = b.minX; x <= b.maxX; x++)for (var y = b.minY; y <= b.maxY; y++) {
      var i = (y * w + x);// * bytes; // point index in the image data
      if (mask.data[i]) {
        imgData.data[i * 4]     = color[0];
        imgData.data[i * 4 + 1] = color[1];
        imgData.data[i * 4 + 2] = color[2];
        imgData.data[i * 4 + 3] = color[3];
      }
    }
    if(ctx.constructor.name != "ImageData") {
      ctx.clearRect(0, 0, w, h);
      ctx.putImageData(imgData, 0, 0);
    }
  };

  lib.selectBackground = function (ctx, sampleColor, colorThreshold) {
    var image = _getImageData(ctx);

    colorThreshold = colorThreshold || 15;

    var mask = new SelectionMask(image.width, image.height);
    mask.bounds = {
      minX: Infinity,
      minY: Infinity,
      maxY: -1,
      maxX: -1
    };

    var data = image.data;

    sampleColor = sampleColor ||[data[0], data[1], data[2], data[3]]; // start point color (sample)

    var color = sampleColor;

    function add(x, y) {
      if (!lib.acceptable(x, y, image, mask.data, sampleColor, colorThreshold))return;
      if (!sampleColor) {
        var index = (y * image.width + x) * 4;
        color = [data[index], data[index + 1], data[index + 2], data[index + 3]];
      }
      var mask2 = MagicWand.floodFill(image, x, y, colorThreshold, null, color);
      mask = MagicWand.add(mask, mask2);
    }

    var x, y;

    for (x = 0; x < image.width; x++) {
      add(x, 0);
    }
    for (x = 0; x < image.width; x++) {
      add(x, image.height - 1);
    }
    for (y = 0; y < image.height; y++) {
      add(image.width - 1, y);
    }
    for (y = 0; y < image.height; y++) {
      add(0, y);
    }
    return mask;

  };

  lib.extractColors = function(mixedType,threshold) {
    threshold= threshold || 60;
    var imgData = lib.getImageData(mixedType);
    var _colors = [];
    var c1;
    for(var x = 1; x <imgData.width;x+=3){
      for(var y = 1; y <imgData.height;y+=3) {
        var iii = (x + y * imgData.width) * 4;
        var iiA = (x - 1 + y * imgData.width) * 4;
        var iiB = (x + 1 + y * imgData.width) * 4;
        var iiC = (x - 1 + (y + 1) * imgData.width) * 4;
        var iiD = (x + 1 + (y + 1) * imgData.width) * 4;
        if(imgData.data[iii + 3] < 255)continue;

        c1 = [ imgData.data[iii], imgData.data[iii + 1], imgData.data[iii + 2]];
        var cA = [ imgData.data[iiA], imgData.data[iiA + 1], imgData.data[iiA + 2]];
        var cB = [ imgData.data[iiB], imgData.data[iiB + 1], imgData.data[iiB + 2]];
        var cC = [ imgData.data[iiC], imgData.data[iiC + 1], imgData.data[iiC + 2]];
        var cD = [ imgData.data[iiD], imgData.data[iiD + 1], imgData.data[iiD + 2]];

        if(
          c1[0] != cA[0] || cA[0] != cB[0] || cB[0] != cC[0] || cC[0] != cD[0] ||
          c1[1] != cA[1] || cA[1] != cB[1] || cB[1] != cC[1] || cC[1] != cD[1] ||
          c1[2] != cA[2] || cA[2] != cB[2] || cB[2] != cC[2] || cC[2] != cD[2]
        ){
          continue;
        }

        var isNewColor = true;

        for(var i in _colors){
          if(MagicWand.difference(_colors[i], c1) < threshold){
            isNewColor = false;
            break;
          }
        }
        if(isNewColor){
          _colors.push(c1);
        }
      }
    }
    return _colors;
  };

  /**
   * image
   * canvas - черно блое изображение.
   *
   * mask- предыдущая маска. на нее будет накладывать новая
   * mode - способ наложения.
   */
  lib.maskSelection = function ( canvas, left, top, mask ,mode) {
    left = left || 0;
    top = top || 0;
    if(canvas.constructor.name == "HTMLImageElement"){

      var __canvas = createCanvasElement();
      __canvas.width = canvas.width;
      __canvas.height = canvas.height;
      var __ctx = __canvas.getContext('2d');
      __ctx.drawImage(canvas, 0, 0);
      canvas = __canvas;
    }


    var ctx = canvas.getContext('2d'),
      imgData = ctx.getImageData(0, 0, canvas.width, canvas.height),
      mask = mask || MagicWand.createMask(canvas.width, canvas.height);

    var _x1 = Math.max(0, - left),
      _y1 = Math.max(0, - top),
      _x2 = Math.min(mask.width - left,canvas.width);
    _y2 = Math.min(mask.height - top,canvas.height);

    for (var x = _x1; x < _x2; x++) {
      for (var y = _y1; y < _y2; y++) {
        var index = (canvas.width * y + x) * 4;

        if (imgData.data[index] > 20) {
          var index2 = mask.width * (y + top) + x + left;
          mask.data[index2] = 1;
          mask.count++;
        }
      }
    }
    return mask;
  },
  lib.selectRectangle = function (image, x1, y1, x2, y2) {

      var mask = new SelectionMask(image.width, image.height);
      var minX = Math.min(x1, x2);
      var maxX = Math.max(x1, x2);
      var minY = Math.min(y1, y2);
      var maxY = Math.max(y1, y2);

      var w = image.width, h = image.height;

      var data = image.data;
      for (var y = minY; y <= maxY; y++) {
        for (var x = minX; x <= maxX; x++) {
          if (data[(y * w + x) * 4 + 3]) {
            mask.data[y * w + x] = 1;
            mask.count++;
          }
        }
      }

      mask.bounds = {
        minX: minX,
        minY: minY,
        maxX: maxX,
        maxY: maxY
      };

      return mask;
    };

  lib.bytes = 4;






  lib.__floodFill = function (e,postMessage) {

    data = e.data;
    var image = data[0], px = data[1], py = data[2], colorThreshold = data[3], options = data[4];

    options = options || {};
    /*{
     visitedPointsArray,
     sampleColor,
     resultMask
     }*/

    var c, x, newY, el, xr, xl, dy, dyl, dyr, checkY,
      data = image.data, w = image.width, h = image.height, bytes = lib.bytes,
      i = py * w + px; // start point index in the mask data
    i = i * bytes; // start point index in the image data

    var visited     = options.visitedPoints || new Uint8Array( w * h), // mask of visited points
      sampleColor = options.sampleColor   || [data[i], data[i + 1], data[i + 2], data[i + 3]], // start point color (sample)
      result      = options.activeMask;

    function acceptable(x, y) {
// check whether the point has been visited
      if (visited[y * image.width + x] === 1) {
        return false;
      }
      var i = (y * image.width + x) * lib.bytes,
        color2 = [image.data[i], image.data[i + 1], image.data[i + 2], image.data[i + 3]];
      if (sampleColor[0] !== false && Math.abs(sampleColor[0] - color2[0]) > colorThreshold)return false;
      if (sampleColor[1] !== false && Math.abs(sampleColor[1] - color2[1]) > colorThreshold)return false;
      if (sampleColor[2] !== false && Math.abs(sampleColor[2] - color2[2]) > colorThreshold)return false;
      if (sampleColor[3] !== false && Math.abs(sampleColor[3] - color2[3]) > colorThreshold)return false;
      return true;
    };



    if (visited[i] === 1) return null;


    var first = true;
    var stack = [{y: py, left: px - 1, right: px + 1, dir: 1}]; // first scanning line

    var mode = 'strict';
    var _ci;
    do {
      el = stack.shift(); // get line for scanning

      checkY = false;
      for (x = el.left + 1; x < el.right; x++) {
        dy = el.y * w;

        if(mode == 'gradient' && !first) {
          _ci = (dy + x + (el.dir == -1 ? w: - w))*4;
          sampleColor = [data[_ci],data[_ci+1],data[_ci+2],data[_ci+3]];
        }
        if (!acceptable(x, el.y, image, visited, sampleColor, colorThreshold))continue;

        first = false;

        checkY = true; // if the color of the new point(x,y) is similar to the sample color need to check minmax for Y

        result.count++;

        result.data[dy + x] = 1; // mark a new point in mask
        visited[dy + x] = 1; // mark a new point as visited

        xl = x - 1;
        // walk to left side starting with the left neighbor
        while (xl > -1) {
          dyl = dy + xl;

          if(mode == 'gradient') {
            _ci = (dyl + 1)*4;
            sampleColor = [data[_ci], data[_ci + 1], data[_ci + 2], data[_ci + 3]];
          }
          if (!acceptable(xl, el.y, image, visited, sampleColor, colorThreshold)) break;

          result.count++;
          result.data[dyl] = 1;
          visited[dyl] = 1;

          xl--;
        }
        xr = x + 1;
        // walk to right side starting with the right neighbor
        while (xr < w) {
          dyr = dy + xr;

          if(mode == 'gradient') {
            _ci = (dyr - 1)*4;
            sampleColor = [data[_ci], data[_ci + 1], data[_ci + 2], data[_ci + 3]];
          }
          if (!acceptable(xr, el.y, image, visited, sampleColor, colorThreshold)){
            break;
          }

          result.count++;
          result.data[dyr] = 1;
          visited[dyr] = 1;
          xr++;
        }

        // check minmax for X
        if (xl < result.bounds.minX) result.bounds.minX = xl + 1;
        if (xr > result.bounds.maxX) result.bounds.maxX = xr - 1;

        newY = el.y - el.dir;
        if (newY >= 0 && newY < h) {
          if (xl < xr) stack.push({y: newY, left: xl, right: xr, dir: -el.dir}); // from "new left" to "new right"
          // add two scanning lines in the opposite direction (y - dir) if necessary
          // if (xl <= el.left) stack.push({y: newY, left: xl, right: el.left, dir: -el.dir}); // from "new left" to "current left"
          // if (el.right <= xr) stack.push({y: newY, left: el.right, right: xr, dir: -el.dir}); // from "current right" to "new right"
        }
        newY = el.y + el.dir;
        if (newY >= 0 && newY < h) { // add the scanning line in the direction (y + dir) if necessary
          if (xl < xr) stack.push({y: newY, left: xl, right: xr, dir: el.dir}); // from "new left" to "new right"
        }
      }
      // check minmax for Y if necessary
      if (checkY) {
        if (el.y < result.bounds.minY) result.bounds.minY = el.y;
        if (el.y > result.bounds.maxY) result.bounds.maxY = el.y;
      }
    } while (stack.length > 0);

    postMessage && postMessage(result);
    return result;
  };

  lib.extendMask = function (mask, value) {

    var mask2 = new SelectionMask(mask.width + 2, mask.height + 2);
    if(value){
      mask2.data.fill(value);
    }

    for(var y = 0;y < mask.height ; y++){
      for(var x = 0;x < mask.width ; x++){
        mask2.data[ (y + 1) * mask2.width + x + 1 ] = mask.data[y * mask.width + x ];
      }
    }
    mask2.count  = mask.count;

    if(!value) {
      mask2.bounds = {
        minX: mask.bounds.minX + 1,
        maxX: mask.bounds.maxX + 1,
        maxY: mask.bounds.maxY + 1,
        minY: mask.bounds.minY + 1
      };
    }else{
      mask2.bounds = mask.bounds;
    }

    return mask2;
  };

  /** Create a binary mask on the image by color threshold
   * Algorithm: Scanline flood fill (http://en.wikipedia.org/wiki/Flood_fill)
   * @param {Object} image: {Uint8Array} data, {int} width, {int} height, {int} bytes
   * @param {int} x of start pixel
   * @param {int} y of start pixel
   * @param {int} color threshold
   * @param {Uint8Array} mask of visited points (optional)
   * @return {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds
   */
  lib.floodFill = function (image, px, py, colorThreshold, options,color,callback) {
    options = options || {};
    options.activeMask = options.activeMask  || new SelectionMask(image.width, image.height);

    return lib.__floodFill({data: [image, px, py, colorThreshold, options, color]},callback);

    /*
    var worker = _.worker(lib.__floodFill);
    worker.onmessage = function(e){
      var mask = new SelectionMask(e.data);
      callback && callback(mask);
    };
    worker.postMessage([image, px, py, colorThreshold, options]);
*/

  };

  lib.substract = function (mask, mask2) {
    var minX, maxX, minY, maxY;

    var result = new SelectionMask(mask.width, mask.height);
    var bounds = mask2.bounds;

    var minX = false, minY = mask.height, maxX = false, maxY = -1;

    for (var x = bounds.minX; x <= bounds.maxX; x++) {
      for (var y = bounds.minY; y <= bounds.maxY; y++) {
        var index = mask.width * y + x;

        if (!mask.data[index] && mask2.data[index]) {
          result.data[index] = 1;
          result.count++;
          if (result.bounds.minY > y)result.bounds.minY = y;
          if (result.bounds.maxY < y)result.bounds.maxY = y;
          if (result.bounds.minX > x)result.bounds.minX = x;
          if (result.bounds.maxX < x)result.bounds.maxX = x;
        }
      }
    }

    return result;
  }

  lib.getImageData  = function(mixedType){
    var canvas;
    if (mixedType.constructor.name == "Image" || mixedType.constructor.name == "HTMLImageElement") {
      var _canvas = createCanvasElement();
      _canvas.width = mixedType.width;
      _canvas.height = mixedType.height;
      var ctx = _canvas.getContext("2d");
      ctx.drawImage(mixedType, 0, 0);
      canvas = _canvas;
    }else{
      canvas = mixedType;
    }
    if (canvas.constructor.name == "HTMLCanvasElement" || canvas.constructor.name == "Canvas") {
      var imgData = canvas.getContext("2d").getImageData(0, 0, canvas.width, canvas.height);
    }else{
      imgData = mixedType;
    }
    return imgData;
  };

  lib.getColoredPixels = function (mixedType) {
    var imgData = lib.getImageData(mixedType);
    var data = imgData.data;
    var pixels = 0;
    for (var i = 3; i < data.length; i += 4) {
      if (data[i]) {
        pixels+= data[i] / 255;
      }
    }
    return pixels;
  };

  lib.invertMask = function (mask) {
    var result = new SelectionMask(mask.width, mask.height);
    result.bounds = {
      minX: Infinity,
      minY: Infinity,
      maxY: -1,
      maxX: -1
    };


    for (var x = 0; x < mask.width; x++) {
      for (var y = 0; y < mask.height; y++) {
        var index = mask.width * y + x;
        if (!mask.data[index]) {
          result.data[index] = 1;
          result.count++;
          if (result.bounds.minY > y)result.bounds.minY = y;
          if (result.bounds.maxY < y)result.bounds.maxY = y;
          if (result.bounds.minX > x)result.bounds.minX = x;
          if (result.bounds.maxX < x)result.bounds.maxX = x;
        }
      }
    }
    return result;
  };

  lib.exclude = function (mask, mask2) {
    var result = new SelectionMask(mask.width, mask.height);
    var bounds = {
      minX: Math.min(mask.bounds.minX, mask2.bounds.minX),
      maxX: Math.max(mask.bounds.maxX, mask2.bounds.maxX),
      minY: Math.min(mask.bounds.minY, mask2.bounds.minY),
      maxY: Math.max(mask.bounds.maxY, mask2.bounds.maxY)
    };

    var minX = false, minY = mask.height, maxX = false, maxY = -1;

    for (var x = bounds.minX; x <= bounds.maxX; x++) {
      for (var y = bounds.minY; y <= bounds.maxY; y++) {
        var index = mask2.width * y + x;

        if (mask.data[index] ^ mask2.data[index]) {
          result.data[index] = 1;
          result.count++;
          maxX = x;
          if (minY > y)minY = y;
          if (maxY < y)maxY = y;
          if (minX === false) {
            minX = x;
          }
        }
      }
    }

    result.bounds = {
      minX: minX,
      maxX: maxX,
      minY: minY,
      maxY: maxY
    }

    return result;
  };

  lib.intersect = function (mask, mask2) {
    var minX, maxX, minY, maxY;

    var result = new SelectionMask(mask.width, mask.height);
    var bounds = {
      minX: Math.max(mask.bounds.minX, mask2.bounds.minX),
      maxX: Math.min(mask.bounds.maxX, mask2.bounds.maxX),
      minY: Math.max(mask.bounds.minY, mask2.bounds.minY),
      maxY: Math.min(mask.bounds.maxY, mask2.bounds.maxY)
    };

    var minX = false, minY = mask.height, maxX = false, maxY = -1;

    for (var x = bounds.minX; x <= bounds.maxX; x++) {
      for (var y = bounds.minY; y <= bounds.maxY; y++) {
        var index = mask2.width * y + x;

        if (mask.data[index] && mask2.data[index]) {
          result.data[index] = 1;
          result.count++;
          maxX = x;
          if (minY > y)minY = y;
          if (maxY < y)maxY = y;
          if (minX === false) {
            minX = x;
          }
        }
      }
    }

    result.bounds = {
      minX: minX,
      maxX: maxX,
      minY: minY,
      maxY: maxY
    }

    return result;
  };

  lib.add = function (mask, mask2) {
    var result = new SelectionMask(mask.width, mask.height);

    result.bounds = {
      minX: Math.min(mask.bounds.minX, mask2.bounds.minX),
      maxX: Math.max(mask.bounds.maxX, mask2.bounds.maxX),
      minY: Math.min(mask.bounds.minY, mask2.bounds.minY),
      maxY: Math.max(mask.bounds.maxY, mask2.bounds.maxY)
    };

    for (var x = result.bounds.minX; x <= result.bounds.maxX; x++) {
      for (var y = result.bounds.minY; y <= result.bounds.maxY; y++) {
        var index = mask2.width * y + x;

        if (mask.data[index] || mask2.data[index]) {
          result.data[index] = 1;
          result.count++;
        }
      }
    }

    return result;
  };

  /** Apply the gauss-blur filter to binary mask
   * Algorithms: http://blog.ivank.net/fastest-gaussian-blur.html
   * http://www.librow.com/articles/article-9
   * http://elynxsdk.free.fr/ext-docs/Blur/Fast_box_blur.pdf
   * @param {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds
   * @param {int} blur radius
   * @return {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds
   */
  lib.gaussBlur = function (mask, radius) {

    var i, k, k1, x, y, val, start, end,
      n = radius * 2 + 1, // size of the pattern for radius-neighbors (from -r to +r with the center point)
      s2 = radius * radius,
      wg = new Float32Array(n), // weights
      total = 0, // sum of weights(used for normalization)
      w = mask.width,
      h = mask.height,
      data = mask.data,
      minX = mask.bounds.minX,
      maxX = mask.bounds.maxX,
      minY = mask.bounds.minY,
      maxY = mask.bounds.maxY,
      count = 0;

    // calc gauss weights
    for (i = 0; i < radius; i++) {
      var dsq = (radius - i) * (radius - i);
      var ww = Math.exp(-dsq / (2.0 * s2)) / (2 * Math.PI * s2);
      wg[radius + i] = wg[radius - i] = ww;
      total += 2 * ww;
    }
    // normalization weights
    for (i = 0; i < n; i++) {
      wg[i] /= total;
    }

    var result = new Uint8Array(w * h), // result mask
      endX = radius + w,
      endY = radius + h;

    //walk through all source points for blur
    for (y = minY; y < maxY + 1; y++)
      for (x = minX; x < maxX + 1; x++) {
        val = 0;
        k = y * w + x; // index of the point
        start = radius - x > 0 ? radius - x : 0;
        end = endX - x < n ? endX - x : n; // Math.min((((w - 1) - x) + radius) + 1, n);
        k1 = k - radius;
        // walk through x-neighbors
        for (i = start; i < end; i++) {
          val += data[k1 + i] * wg[i];
        }
        start = radius - y > 0 ? radius - y : 0;
        end = endY - y < n ? endY - y : n; // Math.min((((h - 1) - y) + radius) + 1, n);
        k1 = k - radius * w;
        // walk through y-neighbors
        for (i = start; i < end; i++) {
          val += data[k1 + i * w] * wg[i];
        }
        if (val > 0.5) {
          result[k] = 1;
          count++;
        } else {
          result[k] = 0;
        }
      }

    return {
      count: count,
      data: result,
      width: w,
      height: h,
      bounds: {
        minX: minX,
        minY: minY,
        maxX: maxX,
        maxY: maxY
      }
    };
  };

  /** Create a border index array of boundary points of the mask with radius-neighbors
   * @param {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds
   * @param {int} radius: blur radius
   * @param {Uint8Array} visited: mask of visited points (optional)
   * @return {Array} border index array of boundary points with radius-neighbors (only points need for blur)
   */
  function createBorderForBlur(mask, radius, visited) {

    var x, i, j, y, k, k1, k2,
      w = mask.width,
      h = mask.height,
      data = mask.data,
      visitedData = new Uint8Array(data),
      minX = mask.bounds.minX,
      maxX = mask.bounds.maxX,
      minY = mask.bounds.minY,
      maxY = mask.bounds.maxY,
      len = w * h,
      temp = new Uint8Array(len), // auxiliary array to check uniqueness
      border = [], // only border points
      x0 = Math.max(minX, 1),
      x1 = Math.min(maxX, w - 2),
      y0 = Math.max(minY, 1),
      y1 = Math.min(maxY, h - 2);

    if (visited && visited.length > 0) {
      // copy visited points (only "black")
      for (k = 0; k < len; k++) {
        if (visited[k] === 1) visitedData[k] = 1;
      }
    }

    // walk through inner values except points on the boundary of the image
    for (y = y0; y < y1 + 1; y++)
      for (x = x0; x < x1 + 1; x++) {
        k = y * w + x;
        if (data[k] === 0) continue; // "white" point isn't the border
        k1 = k + w; // y + 1
        k2 = k - w; // y - 1
        // check if any neighbor with a "white" color
        if (visitedData[k + 1] === 0 || visitedData[k - 1] === 0 ||
          visitedData[k1] === 0 || visitedData[k1 + 1] === 0 || visitedData[k1 - 1] === 0 ||
          visitedData[k2] === 0 || visitedData[k2 + 1] === 0 || visitedData[k2 - 1] === 0) {
          //if (visitedData[k + 1] + visitedData[k - 1] +
          //    visitedData[k1] + visitedData[k1 + 1] + visitedData[k1 - 1] +
          //    visitedData[k2] + visitedData[k2 + 1] + visitedData[k2 - 1] == 8) continue;
          border.push(k);
        }
      }

    // walk through points on the boundary of the image if necessary
    // if the "black" point is adjacent to the boundary of the image, it is a border point
    if (minX == 0)
      for (y = minY; y < maxY + 1; y++)
        if (data[y * w] === 1)
          border.push(y * w);

    if (maxX == w - 1)
      for (y = minY; y < maxY + 1; y++)
        if (data[y * w + maxX] === 1)
          border.push(y * w + maxX);

    if (minY == 0)
      for (x = minX; x < maxX + 1; x++)
        if (data[x] === 1)
          border.push(x);

    if (maxY == h - 1)
      for (x = minX; x < maxX + 1; x++)
        if (data[maxY * w + x] === 1)
          border.push(maxY * w + x);

    var result = [], // border points with radius-neighbors
      start, end,
      endX = radius + w,
      endY = radius + h,
      n = radius * 2 + 1; // size of the pattern for radius-neighbors (from -r to +r with the center point)

    len = border.length;
    // walk through radius-neighbors of border points and add them to the result array
    for (j = 0; j < len; j++) {
      k = border[j]; // index of the border point
      temp[k] = 1; // mark border point
      result.push(k); // save the border point
      x = k % w; // calc x by index
      y = (k - x) / w; // calc y by index
      start = radius - x > 0 ? radius - x : 0;
      end = endX - x < n ? endX - x : n; // Math.min((((w - 1) - x) + radius) + 1, n);
      k1 = k - radius;
      // walk through x-neighbors
      for (i = start; i < end; i++) {
        k2 = k1 + i;
        if (temp[k2] === 0) { // check the uniqueness
          temp[k2] = 1;
          result.push(k2);
        }
      }
      start = radius - y > 0 ? radius - y : 0;
      end = endY - y < n ? endY - y : n; // Math.min((((h - 1) - y) + radius) + 1, n);
      k1 = k - radius * w;
      // walk through y-neighbors
      for (i = start; i < end; i++) {
        k2 = k1 + i * w;
        if (temp[k2] === 0) { // check the uniqueness
          temp[k2] = 1;
          result.push(k2);
        }
      }
    }

    return result;
  };

  /** Apply the gauss-blur filter ONLY to border points with radius-neighbors
   * Algorithms: http://blog.ivank.net/fastest-gaussian-blur.html
   * http://www.librow.com/articles/article-9
   * http://elynxsdk.free.fr/ext-docs/Blur/Fast_box_blur.pdf
   * @param  {Object}     mask:     {Uint8Array} data, {int} width, {int} height, {Object} bounds
   * @param  {int}        radius:   blur radius
   * @param  {Uint8Array} visited:  mask of visited points (optional)
   * @return {Object}     mask:     {Uint8Array} data, {int} width, {int} height, {Object} bounds
   */
  lib.gaussBlurOnlyBorder = function (mask, radius, visited) {

    var border = createBorderForBlur(mask, radius, visited), // get border points with radius-neighbors
      ww, dsq, i, j, k, k1, x, y, val, start, end,
      n = radius * 2 + 1, // size of the pattern for radius-neighbors (from -r to +r with center point)
      s2 = 2 * radius * radius,
      wg = new Float32Array(n), // weights
      total = 0, // sum of weights(used for normalization)
      w = mask.width,
      h = mask.height,
      data = mask.data,
      minX = mask.bounds.minX,
      maxX = mask.bounds.maxX,
      minY = mask.bounds.minY,
      maxY = mask.bounds.maxY,
      len = border.length;

    // calc gauss weights
    for (i = 0; i < radius; i++) {
      dsq = (radius - i) * (radius - i);
      ww = Math.exp(-dsq / s2) / Math.PI;
      wg[radius + i] = wg[radius - i] = ww;
      total += 2 * ww;
    }
    // normalization weights
    for (i = 0; i < n; i++) {
      wg[i] /= total;
    }

    var result = new SelectionMask(w,h,data), // copy the source mask
      endX = radius + w,
      endY = radius + h;

    //walk through all border points for blur
    for (i = 0; i < len; i++) {
      k = border[i]; // index of the border point
      val = 0;
      x = k % w; // calc x by index
      y = (k - x) / w; // calc y by index
      start = radius - x > 0 ? radius - x : 0;
      end = endX - x < n ? endX - x : n; // Math.min((((w - 1) - x) + radius) + 1, n);
      k1 = k - radius;
      // walk through x-neighbors
      for (j = start; j < end; j++) {
        val += data[k1 + j] * wg[j];
      }
      if (val > 0.5) {
        result.data[k] = 1;
        result.count++;
        // check minmax
        if (x < minX) minX = x;
        if (x > maxX) maxX = x;
        if (y < minY) minY = y;
        if (y > maxY) maxY = y;
        continue;
      }
      start = radius - y > 0 ? radius - y : 0;
      end = endY - y < n ? endY - y : n; // Math.min((((h - 1) - y) + radius) + 1, n);
      k1 = k - radius * w;
      // walk through y-neighbors
      for (j = start; j < end; j++) {
        val += data[k1 + j * w] * wg[j];
      }
      if (val > 0.5) {
        result.data[k] = 1;
        result.count++;
        // check minmax
        if (x < minX) minX = x;
        if (x > maxX) maxX = x;
        if (y < minY) minY = y;
        if (y > maxY) maxY = y;
      } else {
        result.data[k] = 0;
      }
    }
    result.bounds = {
      minX: minX,
      minY: minY,
      maxX: maxX,
      maxY: maxY
    };

    return result;
  };

  /** Create a border mask (only boundary points)
   * @param {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds
   * @return {Object} border mask: {Uint8Array} data, {int} width, {int} height, {Object} offset
   */
  lib.createBorderMask = function (mask) {

    var x, y, k, k1, k2,
      w = mask.width,
      h = mask.height,
      data = mask.data,
      minX = mask.bounds.minX,
      maxX = mask.bounds.maxX,
      minY = mask.bounds.minY,
      maxY = mask.bounds.maxY,
      rw = maxX - minX + 1, // bounds size
      rh = maxY - minY + 1,
      result = new Uint8Array(rw * rh), // reduced mask (bounds size)
      x0 = Math.max(minX, 1),
      x1 = Math.min(maxX, w - 2),
      y0 = Math.max(minY, 1),
      y1 = Math.min(maxY, h - 2),
      count = 0;

    // walk through inner values except points on the boundary of the image
    for (y = y0; y < y1 + 1; y++)
      for (x = x0; x < x1 + 1; x++) {
        k = y * w + x;
        if (data[k] === 0) continue; // "white" point isn't the border
        k1 = k + w; // y + 1
        k2 = k - w; // y - 1
        // check if any neighbor with a "white" color
        if (data[k + 1] === 0 || data[k - 1] === 0 ||
          data[k1] === 0 || data[k1 + 1] === 0 || data[k1 - 1] === 0 ||
          data[k2] === 0 || data[k2 + 1] === 0 || data[k2 - 1] === 0) {
          //if (data[k + 1] + data[k - 1] +
          //    data[k1] + data[k1 + 1] + data[k1 - 1] +
          //    data[k2] + data[k2 + 1] + data[k2 - 1] == 8) continue;
          result[(y - minY) * rw + (x - minX)] = 1;
          count++;
        }
      }

    // walk through points on the boundary of the image if necessary
    // if the "black" point is adjacent to the boundary of the image, it is a border point
    if (minX == 0)
      for (y = minY; y < maxY + 1; y++)
        if (data[y * w] === 1) {
          result[(y - minY) * rw] = 1;
          count++;
        }

    if (maxX == w - 1)
      for (y = minY; y < maxY + 1; y++)
        if (data[y * w + maxX] === 1) {
          result[(y - minY) * rw + (maxX - minX)] = 1;
          count++;
        }

    if (minY == 0)
      for (x = minX; x < maxX + 1; x++)
        if (data[x] === 1) {
          result[x - minX] = 1;
          count++;
        }

    if (maxY == h - 1)
      for (x = minX; x < maxX + 1; x++)
        if (data[maxY * w + x] === 1) {
          result[(maxY - minY) * rw + (x - minX)] = 1;
          count++;
        }

    return {
      count: count,
      data: result,
      width: rw,
      height: rh,
      offset: {x: minX, y: minY}
    };
  };

  /** Create a border index array of boundary points of the mask
   * @param {Object} mask: {Uint8Array} data, {int} width, {int} height
   * @return {Array} border index array boundary points of the mask
   */
  lib.getBorderIndices = function (mask) {

    var x, y, k, k1, k2,
      w = mask.width,
      h = mask.height,
      data = mask.data,
      border = [], // only border points
      x1 = w - 1,
      y1 = h - 1;

    // walk through inner values except points on the boundary of the image
    for (y = 1; y < y1; y++)
      for (x = 1; x < x1; x++) {
        k = y * w + x;
        if (data[k] === 0) continue; // "white" point isn't the border
        k1 = k + w; // y + 1
        k2 = k - w; // y - 1
        // check if any neighbor with a "white" color
        if (data[k + 1] === 0 || data[k - 1] === 0 ||
          data[k1] === 0 || data[k1 + 1] === 0 || data[k1 - 1] === 0 ||
          data[k2] === 0 || data[k2 + 1] === 0 || data[k2 - 1] === 0) {
          //if (data[k + 1] + data[k - 1] +
          //    data[k1] + data[k1 + 1] + data[k1 - 1] +
          //    data[k2] + data[k2 + 1] + data[k2 - 1] == 8) continue;
          border.push(k);
        }
      }

    // walk through points on the boundary of the image if necessary
    // if the "black" point is adjacent to the boundary of the image, it is a border point
    for (y = 0; y < h; y++)
      if (data[y * w] === 1)
        border.push(y * w);

    for (x = 0; x < w; x++)
      if (data[x] === 1)
        border.push(x);

    k = w - 1;
    for (y = 0; y < h; y++)
      if (data[y * w + k] === 1)
        border.push(y * w + k);

    k = (h - 1) * w;
    for (x = 0; x < w; x++)
      if (data[k + x] === 1)
        border.push(k + x);

    return border;
  };

  /** Create a compressed mask with a "white" border (1px border with zero values) for the contour tracing
   * @param {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds
   * @return {Object} border mask: {Uint8Array} data, {int} width, {int} height, {Object} offset
   */
  function prepareMask(mask) {
    var x, y,
      w = mask.width,
      data = mask.data,
      minX = mask.bounds.minX,
      maxX = mask.bounds.maxX,
      minY = mask.bounds.minY,
      maxY = mask.bounds.maxY,
      rw = maxX - minX + 3, // bounds size +1 px on each side (a "white" border)
      rh = maxY - minY + 3,
      result = new Uint8Array(rw * rh); // reduced mask (bounds size)

    // walk through inner values and copy only "black" points to the result mask
    for (y = minY; y < maxY + 1; y++)
      for (x = minX; x < maxX + 1; x++) {
        if (data[y * w + x] === 1)
          result[(y - minY + 1) * rw + (x - minX + 1)] = 1;
      }

    return {
      data: result,
      width: rw,
      height: rh,
      offset: {x: minX - 1, y: minY - 1}
    };
  };

  /** Create a contour array for the binary mask
   * Algorithm: http://www.sciencedirect.com/science/article/pii/S1077314203001401
   * @param {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds
   * @return {Array} contours: {Array} points, {bool} inner, {int} label
   */
  lib.traceContours = function (mask) {
    var m = prepareMask(mask),
      contours = [],
      label = 0,
      w = m.width,
      w2 = w * 2,
      h = m.height,
      src = m.data,
      dx = m.offset.x,
      dy = m.offset.y,
      bounds,_p,
      dest = new Uint8Array(src), // label matrix
      i, j, x, y, k, k1, c, inner, dir, first, second, current, previous, next, d;

    // all [dx,dy] pairs (array index is the direction)
    // 5 6 7
    // 4 X 0
    // 3 2 1
    var directions = [[1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1], [1, -1]];

    for (y = 1; y < h - 1; y++)
      for (x = 1; x < w - 1; x++) {
        k = y * w + x;
        if (src[k] === 1) {
          for (i = -w; i < w2; i += w2) { // k - w: outer tracing (y - 1), k + w: inner tracing (y + 1)
            if (src[k + i] === 0 && dest[k + i] === 0) { // need contour tracing
              inner = i === w; // is inner contour tracing ?
              label++; // label for the next contour

              c = [];
              bounds = {
                minX : w,
                minY : h,
                maxX : -1,
                maxY : -1,
              };
              dir = inner ? 2 : 6; // start direction
              current = previous = first = {x: x, y: y};
              second = null;
              while (true) {
                dest[current.y * w + current.x] = label; // mark label for the current point
                // bypass all the neighbors around the current point in a clockwise
                for (j = 0; j < 8; j++) {
                  dir = (dir + 1) % 8;

                  // get the next point by new direction
                  d = directions[dir]; // index as direction
                  next = {x: current.x + d[0], y: current.y + d[1]};

                  k1 = next.y * w + next.x;
                  if (src[k1] === 1) // black boundary pixel
                  {
                    dest[k1] = label; // mark a label
                    break;
                  }
                  dest[k1] = -1; // mark a white boundary pixel
                  next = null;
                }
                if (next === null) break; // no neighbours (one-point contour)
                current = next;
                if (second) {
                  if (previous.x === first.x && previous.y === first.y && current.x === second.x && current.y === second.y) {
                    break; // creating the contour completed when returned to original position
                  }
                } else {
                  second = next;
                }
                _p = {x: previous.x + dx, y: previous.y + dy};
                if(bounds.minX > _p.x)bounds.minX = _p.x;
                if(bounds.maxX < _p.x)bounds.maxX = _p.x;
                if(bounds.minY > _p.y)bounds.minY = _p.y;
                if(bounds.maxY < _p.y)bounds.maxY = _p.y;
                c.push(_p);
                previous = current;
                dir = (dir + 4) % 8; // next dir (symmetrically to the current direction)
              }

              if (next != null) {
                _p = {x: first.x + dx, y: first.y + dy};
                if(bounds.minX >  _p.x)bounds.minX =  _p.x;
                if(bounds.maxX <  _p.x)bounds.maxX =  _p.x;
                if(bounds.minY >  _p.y)bounds.minY =  _p.y;
                if(bounds.maxY <  _p.y)bounds.maxY =  _p.y;
                c.push(_p); // close the contour
                contours.push({inner: inner, label: label, points: c,bounds : bounds}); // add contour to the list
              }
            }
          }
        }
      }

    return contours;
  };

  function rgbToHsl(r, g, b){
    r /= 255, g /= 255, b /= 255;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min){
      h = s = 0; // achromatic
    }else{
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch(max){
        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
        case g: h = (b - r) / d + 2; break;
        case b: h = (r - g) / d + 4; break;
      }
      h /= 6;
    }

    return [h * 255, s* 255, l* 255];
  }

  lib.simplifyContour = function (c, simplifyTolerant, simplifyCount) {
    var
      i, j, k, c, points, len, resPoints, lst, stack, ids,
      maxd, maxi, dist, r1, r2, r12, dx, dy, pi, pf, pl;

    points = c.points;
    len = c.points.length;

    if (len < simplifyCount) { // contour isn't simplified
      resPoints = [];
      for (k = 0; k < len; k++) {
        resPoints.push({x: points[k].x, y: points[k].y});
      }
      return {
        bounds: c.bounds, inner: c.inner, label: c.label, points: resPoints, initialCount: len};
    }

    lst = [0, len - 1]; // always add first and last points
    stack = [{first: 0, last: len - 1}]; // first processed edge

    do {
      ids = stack.shift();
      if (ids.last <= ids.first + 1) // no intermediate points
      {
        continue;
      }

      maxd = -1.0; // max distance from point to current edge
      maxi = ids.first; // index of maximally distant point

      for (i = ids.first + 1; i < ids.last; i++) // bypass intermediate points in edge
      {
        // calc the distance from current point to edge
        pi = points[i];
        pf = points[ids.first];
        pl = points[ids.last];
        dx = pi.x - pf.x;
        dy = pi.y - pf.y;
        r1 = Math.sqrt(dx * dx + dy * dy);
        dx = pi.x - pl.x;
        dy = pi.y - pl.y;
        r2 = Math.sqrt(dx * dx + dy * dy);
        dx = pf.x - pl.x;
        dy = pf.y - pl.y;
        r12 = Math.sqrt(dx * dx + dy * dy);
        if (r1 >= Math.sqrt(r2 * r2 + r12 * r12)) dist = r2;
        else if (r2 >= Math.sqrt(r1 * r1 + r12 * r12)) dist = r1;
        else dist = Math.abs((dy * pi.x - dx * pi.y + pf.x * pl.y - pl.x * pf.y) / r12);

        if (dist > maxd) {
          maxi = i; // save the index of maximally distant point
          maxd = dist;
        }
      }

      if (maxd > simplifyTolerant) // if the max "deviation" is larger than allowed then...
      {
        lst.push(maxi); // add index to the simplified list
        stack.push({first: ids.first, last: maxi}); // add the left part for processing
        stack.push({first: maxi, last: ids.last}); // add the right part for processing
      }

    } while (stack.length > 0);

    resPoints = [];
    len = lst.length;
    lst.sort(function (a, b) {
      return a - b;
    }); // restore index order
    for (k = 0; k < len; k++) {
      resPoints.push({x: points[lst[k]].x, y: points[lst[k]].y}); // add result points to the correct order
    }
    return {
      bounds: c.bounds,
      inner: c.inner, label: c.label, points: resPoints, initialCount: c.points.length
    };
  };

  /** Simplify contours
   * Algorithms: http://psimpl.sourceforge.net/douglas-peucker.html
   * http://neerc.ifmo.ru/wiki/index.php?title=%D0%A3%D0%BF%D1%80%D0%BE%D1%89%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BF%D0%BE%D0%BB%D0%B8%D0%B3%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B9_%D1%86%D0%B5%D0%BF%D0%B8
   * @param {Array} contours: {Array} points, {bool} inner, {int} label
   * @param {float} simplify tolerant
   * @param {int} simplify count: min number of points when the contour is simplified
   * @return {Array} contours: {Array} points, {bool} inner, {int} label, {int} initialCount
   */
  lib.simplifyContours = function (contours, simplifyTolerant, simplifyCount) {
    var lenContours = contours.length,
      result = [];

    // walk through all contours
    for (var j = 0; j < lenContours; j++) {

      result.push(lib.simplifyContour(contours[j], simplifyTolerant, simplifyCount));
    }

    return result;
  };

  return lib;
})();
if (true) {
  module.exports = MagicWand;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = $;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhLS0gQ3JlYXRlZCB3aXRoIElua3NjYXBlIChodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy8pIC0tPgo8c3ZnCiAgICB4bWxuczppbmtzY2FwZT0iaHR0cDovL3d3dy5pbmtzY2FwZS5vcmcvbmFtZXNwYWNlcy9pbmtzY2FwZSIKICAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgIHhtbG5zOnNvZGlwb2RpPSJodHRwOi8vc29kaXBvZGkuc291cmNlZm9yZ2UubmV0L0RURC9zb2RpcG9kaS0wLmR0ZCIKICAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgICB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIKICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIKICAgIHhtbG5zOnN2Zz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICB4bWxuczpuczE9Imh0dHA6Ly9zb3ppLmJhaWVyb3VnZS5mciIKICAgIGlkPSJzdmc0ODg4IgogICAgc29kaXBvZGk6ZG9jbmFtZT0id2FybmluZ19idXR0b24uc3ZnIgogICAgdmlld0JveD0iMCAwIDQwMCA0MDAiCiAgICB2ZXJzaW9uPSIxLjEiCiAgICBpbmtzY2FwZTp2ZXJzaW9uPSIwLjQ4LjAgcjk2NTQiCiAgPgogIDxkZWZzCiAgICAgIGlkPSJkZWZzNDg5MCIKICAgID4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgIGlkPSJsaW5lYXJHcmFkaWVudDg0MTEiCiAgICAgICAgeTI9IjM2Ny44OCIKICAgICAgICBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIKICAgICAgICB5MT0iMjg3LjQ5IgogICAgICAgIHgyPSIzMTUuNDciCiAgICAgICAgeDE9IjI0MS40MSIKICAgICAgICBpbmtzY2FwZTpjb2xsZWN0PSJhbHdheXMiCiAgICAgID4KICAgICAgPHN0b3AKICAgICAgICAgIGlkPSJzdG9wNDE1OCIKICAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiNmZmZmZmYiCiAgICAgICAgICBvZmZzZXQ9IjAiCiAgICAgIC8+CiAgICAgIDxzdG9wCiAgICAgICAgICBpZD0ic3RvcDQxNjAiCiAgICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojZmZmZmZmO3N0b3Atb3BhY2l0eTowIgogICAgICAgICAgb2Zmc2V0PSIxIgogICAgICAvPgogICAgPC9saW5lYXJHcmFkaWVudAogICAgPgogICAgPGZpbHRlcgogICAgICAgIGlkPSJmaWx0ZXI2MTI2IgogICAgICAgIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycz0ic1JHQiIKICAgICAgICBpbmtzY2FwZTpjb2xsZWN0PSJhbHdheXMiCiAgICAgID4KICAgICAgPGZlR2F1c3NpYW5CbHVyCiAgICAgICAgICBpZD0iZmVHYXVzc2lhbkJsdXI2MTI4IgogICAgICAgICAgc3RkRGV2aWF0aW9uPSIwLjUzMDM1NzEzIgogICAgICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIgogICAgICAvPgogICAgPC9maWx0ZXIKICAgID4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgIGlkPSJsaW5lYXJHcmFkaWVudDg0MTMiCiAgICAgICAgeTI9IjM5MS40NSIKICAgICAgICBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIKICAgICAgICB5MT0iMzAwLjg2IgogICAgICAgIHgyPSIzNDIiCiAgICAgICAgeDE9IjI3NS42MSIKICAgICAgICBpbmtzY2FwZTpjb2xsZWN0PSJhbHdheXMiCiAgICAgID4KICAgICAgPHN0b3AKICAgICAgICAgIGlkPSJzdG9wNzIwMSIKICAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiM1NTAwMDAiCiAgICAgICAgICBvZmZzZXQ9IjAiCiAgICAgIC8+CiAgICAgIDxzdG9wCiAgICAgICAgICBpZD0ic3RvcDcyMDMiCiAgICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojZmYwMDAwIgogICAgICAgICAgb2Zmc2V0PSIxIgogICAgICAvPgogICAgPC9saW5lYXJHcmFkaWVudAogICAgPgogICAgPHJhZGlhbEdyYWRpZW50CiAgICAgICAgaWQ9InJhZGlhbEdyYWRpZW50ODQxNSIKICAgICAgICBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIKICAgICAgICBjeD0iMzEyLjc4IgogICAgICAgIGN5PSIzODYuNTciCiAgICAgICAgcj0iNTMuMDM2IgogICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoLS41OTMyNyAtLjU5MzI3IC43MTUwNSAtLjcxNTA1IDI0My4yNyA4NDkuMDMpIgogICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgPgogICAgICA8c3RvcAogICAgICAgICAgaWQ9InN0b3A3MTEzLTciCiAgICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojZmZmZmZmO3N0b3Atb3BhY2l0eTouNDA4MTYiCiAgICAgICAgICBvZmZzZXQ9IjAiCiAgICAgIC8+CiAgICAgIDxzdG9wCiAgICAgICAgICBpZD0ic3RvcDcxMTUtNyIKICAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiNmZmZmZmY7c3RvcC1vcGFjaXR5OjAiCiAgICAgICAgICBvZmZzZXQ9IjEiCiAgICAgIC8+CiAgICA8L3JhZGlhbEdyYWRpZW50CiAgICA+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgICBpZD0ibGluZWFyR3JhZGllbnQxMDQ0OSIKICAgICAgICB5Mj0iMzM4LjgyIgogICAgICAgIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIgogICAgICAgIHkxPSIyODYuNjciCiAgICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09Im1hdHJpeCguOTU1MzQgMCAwIC45NTUzNCAxMzYuMTIgMTQuMDU1KSIKICAgICAgICB4Mj0iMzAwLjI3IgogICAgICAgIHgxPSIyNTUuMzIiCiAgICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIgogICAgICA+CiAgICAgIDxzdG9wCiAgICAgICAgICBpZD0ic3RvcDQxNTAiCiAgICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojZmZmZmZmIgogICAgICAgICAgb2Zmc2V0PSIwIgogICAgICAvPgogICAgICA8c3RvcAogICAgICAgICAgaWQ9InN0b3A0MTUyIgogICAgICAgICAgc3R5bGU9InN0b3AtY29sb3I6I2ZmZmZmZjtzdG9wLW9wYWNpdHk6MCIKICAgICAgICAgIG9mZnNldD0iMSIKICAgICAgLz4KICAgIDwvbGluZWFyR3JhZGllbnQKICAgID4KICAgIDxmaWx0ZXIKICAgICAgICBpZD0iZmlsdGVyMTE0MjgiCiAgICAgICAgY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzPSJzUkdCIgogICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgPgogICAgICA8ZmVHYXVzc2lhbkJsdXIKICAgICAgICAgIGlkPSJmZUdhdXNzaWFuQmx1cjExNDMwIgogICAgICAgICAgc3RkRGV2aWF0aW9uPSIxLjI0MzQ2NzgiCiAgICAgICAgICBpbmtzY2FwZTpjb2xsZWN0PSJhbHdheXMiCiAgICAgIC8+CiAgICA8L2ZpbHRlcgogICAgPgogIDwvZGVmcwogID4KICA8c29kaXBvZGk6bmFtZWR2aWV3CiAgICAgIGlkPSJiYXNlIgogICAgICBib3JkZXJjb2xvcj0iIzY2NjY2NiIKICAgICAgaW5rc2NhcGU6cGFnZXNoYWRvdz0iMiIKICAgICAgaW5rc2NhcGU6d2luZG93LXk9Ii04IgogICAgICBwYWdlY29sb3I9IiNmZmZmZmYiCiAgICAgIGlua3NjYXBlOndpbmRvdy1oZWlnaHQ9Ijk4OCIKICAgICAgaW5rc2NhcGU6d2luZG93LW1heGltaXplZD0iMSIKICAgICAgaW5rc2NhcGU6em9vbT0iMC43MDcxMDY3OCIKICAgICAgaW5rc2NhcGU6d2luZG93LXg9Ii04IgogICAgICBzaG93Z3JpZD0iZmFsc2UiCiAgICAgIGJvcmRlcm9wYWNpdHk9IjEuMCIKICAgICAgaW5rc2NhcGU6Y3VycmVudC1sYXllcj0ibGF5ZXIxIgogICAgICBpbmtzY2FwZTpjeD0iMzA0Ljg5NDA5IgogICAgICBpbmtzY2FwZTpjeT0iMzQxLjUyMTg2IgogICAgICBpbmtzY2FwZTp3aW5kb3ctd2lkdGg9IjE2ODAiCiAgICAgIGlua3NjYXBlOnBhZ2VvcGFjaXR5PSIwLjAiCiAgICAgIGlua3NjYXBlOmRvY3VtZW50LXVuaXRzPSJweCIKICAvPgogIDxnCiAgICAgIGlkPSJsYXllcjEiCiAgICAgIGlua3NjYXBlOmxhYmVsPSJMYXllciAxIgogICAgICBpbmtzY2FwZTpncm91cG1vZGU9ImxheWVyIgogICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwIC02NTIuMzYpIgogICAgPgogICAgPGcKICAgICAgICBpZD0iZzExNDMyIgogICAgICAgIGlua3NjYXBlOmV4cG9ydC15ZHBpPSI5MCIKICAgICAgICBpbmtzY2FwZTpleHBvcnQteGRwaT0iOTAiCiAgICAgICAgdHJhbnNmb3JtPSJtYXRyaXgoMi45MDUxIDAgMCAyLjkwNTEgLTEwMDEuOSAtNzguOTYxKSIKICAgICAgPgogICAgICA8cGF0aAogICAgICAgICAgaWQ9InBhdGg3Mjc2IgogICAgICAgICAgc29kaXBvZGk6cng9IjUzLjAzNTcxMyIKICAgICAgICAgIHNvZGlwb2RpOnJ5PSI1My4wMzU3MTMiCiAgICAgICAgICBzdHlsZT0iZmlsbDojOTk5OTk5IgogICAgICAgICAgc29kaXBvZGk6dHlwZT0iYXJjIgogICAgICAgICAgZD0ibTM1Ni43OSAzNDYuMTFjMCAyOS4yOTEtMjMuNzQ1IDUzLjAzNi01My4wMzYgNTMuMDM2cy01My4wMzYtMjMuNzQ1LTUzLjAzNi01My4wMzYgMjMuNzQ1LTUzLjAzNiA1My4wMzYtNTMuMDM2IDUzLjAzNiAyMy43NDUgNTMuMDM2IDUzLjAzNnoiCiAgICAgICAgICB0cmFuc2Zvcm09Im1hdHJpeCguOTczNTQgMCAwIC45NzM1NCAxMjAuMDkgLTEyLjYyOCkiCiAgICAgICAgICBzb2RpcG9kaTpjeT0iMzQ2LjExMjE4IgogICAgICAgICAgc29kaXBvZGk6Y3g9IjMwMy43NSIKICAgICAgLz4KICAgICAgPHBhdGgKICAgICAgICAgIGlkPSJwYXRoNzI3OCIKICAgICAgICAgIHNvZGlwb2RpOnJ4PSI1My4wMzU3MTMiCiAgICAgICAgICBzb2RpcG9kaTpyeT0iNTMuMDM1NzEzIgogICAgICAgICAgc3R5bGU9ImZpbGw6dXJsKCNsaW5lYXJHcmFkaWVudDg0MTEpIgogICAgICAgICAgc29kaXBvZGk6dHlwZT0iYXJjIgogICAgICAgICAgZD0ibTM1Ni43OSAzNDYuMTFjMCAyOS4yOTEtMjMuNzQ1IDUzLjAzNi01My4wMzYgNTMuMDM2cy01My4wMzYtMjMuNzQ1LTUzLjAzNi01My4wMzYgMjMuNzQ1LTUzLjAzNiA1My4wMzYtNTMuMDM2IDUzLjAzNiAyMy43NDUgNTMuMDM2IDUzLjAzNnoiCiAgICAgICAgICB0cmFuc2Zvcm09Im1hdHJpeCguOTU5NjAgMCAwIC45NTk2MCAxMjQuMzMgLTcuODAxNCkiCiAgICAgICAgICBzb2RpcG9kaTpjeT0iMzQ2LjExMjE4IgogICAgICAgICAgc29kaXBvZGk6Y3g9IjMwMy43NSIKICAgICAgLz4KICAgICAgPHBhdGgKICAgICAgICAgIGlkPSJwYXRoNzI4MCIKICAgICAgICAgIHNvZGlwb2RpOnJ4PSI1My4wMzU3MTMiCiAgICAgICAgICBzb2RpcG9kaTpyeT0iNTMuMDM1NzEzIgogICAgICAgICAgc3R5bGU9ImZpbHRlcjp1cmwoI2ZpbHRlcjYxMjYpO2ZpbGw6I2VjZWNlYyIKICAgICAgICAgIHNvZGlwb2RpOnR5cGU9ImFyYyIKICAgICAgICAgIGQ9Im0zNTYuNzkgMzQ2LjExYzAgMjkuMjkxLTIzLjc0NSA1My4wMzYtNTMuMDM2IDUzLjAzNnMtNTMuMDM2LTIzLjc0NS01My4wMzYtNTMuMDM2IDIzLjc0NS01My4wMzYgNTMuMDM2LTUzLjAzNiA1My4wMzYgMjMuNzQ1IDUzLjAzNiA1My4wMzZ6IgogICAgICAgICAgdHJhbnNmb3JtPSJtYXRyaXgoLjg3MzU1IDAgMCAuODczNTUgMTUwLjQ3IDIxLjk4MSkiCiAgICAgICAgICBzb2RpcG9kaTpjeT0iMzQ2LjExMjE4IgogICAgICAgICAgc29kaXBvZGk6Y3g9IjMwMy43NSIKICAgICAgLz4KICAgICAgPHBhdGgKICAgICAgICAgIGlkPSJwYXRoNzI4MiIKICAgICAgICAgIHNvZGlwb2RpOnJ4PSI1My4wMzU3MTMiCiAgICAgICAgICBzb2RpcG9kaTpyeT0iNTMuMDM1NzEzIgogICAgICAgICAgc3R5bGU9ImZpbHRlcjp1cmwoI2ZpbHRlcjYxMjYpO2ZpbGw6Izk5OTk5OSIKICAgICAgICAgIHNvZGlwb2RpOnR5cGU9ImFyYyIKICAgICAgICAgIGQ9Im0zNTYuNzkgMzQ2LjExYzAgMjkuMjkxLTIzLjc0NSA1My4wMzYtNTMuMDM2IDUzLjAzNnMtNTMuMDM2LTIzLjc0NS01My4wMzYtNTMuMDM2IDIzLjc0NS01My4wMzYgNTMuMDM2LTUzLjAzNiA1My4wMzYgMjMuNzQ1IDUzLjAzNiA1My4wMzZ6IgogICAgICAgICAgdHJhbnNmb3JtPSJtYXRyaXgoLjgzODM4IDAgMCAuODM4MzggMTYxLjE1IDM0LjE1MikiCiAgICAgICAgICBzb2RpcG9kaTpjeT0iMzQ2LjExMjE4IgogICAgICAgICAgc29kaXBvZGk6Y3g9IjMwMy43NSIKICAgICAgLz4KICAgICAgPHBhdGgKICAgICAgICAgIGlkPSJwYXRoNzI4NCIKICAgICAgICAgIHNvZGlwb2RpOnJ4PSI1My4wMzU3MTMiCiAgICAgICAgICBzb2RpcG9kaTpyeT0iNTMuMDM1NzEzIgogICAgICAgICAgc3R5bGU9ImZpbGw6dXJsKCNsaW5lYXJHcmFkaWVudDg0MTMpIgogICAgICAgICAgc29kaXBvZGk6dHlwZT0iYXJjIgogICAgICAgICAgZD0ibTM1Ni43OSAzNDYuMTFjMCAyOS4yOTEtMjMuNzQ1IDUzLjAzNi01My4wMzYgNTMuMDM2cy01My4wMzYtMjMuNzQ1LTUzLjAzNi01My4wMzYgMjMuNzQ1LTUzLjAzNiA1My4wMzYtNTMuMDM2IDUzLjAzNiAyMy43NDUgNTMuMDM2IDUzLjAzNnoiCiAgICAgICAgICB0cmFuc2Zvcm09Im1hdHJpeCguODA1ODcgMCAwIC44MDU4NyAxNzEuMDMgNDUuNDA1KSIKICAgICAgICAgIHNvZGlwb2RpOmN5PSIzNDYuMTEyMTgiCiAgICAgICAgICBzb2RpcG9kaTpjeD0iMzAzLjc1IgogICAgICAvPgogICAgICA8cGF0aAogICAgICAgICAgaWQ9InBhdGg3Mjg2IgogICAgICAgICAgc29kaXBvZGk6cng9IjUzLjAzNTcxMyIKICAgICAgICAgIHNvZGlwb2RpOnJ5PSI1My4wMzU3MTMiCiAgICAgICAgICBzdHlsZT0iZmlsbDp1cmwoI3JhZGlhbEdyYWRpZW50ODQxNSkiCiAgICAgICAgICBzb2RpcG9kaTp0eXBlPSJhcmMiCiAgICAgICAgICBkPSJtMzU2Ljc5IDM0Ni4xMWMwIDI5LjI5MS0yMy43NDUgNTMuMDM2LTUzLjAzNiA1My4wMzZzLTUzLjAzNi0yMy43NDUtNTMuMDM2LTUzLjAzNiAyMy43NDUtNTMuMDM2IDUzLjAzNi01My4wMzYgNTMuMDM2IDIzLjc0NSA1My4wMzYgNTMuMDM2eiIKICAgICAgICAgIHRyYW5zZm9ybT0ibWF0cml4KC43NTgyNSAwIDAgLjc1ODI1IDE4Ni43NSA2My45MDYpIgogICAgICAgICAgc29kaXBvZGk6Y3k9IjM0Ni4xMTIxOCIKICAgICAgICAgIHNvZGlwb2RpOmN4PSIzMDMuNzUiCiAgICAgIC8+CiAgICAgIDxwYXRoCiAgICAgICAgICBpZD0icGF0aDcyODgiCiAgICAgICAgICBzdHlsZT0ib3BhY2l0eTouMzE3NzE7ZmlsbDp1cmwoI2xpbmVhckdyYWRpZW50MTA0NDkpIgogICAgICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgICAgIGQ9Im00MTQuOCAyODQuMTVjLTEzLjMzMSAwLjMwMDY5LTI2LjE4NiA3LjM1OC0zMy4zMzYgMTkuNzQyLTcuNjkwMyAxMy4zMi02LjcxMzkgMjkuMjY2IDEuMTU0NSA0MS4zMzEgMC44NTMwNi0yNi41MzIgMjEuMTMyLTQ2LjUxNSA0Ni4zMjQtNDUuMDU0IDguMjU4OSAwLjQ3OTA3IDE2LjA1NCAzLjIwMDEgMjIuODU5IDcuNTkwOC0zLjI1NzgtNy40NDk4LTguODE3MS0xMy45NTMtMTYuMzk0LTE4LjMyNy02LjQ4NjctMy43NDUxLTEzLjYyNS01LjQzOTMtMjAuNjA4LTUuMjgxOHoiCiAgICAgIC8+CiAgICAgIDxwYXRoCiAgICAgICAgICBpZD0icmVjdDczNzAiCiAgICAgICAgICBkPSJtNDAyLjg4IDMwMC4wOS0xMS41ODEgMTEuNTgxIDEzLjI5NSAxMy4yOTUtMTMuMjk1IDEzLjI4MSAxMS41ODEgMTEuNTgxIDEzLjI4MS0xMy4yOTUgMTMuMjk1IDEzLjI5NSAxMS41ODEtMTEuNTgxLTEzLjI4MS0xMy4yODEgMTMuMjgxLTEzLjI5NS0xMS41ODEtMTEuNTgxLTEzLjI5NSAxMy4yODEtMTMuMjgxLTEzLjI4MXoiCiAgICAgICAgICBzdHlsZT0iZmlsdGVyOnVybCgjZmlsdGVyMTE0MjgpO2ZpbGw6IzFhMWExYSIKICAgICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgIC8+CiAgICAgIDxwYXRoCiAgICAgICAgICBpZD0icGF0aDEwNDU3IgogICAgICAgICAgc3R5bGU9ImZpbGw6I2ZmZmZmZiIKICAgICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICAgICBkPSJtNDAzLjQ1IDMwMS4xNS0xMS4wODcgMTEuMDg3IDEyLjcyOCAxMi43MjgtMTIuNzI4IDEyLjcxNCAxMS4wODcgMTEuMDg3IDEyLjcxNC0xMi43MjggMTIuNzI4IDEyLjcyOCAxMS4wODctMTEuMDg3LTEyLjcxNC0xMi43MTQgMTIuNzE0LTEyLjcyOC0xMS4wODctMTEuMDg3LTEyLjcyOCAxMi43MTQtMTIuNzE0LTEyLjcxNHoiCiAgICAgIC8+CiAgICA8L2cKICAgID4KICA8L2cKICA+CiAgPG1ldGFkYXRhCiAgICA+CiAgICA8cmRmOlJERgogICAgICA+CiAgICAgIDxjYzpXb3JrCiAgICAgICAgPgogICAgICAgIDxkYzpmb3JtYXQKICAgICAgICAgID5pbWFnZS9zdmcreG1sPC9kYzpmb3JtYXQKICAgICAgICA+CiAgICAgICAgPGRjOnR5cGUKICAgICAgICAgICAgcmRmOnJlc291cmNlPSJodHRwOi8vcHVybC5vcmcvZGMvZGNtaXR5cGUvU3RpbGxJbWFnZSIKICAgICAgICAvPgogICAgICAgIDxjYzpsaWNlbnNlCiAgICAgICAgICAgIHJkZjpyZXNvdXJjZT0iaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvcHVibGljZG9tYWluLyIKICAgICAgICAvPgogICAgICAgIDxkYzpwdWJsaXNoZXIKICAgICAgICAgID4KICAgICAgICAgIDxjYzpBZ2VudAogICAgICAgICAgICAgIHJkZjphYm91dD0iaHR0cDovL29wZW5jbGlwYXJ0Lm9yZy8iCiAgICAgICAgICAgID4KICAgICAgICAgICAgPGRjOnRpdGxlCiAgICAgICAgICAgICAgPk9wZW5jbGlwYXJ0PC9kYzp0aXRsZQogICAgICAgICAgICA+CiAgICAgICAgICA8L2NjOkFnZW50CiAgICAgICAgICA+CiAgICAgICAgPC9kYzpwdWJsaXNoZXIKICAgICAgICA+CiAgICAgICAgPGRjOnRpdGxlCiAgICAgICAgICA+ZXJyb3IgYnV0dG9uPC9kYzp0aXRsZQogICAgICAgID4KICAgICAgICA8ZGM6ZGF0ZQogICAgICAgICAgPjIwMTEtMDItMjRUMTc6NDU6NDU8L2RjOmRhdGUKICAgICAgICA+CiAgICAgICAgPGRjOmRlc2NyaXB0aW9uCiAgICAgICAgLz4KICAgICAgICA8ZGM6c291cmNlCiAgICAgICAgICA+aHR0cHM6Ly9vcGVuY2xpcGFydC5vcmcvZGV0YWlsLzEyMjQyNS9lcnJvci1idXR0b24tYnktcmljYXJkb21haWE8L2RjOnNvdXJjZQogICAgICAgID4KICAgICAgICA8ZGM6Y3JlYXRvcgogICAgICAgICAgPgogICAgICAgICAgPGNjOkFnZW50CiAgICAgICAgICAgID4KICAgICAgICAgICAgPGRjOnRpdGxlCiAgICAgICAgICAgICAgPnJpY2FyZG9tYWlhPC9kYzp0aXRsZQogICAgICAgICAgICA+CiAgICAgICAgICA8L2NjOkFnZW50CiAgICAgICAgICA+CiAgICAgICAgPC9kYzpjcmVhdG9yCiAgICAgICAgPgogICAgICAgIDxkYzpzdWJqZWN0CiAgICAgICAgICA+CiAgICAgICAgICA8cmRmOkJhZwogICAgICAgICAgICA+CiAgICAgICAgICAgIDxyZGY6bGkKICAgICAgICAgICAgICA+YnV0dG9uPC9yZGY6bGkKICAgICAgICAgICAgPgogICAgICAgICAgICA8cmRmOmxpCiAgICAgICAgICAgICAgPmNhbmNlbDwvcmRmOmxpCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHJkZjpsaQogICAgICAgICAgICAgID5jaXJjbGU8L3JkZjpsaQogICAgICAgICAgICA+CiAgICAgICAgICAgIDxyZGY6bGkKICAgICAgICAgICAgICA+ZGVsZXRlPC9yZGY6bGkKICAgICAgICAgICAgPgogICAgICAgICAgICA8cmRmOmxpCiAgICAgICAgICAgICAgPnJlZDwvcmRmOmxpCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHJkZjpsaQogICAgICAgICAgICAgID5yb3VuZDwvcmRmOmxpCiAgICAgICAgICAgID4KICAgICAgICAgIDwvcmRmOkJhZwogICAgICAgICAgPgogICAgICAgIDwvZGM6c3ViamVjdAogICAgICAgID4KICAgICAgPC9jYzpXb3JrCiAgICAgID4KICAgICAgPGNjOkxpY2Vuc2UKICAgICAgICAgIHJkZjphYm91dD0iaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvcHVibGljZG9tYWluLyIKICAgICAgICA+CiAgICAgICAgPGNjOnBlcm1pdHMKICAgICAgICAgICAgcmRmOnJlc291cmNlPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyNSZXByb2R1Y3Rpb24iCiAgICAgICAgLz4KICAgICAgICA8Y2M6cGVybWl0cwogICAgICAgICAgICByZGY6cmVzb3VyY2U9Imh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL25zI0Rpc3RyaWJ1dGlvbiIKICAgICAgICAvPgogICAgICAgIDxjYzpwZXJtaXRzCiAgICAgICAgICAgIHJkZjpyZXNvdXJjZT0iaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbnMjRGVyaXZhdGl2ZVdvcmtzIgogICAgICAgIC8+CiAgICAgIDwvY2M6TGljZW5zZQogICAgICA+CiAgICA8L3JkZjpSREYKICAgID4KICA8L21ldGFkYXRhCiAgPgo8L3N2Zwo+Cg=="

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(35);
__webpack_require__(39);
__webpack_require__(32);
__webpack_require__(6);
__webpack_require__(40);
__webpack_require__(34);
__webpack_require__(33);
__webpack_require__(38);
__webpack_require__(41);
__webpack_require__(36);
__webpack_require__(37);
__webpack_require__(47);
__webpack_require__(53);
__webpack_require__(49);
__webpack_require__(51);
__webpack_require__(48);
__webpack_require__(50);
__webpack_require__(64);
__webpack_require__(56);
__webpack_require__(58);
__webpack_require__(62);
__webpack_require__(52);
__webpack_require__(65);
__webpack_require__(54);
__webpack_require__(46);
__webpack_require__(63);
__webpack_require__(60);
__webpack_require__(55);
__webpack_require__(61);
__webpack_require__(25);
__webpack_require__(28);
__webpack_require__(31);
__webpack_require__(30);
__webpack_require__(27);
__webpack_require__(26);
__webpack_require__(29);
__webpack_require__(68);
__webpack_require__(69);
__webpack_require__(70);
__webpack_require__(71);

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {


var path = __webpack_require__(5);
var util = __webpack_require__(3);
var object = __webpack_require__(2);

function isServer() {
  return ! (typeof window != 'undefined' && window.document);
}


if (isServer()) {
  var fs = __webpack_require__(77);
}


function _load_json (value, callback_success, callback_error){

  var output = null;
  var errors = [];

  if (value.constructor == String) {

    var filename, regex_data, init_property;
    regex_data = /^([^#]*)#?(.*)$/.exec(value);

    filename = regex_data[1];
    init_property = regex_data[2];
    utils.getInlineJson(filename, "json", _loadJson_data, function (error) {
      errors.push(error);
      if (callback_error) {
        callback_error(error)
      } else {
        console.error("file: \"" + filename + "\". " + error.message)
      }
    });
  } else {
    _loadJson_data(value);
  }

  function _loadJson_data(data) {
    /*
     замена записей "url(./path/to/file)  на "../../path/to/file"
     url начинающиеся с ./ относительно родителького json файла

     url с "/" добавляется APP_STATIC_PATH
     */
    utils.recoursive(data,
      function (property, value, parent) {
        if (/^url\(.*\)$/.test(value)) {
          var regex_data = /^url\((\.?\/)?(.*)\)$/.exec(value);
          var url = regex_data[2];

          if (regex_data[1] == "/") {
            url = window.APP_STATIC_PATH + url;
          }
          if (regex_data[1] == "./") {
            url = path.getParentDirectoryUrl(filename) + url;
          }

          parent[property] = path.resolve(url);
        }
      }
    );


    var loader = util.queueLoad(1, function finalize() {

      if (init_property) {
        var prop_arr = init_property.split("/");
        for (var i = 0; i < prop_arr.length; i++) {
          data = data[prop_arr[i]];
        }
      }

      if (errors.length) {
        if (callback_error) callback_error(errors);
      } else {
        if (callback_success) callback_success(data);
        output = data;
      }
    });

    /**
     * remove comments
     */
    utils.recoursive(data, function (property, value, parent) {
      /*
       remove comments like
       ["@comment()"]
       "@comment": {}
       */
      if (/^\/\/.*$/.test(value) || /^@comment\(.*\)$/.test(value) || property == "@comment") {
        if (parent.constructor == Array) {
          parent.splice(property, 1);
        } else {
          delete parent[property];
        }
      } else if (/^@extend.*$/.test(property)) {

        loader.total++;
        _load_json(value, function (data) {
          var ext_data = object.deepExtend(data, parent);
          object.deepExtend(parent, ext_data);
          delete parent["@extend"];
          loader();
        }, function (data, error) {
          errors.push(error);
          loader();
        });
      } else if (/^@extend\(.*\)$/.test(value)) {
        var _reg_data = /^@extend\((\.\/)?(.*)\)$/.exec(value);
        var url = _reg_data[2];
        if (_reg_data[1]) {
          url = path.getParentDirectoryUrl(filename) + url;
        }
        loader.total++;
        _load_json(url, function (data) {
          parent[property] = data;
          loader();
        }, function (data, error) {
          errors.push(error);
          loader();
        });
      } else if (/^@mixin\(.*\)$/.test(value)) {
        var _reg_data = /^@mixin\((\.\/)?(.*)\)$/.exec(value);
        var url = _reg_data[2];
        if (_reg_data[1]) {
          url = path.getParentDirectoryUrl(filename) + url;
        }
        loader.total++;
        _load_json(url, function (data) {
          if (parent.constructor == Array) {
            parent.splice(property, 1);
            for (var i in data) {
              parent.push(data[i])
            }
          } else {
            delete parent[property];
            for (var i in data) {
              parent[i] = data[i];
            }
          }
          loader();
        }, function (data, error) {
          errors.push(error);
          loader();
        });
      } else if (/^@load\((.*)\)$/.test(value)) {
        var _reg_data = /^@load\((\.?\/)?(.*)\)$/.exec(value);
        var url = _reg_data[2];
        if (_reg_data[1] == "/") {
          url = window.APP_STATIC_PATH + url;
        }
        if (_reg_data[1] == "./") {
          url = path.getParentDirectoryUrl(filename) + url;
        }

        loader.total++;
        utils.getInlineJson(url, "html", function (data) {
          parent[property] = data;
          loader();
        }, function (data, error) {
          errors.push(error);
          loader();
        });
      }

    });
    loader();

  }

  return output;
}

var utils = {
  CACHED_JSON : {},
  loadJsonSync: function(src){
    var data;
    _load_json(src,function(_data){
      data = _data;
    });
    return data;
  },

  /**
   позволяет использовать конструкции вида
   расширить данные из файла template.json
   "@extend" : "url(data/template.json)",
   "@extend" : "url(data/template.json#settings/stages)",

   //заменить строку наданные из файла
   "stages":       "url(data/template.json#settings/stages)",

   * @param filename
   * @param callback_success
   * @param callback_error
   */
  loadJson: function (value,resolve_cb,fail_cb) {
      return _load_json(value,function(data){
        resolve_cb && resolve_cb(data);
      },function(err){
        fail_cb && fail_cb(err);
      });
  },

  removeComments: function (str) {
    str = str.replace(/^\s*(\/\/.*|(?:\/\*[\s\S]*?)\*\/\s*)$/gm,"");
    return str;
  },
  /**
   *
   * @param object
   * @param criteria - выполнять функцию со всеми объектами
   */
  recoursive: function (object, criteria) {
    var readed = [];
    if (!object) return;
    return (function sub_recoursive(object) {
      if (readed.indexOf(object) != -1) {
        return;
      }
      readed.push(object);


      if (object instanceof Array) {
        for (var prop = object.length; prop--;) {
          if (object[prop] && (object[prop].constructor == Object || object[prop].constructor == Array)) {
            sub_recoursive(object[prop]);
          } else {
            var break_ = criteria(prop, object[prop], object);
          }
        }
      } else {
        for (var prop in object) {
          if (object[prop] && (object[prop].constructor == Object || object[prop].constructor == Array)) {
            sub_recoursive(object[prop]);
          } else {
            var break_ = criteria(prop, object[prop], object);
          }
        }
      }
    })(object);
  },

  parseCSV: function (data) {
    var rows = data.split(/\n/);
    var columns = rows[0].split(',');
    rows.splice(0, 1);

    for (var i = 0; i < rows.length; i++) {
      var output_row_data = {};
      var row_data = [];


      var _quote = false, last = -1;
      var j = -1;
      var str = rows[i];
      while (++j < str.length) {
        if (!_quote) {
          if (str[j] == '\'' || str[j] == '\"') {
            _quote = str[j];
          }
          if (str[j] == ",") {
            var _val = str.substring(last, j);
            if (_val[0] == '\"' && _val[_val.length - 1] == '\"') {
              _val = _val.substring(1, _val.length - 1);
            }
            row_data.push(_val);
            last = j + 1;
          }
        } else {
          if (str[j] == _quote) {
            _quote = false;
          }
        }
      }

      for (var j in row_data) {
        output_row_data[columns[j]] = row_data[j];
      }
      rows[i] = output_row_data;
    }
    return rows;
  },
  parseData: function (data, dataType) {
    var _parsed;
    if (dataType == "csv") {
      _parsed = utils.parseCSV(data);
    } else if (dataType == "json") {
      _parsed = data.trim();
      //if (data[0] != "{" && data[0] != "[") {
      //  return false;
      //}

      _parsed = utils.removeComments(_parsed);
      //data  = data.replace(/\n/g,"")

      try{
        var _parsed = JSON.parse(_parsed);//= JSON.parse(data.replace(/\/\*[\s\S]*?\*\/|\/\/.*/g,""));
      }catch(e){
        return {
          status: "error",
          message: e.toString(),
          data:  data
        };
      }
      //var script = $("<script type='text/json' id='" + url + "'>" + JSON.stringify(data) + "</script>");
    }
    return {
      status: "success",
      data: _parsed
    };
  },
  load: function (url, dataType, callback_success, callback_error) {
    //todo
    if (isServer()) {
      try {
        var data = fs.readFileSync(url, 'utf8');
        data = data.replace(/^\uFEFF/, '');
        var _parsed = utils.parseData(data, dataType);
        if(_parsed.status == "error"){
          callback_error({
            status:   "error",
            message:  _parsed.message,
            data:     _parsed.data
          });
          return;
        }
        callback_success(_parsed.data);
      } catch (e) {

        if (e.code === 'ENOENT') {
          console.log('File not found!');
        } else {
          throw e;
        }
        callback_error(data);
      }
    } else {

      var httpRequest = new XMLHttpRequest();

      httpRequest.onreadystatechange = function () {
        if (httpRequest.readyState === 4) {
          if (httpRequest.status === 200) {
            var data = httpRequest.responseText;
            var _parsed = utils.parseData(data, dataType);
            if(_parsed.status == "error"){
              callback_error({
                status: httpRequest.status,
                message:  _parsed.message,
                response: httpRequest.responseText
              });
              return;
            }
            callback_success(_parsed.data);
          } else {
            callback_error(url, httpRequest)
          }
        }
      };
      httpRequest.open('GET', url);
      httpRequest.send();
    }
  },
  /**
   * Позволяетзагружать json файлы , содержащие ссылки на другие json файлы.
   * вместо ссылок типа
   *  "property" : "url(chunk.json)"
   *  будет загружено содержимое файла
   *  "property" : {...}
   *
   *  если указать якорь
   *  "property" : "url(chunk.json#settings/chunk/0/text)"
   *
   * то будет загружено содержимое поля settings.chunk[0].text из файла chunk.json
   *
   *
   * @param filename  путь к основному json файлу
   * @param callback  будет вызван после окончания загрузки всех файлов
   */
  getInlineJson: function (url, dataType, callback_success, callback_error) {

    if (dataType.constructor != String) {
      callback_error = callback_success;
      callback_success = dataType;
      dataType = "json";
    }


    if (typeof utils.CACHED_JSON !== "undefined" && utils.CACHED_JSON && utils.CACHED_JSON[url]) {
      callback_success(utils.CACHED_JSON[url]);
      return;
    }
    if (typeof $ !== "undefined") {
      if (typeof document !== "undefined") {
        var inline = $("script[id='" + url + "']");
        if (inline.length > 0) {
          var _data =
            inline[0].innerText || //all
            inline[0].textContent || //firefox
            inline[0].text; //ie8
          if (dataType == "json") {

            var _data = utils.removeComments(_data);
            callback_success(JSON.parse(_data));
          } else {
            callback_success(_data);
          }
          return;
        }
      }
    }
    utils.load(url, dataType, callback_success, callback_error);
  }
};

module.exports = utils;


/***/ }),
/* 13 */
/***/ (function(module, exports) {



module.exports = {

  loadScript: function (requirement, helper, error) {
    var head = document.getElementsByTagName('head')[0];
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.onerror = error;
    script.onreadystatechange = function () {
      if (this.readyState == 'complete') {
        helper(script, __src);
      }
    };
    script.addEventListener("load", helper, true);
    script.src = requirement;
    head.appendChild(script);
  },
  scriptURL: function () {

    if (document.currentScript) {
      return document.currentScript.src;
    }
    var scripts = document.getElementsByTagName('script');
    for (var i = scripts.length - 1; i--;) {
      if (scripts[i].src) {
        return scripts[i].src;
      }
    }
    return false;
  }
};


/***/ }),
/* 14 */
/***/ (function(module, exports) {


var deepDiffMapper = {
  VALUE_CREATED: 'created',
  VALUE_UPDATED: 'updated',
  VALUE_DELETED: 'deleted',
  VALUE_UNCHANGED: 'unchanged',
  map: function(obj1, obj2) {
    if (this.isFunction(obj1) || this.isFunction(obj2)) {
      throw 'Invalid argument. Function given, object expected.';
    }
    if (this.isValue(obj1) || this.isValue(obj2)) {
      return {
        '_map_type': this.compareValues(obj1, obj2),
        '_map_data': (obj2 === undefined) ? obj1 : obj2
      };
    }


    if(_.isArray(obj2)){
      var _array = true;
      var diff = [];
    }else{
      var diff = {};
    }


    for (var key in obj1) {
      if (this.isFunction(obj1[key])) {
        continue;
      }

      var value2 = undefined;
      if ('undefined' != typeof(obj2[key])) {
        value2 = obj2[key];
      }

      diff[key] = this.map(obj1[key], value2);
    }
    for (var key in obj2) {
      if (this.isFunction(obj2[key]) || ('undefined' != typeof(diff[key]))) {
        continue;
      }

      var _val = this.map(undefined, obj2[key]);
      if(_array){
        diff.push(_val);
      }else{
        diff[key] = _val
      }
    }

    return {
      '_map_type': '',
      '_map_data': diff
    };

  },
  compareValues: function(value1, value2) {
    if (value1 === value2) {
      return this.VALUE_UNCHANGED;
    }
    if ('undefined' == typeof(value1)) {
      return this.VALUE_CREATED;
    }
    if ('undefined' == typeof(value2)) {
      return this.VALUE_DELETED;
    }

    return this.VALUE_UPDATED;
  },
  isFunction: function(obj) {
    return {}.toString.apply(obj) === '[object Function]';
  },
  isArray: function(obj) {
    return {}.toString.apply(obj) === '[object Array]';
  },
  isObject: function(obj) {
    return {}.toString.apply(obj) === '[object Object]';
  },
  isValue: function(obj) {
    return !this.isObject(obj) && !this.isArray(obj);
  }
};

module.exports = {
  differenceMap: deepDiffMapper.map.bind(deepDiffMapper),
  syntaxHighlight: function (json) {
    if (typeof json != 'string') {
      json = JSON.stringify(json, null, 2);
    }
    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

    json = json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
      var cls = 'number';
      if (/^"/.test(match)) {
        if (/:$/.test(match)) {
          cls = 'key';
        } else {
          cls = 'string';
        }
      } else if (/true|false/.test(match)) {
        cls = 'boolean';
      } else if (/null/.test(match)) {
        cls = 'null';
      }
      return '<span class="' + cls + '">' + match + '</span>';
    });
    return json = json.replace(/[^,\n][^\n]*/g, function (match) {
      return '<span>' + match + '</span>';
    });
  },
  differenceHighlight: function  (json,output){

    if(output){
      output.empty();
    }else{
      output = $("<pre>");
    }


    function printObject(json,level,output,comma,objectIndex){
      var _el = $("<p>");

      _el.append($("<span>").addClass("object-key").append(
        $("<span>").text(new Array(level).join(' ') )
      ));
      if(objectIndex){
        _el.append(
          $("<span>").text('"').addClass("invisible"),
          $("<span>").addClass("key").text(objectIndex),
          $("<span>").text('"').addClass("invisible"),
          $("<span>").text(': ')
        );
      }

      if(json && json._map_type !== undefined){
        _el.addClass(json._map_type);

        if(_.isArray(json._map_data)){
          _el.append($("<span>").text("["));
          var _last_key = json._map_data.length - 1;
          for(var i in json._map_data){
            printObject(json._map_data[i],level + 1,_el,i != _last_key);
          }
          _el.append($("<p>").text(new Array(level ).join(' ') + "]" + (comma ? "," : "")));
        }
        else if(_.isObject(json._map_data)){
          _el.append($("<span>").text("{"));
          var _last_key = Object.keys(json._map_data).pop();
          for(var i in json._map_data){
            printObject(json._map_data[i],level + 1,_el,i != _last_key,i);
          }
          _el.append($("<p>").text(new Array(level ).join(' ') + "}" + (comma ? "," : "")));
        }
        else{

          if(_.isNull(json._map_data)){
            _el.append(
              $("<span>").text(JSON.stringify(json._map_data, null, 2))
            );
          }
          else if(json._map_data.constructor === String ){
            _el.append(
              $("<span>").text('"'),
              $("<span>").addClass('string').text(json._map_data),
              $("<span>").text('"')
            );
          }
          else if(json._map_data.constructor === Number || json._map_data.constructor === Boolean){
            _el.append(
              $("<span>").addClass('number').text(json._map_data)
            );
          }
          else{
            _el.append(
              $("<span>").text(JSON.stringify(json._map_data, null, 2))
            );
          }
          if(comma){
            _el.append(
              $("<span>").text(",")
            );
          }


        }
      }else{
        _el.append(
          $("<span>").text(JSON.stringify(json, null, 2))
        )

        if(comma){
          _el.append(
            $("<span>").text(",")
          );
        }

      }

      output.append(_el);

    }
    printObject(json,1,output);
    return output;
  }
};



/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = function() {
	throw new Error("define cannot be used indirect");
};


/***/ }),
/* 16 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAyMiAyMiI+PGcgdHJhbnNmb3JtPSJtYXRyaXgoLjAzOTY1IDAgMCAuMDM5NjUgMS4xNjMgMS4xNjMpIiBmaWxsPSIjNGQ0ZDRkIj48cGF0aCBkPSJtMjUwLjIgODEuNjFjOTcuNDMgMCAxNzkuNzUgNDMuNDMgMTc5Ljc1IDk0LjgzIDAgMTIuNDQ5LTQuOTM0IDI0LjQ0OS0xMy42NDUgMzUuNDY1bDM1LjQwMiAxMC40MDRjOC42MTMtMTQuMjI3IDEzLjUzMy0yOS42MjkgMTMuNTMzLTQ1Ljg2OSAwLTcyLjk2NS05NC40Ni0xMzAuMTItMjE1LjA0LTEzMC4xMi0xMjAuNTcgMC0yMTUuMDQgNTcuMTYtMjE1LjA0IDEzMC4xMiAwIDI2LjkxOCAxMi45MzYgNTEuNjQzIDM1LjE5IDcyLjE3LTYuOTUxIDQuNTAyLTEzLjc1NiAxMC41MDItMTguODM2IDE4Ljk4NC0xMC40NTMgMTcuNDQ5LTEwLjY2IDM5LjA5LS42NDUgNjQuMzUgOS40MzMgMjMuNzkxIDcuMTI1IDMyLjU4MiA1LjY5MyAzNS4yNC0zLjM1NCA2LjMyMi0xOC4xMyA5LjUxNC0zMi4zODUgMTIuNTk2LTMuNDg2Ljc1OC03LjA0IDEuNTMxLTEwLjU4MiAyLjM3MS05LjQ4NCAyLjI0LTE1LjM1MyAxMS43MjUtMTMuMTMgMjEuMjMgMS45MDIgOC4xMTEgOS4xNjQgMTMuNTk2IDE3LjE2IDEzLjU5NiAxLjM0IDAgMi43MDktLjE2IDQuMDY4LS40NjcgMy4zMi0uNzkxIDYuNjU2LTEuNTE4IDkuOTMyLTIuMjI3IDIxLjExLTQuNTY0IDQ1LjAyLTkuNzQyIDU2LjA4LTMwLjQ4MiA4LjQ4Ni0xNS45MDIgNy4xOTUtMzYuNTE2LTQuMDMtNjQuODUtNS43MjUtMTQuNDM1LTYuMzg1LTI1LjU2NC0xLjk0Ny0zMy4xIDQuOTY1LTguNDUxIDE2LjE0LTEyLjIwNyAyMi4xOS0xMy40NjcgMzUuNzA1IDE5LjkwMiA4Mi44NSAzMi4zNTQgMTM1LjU5IDMzLjg2OWwtMTAuNTA0LTM1Ljc0Yy04Ny44Ny01Ljc1OC0xNTguNTYtNDYuNDUtMTU4LjU2LTk0LjA3LjAwMDEtNTEuNCA4Mi4zMi05NC44MyAxNzkuNzUtOTQuODMiLz48cGF0aCBkPSJtNDg3LjU3IDI2OS42M2wtMjIyLjA1LTY1LjI3Yy0xLjExNS0uMzM4LTIuMjQ0LS40ODItMy4zNzMtLjQ4Mi0zLjExMyAwLTYuMTU4IDEuMjI3LTguNDM0IDMuNS0zLjA5NiAzLjA4LTQuMjU4IDcuNjEzLTMuMDIgMTEuNzg5bDY1LjI3IDIyMi4xYzEuMzQgNC42MTMgNS4zNTIgNy45ODIgMTAuMTQzIDguNS40NTMuMDQ3Ljg5MS4wNjQgMS4zMjIuMDY0IDQuMzA5IDAgOC4zMDctMi4zMzggMTAuNDM5LTYuMTYybDU0LjA4LTk4LjA0IDk4LjAzLTU0LjA5YzQuMjI1LTIuMzIyIDYuNjI5LTYuOTUxIDYuMS0xMS43MjctLjUxNC00Ljc4Ny0zLjg3NC04LjgwNS04LjUwMi0xMC4xNzYiLz48L2c+PC9zdmc+Cg=="

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48c3ZnIHdpZHRoPScxODhweCcgaGVpZ2h0PScxODhweCcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2aWV3Qm94PSIwIDAgMTAwIDEwMCIgcHJlc2VydmVBc3BlY3RSYXRpbz0ieE1pZFlNaWQiIGNsYXNzPSJ1aWwtc3BpbiI+PHJlY3QgeD0iMCIgeT0iMCIgd2lkdGg9IjEwMCIgaGVpZ2h0PSIxMDAiIGZpbGw9Im5vbmUiIGNsYXNzPSJiayI+PC9yZWN0PjxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKDUwIDUwKSI+PGcgdHJhbnNmb3JtPSJyb3RhdGUoMCkgdHJhbnNsYXRlKDM0IDApIj48Y2lyY2xlIGN4PSIwIiBjeT0iMCIgcj0iOCIgZmlsbD0iI2NmZmZkZiI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT0ib3BhY2l0eSIgZnJvbT0iMSIgdG89IjAuMSIgYmVnaW49IjBzIiBkdXI9IjFzIiByZXBlYXRDb3VudD0iaW5kZWZpbml0ZSI+PC9hbmltYXRlPjxhbmltYXRlVHJhbnNmb3JtIGF0dHJpYnV0ZU5hbWU9InRyYW5zZm9ybSIgdHlwZT0ic2NhbGUiIGZyb209IjEuNSIgdG89IjEiIGJlZ2luPSIwcyIgZHVyPSIxcyIgcmVwZWF0Q291bnQ9ImluZGVmaW5pdGUiPjwvYW5pbWF0ZVRyYW5zZm9ybT48L2NpcmNsZT48L2c+PGcgdHJhbnNmb3JtPSJyb3RhdGUoNDUpIHRyYW5zbGF0ZSgzNCAwKSI+PGNpcmNsZSBjeD0iMCIgY3k9IjAiIHI9IjgiIGZpbGw9IiNjZmZmZGYiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9Im9wYWNpdHkiIGZyb209IjEiIHRvPSIwLjEiIGJlZ2luPSIwLjEycyIgZHVyPSIxcyIgcmVwZWF0Q291bnQ9ImluZGVmaW5pdGUiPjwvYW5pbWF0ZT48YW5pbWF0ZVRyYW5zZm9ybSBhdHRyaWJ1dGVOYW1lPSJ0cmFuc2Zvcm0iIHR5cGU9InNjYWxlIiBmcm9tPSIxLjUiIHRvPSIxIiBiZWdpbj0iMC4xMnMiIGR1cj0iMXMiIHJlcGVhdENvdW50PSJpbmRlZmluaXRlIj48L2FuaW1hdGVUcmFuc2Zvcm0+PC9jaXJjbGU+PC9nPjxnIHRyYW5zZm9ybT0icm90YXRlKDkwKSB0cmFuc2xhdGUoMzQgMCkiPjxjaXJjbGUgY3g9IjAiIGN5PSIwIiByPSI4IiBmaWxsPSIjY2ZmZmRmIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPSJvcGFjaXR5IiBmcm9tPSIxIiB0bz0iMC4xIiBiZWdpbj0iMC4yNXMiIGR1cj0iMXMiIHJlcGVhdENvdW50PSJpbmRlZmluaXRlIj48L2FuaW1hdGU+PGFuaW1hdGVUcmFuc2Zvcm0gYXR0cmlidXRlTmFtZT0idHJhbnNmb3JtIiB0eXBlPSJzY2FsZSIgZnJvbT0iMS41IiB0bz0iMSIgYmVnaW49IjAuMjVzIiBkdXI9IjFzIiByZXBlYXRDb3VudD0iaW5kZWZpbml0ZSI+PC9hbmltYXRlVHJhbnNmb3JtPjwvY2lyY2xlPjwvZz48ZyB0cmFuc2Zvcm09InJvdGF0ZSgxMzUpIHRyYW5zbGF0ZSgzNCAwKSI+PGNpcmNsZSBjeD0iMCIgY3k9IjAiIHI9IjgiIGZpbGw9IiNjZmZmZGYiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9Im9wYWNpdHkiIGZyb209IjEiIHRvPSIwLjEiIGJlZ2luPSIwLjM3cyIgZHVyPSIxcyIgcmVwZWF0Q291bnQ9ImluZGVmaW5pdGUiPjwvYW5pbWF0ZT48YW5pbWF0ZVRyYW5zZm9ybSBhdHRyaWJ1dGVOYW1lPSJ0cmFuc2Zvcm0iIHR5cGU9InNjYWxlIiBmcm9tPSIxLjUiIHRvPSIxIiBiZWdpbj0iMC4zN3MiIGR1cj0iMXMiIHJlcGVhdENvdW50PSJpbmRlZmluaXRlIj48L2FuaW1hdGVUcmFuc2Zvcm0+PC9jaXJjbGU+PC9nPjxnIHRyYW5zZm9ybT0icm90YXRlKDE4MCkgdHJhbnNsYXRlKDM0IDApIj48Y2lyY2xlIGN4PSIwIiBjeT0iMCIgcj0iOCIgZmlsbD0iI2NmZmZkZiI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT0ib3BhY2l0eSIgZnJvbT0iMSIgdG89IjAuMSIgYmVnaW49IjAuNXMiIGR1cj0iMXMiIHJlcGVhdENvdW50PSJpbmRlZmluaXRlIj48L2FuaW1hdGU+PGFuaW1hdGVUcmFuc2Zvcm0gYXR0cmlidXRlTmFtZT0idHJhbnNmb3JtIiB0eXBlPSJzY2FsZSIgZnJvbT0iMS41IiB0bz0iMSIgYmVnaW49IjAuNXMiIGR1cj0iMXMiIHJlcGVhdENvdW50PSJpbmRlZmluaXRlIj48L2FuaW1hdGVUcmFuc2Zvcm0+PC9jaXJjbGU+PC9nPjxnIHRyYW5zZm9ybT0icm90YXRlKDIyNSkgdHJhbnNsYXRlKDM0IDApIj48Y2lyY2xlIGN4PSIwIiBjeT0iMCIgcj0iOCIgZmlsbD0iI2NmZmZkZiI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT0ib3BhY2l0eSIgZnJvbT0iMSIgdG89IjAuMSIgYmVnaW49IjAuNjJzIiBkdXI9IjFzIiByZXBlYXRDb3VudD0iaW5kZWZpbml0ZSI+PC9hbmltYXRlPjxhbmltYXRlVHJhbnNmb3JtIGF0dHJpYnV0ZU5hbWU9InRyYW5zZm9ybSIgdHlwZT0ic2NhbGUiIGZyb209IjEuNSIgdG89IjEiIGJlZ2luPSIwLjYycyIgZHVyPSIxcyIgcmVwZWF0Q291bnQ9ImluZGVmaW5pdGUiPjwvYW5pbWF0ZVRyYW5zZm9ybT48L2NpcmNsZT48L2c+PGcgdHJhbnNmb3JtPSJyb3RhdGUoMjcwKSB0cmFuc2xhdGUoMzQgMCkiPjxjaXJjbGUgY3g9IjAiIGN5PSIwIiByPSI4IiBmaWxsPSIjY2ZmZmRmIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPSJvcGFjaXR5IiBmcm9tPSIxIiB0bz0iMC4xIiBiZWdpbj0iMC43NXMiIGR1cj0iMXMiIHJlcGVhdENvdW50PSJpbmRlZmluaXRlIj48L2FuaW1hdGU+PGFuaW1hdGVUcmFuc2Zvcm0gYXR0cmlidXRlTmFtZT0idHJhbnNmb3JtIiB0eXBlPSJzY2FsZSIgZnJvbT0iMS41IiB0bz0iMSIgYmVnaW49IjAuNzVzIiBkdXI9IjFzIiByZXBlYXRDb3VudD0iaW5kZWZpbml0ZSI+PC9hbmltYXRlVHJhbnNmb3JtPjwvY2lyY2xlPjwvZz48ZyB0cmFuc2Zvcm09InJvdGF0ZSgzMTUpIHRyYW5zbGF0ZSgzNCAwKSI+PGNpcmNsZSBjeD0iMCIgY3k9IjAiIHI9IjgiIGZpbGw9IiNjZmZmZGYiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9Im9wYWNpdHkiIGZyb209IjEiIHRvPSIwLjEiIGJlZ2luPSIwLjg3cyIgZHVyPSIxcyIgcmVwZWF0Q291bnQ9ImluZGVmaW5pdGUiPjwvYW5pbWF0ZT48YW5pbWF0ZVRyYW5zZm9ybSBhdHRyaWJ1dGVOYW1lPSJ0cmFuc2Zvcm0iIHR5cGU9InNjYWxlIiBmcm9tPSIxLjUiIHRvPSIxIiBiZWdpbj0iMC44N3MiIGR1cj0iMXMiIHJlcGVhdENvdW50PSJpbmRlZmluaXRlIj48L2FuaW1hdGVUcmFuc2Zvcm0+PC9jaXJjbGU+PC9nPjwvZz48L3N2Zz4="

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIyNCIgaGVpZ2h0PSIyNCIgdmlld0JveD0iMCAwIDI0IDI0Ij48cGF0aCBkPSJNMjEuMTQzIDkuNjY3Yy0uNzMzLTEuMzkyLTEuOTE0LTMuMDUtMy42MTctNC43NTMtMi45NzctMi45NzgtNS40NzgtMy45MTQtNi43ODUtMy45MTQtLjQxNCAwLS43MDguMDk0LS44Ni4yNDZsLTEuMzYxIDEuMzZjLTEuODk5LS4yMzYtMy40Mi4xMDYtNC4yOTQuOTgzLS44NzYuODc1LTEuMTY0IDIuMTU5LS43OTIgMy41MjMuNDkyIDEuODA2IDIuMzA1IDQuMDQ5IDUuOTA1IDUuMzc1LjAzOC4zMjMuMTU3LjYzOC40MDUuODg1LjU4OC41ODggMS41MzUuNTg2IDIuMTIxIDBzLjU4OC0xLjUzMy4wMDItMi4xMTljLS41ODgtLjU4Ny0xLjUzNy0uNTg4LTIuMTIzLS4wMDFsLS4xNy4yNTZjLTIuMDMxLS43NjUtMy4zOTUtMS44MjgtNC4yMzItMi45bDMuODc5LTMuODc1Yy40OTYgMi43MyA2LjQzMiA4LjY3NiA5LjE3OCA5LjE3OGwtNy4xMTUgNy4xMDdjLS4yMzQuMTUzLTIuNzk4LS4zMTYtNi4xNTYtMy42NzUtMy4zOTMtMy4zOTMtMy4xNzUtNS4yNzEtMy4wMjctNS40OThsMS44NTktMS44NTZjLS40MzktLjM1OS0uOTI1LTEuMTAzLTEuMTQxLTEuNjg5bC0yLjEzNCAyLjEzMWMtLjQ0NS40NDYtLjY4NSAxLjA2NC0uNjg1IDEuODIgMCAxLjYzNCAxLjEyMSAzLjkxNSAzLjcxMyA2LjUwNiAyLjc2NCAyLjc2NCA1LjU4IDQuMjQzIDcuNDMyIDQuMjQzLjY0OCAwIDEuMTgtLjE5NSAxLjU0Ny0uNTYybDguMDg2LTguMDc4Yy45MS44NzQtLjc3OCAzLjUzOC0uNzc4IDQuNjQ4IDAgMS4xMDQuODk2IDEuOTk5IDIgMS45OTkgMS4xMDUgMCAyLS44OTYgMi0yIDAtMy4xODQtMS40MjUtNi44MS0yLjg1Ny05LjM0em0tMTYuMjA5LTUuMzcxYy41MjctLjUzIDEuNDcxLS43OTEgMi42NTYtLjc2MWwtMy4yMDkgMy4yMDZjLS4yMzYtLjk3OC0uMDQ5LTEuODQ1LjU1My0yLjQ0NXptOS4yOTIgNC4wNzlsLS4wMy0uMDI5Yy0xLjI5Mi0xLjI5Mi0zLjgwMy00LjM1Ni0zLjA5Ni01LjA2My43MTUtLjcxNSAzLjQ4OCAxLjUyMSA1LjA2MiAzLjA5Ni44NjIuODYyIDIuMDg4IDIuMjQ3IDIuOTM3IDMuNDU4LTEuNzE3LTEuMDc0LTMuNDkxLTEuNDY5LTQuODczLTEuNDYyeiIvPjwvc3ZnPg=="

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAANlAAADZQBELD/fAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAXPSURBVHic5dt/yF5lGQfwz7U555aatpEopk6yLba16IegDCk0C0kD2woJDZr9IbUg0zYi+yMSQvtFhhG1aOI/Of/QLLEgcggzzcpBc1CT2oqsXNhqsznbrv647xffPXuf7Xmec57z7p1fuDmcc+4f1/W9r3Of+1zXdSIzvRoQEfPxucz8/GHXXw0ERMRC/ARzM/Otk+/Nmh6RukNEXIgtuHiq+yc0ARHxNkX5i/rVOWEJiIgrsRln4Yl+9U5IAiLievwYp+Jb+Fi/uiccARGxDhsxR1n11+JQv/ondSXYuBERs/ANrMX/cGNmbjxWuxOCgIiYi3uxCvuwKjMfGaTtjCcgIs7Ag7gMz+OqzHxq0PYzmoCIOBePYCmexfsyc8cwfRyxCEbE4oh4bTsijg8RsRSPK8r/GpcOqzxTW8DVuDMi/oxt+F0t2/BMZr44stQtISIuU8z+DPxUeeb3jtRZZh5WcBr+hZyiHMQOPIDbcR2W4+TefsZVlIVuf5XnHswZoM2SWv/pI+71afDl2uAp3IwNym7qP32IeRnP4D58AR/EYsxuWfm1dRKyyhgDthuagLPxEg7g3EnXA4vwfqxXXj2/nTQjvWU/nq711td2iwYVvGfciUk5iLVDth+OgNpoQ230lQEGmF1n/NpqAfcpa8bLfYjZWy3q+9XCrsQ5ffqeU019gtDVI1hOXwL6+gMi4s1Vib14Q2bumbLiURARJ1dilmJZLUtxoam34S94ZeHdpjxW6ypBe/CBzNw8ghxLsB1bs8cfcCzmfqQwt77lZ3ke3o4bcAcexk5TW0viL1jeYLzhLaAytxKP4TlckJkHhmV/GETE6YqFTLaYebguM3c16Hc0C6jkPK6wt6ZNK+iyOIoFDPI5fEc93hIRMeosHK8YhIAH8XuFxavHK073OCYBmXkIX62nt45XnO4xqEfoHvwdKyPikjHK0zkGIiAz9+OuevrZ8YnTPYbxCd6tbIquiYg3jUmezjEwAZn5Ar5X29wyNok6xrBe4a8rDscbIuKsMcjTOYYioO7Gfoi5+NRYJOoYo8QF7qzHmyLi1DaFmQ4MTUBmbsXPcCZubF2ijjFqZGhie/zpiJjRnuWRCMjMn+M3OA8fblWijtEkNjixFszo7XETAjbhT1hRQ9EzEiMTkJkH8bV6OmO3x03D4xvwT1xeszFmHBoRkCVKdHc9nZFrQRsJEnfhv1gdERe00F+naExAZj6PHyixgZub9jcmLOp7pyWn4xuViM0+LDgOnKBzcAW+iT96xb0+eGRohEE31UFumyalX4ePKB9rexweV/iD4ta7dJwEXFwH+wfmdaT0RfgMHlU+0ydHsR9TXs9LjtpHywI9WgW4aUwKz8ZK5Vtke88s/xv3K9GmhQP32bKAV00yuVkt9XmakhOwEbt7lN6p5AG+14g5Cm0TEEpgM5WsjVH7OQ+fUPJ/Xpqk8CE8iduwohWZ2ySgCv/RKuwTQxL3TnxRySeYPMsv4iF8HGe3Lm+Lii/GGsVxOiH87VjWp/48JWHiO/hrj9LP4bu4BvPbVrpVAqri91fz7Bfe/iXeoiQur1HCbft66mzFl+rbZKgMkial0Q8TNT6wBQuUbJBf4RdKbtFyvBuX4BTl1TSrmjsl/WazkoPwUGbuHFmQJmg4+xML3r14TZ86c5Uc3omZ3oTVOL2rWR7LI6DsrxO7DGCySk5Q4orpVnpyafIxNBEY2ZWDPUfP1uOZDcZsHw0s4CQlofKgY8wq3qHEFQ/h/Ome9VYegarYJxWzPqCkvF2v5hXi9fgQvl2VHyjlbkYRUBW91ZGJkn8z9WvxXdOtcG9p5b/BiDhHcYa8R/ENzFd8hU8qi9/Cai3bMnNZ4wFbROs/TtZEqgWZubvn2g4lQfL8bJDy1jZa/2kqC3b3XlN2g7Ci7TGbYDr+GjtlGsbsi04IqP/1XF5Pt3cx5qDoygLWKRunLUoS9HGDrgjYo4TRVmXbq25D/B9PLfo3EMEZiwAAAABJRU5ErkJggg=="

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Font Selector - jQuery plugin 0.1
 *
 * Copyright (c) 2012 Chris Dyer
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following
 * conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions
 * and the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */



(function (factory) {
  if (true) {
    module.exports = factory(__webpack_require__(9));
  } else {
    factory(jQuery);
  }
}(
    function( $ ) {

  'use strict';
  //if(_ && _.styleSheetContains && !_.styleSheetContains('.fontSelect')){
  //  _.linkCSS(_.scriptURL() + "/../../css/jquery.fontSelector.css");
  //}

  var settings;

  var methods = {
    init : function(options) {

      settings = $.extend( {
        'hide_fallbacks' : false,
        'selected' : function(style) {},
        'opened' : function() {},
        'closed' : function() {},
        'initial' : '',
        'fonts' : []
      }, options);

      var root = this;
      var $root = $(this);
      root.selectedCallback = settings['selected'];
      root.openedCallback = settings['opened'];
      root.closedCallback = settings['closed'];
      var visible = false;
      var selected = false;
      var openedClass = 'fontSelectOpen';

      var displayName = function(font) {
        if (settings['hide_fallbacks']){
          var index = font.indexOf(',');
          if(index == -1 )return font;
          return font.substr(0, index);
        }else
          return font;
      }


      var select = function(font,initial) {
        root.find('span').html(displayName(font).replace(/["']{1}/gi,""));
        root.css('font-family', font);
        selected = font;

        if(!initial)root.selectedCallback(selected);
      }

      var positionUl = function() {
        var left, top;
        left = $(root).offset().left;
        top = $(root).offset().top + $(root).outerHeight();

        $(ul).css({
          'position': 'absolute',
          'left': left + 'px',
          'top': top + 'px',
          'width': $(root).outerWidth() + 'px'
        });
      }

      var closeUl = function() {
        ul.slideUp('fast', function() {
          visible = false;
        });

        $root.removeClass(openedClass);

        root.closedCallback();
      }

      var openUi = function() {
        ul.slideDown('fast', function() {
          visible = true;
        });

        $root.addClass(openedClass);

        root.openedCallback();
      }

      // Setup markup
      $root.prepend('<span>' + settings['initial'].replace(/'/g,'&#039;') + '</span>');
      var ul = $('<ul class="fontSelectUl"></ul>').appendTo('body');
      ul.hide();
      positionUl();

      for (var i = 0; i < settings['fonts'].length; i++) {
        var item = $('<li>' + displayName(settings['fonts'][i]) + '</li>').appendTo(ul);
        item.css('font-family', settings['fonts'][i]);
        item[0].data = settings['fonts'][i];
      }

      if (settings['initial'] != '')
        select(settings['initial'],true);

      ul.find('li').click(function() {

        if (!visible)
          return;

        positionUl();
        closeUl();

        select(this.data);
      });

      $root.click(function(event) {

        if (visible)
          return;

        event.stopPropagation();

        positionUl();
        openUi();
      });

      $('html').click(function() {
        if (visible)
        {
          closeUl();
        }
      })
    },
    selected : function() {
      return this.data;
    },
    select : function(font) {
      this.find('span').html(font.substr(0, font.indexOf(',')).replace(/["']{1}/gi,""));
      this.css('font-family', font);
      var selected = false;
      selected = font;
    }
  };
  $.fontSelector = {

  };

  $.fn.fontSelector = function(method) {
    if ( methods[method] ) {
      return methods[ method ].apply( this, Array.prototype.slice.call( arguments, 1 ));
    } else if ( typeof method === 'object' || ! method ) {
      return methods.init.apply( this, arguments );
    } else {
      $.error( 'Method ' +  method + ' does not exist on jQuery.fontSelector' );
    }
  }
}));


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * jQuery MiniColors: A tiny color picker built on jQuery
 *
 * Copyright: Cory LaViska for A Beautiful Site, LLC: http://www.abeautifulsite.net/
 *
 * Contribute: https://github.com/claviska/jquery-minicolors
 *
 * @license: http://opensource.org/licenses/MIT
 *
 */



(function (factory) {
  if (true) {
    module.exports = factory(__webpack_require__(9));
  } else {
    factory(jQuery);
  }
}(
  function ($) {

    'use strict';
    //if(_ && _.styleSheetContains && !_.styleSheetContains('.minicolors')){
    //  _.linkCSS(_.scriptURL() + "/../../css/jquery.minicolors.css");
    //}

    // Defaults
    $.minicolors = {
      defaults: {
        animationSpeed: 50,
        animationEasing: 'swing',
        change: null,
        changeDelay: 0,
        control: 'hue',
        dataUris: true,
        defaultValue: '',
        format: 'hex',
        hide: null,
        hideSpeed: 100,
        inline: false,
        keywords: '',
        letterCase: 'lowercase',
        opacity: false,
        position: 'bottom left',
        show: null,
        showSpeed: 100,
        theme: 'default',
        swatches: []
      }
    };

    // Public methods
    $.extend($.fn, {
      minicolors: function(method, data) {

        switch(method) {

          // Destroy the control
          case 'destroy':
            $(this).each( function() {
              destroy($(this));
            });
            return $(this);

          // Hide the color picker
          case 'hide':
            hide();
            return $(this);

          // Get/set opacity
          case 'opacity':
            // Getter
            if( data === undefined ) {
              // Getter
              return $(this).attr('data-opacity');
            } else {
              // Setter
              $(this).each( function() {
                updateFromInput($(this).attr('data-opacity', data));
              });
            }
            return $(this);

          // Get an RGB(A) object based on the current color/opacity
          case 'rgbObject':
            return rgbObject($(this), method === 'rgbaObject');

          // Get an RGB(A) string based on the current color/opacity
          case 'rgbString':
          case 'rgbaString':
            return rgbString($(this), method === 'rgbaString');

          // Get/set settings on the fly
          case 'settings':
            if( data === undefined ) {
              return $(this).data('minicolors-settings');
            } else {
              // Setter
              $(this).each( function() {
                var settings = $(this).data('minicolors-settings') || {};
                destroy($(this));
                $(this).minicolors($.extend(true, settings, data));
              });
            }
            return $(this);

          // Show the color picker
          case 'show':
            show( $(this).eq(0) );
            return $(this);

          // Get/set the hex color value
          case 'value':
            if( data === undefined ) {
              // Getter
              return $(this).val();
            } else {
              // Setter
              $(this).each( function() {
                if( typeof(data) === 'object' ) {
                  if( data.opacity ) {
                    $(this).attr('data-opacity', keepWithin(data.opacity, 0, 1));
                  }
                  if( data.color ) {
                    $(this).val(data.color);
                  }
                } else {
                  $(this).val(data);
                }
                updateFromInput($(this));
              });
            }
            return $(this);

          // Initializes the control
          default:
            if( method !== 'create' ) data = method;
            $(this).each( function() {
              init($(this), data);
            });
            return $(this);

        }

      }
    });

    var inputText, globalSettings, globalTarget , globalInput ;
    // Initialize input elements
    function init(input, settings) {

      var minicolors = $('<div class="minicolors" />'),
        defaults = $.minicolors.defaults,
        size,
        swatches,
        textPanel,
        swatch,
        panel,
        globalTarget = input,
        i;

      // Do nothing if already initialized
      if( input.data('minicolors-initialized') ) return;

      // Handle settings
      globalSettings = settings = $.extend(true, {}, defaults, settings);

      // The wrapper
      minicolors
        .addClass('minicolors-theme-' + settings.theme)
        .toggleClass('minicolors-with-opacity', settings.opacity)
        .toggleClass('minicolors-no-data-uris', settings.dataUris !== true);

      // Custom positioning
      if( settings.position !== undefined ) {
        $.each(settings.position.split(' '), function() {
          minicolors.addClass('minicolors-position-' + this);
        });
      }

      // Input size
      if( settings.format === 'rgb' ) {
        size = settings.opacity ? '25' : '20';
      } else {
        size = settings.keywords ? '11' : '7';
      }
       globalInput = input;
      // The input
      input
        .addClass('minicolors-input')
        .data('minicolors-initialized', false)
        .data('minicolors-settings', settings)
        .prop('size', size)
        .wrap(minicolors)
        .after(
        '<div class="minicolors-panel minicolors-slider-' + settings.control + '">' +
        '<div class="minicolors-slider minicolors-sprite">' +
        '<div class="minicolors-picker"></div>' +
        '</div>' +
        '<div class="minicolors-opacity-slider minicolors-sprite">' +
        '<div class="minicolors-picker"></div>' +
        '</div>' +
        '<div class="minicolors-grid minicolors-sprite">' +
        '<div class="minicolors-grid-inner"></div>' +
        '<div class="minicolors-picker"><div></div></div>' +
        '</div>' +
        '</div>'
      );

      // The swatch
      if( !settings.inline ) {
        input.after('<span class="minicolors-swatch minicolors-sprite minicolors-input-swatch"><span class="minicolors-swatch-color"></span></span>');
        input.next('.minicolors-input-swatch').on('click', function(event) {
          event.preventDefault();
          input.focus();
        });
      }

      // Prevent text selection in IE
      panel = input.parent().find('.minicolors-panel');
      panel.on('selectstart', function() { return false; }).end();

      // Swatches
      if (settings.swatches && settings.swatches.length !== 0) {
        if (settings.swatches.length > 7) {
          settings.swatches.length = 7;
        }
        panel.addClass('minicolors-with-swatches');
        swatches = $('<ul class="minicolors-swatches"></ul>')
          .appendTo(panel);
        for(i = 0; i < settings.swatches.length; ++i) {
          swatch = settings.swatches[i];
          swatch = isRgb(swatch) ? parseRgb(swatch, true) : hex2rgb(parseHex(swatch, true));
          $('<li class="minicolors-swatch minicolors-sprite"><span class="minicolors-swatch-color"></span></li>')
            .appendTo(swatches)
            .data('swatch-color', settings.swatches[i])
            .find('.minicolors-swatch-color')
            .css({
              backgroundColor: rgb2hex(swatch),
              opacity: swatch.a
            });
          settings.swatches[i] = swatch;
        }

      }


      // Swatches
      if (settings.text) {
        panel.addClass('minicolors-with-text');
        textPanel = $('<div class="minicolors-text"></div>')
          .appendTo(panel);
        inputText = $('<input type="text">')
          .appendTo(textPanel);

        $(inputText).change(function(){
          input.val(inputText.val());
          updateFromInput(input, true);
        })

      }

      // Inline controls
      if( settings.inline ) input.parent().addClass('minicolors-inline');

      updateFromInput(input, false);

      input.data('minicolors-initialized', true);

    }

    // Returns the input back to its original state
    function destroy(input) {

      var minicolors = input.parent();

      // Revert the input element
      input
        .removeData('minicolors-initialized')
        .removeData('minicolors-settings')
        .removeProp('size')
        .removeClass('minicolors-input');

      // Remove the wrap and destroy whatever remains
      minicolors.before(input).remove();

    }

    // Shows the specified dropdown panel
    function show(input) {

      var minicolors = input.parent(),
        panel = minicolors.find('.minicolors-panel'),
        settings = input.data('minicolors-settings');

      // Do nothing if uninitialized, disabled, inline, or already open
      if( !input.data('minicolors-initialized') ||
        input.prop('disabled') ||
        minicolors.hasClass('minicolors-inline') ||
        minicolors.hasClass('minicolors-focus')
      ) return;

      hide();

      minicolors.addClass('minicolors-focus');
      panel
        .stop(true, true)
        .fadeIn(settings.showSpeed, function() {
          if( settings.show ) settings.show.call(input.get(0));
        });

    }

    // Hides all dropdown panels
    function hide() {

      $('.minicolors-focus').each( function() {

        var minicolors = $(this),
          input = minicolors.find('.minicolors-input'),
          panel = minicolors.find('.minicolors-panel'),
          settings = input.data('minicolors-settings');

        panel.fadeOut(settings.hideSpeed, function() {
          if( settings.hide ) settings.hide.call(input.get(0));
          minicolors.removeClass('minicolors-focus');
        });

      });
    }

    // Moves the selected picker
    function move(target, event, animate) {

      var input =  target.parents('.minicolors').find('.minicolors-input'),
        settings = input.data('minicolors-settings'),
        picker = target.find('[class$=-picker]'),
        offsetX = target.offset().left,
        offsetY = target.offset().top,
        x = Math.round(event.pageX - offsetX),
        y = Math.round(event.pageY - offsetY),
        duration = animate ? settings.animationSpeed : 0,
        wx, wy, r, phi;

      // Touch support
      if( event.originalEvent.changedTouches ) {
        x = event.originalEvent.changedTouches[0].pageX - offsetX;
        y = event.originalEvent.changedTouches[0].pageY - offsetY;
      }

      // Constrain picker to its container
      if( x < 0 ) x = 0;
      if( y < 0 ) y = 0;
      if( x > target.width() ) x = target.width();
      if( y > target.height() ) y = target.height();

      // Constrain color wheel values to the wheel
      if( target.parent().is('.minicolors-slider-wheel') && picker.parent().is('.minicolors-grid') ) {
        wx = 75 - x;
        wy = 75 - y;
        r = Math.sqrt(wx * wx + wy * wy);
        phi = Math.atan2(wy, wx);
        if( phi < 0 ) phi += Math.PI * 2;
        if( r > 75 ) {
          r = 75;
          x = 75 - (75 * Math.cos(phi));
          y = 75 - (75 * Math.sin(phi));
        }
        x = Math.round(x);
        y = Math.round(y);
      }

      // Move the picker
      if( target.is('.minicolors-grid') ) {
        picker
          .stop(true)
          .animate({
            top: y + 'px',
            left: x + 'px'
          }, duration, settings.animationEasing, function() {
            updateFromControl(input, target);
          });
      } else {
        picker
          .stop(true)
          .animate({
            top: y + 'px'
          }, duration, settings.animationEasing, function() {
            updateFromControl(input, target);
          });
      }

    }

    // Sets the input based on the color picker values
    function updateFromControl(input, target) {

      function getCoords(picker, container) {

        var left, top;
        if( !picker.length || !container ) return null;
        left = picker.offset().left;
        top = picker.offset().top;

        return {
          x: left - container.offset().left + (picker.outerWidth() / 2),
          y: top - container.offset().top + (picker.outerHeight() / 2)
        };

      }

      var hue, saturation, brightness, x, y, r, phi,

        hex = input.val(),
        opacity = input.attr('data-opacity'),

      // Helpful references
        minicolors = input.parent(),
        settings = input.data('minicolors-settings'),
        swatch = minicolors.find('.minicolors-input-swatch'),

      // Panel objects
        grid = minicolors.find('.minicolors-grid'),
        slider = minicolors.find('.minicolors-slider'),
        opacitySlider = minicolors.find('.minicolors-opacity-slider'),

      // Picker objects
        gridPicker = grid.find('[class$=-picker]'),
        sliderPicker = slider.find('[class$=-picker]'),
        opacityPicker = opacitySlider.find('[class$=-picker]'),

      // Picker positions
        gridPos = getCoords(gridPicker, grid),
        sliderPos = getCoords(sliderPicker, slider),
        opacityPos = getCoords(opacityPicker, opacitySlider);

      // Handle colors
      if( target.is('.minicolors-grid, .minicolors-slider, .minicolors-opacity-slider') ) {

        // Determine HSB values
        switch(settings.control) {

          case 'wheel':
            // Calculate hue, saturation, and brightness
            x = (grid.width() / 2) - gridPos.x;
            y = (grid.height() / 2) - gridPos.y;
            r = Math.sqrt(x * x + y * y);
            phi = Math.atan2(y, x);
            if( phi < 0 ) phi += Math.PI * 2;
            if( r > 75 ) {
              r = 75;
              gridPos.x = 69 - (75 * Math.cos(phi));
              gridPos.y = 69 - (75 * Math.sin(phi));
            }
            saturation = keepWithin(r / 0.75, 0, 100);
            hue = keepWithin(phi * 180 / Math.PI, 0, 360);
            brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
            hex = hsb2hex({
              h: hue,
              s: saturation,
              b: brightness
            });

            // Update UI
            slider.css('backgroundColor', hsb2hex({ h: hue, s: saturation, b: 100 }));
            break;

          case 'saturation':
            // Calculate hue, saturation, and brightness
            hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);
            saturation = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
            brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
            hex = hsb2hex({
              h: hue,
              s: saturation,
              b: brightness
            });

            // Update UI
            slider.css('backgroundColor', hsb2hex({ h: hue, s: 100, b: brightness }));
            minicolors.find('.minicolors-grid-inner').css('opacity', saturation / 100);
            break;

          case 'brightness':
            // Calculate hue, saturation, and brightness
            hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);
            saturation = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
            brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
            hex = hsb2hex({
              h: hue,
              s: saturation,
              b: brightness
            });

            // Update UI
            slider.css('backgroundColor', hsb2hex({ h: hue, s: saturation, b: 100 }));
            minicolors.find('.minicolors-grid-inner').css('opacity', 1 - (brightness / 100));
            break;

          default:
            // Calculate hue, saturation, and brightness
            hue = keepWithin(360 - parseInt(sliderPos.y * (360 / slider.height()), 10), 0, 360);
            saturation = keepWithin(Math.floor(gridPos.x * (100 / grid.width())), 0, 100);
            brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
            hex = hsb2hex({
              h: hue,
              s: saturation,
              b: brightness
            });

            // Update UI
            grid.css('backgroundColor', hsb2hex({ h: hue, s: 100, b: 100 }));
            break;

        }

        // Handle opacity
        if( settings.opacity ) {
          opacity = parseFloat(1 - (opacityPos.y / opacitySlider.height())).toFixed(2);
        } else {
          opacity = 1;
        }

        updateInput(input, hex, opacity);
      }
      else {
        // Set swatch color
        swatch.find('span').css({
          backgroundColor: hex,
          opacity: opacity
        });

        // Handle change event
        doChange(input, hex, opacity);
      }
    }

    // Sets the value of the input and does the appropriate conversions
    // to respect settings, also updates the swatch
    function updateInput(input, value, opacity) {
      var rgb,

      // Helpful references
        minicolors = input.parent(),
        settings = input.data('minicolors-settings'),
        swatch = minicolors.find('.minicolors-input-swatch');

      if( settings.opacity ) input.attr('data-opacity', opacity);

      // Set color string
      if( settings.format === 'rgb' ) {
        // Returns RGB(A) string

        // Checks for input format and does the conversion
        if ( isRgb(value) ) {
          rgb = parseRgb(value, true);
        }
        else {
          rgb = hex2rgb(parseHex(value, true));
        }


        opacity = input.attr('data-opacity') === '' ? 1 : keepWithin( parseFloat( input.attr('data-opacity') ).toFixed(2), 0, 1 );
        if( isNaN( opacity ) || !settings.opacity ) opacity = 1;

        if( input.minicolors('rgbObject').a <= 1 && rgb && settings.opacity) {
          // Set RGBA string if alpha
          value = 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + parseFloat( opacity ) + ')';
        } else {
          // Set RGB string (alpha = 1)
          value = 'rgb(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ')';
        }
      } else {
        // Returns hex color

        // Checks for input format and does the conversion
        if ( isRgb(value) ) {
          value = rgbString2hex(value);
        }

        value = convertCase( value, settings.letterCase );
      }




      // Update value from picker
      //globalInput.val( value );
      input.val( value );

      if(inputText){
        inputText.val(value);
      }


      // Set swatch color
      swatch.find('span').css({
        backgroundColor: value,
        opacity: opacity
      });

      // Handle change event
      doChange(input, value, opacity);
    }

    // Sets the color picker values from the input
    function updateFromInput(input, preserveInputValue) {
     var  settings = globalSettings;
      var hex,
        hsb,
        opacity,
        keywords,
        alpha,
        value,
        x, y, r, phi,

      // Helpful references
        minicolors = input.parent(),
      //  settings = input.data('minicolors-settings'),
        swatch = minicolors.find('.minicolors-input-swatch'),

      // Panel objects
        grid = minicolors.find('.minicolors-grid'),
        slider = minicolors.find('.minicolors-slider'),
        opacitySlider = minicolors.find('.minicolors-opacity-slider'),

      // Picker objects
        gridPicker = grid.find('[class$=-picker]'),
        sliderPicker = slider.find('[class$=-picker]'),
        opacityPicker = opacitySlider.find('[class$=-picker]');

      // Determine hex/HSB values
      if( isRgb(input.val()) ) {
        // If input value is a rgb(a) string, convert it to hex color and update opacity
        hex = rgbString2hex(input.val());
        alpha = keepWithin(parseFloat(getAlpha(input.val())).toFixed(2), 0, 1);
        if( alpha ) {
          input.attr('data-opacity', alpha);
        }
      } else {
        hex = convertCase(parseHex(input.val(), true), settings.letterCase);
      }

      if( !hex ){
        hex = convertCase(parseInput(settings.defaultValue, true), settings.letterCase);
      }
      hsb = hex2hsb(hex);

      // Get array of lowercase keywords
      keywords = !settings.keywords ? [] : $.map(settings.keywords.split(','), function(a) {
        return $.trim(a.toLowerCase());
      });

      // Set color string
      if( input.val() !== '' && $.inArray(input.val().toLowerCase(), keywords) > -1 ) {
        value = convertCase(input.val());
      } else {
        value = isRgb(input.val()) ? parseRgb(input.val()) : hex;
      }

      // Update input value
      if( !preserveInputValue ){
        globalInput.val(value);

        inputText && inputText.val(value);
      }
      globalSettings = settings
      // Determine opacity value
      if( settings.opacity ) {
        // Get from data-opacity attribute and keep within 0-1 range
        opacity = input.attr('data-opacity') === '' ? 1 : keepWithin(parseFloat(input.attr('data-opacity')).toFixed(2), 0, 1);
        if( isNaN(opacity) ) opacity = 1;
        input.attr('data-opacity', opacity);
        swatch.find('span').css('opacity', opacity);

        // Set opacity picker position
        y = keepWithin(opacitySlider.height() - (opacitySlider.height() * opacity), 0, opacitySlider.height());
        opacityPicker.css('top', y + 'px');
      }

      // Set opacity to zero if input value is transparent
      if( input.val().toLowerCase() === 'transparent' ) {
        swatch.find('span').css('opacity', 0);
      }

      // Update swatch
      swatch.find('span').css('backgroundColor', hex);

      // Determine picker locations
      switch(settings.control) {

        case 'wheel':
          // Set grid position
          r = keepWithin(Math.ceil(hsb.s * 0.75), 0, grid.height() / 2);
          phi = hsb.h * Math.PI / 180;
          x = keepWithin(75 - Math.cos(phi) * r, 0, grid.width());
          y = keepWithin(75 - Math.sin(phi) * r, 0, grid.height());
          gridPicker.css({
            top: y + 'px',
            left: x + 'px'
          });

          // Set slider position
          y = 150 - (hsb.b / (100 / grid.height()));
          if( hex === '' ) y = 0;
          sliderPicker.css('top', y + 'px');

          // Update panel color
          slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: hsb.s, b: 100 }));
          break;

        case 'saturation':
          // Set grid position
          x = keepWithin((5 * hsb.h) / 12, 0, 150);
          y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());
          gridPicker.css({
            top: y + 'px',
            left: x + 'px'
          });

          // Set slider position
          y = keepWithin(slider.height() - (hsb.s * (slider.height() / 100)), 0, slider.height());
          sliderPicker.css('top', y + 'px');

          // Update UI
          slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: 100, b: hsb.b }));
          minicolors.find('.minicolors-grid-inner').css('opacity', hsb.s / 100);
          break;

        case 'brightness':
          // Set grid position
          x = keepWithin((5 * hsb.h) / 12, 0, 150);
          y = keepWithin(grid.height() - Math.ceil(hsb.s / (100 / grid.height())), 0, grid.height());
          gridPicker.css({
            top: y + 'px',
            left: x + 'px'
          });

          // Set slider position
          y = keepWithin(slider.height() - (hsb.b * (slider.height() / 100)), 0, slider.height());
          sliderPicker.css('top', y + 'px');

          // Update UI
          slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: hsb.s, b: 100 }));
          minicolors.find('.minicolors-grid-inner').css('opacity', 1 - (hsb.b / 100));
          break;

        default:
          // Set grid position
          x = keepWithin(Math.ceil(hsb.s / (100 / grid.width())), 0, grid.width());
          y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());
          gridPicker.css({
            top: y + 'px',
            left: x + 'px'
          });

          // Set slider position
          y = keepWithin(slider.height() - (hsb.h / (360 / slider.height())), 0, slider.height());
          sliderPicker.css('top', y + 'px');

          // Update panel color
          grid.css('backgroundColor', hsb2hex({ h: hsb.h, s: 100, b: 100 }));
          break;

      }

      // Fire change event, but only if minicolors is fully initialized
      if( input.data('minicolors-initialized') ) {
        doChange(input, value, opacity);
      }

    }

    // Runs the change and changeDelay callbacks
    function doChange(input, value, opacity) {

      var settings = input.data('minicolors-settings'),
        lastChange = input.data('minicolors-lastChange'),
        obj,
        sel,
        i;

      // Only run if it actually changed
      if( !lastChange || lastChange.value !== value || lastChange.opacity !== opacity ) {

        // Remember last-changed value
        input.data('minicolors-lastChange', {
          value: value,
          opacity: opacity
        });

        // Check and select applicable swatch
        if (settings.swatches && settings.swatches.length !== 0) {
          if(!isRgb(value)) {
            obj = hex2rgb(value);
          }
          else {
            obj = parseRgb(value, true);
          }
          sel = -1;
          for(i = 0; i < settings.swatches.length; ++i) {
            if (obj.r === settings.swatches[i].r && obj.g === settings.swatches[i].g && obj.b === settings.swatches[i].b && obj.a === settings.swatches[i].a) {
              sel = i;
              break;
            }
          }

          input.parent().find('.minicolors-swatches .minicolors-swatch').removeClass('selected');
          if (i !== -1) {
            input.parent().find('.minicolors-swatches .minicolors-swatch').eq(i).addClass('selected');
          }
        }

        // Fire change event
        if( settings.change ) {
          if( settings.changeDelay ) {
            // Call after a delay
            clearTimeout(input.data('minicolors-changeTimeout'));
            input.data('minicolors-changeTimeout', setTimeout( function() {
              settings.change.call(input.get(0), value, opacity);
            }, settings.changeDelay));
          } else {
            // Call immediately
            settings.change.call(input.get(0), value, opacity);
          }
        }
        input.trigger('change').trigger('input');
      }

    }

    // Generates an RGB(A) object based on the input's value
    function rgbObject(input) {
      var hex = parseHex($(input).val(), true),
        rgb = hex2rgb(hex),
        opacity = $(input).attr('data-opacity');
      if( !rgb ) return null;
      if( opacity !== undefined ) $.extend(rgb, { a: parseFloat(opacity) });
      return rgb;
    }

    // Generates an RGB(A) string based on the input's value
    function rgbString(input, alpha) {
      var hex = parseHex($(input).val(), true),
        rgb = hex2rgb(hex),
        opacity = $(input).attr('data-opacity');
      if( !rgb ) return null;
      if( opacity === undefined ) opacity = 1;
      if( alpha ) {
        return 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + parseFloat(opacity) + ')';
      } else {
        return 'rgb(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ')';
      }
    }

    // Converts to the letter case specified in settings
    function convertCase(string, letterCase) {
      return letterCase === 'uppercase' ? string.toUpperCase() : string.toLowerCase();
    }

    // Parses a string and returns a valid hex string when possible
    function parseHex(string, expand) {
      string = string.replace(/^#/g, '');
      if( !string.match(/^[A-F0-9]{3,6}/ig) ) return '';
      if( string.length !== 3 && string.length !== 6 ) return '';
      if( string.length === 3 && expand ) {
        string = string[0] + string[0] + string[1] + string[1] + string[2] + string[2];
      }
      return '#' + string;
    }

    // Parses a string and returns a valid RGB(A) string when possible
    function parseRgb(string, obj) {

      var values = string.replace(/[^\d,.]/g, ''),
        rgba = values.split(',');

      rgba[0] = keepWithin(parseInt(rgba[0], 10), 0, 255);
      rgba[1] = keepWithin(parseInt(rgba[1], 10), 0, 255);
      rgba[2] = keepWithin(parseInt(rgba[2], 10), 0, 255);
      if( rgba[3] ) {
        rgba[3] = keepWithin(parseFloat(rgba[3], 10), 0, 1);
      }

      // Return RGBA object
      if( obj ) {
        return {
          r: rgba[0],
          g: rgba[1],
          b: rgba[2],
          a: rgba[3] ? rgba[3] : null
        };
      }

      // Return RGBA string
      if( typeof(rgba[3]) !== 'undefined' && rgba[3] <= 1 ) {
        return 'rgba(' + rgba[0] + ', ' + rgba[1] + ', ' + rgba[2] + ', ' + rgba[3] + ')';
      } else {
        return 'rgb(' + rgba[0] + ', ' + rgba[1] + ', ' + rgba[2] + ')';
      }

    }

    // Parses a string and returns a valid color string when possible
    function parseInput(string, expand) {
      if( isRgb(string) ) {
        // Returns a valid rgb(a) string
        return parseRgb(string);
      } else {
        return parseHex(string, expand);
      }
    }

    // Keeps value within min and max
    function keepWithin(value, min, max) {
      if( value < min ) value = min;
      if( value > max ) value = max;
      return value;
    }

    // Checks if a string is a valid RGB(A) string
    function isRgb(string) {
      var rgb = string.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
      return (rgb && rgb.length === 4) ? true : false;
    }

    // Function to get alpha from a RGB(A) string
    function getAlpha(rgba) {
      rgba = rgba.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+(\.\d{1,2})?|\.\d{1,2})[\s+]?/i);
      return (rgba && rgba.length === 6) ? rgba[4] : '1';
    }

    // Converts an HSB object to an RGB object
    function hsb2rgb(hsb) {
      var rgb = {};
      var h = Math.round(hsb.h);
      var s = Math.round(hsb.s * 255 / 100);
      var v = Math.round(hsb.b * 255 / 100);
      if(s === 0) {
        rgb.r = rgb.g = rgb.b = v;
      } else {
        var t1 = v;
        var t2 = (255 - s) * v / 255;
        var t3 = (t1 - t2) * (h % 60) / 60;
        if( h === 360 ) h = 0;
        if( h < 60 ) { rgb.r = t1; rgb.b = t2; rgb.g = t2 + t3; }
        else if( h < 120 ) {rgb.g = t1; rgb.b = t2; rgb.r = t1 - t3; }
        else if( h < 180 ) {rgb.g = t1; rgb.r = t2; rgb.b = t2 + t3; }
        else if( h < 240 ) {rgb.b = t1; rgb.r = t2; rgb.g = t1 - t3; }
        else if( h < 300 ) {rgb.b = t1; rgb.g = t2; rgb.r = t2 + t3; }
        else if( h < 360 ) {rgb.r = t1; rgb.g = t2; rgb.b = t1 - t3; }
        else { rgb.r = 0; rgb.g = 0; rgb.b = 0; }
      }
      return {
        r: Math.round(rgb.r),
        g: Math.round(rgb.g),
        b: Math.round(rgb.b)
      };
    }

    // Converts an RGB string to a hex string
    function rgbString2hex(rgb){
      rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
      return (rgb && rgb.length === 4) ? '#' +
      ('0' + parseInt(rgb[1],10).toString(16)).slice(-2) +
      ('0' + parseInt(rgb[2],10).toString(16)).slice(-2) +
      ('0' + parseInt(rgb[3],10).toString(16)).slice(-2) : '';
    }

    // Converts an RGB object to a hex string
    function rgb2hex(rgb) {
      var hex = [
        rgb.r.toString(16),
        rgb.g.toString(16),
        rgb.b.toString(16)
      ];
      $.each(hex, function(nr, val) {
        if (val.length === 1) hex[nr] = '0' + val;
      });
      return '#' + hex.join('');
    }

    // Converts an HSB object to a hex string
    function hsb2hex(hsb) {
      return rgb2hex(hsb2rgb(hsb));
    }

    // Converts a hex string to an HSB object
    function hex2hsb(hex) {
      var hsb = rgb2hsb(hex2rgb(hex));
      if( hsb.s === 0 ) hsb.h = 360;
      return hsb;
    }

    // Converts an RGB object to an HSB object
    function rgb2hsb(rgb) {
      var hsb = { h: 0, s: 0, b: 0 };
      var min = Math.min(rgb.r, rgb.g, rgb.b);
      var max = Math.max(rgb.r, rgb.g, rgb.b);
      var delta = max - min;
      hsb.b = max;
      hsb.s = max !== 0 ? 255 * delta / max : 0;
      if( hsb.s !== 0 ) {
        if( rgb.r === max ) {
          hsb.h = (rgb.g - rgb.b) / delta;
        } else if( rgb.g === max ) {
          hsb.h = 2 + (rgb.b - rgb.r) / delta;
        } else {
          hsb.h = 4 + (rgb.r - rgb.g) / delta;
        }
      } else {
        hsb.h = -1;
      }
      hsb.h *= 60;
      if( hsb.h < 0 ) {
        hsb.h += 360;
      }
      hsb.s *= 100/255;
      hsb.b *= 100/255;
      return hsb;
    }

    // Converts a hex string to an RGB object
    function hex2rgb(hex) {
      hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
      return {
        /* jshint ignore:start */
        r: hex >> 16,
        g: (hex & 0x00FF00) >> 8,
        b: (hex & 0x0000FF)
        /* jshint ignore:end */
      };
    }

    // Handle events
    $(document)
      // Hide on clicks outside of the control
      .on('mousedown.minicolors touchstart.minicolors', function(event) {
        if( !$(event.target).parents().add(event.target).hasClass('minicolors') ) {
          hide();
        }
      })
      // Start moving
      .on('mousedown.minicolors touchstart.minicolors', '.minicolors-grid, .minicolors-slider, .minicolors-opacity-slider', function(event) {
        var target = $(this);
        event.preventDefault();
        $(document).data('minicolors-target', target);
        move(target, event, true);
      })
      // Move pickers
      .on('mousemove.minicolors touchmove.minicolors', function(event) {
        var target = $(document).data('minicolors-target');
        if( target ) move(target, event);
      })
      // Stop moving
      .on('mouseup.minicolors touchend.minicolors', function() {
        $(this).removeData('minicolors-target');
      })
      // Selected a swatch
      .on('click.minicolors', '.minicolors-swatches li', function(event) {
        event.preventDefault();
        var target = $(this), input = target.parents('.minicolors').find('.minicolors-input'), color = target.data('swatch-color');
        updateInput(input, color, getAlpha(color));
        updateFromInput(input);
      })
      // Show panel when swatch is clicked
      .on('mousedown.minicolors touchstart.minicolors', '.minicolors-input-swatch', function(event) {
        var input = $(this).parent().find('.minicolors-input');
        event.preventDefault();
        if( input.parent().find('.minicolors-panel').css("display") !== "none"){
          //todo
          //hide();
        }else{
          show(input);
        }
      })
      // Show on focus
      .on('focus.minicolors', '.minicolors-input', function() {
        var input = $(this);
        if( !input.data('minicolors-initialized') ) return;
        show(input);
      })
      // Update value on blur
      .on('blur.minicolors', '.minicolors-input', function() {
        var input = $(this),
          settings = input.data('minicolors-settings'),
          keywords,
          hex,
          rgba,
          swatchOpacity,
          value;

        if( !input.data('minicolors-initialized') ) return;

        // Get array of lowercase keywords
        keywords = !settings.keywords ? [] : $.map(settings.keywords.split(','), function(a) {
          return $.trim(a.toLowerCase());
        });

        // Set color string
        if( input.val() !== '' && $.inArray(input.val().toLowerCase(), keywords) > -1 ) {
          value = input.val();
        } else {
          // Get RGBA values for easy conversion
          if( isRgb(input.val()) ) {
            rgba = parseRgb(input.val(), true);
          } else {
            hex = parseHex(input.val(), true);
            rgba = hex ? hex2rgb(hex) : null;
          }

          // Convert to format
          if( rgba === null ) {
            value = settings.defaultValue;
          } else if( settings.format === 'rgb' ) {
            value = settings.opacity ?
              parseRgb('rgba(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ',' + input.attr('data-opacity') + ')') :
              parseRgb('rgb(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ')');
          } else {
            value = rgb2hex(rgba);
          }
        }

        // Update swatch opacity
        swatchOpacity = settings.opacity ? input.attr('data-opacity') : 1;
        if( value.toLowerCase() === 'transparent' ) swatchOpacity = 0;
        input
          .closest('.minicolors')
          .find('.minicolors-input-swatch > span')
          .css('opacity', swatchOpacity);

        // Set input value
        input.val(value);

        // Is it blank?
        if( input.val() === '' ) input.val(parseInput(settings.defaultValue, true));

        // Adjust case
        input.val( convertCase(input.val(), settings.letterCase) );

      })
      // Handle keypresses
      .on('keydown.minicolors', '.minicolors-input', function(event) {
        var input = $(this);
        if( !input.data('minicolors-initialized') ) return;
        switch(event.keyCode) {
          case 9: // tab
            hide();
            break;
          case 13: // enter
          case 27: // esc
            hide();
            input.blur();
            break;
        }
      })
      // Update on keyup
      .on('keyup.minicolors', '.minicolors-input', function() {
        var input = $(this);
        if( !input.data('minicolors-initialized') ) return;
        updateFromInput(input, true);
      })
      // Update on paste
      .on('paste.minicolors', '.minicolors-input', function() {
        var input = $(this);
        if( !input.data('minicolors-initialized') ) return;
        setTimeout( function() {
          updateFromInput(input, true);
        }, 1);
      });

  }));


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.1.20150716
 *
 * By Eli Grey, http://eligrey.com
 * License: X11/MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */



var isLikelyNode = typeof Buffer !== 'undefined' && typeof window === 'undefined';



var saveAs = !isLikelyNode &&  (function(view) {
        "use strict";
        // IE <10 is explicitly unsupported
        if (typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
            return;
        }
        var
            doc = view.document
        // only get URL when necessary in case Blob.js hasn't overridden it yet
            , get_URL = function() {
                return view.URL || view.webkitURL || view;
            }
            , save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
            , can_use_save_link = "download" in save_link
            , click = function(node) {
                var event = new MouseEvent("click");
                node.dispatchEvent(event);
            }
            , webkit_req_fs = view.webkitRequestFileSystem
            , req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem
            , throw_outside = function(ex) {
                (view.setImmediate || view.setTimeout)(function() {
                    throw ex;
                }, 0);
            }
            , force_saveable_type = "application/octet-stream"
            , fs_min_size = 0
        // See https://code.google.com/p/chromium/issues/detail?id=375297#c7 and
        // https://github.com/eligrey/FileSaver.js/commit/485930a#commitcomment-8768047
        // for the reasoning behind the timeout and revocation flow
            , arbitrary_revoke_timeout = 500 // in ms
            , revoke = function(file) {
                var revoker = function() {
                    if (typeof file === "string") { // file is an object URL
                        get_URL().revokeObjectURL(file);
                    } else { // file is a File
                        file.remove();
                    }
                };
                if (view.chrome) {
                    revoker();
                } else {
                    setTimeout(revoker, arbitrary_revoke_timeout);
                }
            }
            , dispatch = function(filesaver, event_types, event) {
                event_types = [].concat(event_types);
                var i = event_types.length;
                while (i--) {
                    var listener = filesaver["on" + event_types[i]];
                    if (typeof listener === "function") {
                        try {
                            listener.call(filesaver, event || filesaver);
                        } catch (ex) {
                            throw_outside(ex);
                        }
                    }
                }
            }
            , auto_bom = function(blob) {
                // prepend BOM for UTF-8 XML and text/* types (including HTML)
                if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
                    return new Blob(["\ufeff", blob], {type: blob.type});
                }
                return blob;
            }
            , FileSaver = function(blob, name, no_auto_bom) {
                if (!no_auto_bom) {
                    blob = auto_bom(blob);
                }
                // First try a.download, then web filesystem, then object URLs
                var
                    filesaver = this
                    , type = blob.type
                    , blob_changed = false
                    , object_url
                    , target_view
                    , dispatch_all = function() {
                        dispatch(filesaver, "writestart progress write writeend".split(" "));
                    }
                // on any filesys errors revert to saving with object URLs
                    , fs_error = function() {
                        // don't create more object URLs than needed
                        if (blob_changed || !object_url) {
                            object_url = get_URL().createObjectURL(blob);
                        }
                        if (target_view) {
                            target_view.location.href = object_url;
                        } else {
                            var new_tab = view.open(object_url, "_blank");
                            if (new_tab == undefined && typeof safari !== "undefined") {
                                //Apple do not allow window.open, see http://bit.ly/1kZffRI
                                view.location.href = object_url
                            }
                        }
                        filesaver.readyState = filesaver.DONE;
                        dispatch_all();
                        revoke(object_url);
                    }
                    , abortable = function(func) {
                        return function() {
                            if (filesaver.readyState !== filesaver.DONE) {
                                return func.apply(this, arguments);
                            }
                        };
                    }
                    , create_if_not_found = {create: true, exclusive: false}
                    , slice
                    ;
                filesaver.readyState = filesaver.INIT;
                if (!name) {
                    name = "download";
                }
                if (can_use_save_link) {
                    object_url = get_URL().createObjectURL(blob);
                    save_link.href = object_url;
                    save_link.download = name;
                    setTimeout(function() {
                        click(save_link);
                        dispatch_all();
                        revoke(object_url);
                        filesaver.readyState = filesaver.DONE;
                    });
                    return;
                }
                // Object and web filesystem URLs have a problem saving in Google Chrome when
                // viewed in a tab, so I force save with application/octet-stream
                // http://code.google.com/p/chromium/issues/detail?id=91158
                // Update: Google errantly closed 91158, I submitted it again:
                // https://code.google.com/p/chromium/issues/detail?id=389642
                if (view.chrome && type && type !== force_saveable_type) {
                    slice = blob.slice || blob.webkitSlice;
                    blob = slice.call(blob, 0, blob.size, force_saveable_type);
                    blob_changed = true;
                }
                // Since I can't be sure that the guessed media type will trigger a download
                // in WebKit, I append .download to the filename.
                // https://bugs.webkit.org/show_bug.cgi?id=65440
                if (webkit_req_fs && name !== "download") {
                    name += ".download";
                }
                if (type === force_saveable_type || webkit_req_fs) {
                    target_view = view;
                }
                if (!req_fs) {
                    fs_error();
                    return;
                }
                fs_min_size += blob.size;
                req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
                    fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
                        var save = function() {
                            dir.getFile(name, create_if_not_found, abortable(function(file) {
                                file.createWriter(abortable(function(writer) {
                                    writer.onwriteend = function(event) {
                                        target_view.location.href = file.toURL();
                                        filesaver.readyState = filesaver.DONE;
                                        dispatch(filesaver, "writeend", event);
                                        revoke(file);
                                    };
                                    writer.onerror = function() {
                                        var error = writer.error;
                                        if (error.code !== error.ABORT_ERR) {
                                            fs_error();
                                        }
                                    };
                                    "writestart progress write abort".split(" ").forEach(function(event) {
                                        writer["on" + event] = filesaver["on" + event];
                                    });
                                    writer.write(blob);
                                    filesaver.abort = function() {
                                        writer.abort();
                                        filesaver.readyState = filesaver.DONE;
                                    };
                                    filesaver.readyState = filesaver.WRITING;
                                }), fs_error);
                            }), fs_error);
                        };
                        dir.getFile(name, {create: false}, abortable(function(file) {
                            // delete file if it already exists
                            file.remove();
                            save();
                        }), abortable(function(ex) {
                            if (ex.code === ex.NOT_FOUND_ERR) {
                                save();
                            } else {
                                fs_error();
                            }
                        }));
                    }), fs_error);
                }), fs_error);
            }
            , FS_proto = FileSaver.prototype
            , saveAs = function(blob, name, no_auto_bom) {
                return new FileSaver(blob, name, no_auto_bom);
            }
            ;
        // IE 10+ (native saveAs)
        if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
            return function(blob, name, no_auto_bom) {
                if (!no_auto_bom) {
                    blob = auto_bom(blob);
                }
                return navigator.msSaveOrOpenBlob(blob, name || "download");
            };
        }

        FS_proto.abort = function() {
            var filesaver = this;
            filesaver.readyState = filesaver.DONE;
            dispatch(filesaver, "abort");
        };
        FS_proto.readyState = FS_proto.INIT = 0;
        FS_proto.WRITING = 1;
        FS_proto.DONE = 2;

        FS_proto.error =
            FS_proto.onwritestart =
                FS_proto.onprogress =
                    FS_proto.onwrite =
                        FS_proto.onabort =
                            FS_proto.onerror =
                                FS_proto.onwriteend =
                                    null;

        return saveAs;
    }(
        typeof self !== "undefined" && self
        || typeof window !== "undefined" && window
        || this.content
    ));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== "undefined" && module.exports) {
    module.exports.saveAs = saveAs;
} else if (("function" !== "undefined" && __webpack_require__(15) !== null) && (__webpack_require__(16) != null)) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
        return saveAs;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/* Web Font Loader v1.6.26 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a,b){this.a=a;this.m=b||a;this.c=this.m.document}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&("style"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}
  function w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function y(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}
  function z(a){if("string"===typeof a.f)return a.f;var b=a.m.location.protocol;"about:"==b&&(b=a.a.location.protocol);return"https:"==b?"https:":"http:"}function ea(a){return a.m.location.hostname||a.a.location.hostname}
  function A(a,b,c){function d(){k&&e&&f&&(k(g),k=null)}b=t(a,"link",{rel:"stylesheet",href:b,media:"all"});var e=!1,f=!0,g=null,k=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error("Stylesheet failed to load");d()}):setTimeout(function(){e=!0;d()},0);u(a,"head",b)}
  function B(a,b,c,d){var e=a.c.getElementsByTagName("head")[0];if(e){var f=t(a,"script",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,"HEAD"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error("Script load timeout")))},d||5E3);return f}return null};function C(){this.a=0;this.c=null}function D(a){a.a++;return function(){a.a--;E(a)}}function F(a,b){a.c=b;E(a)}function E(a){0==a.a&&a.c&&(a.c(),a.c=null)};function G(a){this.a=a||"-"}G.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.a)};function H(a,b){this.c=a;this.f=4;this.a="n";var c=(b||"n4").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return I(a)+" "+(a.f+"00")+" 300px "+J(a.c)}function J(a){var b=[];a=a.split(/,\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['"]/g,"");-1!=d.indexOf(" ")||/^\d/.test(d)?b.push("'"+d+"'"):b.push(d)}return b.join(",")}function K(a){return a.a+a.f}function I(a){var b="normal";"o"===a.a?b="oblique":"i"===a.a&&(b="italic");return b}
  function ga(a){var b=4,c="n",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.m.document.documentElement;this.h=b;this.a=new G("-");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c("wf","loading")]);L(a,"loading")}function M(a){if(a.g){var b=y(a.f,a.a.c("wf","active")),c=[],d=[a.a.c("wf","loading")];b||c.push(a.a.c("wf","inactive"));w(a.f,c,d)}L(a,"inactive")}function L(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,K(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function N(a,b){this.c=a;this.f=b;this.a=t(this.c,"span",{"aria-hidden":"true"},this.f)}function O(a){u(a.c,"body",a.a)}function P(a){return"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+J(a.c)+";"+("font-style:"+I(a)+";font-weight:"+(a.f+"00")+";")};function Q(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}Q.prototype.start=function(){var a=this.c.m.document,b=this,c=q(),d=new Promise(function(d,e){function k(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(k,25)},function(){e()})}k()}),e=new Promise(function(a,d){setTimeout(d,b.f)});Promise.race([e,d]).then(function(){b.g(b.a)},function(){b.j(b.a)})};function R(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||"BESbswy";this.f={};this.w=e||3E3;this.u=f||null;this.o=this.j=this.h=this.g=null;this.g=new N(this.c,this.s);this.h=new N(this.c,this.s);this.j=new N(this.c,this.s);this.o=new N(this.c,this.s);a=new H(this.a.c+",serif",K(this.a));a=P(a);this.g.a.style.cssText=a;a=new H(this.a.c+",sans-serif",K(this.a));a=P(a);this.h.a.style.cssText=a;a=new H("serif",K(this.a));a=P(a);this.j.a.style.cssText=a;a=new H("sans-serif",K(this.a));a=
    P(a);this.o.a.style.cssText=a;O(this.g);O(this.h);O(this.j);O(this.o)}var S={D:"serif",C:"sans-serif"},T=null;function U(){if(null===T){var a=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);T=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return T}R.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f["sans-serif"]=this.o.a.offsetWidth;this.A=q();la(this)};
  function ma(a,b,c){for(var d in S)if(S.hasOwnProperty(d)&&b===a.f[S[d]]&&c===a.f[S[d]])return!0;return!1}function la(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f["sans-serif"])||(d=U()&&ma(a,b,c));d?q()-a.A>=a.w?U()&&ma(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):na(a):V(a,a.v)}function na(a){setTimeout(p(function(){la(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.o.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.o=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c("wf",a.c,K(a).toString(),"active")],[b.a.c("wf",a.c,K(a).toString(),"loading"),b.a.c("wf",a.c,K(a).toString(),"inactive")]);L(b,"fontactive",a);this.o=!0;oa(this)};
  W.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c("wf",a.c,K(a).toString(),"active")),d=[],e=[b.a.c("wf",a.c,K(a).toString(),"loading")];c||d.push(b.a.c("wf",a.c,K(a).toString(),"inactive"));w(b.f,d,e)}L(b,"fontinactive",a);oa(this)};function oa(a){0==--a.f&&a.j&&(a.o?(a=a.a,a.g&&w(a.f,[a.a.c("wf","active")],[a.a.c("wf","loading"),a.a.c("wf","inactive")]),L(a,"active")):M(a.a))};function pa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}pa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;qa(this,new ha(this.c,a),a)};
  function ra(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,k=d||null||{};if(0===c.length&&f)M(b.a);else{b.f+=c.length;f&&(b.j=f);var h,m=[];for(h=0;h<c.length;h++){var l=c[h],n=k[l.c],r=b.a,x=l;r.g&&w(r.f,[r.a.c("wf",x.c,K(x).toString(),"loading")]);L(r,"fontloading",x);r=null;null===X&&(X=window.FontFace?(x=/Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent))?42<parseInt(x[1],10):!0:!1);X?r=new Q(p(b.g,b),p(b.h,b),b.c,l,b.s,n):r=new R(p(b.g,b),p(b.h,b),b.c,l,b.s,a,
    n);m.push(r)}for(h=0;h<m.length;h++)m[h].start()}},0)}function qa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){ra(a,f,b,d,c)})};function sa(a,b){this.c=a;this.a=b}function ta(a,b,c){var d=z(a.c);a=(a.a.api||"fast.fonts.net/jsapi").replace(/^.*http(s?):(\/\/)?/,"");return d+"//"+a+"/"+b+".js"+(c?"?v="+c:"")}
  sa.prototype.load=function(a){function b(){if(f["__mti_fntLst"+d]){var c=f["__mti_fntLst"+d](),e=[],h;if(c)for(var m=0;m<c.length;m++){var l=c[m].fontfamily;void 0!=c[m].fontStyle&&void 0!=c[m].fontWeight?(h=c[m].fontStyle+c[m].fontWeight,e.push(new H(l,h))):e.push(new H(l))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.m;B(this.c,ta(c,d,e),function(e){e?a([]):(f["__MonotypeConfiguration__"+d]=function(){return c.a},b())}).id="__MonotypeAPIScript__"+
    d}else a([])};function ua(a,b){this.c=a;this.a=b}ua.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new C;b=0;for(c=d.length;b<c;b++)A(this.c,d[b],D(g));var k=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(":"),d[1])for(var h=d[1].split(","),m=0;m<h.length;m+=1)k.push(new H(d[0],h[m]));else k.push(new H(d[0]));F(g,function(){a(k,f)})};function va(a,b,c){a?this.c=a:this.c=b+wa;this.a=[];this.f=[];this.g=c||""}var wa="//fonts.googleapis.com/css";function xa(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(":");3==e.length&&a.f.push(e.pop());var f="";2==e.length&&""!=e[1]&&(f=":");a.a.push(e.join(f))}}
  function ya(a){if(0==a.a.length)throw Error("No fonts to load!");if(-1!=a.c.indexOf("kit="))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,"+"));b=a.c+"?family="+c.join("%7C");0<a.f.length&&(b+="&subset="+a.f.join(","));0<a.g.length&&(b+="&text="+encodeURIComponent(a.g));return b};function za(a){this.f=a;this.a=[];this.c={}}
  var Aa={latin:"BESbswy","latin-ext":"\u00e7\u00f6\u00fc\u011f\u015f",cyrillic:"\u0439\u044f\u0416",greek:"\u03b1\u03b2\u03a3",khmer:"\u1780\u1781\u1782",Hanuman:"\u1780\u1781\u1782"},Ba={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},Ca={i:"i",italic:"i",n:"n",normal:"n"},
    Da=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;
  function Ea(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(":"),e=d[0].replace(/\+/g," "),f=["n4"];if(2<=d.length){var g;var k=d[1];g=[];if(k)for(var k=k.split(","),h=k.length,m=0;m<h;m++){var l;l=k[m];if(l.match(/^[\w-]+$/)){var n=Da.exec(l.toLowerCase());if(null==n)l="";else{l=n[2];l=null==l||""==l?"n":Ca[l];n=n[1];if(null==n||""==n)n="4";else var r=Ba[n],n=r?r:isNaN(n)?"4":n.substr(0,1);l=[l,n].join("")}}else l="";l&&g.push(l)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(","):
    g,0<d.length&&(d=Aa[d[0]])&&(a.c[e]=d))}a.c[e]||(d=Aa[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new H(e,f[d]))}};function Fa(a,b){this.c=a;this.a=b}var Ga={Arimo:!0,Cousine:!0,Tinos:!0};Fa.prototype.load=function(a){var b=new C,c=this.c,d=new va(this.a.api,z(c),this.a.text),e=this.a.families;xa(d,e);var f=new za(e);Ea(f);A(c,ya(d),D(b));F(b,function(){a(f.a,f.c,Ga)})};function Ha(a,b){this.c=a;this.a=b}Ha.prototype.load=function(a){var b=this.a.id,c=this.c.m;b?B(this.c,(this.a.api||"https://use.typekit.net")+"/"+b+".js",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],k=b[f+1],h=0;h<k.length;h++)e.push(new H(g,k[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(m){}a(e)}},2E3):a([])};function Ia(a,b){this.c=a;this.f=b;this.a=[]}Ia.prototype.load=function(a){var b=this.f.id,c=this.c.m,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,k=c.fonts.length;g<k;++g){var h=c.fonts[g];d.a.push(new H(h.name,ga("font-weight:"+h.weight+";font-style:"+h.style)))}a(d.a)},B(this.c,z(this.c)+(this.f.api||"//f.fontdeck.com/s/css/js/")+ea(this.c)+"/"+b+".js",function(b){b&&a([])})):a([])};var Y=new pa(window);Y.a.c.custom=function(a,b){return new ua(b,a)};Y.a.c.fontdeck=function(a,b){return new Ia(b,a)};Y.a.c.monotype=function(a,b){return new sa(b,a)};Y.a.c.typekit=function(a,b){return new Ha(b,a)};Y.a.c.google=function(a,b){return new Fa(b,a)};var Z={load:p(Y.load,Y)}; true?!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){return Z}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):"undefined"!==typeof module&&module.exports?module.exports=Z:(window.WebFont=Z,window.WebFontConfig&&Y.load(window.WebFontConfig));}());


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {fabric.util.object.extend(fabric.BaseBrush.prototype, {
  useDrawingColor: true,
  setOptions: function (options) {
    for (var prop in options) {
      this[prop] = options[prop];
    }
  },
  type: "base-brush",
  initialize: function (canvas, options) {
    this.canvas = canvas;
    options = options || {};
    if(this.canvas.application) {
      this.canvas.application.fire("entity:created", {target: this, options: options})
    }
    this.setOptions(options);
  },
  convertColor: function (color, type) {
    type = type || "name";
    if (color instanceof Array) {
      if (type == "source") {
        return color;
      }
      color = "#" + fabric.Color.fromSource(color).toHex();
    }
    if (type == "hex" || type == "source") {
      if (fabric.Color.colorNameMap[color]) {
        color = fabric.Color.colorNameMap[color];
      }
      if (type == "source") {
        if (color == "transparent") {
          return [0, 0, 0, 0];
        }
        var _source = fabric.Color.fromHex(color).getSource()
        _source[3] *= 255;
        return _source;
      }
    }
    return color;
  },
  getColor: function (type) {
    var color = this.useDrawingColor && this.canvas.drawingColor || this.color;
    return this.convertColor(color, type);
  }
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {


fabric.MagicWand = __webpack_require__(8);

  /**
   * PencilBrush class
   * @class fabric.PencilBrush
   * @extends fabric.BaseBrush
   */
  fabric.PaintBucketBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {
    type: 'paint-bucket-brush',
    /**
     * Constructor
     * @param {fabric.Canvas} canvas
     * @return {fabric.PencilBrush} Instance of a pencil brush
     */
    initialize: function(canvas) {
      this.callSuper('initialize', canvas);
      this._points = [];
    },
    getTarget: function(){
      return this.canvas.drawingContext;
    },
    onMouseUp: function() {},
    onMouseMove: function() {},
    onMouseDown: function(pointer) {
      this._fill(pointer);
    },
    _fill: function(pointer){
      pointer = {
        x: Math.floor(pointer.x),
        y: Math.floor(pointer.y)
      };

      var info = this.getTarget().getImageData(0,0,this.getTarget().canvas.width,this.getTarget().canvas.height);

      fabric.MagicWand.floodFill(info, pointer.x , pointer.y, 1,{},null,function(mask){
        var _color = this.getColor('source');
        var _target = this.getTarget();
        var _w = mask.bounds.maxX - mask.bounds.minX + 1, _h = mask.bounds.maxY - mask.bounds.minY + 1;
        var oldImageData = _target.getImageData( mask.bounds.minX,mask.bounds.minY,_w, _h);

        mask.render(_target,{
          intersectionColor : _color,
          fill : _color,
          cache: false,
          left : mask.bounds.minX,
          top : mask.bounds.minY
        });

        this.canvas.fire("draw:after",{
          target: this.getTarget() ,
          redo: _target.getImageData( mask.bounds.minX,mask.bounds.minY,_w, _h),
          undo: oldImageData ,
          left : mask.bounds.minX,
          top : mask.bounds.minY,
          color: this.getColor().slice()
        });

        this.canvas.renderAll();
      }.bind(this));
    },
    getHistoryRecord: function(event) {

      return {
        canvas:   this.canvas,
        object:   event.target ,
        type:     "draw:bucket",
        left:     event.left ,
        top:      event.top ,
        undoData: event.undo,
        redoData: event.redo,
        color:    this.convertColor(event.color,"source"  ),
        undo: function(_action){
          _action.object.putImageData(_action.undoData, _action.left,_action.top);
          _action.canvas.renderAll();
        },
        redo: function(_action){
          _action.object.putImageData(_action.redoData, _action.left,_action.top);
          _action.canvas.renderAll();
        }
      }
    }
  });

fabric.SlideCanvas.prototype.drawingTools.PaintBucketBrush = {
  icon:  'data:image/svg+xml;base64,' + __webpack_require__(19),
  title: 'Bucket Brush'
};
fabric.SlideCanvas.prototype.activeDrawingTools.push("PaintBucketBrush");

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {


  /**
   * PencilBrush class
   * @class fabric.PencilBrush
   * @extends fabric.BaseBrush
   */
  fabric.PaintPenBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {
    type: 'paint-pen-brush',

    /**
     * Constructor
     * @param {fabric.Canvas} canvas
     * @return {fabric.PencilBrush} Instance of a pencil brush
     */
    initialize: function(canvas) {
      this.callSuper('initialize', canvas);
      this._points = [];
    },
    getTarget: function(){
      return this.canvas.drawingContext;
    },
    /**
     * Inovoked on mouse down
     * @param {Object} pointer
     */
    onMouseDown: function(pointer) {
      this._reset();
      this._fill(pointer);
    },

    /**
     * Inovoked on mouse move
     * @param {Object} pointer
     */
    onMouseMove: function(pointer) {
      this._fill(pointer);
    },
    /**
     * Invoked on mouse up
     */
    onMouseUp: function() {
      this.canvas.fire("draw:after",{
        target: this.getTarget() ,
        points: this._points.slice() ,
        color: this.getColor('source')
      });
    },
    _fill: function(pointer){
      pointer = {
        x: Math.floor(pointer.x),
        y: Math.floor(pointer.y)
      };

      if(_.findWhere(this._points,pointer)){
        return;
      }

      // this.getTarget().fillRect(pointer.x , pointer.y  ,1,1);
      var _data = this.getTarget().getImageData(pointer.x , pointer.y  ,1,1);
      pointer.color = Array.prototype.slice.call(_data.data);
      this._points.push(pointer);
      var _color = this.getColor('source');




      _data.data[0] = _color[0];
      _data.data[1] = _color[1];
      _data.data[2] = _color[2];
      _data.data[3] = _color[3];

      this.getTarget().putImageData(_data, pointer.x , pointer.y);
      this.canvas.renderAll();
    },
    undoPaintAction: function(_action){
      var ctx = _action.object;
      for(var i in _action.points){
        var _p  =_action.points[i], _c = _action.brush.getActionColor(_p.color);
        if(_c[3] == 0) {
          ctx.clearRect(_p.x,_p.y  ,1,1);
        }else{
          ctx.fillStyle = "rgba(" + _c[0] + "," + _c[1] + "," + _c[2] + "," + _c[3] +  ")";
          ctx.fillRect(_p.x,_p.y  ,1,1);
        }
      }
      _action.canvas.renderAll();
    },
    redoPaintAction: function(_action){

      var ctx = _action.object, _c = _action.brush.getActionColor(_action.color);
      var pts = _action.points;
      if(_c[3] == 0) {
        for(var i in pts){
          ctx.clearRect(pts[i].x,pts[i].y  ,1,1);
        }
      }else{
        ctx.fillStyle = "rgba(" + _c[0] + "," + _c[1] + "," + _c[2] + "," + _c[3] + ")";
        for(var i in pts){
          ctx.fillRect(pts[i].x,pts[i].y ,1,1);
        }
      }
      _action.canvas.renderAll();
    },
    /**
     * Clear points array and set contextTop canvas style.
     * @private
     */
    _reset: function() {
      this._points.length = 0;
      this.getTarget().fillStyle = this.color;
    },
    getHistoryRecord: function(event){

      return {
        canvas:   this.canvas,
        type:     "draw:pen",
        object:   event.target ,
        points:   event.points ,
        brush:   this,
        color:    event.color,
        undo:     this.undoPaintAction,
        redo:     this.redoPaintAction
      }
    }
  });

fabric.SlideCanvas.prototype.drawingTools.PaintPenBrush = {
  className: 'fa fa-paint-brush',
  title: 'Pen Brush'
};
fabric.SlideCanvas.prototype.activeDrawingTools.push("PaintPenBrush");

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {

fabric.PencilBrush.prototype.initialize = function(canvas) {
  this.callSuper('initialize', canvas);
  this._points = [ ];
};
fabric.PencilBrush.prototype.type = 'pencil-brush';

fabric.PencilBrush.prototype._render = function() {
  var ctx  = this.canvas.contextTop, v = this.canvas.viewportTransform, p1 = this._points[0], p2 = this._points[1];
  ctx.save();
  ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
  ctx.beginPath();
  ctx.lineWidth = 1 / this.canvas.viewportTransform[0];
  if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {
    p1.x -= 0.5 / this.canvas.viewportTransform[0];
    p2.x += 0.5 / this.canvas.viewportTransform[0];
  }
  ctx.moveTo(p1.x, p1.y);
  for (var i = 1, len = this._points.length; i < len; i++) {
    var midPoint = p1.midPointFrom(p2);
    ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);
    p1 = this._points[i];
    p2 = this._points[i + 1];
  }
  ctx.lineTo(p1.x, p1.y);
  ctx.stroke();
  ctx.restore();
};

fabric.PencilBrush.prototype.createPath = function(pathData) {
  var path = new fabric.Path(pathData, {
    stroke: this.getColor(),
    strokeWidth: this.width,
    application: this.canvas.application
  });
  if (this.shadow) {
    this.shadow.affectStroke = true;
    path.setShadow(this.shadow);
  }
  return path;
};
fabric.PencilBrush.prototype.minLength = 3;

fabric.PencilBrush.prototype.accuracy = 0;
fabric.PencilBrush.prototype._finalizeAndAddPath = function() {
  if(this._points.length < 2)return;
  var ctx = this.canvas.contextTop;
  ctx.closePath();
  this.canvas.clearContext(this.canvas.contextTop);
  if(this.accuracy){
    for(var i in this._points){
      this._points[i].x = +this._points[i].x.toFixed(this.accuracy);
      this._points[i].y = +this._points[i].y.toFixed(this.accuracy);
    }
    for(i = this._points.length - 1; i--; ){
      if(this._points[i].x == this._points[i + 1].x &&  this._points[i].y == this._points[i + 1].y){
        this._points.splice(i,1);
      }
    }
  }
  if(this._points.length < 2)return;
  var pathData = this.convertPointsToSVGPath(this._points).join('');
  if (this._points.length < this.minLength || pathData === 'M 0 0 Q 0 0 0 0 L 0 0') {
    return this.canvas.renderAll();
  }
  var path = this.createPath(pathData);
  this.canvas.add(path);
  path.setCoords();
  this._resetShadow();
  this.canvas.renderAll();
  this.canvas.fire('path:created', { path: path });
};


fabric.SlideCanvas.prototype.drawingTools.PencilBrush = {
  className: 'fa fa-pencil',
  title: 'Pencil Brush'
};
fabric.SlideCanvas.prototype.activeDrawingTools.push("PencilBrush");

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {

fabric.PointsBrush = fabric.util.createClass(fabric.BaseBrush, {
  type: "points-brush",
  maximumPoints : 0,
  initialize: function (canvas) {
    this.callSuper('initialize', canvas);
    this.reset();
  },
  currentPoint : 1,
  getPoints: function(){
    return fabric.util.object.where(this.canvas._objects,{type: "material-point"});
  },
  checkPosition: null,
  onMouseDown: function (pointer) {

  },
  onMouseMove: function (pointer) {
  },
  reset: function(){
  },
  onMouseUp: function (pointer) {
    var _points = this.getPoints();

    var pos = {
      left: pointer.x -0.5,
      top: pointer.y  -0.5,
    };

    var _correct = this.checkPosition ? this.checkPosition(pointer) : true ;

    if(!_correct){
      this.canvas.fire("point:rejected",{point : pointer});
      return;
    }

    if(this.maximumPoints && _points.length >= this.maximumPoints){
      if(this.currentPoint > this.maximumPoints){
        this.currentPoint = 1;
      }
      if(this.wholeCoordinates){
        pointer.x = Math.round(pointer.x) + 0.5;
        pointer.y = Math.round(pointer.y)  + 0.5;
      }

      var _obj = fabric.util.object.findWhere(_points,{number : this.currentPoint++});

      var states = {
        original : {
          left: _obj.left,
          top: _obj.top
        },
        modified:  {
          left: pointer.x - 0.5,
          top: pointer.y - 0.5
        }
      };

      _obj.set(states.modified).setCoords().fire("modified",{states: states});
      this.canvas.fire("object:modified",{target : _obj, states: states});
      this.canvas.setActiveObject(_obj);
      this.canvas.renderAll();
      return;
    }else{
      this.currentPoint = 1;
      while(fabric.util.object.findWhere(_points,{number : this.currentPoint})){
        this.currentPoint++;
      }
    }

    var _obj = new fabric.MaterialPoint({
      number: this.currentPoint ,
      application: this.canvas.application,
      left: pos.left,
      top: pos.top
    });

    this.currentPoint++;
    this.canvas.add(_obj);
    this.canvas.fire("point:created",{point : _obj})
    this.canvas.setActiveObject(_obj);
    this.canvas.renderAll();
  },
  _render: function () {
  }
});

fabric.SlideCanvas.prototype.drawingTools.PointsBrush = {
  className: 'fa fa-circle-o',
  title: 'Points Brush'
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {


  /**
   * PencilBrush class
   * @class fabric.RectangleBrush
   * @extends fabric.BaseBrush
   */
  fabric.PolygonBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.RectangleBrush.prototype */ {
    resultObjectType: "Polyline",
    type: "polygon-brush",
    virtualObject: false,
    maximumPoints : 0,
    individualDrawing: true,
    /**
     * Constructor
     * @param {fabric.Canvas} canvas
     * @return {fabric.RectangleBrush} Instance of a pencil brush
     */
    initialize: function (canvas) {
      this.callSuper('initialize', canvas);
      this.reset();
    },
    /**
     * Inovoked on mouse down
     * @param {Object} pointer
     */
    onMouseDown: function (pointer) {


      if(this.individualDrawing || !this.target){
        var _point = {x: pointer.x, y: pointer.y};
        this.points.push(_point);
        if(!this.virtualObject){
          this.target = this.canvas.createObject(
            fabric.util.object.extend({},
              this.resultObjectProperties, {
                type: this.resultObjectType,
                points: [_point],
                active: true
              }
            )
          );
        }
      }else{
        this._create_active_point(pointer);
      }

      if(this.virtualObject) {
        this._setBrushStyles();
        this._setShadow();
        this._render();
      }else{
        this.canvas.renderAll();
      }
    },

    _create_active_point: function (pointer) {
      var _point = {x: pointer.x, y: pointer.y};
      this.activePoint =  _point;
      this.activeTargetPoint =  {x: pointer.x - this.target.left, y : pointer.y - this.target.top};
      this.points.push(this.activePoint);
      this.target.addPoint(this.activeTargetPoint);
    },
    /**
     * Inovoked on mouse move
     * @param {Object} pointer
     */
    onMouseMove: function (pointer) {


      var _p =  {x: pointer.x - this.target.left, y : pointer.y - this.target.top};


      if(this.activePoint){
        this.activePoint.x = pointer.x;
        this.activePoint.y = pointer.y;
        var _order = this.target.points.length ;

        this.target.setPoint("p" + _order, {
          x : pointer.x - this.target.left,
          y : pointer.y - this.target.top
        });
      }else{
        var _dist = fabric.Point.prototype.distanceFrom.call(this.points[0],_p)
        if(_dist > 10){
          this._create_active_point(pointer);
        }
      }
      this.canvas.renderAll();
    },
    reset: function(){
      this.points = [];
      this.target = null;
      this.activePoint = null;
      this.activeTargetPoint = null;
    },
    /**
     * Invoked on mouse up
     */
    onMouseUp: function () {
      this.target.updateBbox();
      if(this.points.length == this.maximumPoints){
        this.reset();
      }
      this.activePoint = null;
      this.canvas.renderAll();
    },

    /**
     * Draw a smooth path on the topCanvas using quadraticCurveTo
     * @private
     */
    _render: function () {
      this.canvas.fire("before:brush:render",{target: this});

      var ctx = this.canvas.contextTop,
        v = this.canvas.viewportTransform;

      ctx.save();
      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);

      var _klass_proto = fabric[this.resultObjectType].prototype;

      ctx.lineWidth = _klass_proto.strokeWidth;
      ctx.strokeStyle = _klass_proto.stroke;
      ctx.fillStyle = _klass_proto.fill;

      ctx.beginPath();
      ctx.moveTo(this.points[0].x,this.points[0].y);
      for(var i = 1; i < this.points.length; i++){
        ctx.lineTo(this.points[i].x,this.points[i].y)
      }
      ctx.closePath();
      ctx.fill();
      ctx.stroke();
      ctx.restore();
      this.canvas.fire("brush:render",{target: this})
    },
    drawingLimits: null, /*{
      left: 0,
      width: 0,
      height: 0,
      top: 0
    },*/
    minHeight: 50,
    minWidth: 50,
    _checkRectangle: function(_rect){


      var dl = this.drawingLimits;
      if(dl && dl == "backgroundImage"){
        dl= this.canvas.backgroundImage;
      }

      _rect = {
        left: _rect.left,
        top: _rect.top,
        width: _rect.width,
        height: _rect.height,
      };

      _rect.left  -= fabric.Rect.prototype.strokeWidth / 2;
      _rect.top   -= fabric.Rect.prototype.strokeWidth / 2;

      if(dl){
        if(_rect.left + _rect.width < dl.left ||
          _rect.top  + _rect.height < dl.top ||
          _rect.left > dl.width ||
          _rect.top > dl.height){
          return false;
        }

        if(_rect.top < dl.top){
          _rect.height +=_rect.top ;
          _rect.top = dl.top;
        }
        if(_rect.left < dl.left){
          _rect.width += _rect.left;
          _rect.left = dl.left;
        }
      }

      if(this.minWidth && _rect.width < this.minWidth){
        _rect.width = this.minWidth;
      }
      if(this.minHeight && _rect.height < this.minHeight){
        _rect.height = this.minHeight;
      }


      if(dl) {
        var _xdiff = _rect.left + _rect.width - dl.width;
        if (_xdiff > 0) {
          _rect.width -= _xdiff;
          if (this.minWidth && _rect.width < this.minWidth) {
            _rect.left -= this.minWidth - _rect.width;
            _rect.width = this.minWidth;
          }
        }
        var _ydiff = _rect.top + _rect.height - dl.height;
        if (_ydiff > 0) {
          _rect.height -= _ydiff;
          if (this.minHeight && _rect.height < this.minHeight) {
            _rect.top -= this.minHeight - _rect.height;
            _rect.height = this.minHeight;
          }
        }
      }
      return _rect;
    },
    resultObjectProperties: {}
  });


fabric.SlideCanvas.prototype.drawingTools.PolygonBrush = {
  icon: 'data:image/png;base64,'+ __webpack_require__(20),
  title: 'Polygon Brush'
};
fabric.SlideCanvas.prototype.activeDrawingTools.push("PolygonBrush");



/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {


/**
 * PencilBrush class
 * @class fabric.RectangleBrush
 * @extends fabric.BaseBrush
 */
fabric.RectangleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.RectangleBrush.prototype */ {
  resultObjectType: "Rect",
  type: "rectangle-brush",
  /**
   * Constructor
   * @param {fabric.Canvas} canvas
   * @return {fabric.RectangleBrush} Instance of a pencil brush
   */
  initialize: function (canvas) {
    this.callSuper('initialize', canvas);
  },

  /**
   * Inovoked on mouse down
   * @param {Object} pointer
   */
  onMouseDown: function (pointer) {
    //prepare for drawing
    delete this.p2;

    this.p1 = new fabric.Point(pointer.x, pointer.y);
    this._setBrushStyles();
    this._setShadow();
    this.canvas.contextTop.moveTo(this.p1.x, this.p1.y);
    this._render();
  },

  /**
   * Inovoked on mouse move
   * @param {Object} pointer
   */
  onMouseMove: function (pointer) {

    this.p2 = new fabric.Point(pointer.x, pointer.y);

    if(this.drawingObject){
      var _rect = this._getRect();
      this.drawingObject.set(_rect);
      this.drawingObject.fire("scaling");
    }else{

      if (this.p1.x === this.p2.x && this.p1.y === this.p2.y) {
        delete this.p2;
      } else {

        if(this.resultObjectType){
          var _rect = this._getRect();
          this.drawingObject = this._createRectangle(_rect);
        }
      }
    }
    this.canvas.renderLayer("lower");
  },

  /**
   * Invoked on mouse up
   */
  onMouseUp: function () {
    if(this.drawingObject){
      var _rect = this._getRect();
      var _rect2 = this._checkRectangle(_rect);

      this.canvas.layers.lower.objects.splice(this.canvas.layers.lower.objects.indexOf(this.drawingObject), 1);

      this.drawingObject.set(_rect2);
      this.canvas.add(this.drawingObject);
      this.canvas.setActiveObject(this.drawingObject);
      this.drawingObject.setCoords();
      delete this.drawingObject;
    }
    this.canvas.renderAll();
    // this._finalizeAndAddPath();
  },

  /**
   * Draw a smooth path on the topCanvas using quadraticCurveTo
   * @private
   */
  _render: function () {
    this.canvas.fire("before:brush:render",{target: this})
    if (!this.p2) {
      return;
    }
    var ctx = this.canvas.contextTop,
      v = this.canvas.viewportTransform,
      p1 = this.p1,
      p2 = this.p2;

    ctx.save();
    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
    ctx.beginPath();
    if(this.application){
      var _klass_proto = this.application.getDefaultProperties(fabric[this.resultObjectType].prototype) || {};
      ctx.lineWidth = _klass_proto.strokeWidth;
      ctx.strokeStyle = _klass_proto.stroke;
      ctx.fillStyle = _klass_proto.fill;
    }

    var _rect = this._getRect();
    ctx.rect(_rect.left, _rect.top, _rect.width, _rect.height);

    ctx.fill();
    ctx.stroke();
    ctx.restore();
    this.canvas.fire("brush:render",{target: this})
  },
  _getRect: function () {

    var x1, x2, y1, y2;
    if (this.p1.x < this.p2.x) {
      x1 = this.p1.x, x2 = this.p2.x;
    } else {
      x2 = this.p1.x, x1 = this.p2.x;
    }
    if (this.p1.y < this.p2.y) {
      y1 = this.p1.y, y2 = this.p2.y;
    } else {
      y2 = this.p1.y, y1 = this.p2.y;
    }
    return {
      left: x1,
      top: y1,
      width: x2 - x1,
      height: y2 - y1
    };
  },
  drawingLimits: null, /*{
   left: 0,
   width: 0,
   height: 0,
   top: 0
   },*/
  minHeight: 50,
  minWidth: 50,
  _checkRectangle: function(_rect){


    var dl = this.drawingLimits;
    if(dl && dl == "backgroundImage"){
      dl= this.canvas.backgroundImage;
    }

    _rect = {
      left: _rect.left,
      top: _rect.top,
      width: _rect.width,
      height: _rect.height,
    };

    // _rect.left  -= fabric.Rect.prototype.strokeWidth / 2;
    // _rect.top   -= fabric.Rect.prototype.strokeWidth / 2;

    if(dl){
      if(_rect.left + _rect.width < dl.left ||
        _rect.top  + _rect.height < dl.top ||
        _rect.left > dl.width ||
        _rect.top > dl.height){
        return false;
      }

      if(_rect.top < dl.top){
        _rect.height +=_rect.top ;
        _rect.top = dl.top;
      }
      if(_rect.left < dl.left){
        _rect.width += _rect.left;
        _rect.left = dl.left;
      }
    }

    if(this.minWidth && _rect.width < this.minWidth){
      _rect.width = this.minWidth;
    }
    if(this.minHeight && _rect.height < this.minHeight){
      _rect.height = this.minHeight;
    }


    if(dl) {
      var _xdiff = _rect.left + _rect.width - dl.width;
      if (_xdiff > 0) {
        _rect.width -= _xdiff;
        if (this.minWidth && _rect.width < this.minWidth) {
          _rect.left -= this.minWidth - _rect.width;
          _rect.width = this.minWidth;
        }
      }
      var _ydiff = _rect.top + _rect.height - dl.height;
      if (_ydiff > 0) {
        _rect.height -= _ydiff;
        if (this.minHeight && _rect.height < this.minHeight) {
          _rect.top -= this.minHeight - _rect.height;
          _rect.height = this.minHeight;
        }
      }
    }
    return _rect;
  },
  _createRectangle: function(rect){
    this.canvas.setActiveObject(false);
    rect.active = true;
    rect.application = this.application;
    rect.canvas = this.canvas;
    var _object = fabric.util.createObject(this.resultObjectType,rect);
    this.canvas.layers.lower.objects.push(_object);
    _object.updateResponsiveBorder();
    this.canvas.renderAll();
    return _object;
  }

  /**
   * On mouseup after drawing the path on contextTop canvas
   * we use the points captured to create an new fabric rect object
   * and add it to the fabric canvas.
   */
  // _finalizeAndAddPath: function () {
  //
  //   if (!this.p2) {
  //     return false;
  //   }
  //   var ctx = this.canvas.contextTop;
  //   ctx.closePath();
  //
  //
  //   this.canvas.clearContext(this.canvas.contextTop);
  //   this._resetShadow();
  //
  //   // var _rect = this._getRect();
  //   var _rect2 = this._checkRectangle(_rect);
  //   if(_rect2){
  //     // if(this.resultObjectType){
  //     //   this._createRectangle(_rect2);
  //     // }
  //     this.canvas.fire('rect:created', {rect: _rect2, original: _rect});
  //   }else{
  //     this.canvas.fire('rect:rejected', {rect: _rect});
  //   }
  //   this.canvas.renderLayer(this.layers.lower);
  // }
});


fabric.SlideCanvas.prototype.drawingTools.RectangleBrush = {
  className: 'fa fa-pencil-square',
  title: 'select-brush'
};
fabric.SlideCanvas.prototype.activeDrawingTools.push("RectangleBrush");

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {

/**
 * # Application
 *
 * farbic.app function is the entry point of FabricJS application.
 * Application could be initialised with configuration object. Different extensions allows to initialize special application attributes such as *object prototypes*, *resizable canvas*, *available fonts*, etc.
 *
 * ### option: util
 * mediaRoot - root directory for all media files in fabric application
 *
 * ### option: resizable
 * makes canvas responsible. Canvas will be scaled to 100% of its container size
 *
 * ### option: onResize
 * function which override deafult canvas resize behavior.
 *
 * ### option: callback
 * function calls after canvas initialized
 *
 * ### option: initialize
 * function calls before canvas initialize
 *
 * @example
 *
 * new fabric.Application({
 *      resizable: true,
 *      onResize: function(){},
 *      util: {
 *        mediaRoot: '../../media/'
 *      },
 *      canvasContainer: "fiera-canvas",
 *      prototypes: {},
 *      objects: {},
 *      eventListeners: {},
 *      callback: function(){},
 *      initialize:  function(){}
 *      customPublicApplicationFunction: function(){},
 *      customPublicApplicationAttribute: value
 *  })
 *
 */

fabric.Application = function(options) {
  this.init(options);
};

fabric.Application.prototype = fabric.util.object.extend({},fabric.Observable,{


  defaultOptions: {
    /**
     * id of target canvas element
     */
    canvasContainer: null,

  },
  credentials: false,
  ready : false,
  canvasClass: 'Canvas',
  optionsOrder: [
    "canvasContainer",
    "*",
    "objects",
    "slide"
  ],
  plugins: {
    preloaders: [],
    configuration: [],
    canvas: []
  },
  /**
   * Additional Event Listeners couldbe used to detect activeobject changes
   *  - canvas:created
   *  - entity:load - Event fired on creation of every new fabric instance(canvas,brush,object)
   *
   *  @example
   *  'entity:load' : function(e){
   *     if(e.options.boxType == 'machine') {
   *       e.options.type = "machine-mask-rectangle";
   *     }
   *   }
   */
  eventListeners: {
    "canvas:created": [],
    "entity:created": [
      function(e){
        if(e.target.eventListeners){
          for(var i in e.target.eventListeners) {
            var _listeners = e.target.eventListeners[i];
            if(_listeners.constructor == Array){
              for (var j in _listeners) {
                e.target.on(i, _listeners[j]);
              }
            }else{
              e.target.on(i, _listeners);
            }
          }
        }

        if(e.options.eventListeners){
          for(var i in e.options.eventListeners){
            e.target.on(i,e.options.eventListeners[i]);
          }
        }
        delete e.options.eventListeners;

        if(e.target._default_event_listeners){
          for(var i in e.target._default_event_listeners){
            e.target.on(i,e.target._default_event_listeners[i]);
          }
        }
      }
    ]
  },
  onSlideLoaded: function () {},
  onCanvasCreated: function () {},
  callback: function () {},

  init: function(options){
    this.initEventListeners();
    options =  fabric.util.object.deepExtend({},this.defaultOptions ,options || {});

    this.fire("loading:begin",{options : options});

    this._options = options;


    $( document ).ready(function(){
      fabric.util.order([
        this.preloader,
        this.loadConfiguration,
    //    this.createApp,
        this.initOptions,
        this.initialize,
        this.onApplicationCreated,
        this.postloader,
        this.callback && function(){
          setTimeout(this.callback.bind(this),0);
        },
        function(){
          this.fire("ready");
        }.bind(this)
      ],this)
    }.bind(this))
  },
  onApplicationCreated: function(){
    this.ready = true;
    this.fire("loading:end",{});
  },
  setCredentials: function(credentials){
    if(credentials){
      console.info("%cFiera Canvas Editor%c by %cDenis Ponomarev%c %c%6$s%c / %c%9$s%c", "color: #ffa500", "color: #202020", "color: #2EC06C", "color: #202020", "color: #337ab7", "www.hometlt.ru", "color: #202020", "color: #337ab7", "ponomarevtlt@gmail.com", "color: #202020");
    }
  },
  initOptions: function (resolve,error) {
    this.set(this._options,resolve);
  },
  loadConfiguration: function (resolve,error) {
    if(!this._options.configuration){
      return resolve();
    }
    var _app = this;
    fabric.util.promise
      .map(
        this._options.configuration,
        function(value){
          return new Promise(function(resolve,fail) {
            fabric.util.data.loadJson(value,resolve,fail);
          });
        }
      )
      .then(function(results){
        fabric.util.object.extend(_app._options,results)
      })
      .then(resolve,error);
  },
  setCanvasContainer: function (canvasContainer) {
    this.canvasContainer = canvasContainer;

    if (canvasContainer.constructor == String) {
      var el = document.getElementById(canvasContainer);
    } else {
      el = canvasContainer;
    }
    this.canvas = new fabric[this.canvasClass](el, {application: this});
    // }else{
    //   this.canvas = new fabric[this.canvasClass]({application: this});
    // }

    this.fire("canvas:created");
    this.onCanvasCreated();
  },
  dispose: function(){
    this.canvas.dispose();
  },

  //--------------------------------------------------------------------------------------------------------------------
  // Event Listeners
  //--------------------------------------------------------------------------------------------------------------------

  setEventListeners: function(val){
    this.on(val);
  },
  initEventListeners: function(){
    if(!this.__eventListeners){
      this.__eventListeners = {};
    }
    for (var event in this.eventListeners) {
      if(!this.__eventListeners[event]){
        this.__eventListeners[event] = []
      }
      this.__eventListeners[event] = this.__eventListeners[event].concat (this.eventListeners[event]);
    }
  },

  //--------------------------------------------------------------------------------------------------------------------
  //
  __set : fabric.Object.prototype.__set,
  _setObject: fabric.Object.prototype._setObject,
  set: fabric.Object.prototype.set,
  setOptions: fabric.Object.prototype.setOptions,
  actions: {
    save: {
      title: "save project",
      className: 'fa fa-floppy-o',
      action: function () {
        var data = this.toObject();
        this.application.api.save(data);
      }
    }
  }
});

// fabric.Application.addPlugin = fabric.PluginsMixin.addPlugin.bind(fabric.Application);

fabric.app = function(options){
  return new fabric.Application(options);
};


/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {/**
 * # Prototypes

 Prototypes allows to define **prototypes** property in Application configuration.

 ```javascript
 Application ({
  prototypes: {
    ClassName: options
  }
 })
 ```

 If prototype is defined every new Object created by application will have this properties by default.

 ```javascript
   NewClass: {
    $super: "ParentClass",
    type: "new-class",
    \/*other properties and methods*\/
   }
  ```

 if property **type** of Object class is defined then every object be default will have this type.

 ```javascript
   Object: {
    type: "rectangle"
   }
 ...
 //rectangle will be created
 fabric.createObject({width:100, height: 100})
 ```
*/






fabric.util.object.extend(fabric.Application.prototype, {
  optionsOrder: (function(){
    var oo = fabric.Application.prototype.optionsOrder;
    oo.splice(oo.indexOf("canvasContainer"),0,"prototypes");
    return oo;
  })(),
  getDefaultProperties: function(proto){
    if(!this.prototypes)return;

    var klassname = fabric.util.string.capitalize(fabric.util.string.camelize(proto.type),true);

    var _protoProperties = proto.__proto__ && proto.__proto__.type && this.getDefaultProperties(proto.__proto__) || {};
    var _defaultProperties = fabric.util.object.clone(this.prototypes[klassname]);

    fabric.util.object.extend(_protoProperties,_defaultProperties);

    return _protoProperties;
  },
  /**
   * default prototypes propertes for objects
   */
  prototypes: {
    Object: {
      includeDefaultValues: false
    },
    Canvas: {
      includeDefaultValues: false
    }
  },
  setUtils: function (utilsOptions) {

    if(!utilsOptions){
      return;
    }
    fabric.util.object.extend(this.util || {},utilsOptions);

    if (this.options['util']) {
      fabric.util.object.extend(fabric.util, this.options['util']);
    }
    if (this.options['fabric']) {
      fabric.util.object.extend(fabric, this.options['fabric']);
    }
    delete this.options['fabric'];
    delete this.options['util'];
  },
  setPrototypes: function (prototypes) {

    var _prototypes = fabric.util.object.deepExtend({}, this.prototypes ,prototypes);

    this.prototypes = _prototypes;
    this.klasses = {};


    if(_prototypes.eventListeners){
      _prototypes.eventListeners.$extend = 'array';
    }

    for (var klassName in _prototypes) {
      var _proto = _prototypes[klassName];

      for (var j in _proto) {
        if (_proto[j] && _proto[j]["$extend"]) {
          var _extend = _proto[j]["$extend"];
          if( _extend == "array"){
            _proto[j] = fabric.util.object.extendArraysObject(fabric[klassName].prototype[j],_proto[j]);
          } else if( _extend == "deep"){
            _proto[j] = fabric.util.object.deepExtend(fabric[klassName].prototype[j],_proto[j]);
          }else{
            _proto[j] = fabric.util.object.extend(fabric[klassName].prototype[j],_proto[j]);
          }
          delete _proto[j]["$extend"];
        }
      }


      if(_proto["$super"]){
        var _superklass = fabric[_proto["$super"] || klassName] ;
        delete _proto["$super"];

        var _fromObject = _proto.fromObject || _superklass.fromObject ;
        delete _proto.fromObject;
        var _klass = this.klasses[klassName] = fabric.util.createClass(_superklass, _proto);
        _klass.fromObject = _fromObject.bind(_klass);
      }

    //   if (klassName.actions && _proto.actions.constructor == Function) {
    //     fabric[klassName].prototype.actions = _proto.actions.call(fabric[klassName].prototype)
    //   }
    }

    if (_prototypes.Application) {
      fabric.util.object.deepExtend(this, _prototypes.Application);
    }

    // delete this.options['prototypes'];

    if (this.actions && this.actions.constructor == Function) {
      this.actions = this.actions.call(this)
    }
  },

  eventListeners: fabric.util.object.extendArraysObject(fabric.Application.prototype.eventListeners, {
    "entity:created": function (e) {
      var target = e.target;

      target.application = this;
      fabric.util.object.defaults(e.options, this.getDefaultProperties(target, e.options));

      for (var key in e.options) {
        var value = e.options[key];
        if (key[0] == "+") {
          var _key = key.substr(1);
          var _arr = target.get(_key);
          if (_arr instanceof Array) {
            _arr = _arr.slice().concat(value);
          } else {
            _arr = fabric.util.object.extend({}, _arr, value);
          }
          e.options[_key] = _arr;
          delete e.options[key];
        }
      }

      delete e.options.type;
      delete e.options.application;
    }
  })
});



/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {
fabric.Slide = function(application, slide){


  if(fabric.isLikelyNode){
    // fabric.Canvas = fabric.SlideCanvas;
    var w = slide.slideWidth; //todo|| slide.template.width;
    var h = slide.slideHeight;//todo || slide.template.height;
    var zoom = fabric.SlideCanvas.prototype.zoom || 1;
    this.canvas = fabric.createCanvasForNode(w * zoom,h * zoom);
  }else{
    this.canvas =  new fabric.SlideCanvas({application: application, interactive: false});
  }

  this.object = slide;
 // this.data = slide.data;
  this.application = application;
  this.id = ++ fabric.Slide._slides_id_counter;
};

fabric.Slide.prototype = fabric.util.object.extend({},fabric.Observable,{
  title : 'Новый Слайд'
});

fabric.Slide._slides_id_counter = 1;


fabric.util.object.extend(fabric.Application.prototype, {
  defaultOptions: fabric.util.object.extend(fabric.Application.prototype.defaultOptions,{
    activeSlide: 0
  }),
  optionsOrder: (function(){
    var oo = fabric.Application.prototype.optionsOrder;
    oo.push("activeSlide","slides");
    return oo;
  })(),
  activeSlide: 0,
  /*initialize: function (options) {

   fabric.util.object.extend(this, {
   last_id: 1,
   scaleValue: 1,
   activeSlide: null,
   history: null,
   slides: [],
   canvas: null
   });

   this.aligmentLineX = false;
   this.aligmentLineY = false;

   fabric.util.object.extend(this,options);
   fabric.util.object.defaults(options,this.defultOptions);

   // this.setAccess(this.access);

   if(options.gridsnapper !== undefined) {
   this.gridsnapper = options.gridsnapper
   }
   if(options.history !== undefined) {
   this.history = options.history;
   }
   if(options.data){
   this.data = options.data;
   }
   if(this.history) {
   this.history = new History(this);
   this.history.application = this.application;
   }


   if(options.canvas){
   var _canvas = new fabric.SlideCanvas(document.getElementById(options.canvas));
   _canvas.application = this.application;
   _canvas.project = this;
   this.setCanvas(_canvas);
   }

   return this;
   },*/
  setSlides: function (slides) {
    slides = fabric.util.object.cloneDeep(slides);
    this.slides = [];

    if (this.canvas) {
      this.canvas._objects.length = 0;
    }

    slides.forEach(function(slide){
      this.addSlide(slide)
    }.bind(this));

    this.preload();
    this.lazyLoad();
  },
  setActiveSlide: function(slideId){
    // console.log("@#");
    return;

    if(this.canvas.processing)return;
    if(this.activeSlide === slide)return;

    this.fire("slide:change:begin", {canvas: this.canvas});
    if(this.activeSlide) {
      delete this.activeSlide.canvas.mirrorSlide;
    }

    this.processing =true;
    if (this.unloadUnactiveSlides && this.canvas && this.activeSlide) {
      delete this.activeSlide.canvas;
      this.activeSlide.fire("canvas:changed",{canvas: null});
      this.activeSlide.data = this.canvas.toObject();
      this.canvas.clear();
    }
    this.activeSlide = slide;
    this.activeSlide.canvas.mirrorSlide = this.canvas;



    var _this = this;
    this.canvas.processing = true;

    if(this.activeSlide.canvas.loaded){
      _this.canvas.mirror(_this.activeSlide.canvas);
      _this.canvas.processing = false;
      _this.canvas.renderAll();
      _this.fire("slide:changed", {canvas: _this.canvas});
      _this.lazyLoad();
    }else{

      // _this.canvas.fire("loading:begin",{type:"current" , target: _this.canvas});
      this.activeSlide.canvas.load(slide.object, function () {
        _this.canvas.mirror(_this.activeSlide.canvas);
        _this.canvas.processing = false;
        _this.canvas.renderAll();
        _this.fire("slide:changed", {canvas: _this.canvas});
        // _this.canvas.fire("loading:end",{type:"current" , target: _this.canvas});
        _this.lazyLoad();
      });
    }
  },
  unloadUnactiveSlides: false,
  lazyLoadEnabled: true,
  lazyLoad: function(){

    var app = this;
    if(this.lazyLoadEnabled){
      this.slides.forEach(function(slide){
        if(!slide.canvas.loaded && !slide.canvas.processing){
          slide.canvas.load(slide.object,function(){
            slide.fire("loaded");
            if(app.activeSlide == slide.id){
              this.setActiveSlide(slide);
            }

            app.fire("slide:loading:end", {target: this});

            for(var _s in app.slides){
              if(!app.slides[_s].canvas.loaded){
                return;
              }
            }
            app.fire("loading:end", {});
          }.bind(slide));
        }
      });
    }else{
      app.fire("loading:end",{});
    }
  },
  addSlide: function (options) {
    var slide = new fabric.Slide(this, options);
    this.slides.push(slide);
    return slide;
  },
  removeSlide: function (slide) {
    var _s = this.slides;
    var _curPos = _s.indexOf(slide);
    _s.splice(_curPos, 1);

    if(slide == this.activeSlide){
      delete this.activeSlide ;
    }
  },
  /**
   * move slide to another position
   * @param slide
   * @param newPosition
   */
  moveSlide: function (slide,newPosition) {
    var _s = this.slides;

    var _curPos = _s.indexOf(slide);
    newPosition = parseInt(newPosition);

    if (_curPos < newPosition) {
      _s.splice(_curPos, 1);
      _s.splice(newPosition,0, slide);
    } else {
      _s.splice(_curPos, 1);
      _s.splice(newPosition, 0, slide);
    }
  },
  /**
   * replace slide
   * @param slide
   * @param newPosition - position of the second slide
   */
  replaceSlide: function (slide,newPosition) {
    var _s = this.slides;
    var _replacedSlide = _s[newPosition];
    var _curPos = _s.indexOf(slide);
    if (_curPos < newPosition) {
      _s.splice(newPosition, 1, slide);
      _s.splice(_curPos, 1, _replacedSlide);
    } else {
      _s.splice(_curPos, 1, _replacedSlide);
      _s.splice(newPosition, 1, slide);
    }
  },

  preload: function(){
    for(var i in this.slides) {
      var _slide = this.slides[i];
      // _slide.canvas.preload(_slide.object, function () {
      //   _slide.fire("modified");
      // });
    }
  },

  setActiveSlideByIndex: function(index){
    this.setActiveSlide(this.slides[index])
  },
  setActiveSlideById: function(id){
    this.setActiveSlide(  fabric.util.object.findWhere(this.slides,{id: id}));
  },
  duplicateSlide: function (slideData) {
    slideData = slideData.canvas.toObject();
    var _slide = this.addSlide(slideData);
    _slide.canvas.load(_slide.object);
  },

  nextSlide: function () {
    var i = this.slides.indexOf(this.activeSlide);
    if (i < this.slides.length - 1) {
      this.setActiveSlide(i + 1);
    }
  },
  prevSlide: function () {
    var i = this.slides.indexOf(this.activeSlide);
    if (i > 0) {
      this.setActiveSlide(i - 1);
    }
  },
  gotoSlide: function (slide) {
    this.setActiveSlide(slide - 1);
  },
  nextSlideAvailable: function () {
    var i = this.slides.indexOf(this.activeSlide);
    return i < this.slides.length - 1
  },
  prevSlideAvailable: function () {
    var i = this.slides.indexOf(this.activeSlide);
    return i > 0
  },

});


fabric.util.object.extend(fabric.SlideCanvas.prototype, {
  /**
   * Copy the content of active slide to main canvas.
   * @param slide
   */
  mirror: function (slide) {
    this.discardActiveGroup();
    this.discardActiveObject();
    // this.slideWidth = slide.slideWidth;
    // this.slideHeight = slide.slideHeight;
    this.setOriginalSize({width: slide.originalWidth || slide.width, height: slide.originalHeight || slide.height})
    this.backgroundImage = slide.backgroundImage;

    if(this.resizable) {
      this.originalWidth  = slide.originalWidth;
      this.originalHeight  = slide.originalHeight ;
    }else{
      this.setWidth((slide.originalWidth || slide.width)* this.viewportTransform[0]);
      this.setHeight((slide.originalHeight || slide.height)  * this.viewportTransform[0]);
    }
    this._onResize();
    this.activeArea = slide.activeArea;
    this.originalSlide = slide;

    this.template = slide.template;
    this.offsets = slide.offsets;
    // this._objects = [];
    // this.layers = slide.layers;

    if(this.backgroundImage){
      this.backgroundImage.canvas = this;
    }
    //todo
    // if(this._backgroundLayer) {
    //   for (var i in this._backgroundLayer) {
    //     this._backgroundLayer[i].canvas = this;
    //     this._backgroundLayer[i].setCoords();
    //   }
    //   this.setActiveArea(true);
    // }cd fier

    for(var layerName in slide.layers) {
      this.layers[layerName].objects = [];
    }
    this._objects = this.layers.lower.objects;

    if(slide.layers) {
      for(var layerName in slide.layers){
        for (var i in slide.layers[layerName].objects) {
          this.add(slide.layers[layerName].objects[i]);
        }
        slide.layers[layerName].objects = this.layers[layerName].objects;
      }
      slide._objects = this._objects;
    }else{
      if(slide._objects) {
        for (var i in slide._objects) {
          this.add(slide._objects[i]);
        }
      }
      slide._objects = this._objects;
    }
    var _this = this;
    slide.on('object:added',function(e){
      _this.add(e.target);
    });
    this.fire('changed', {target: slide})
  },
  project: null,
  unique: false,
  required: false,
  stateProperties: ["unique","required"],
  removeSlide: function(){
    this.project.removeSlide(this)
  },
  duplicateSlide: function(){
    this.project.duplicateSlide(this)
  }
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {


if(!Object.values){
  Object.defineProperty(Object, 'values', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function(_object) {
      var _values = [];
      Object.keys(_object).forEach(function (key) {
        _values.push(_object[key]);
        // use val
      });
      return _values;
    }
  });
}


fabric.util.object.extend(fabric,{
  errors: []
});

fabric.util.order = function(_array,context ){
  (function _call(){
    if(!_array.length)return;
    var foo = _array.shift();
    if(foo){
      if(foo.length){
        foo.call(context,_call);
      }else{
        foo.call(context);
        _call();
      }
    }else{
      _call();
    }
  })()
};

fabric.util.promise = {
  map: function (data, foo) {

    if(data.constructor == Array){
      return Promise.all(data.map(foo))
        .then(function (results, error) {
          if (error) {
            return Promise.reject(error);
          }
          return Promise.resolve(results);
        })
    }

    var keys = Object.keys(data);
    var urls = Object.values(data);
    return Promise.all(urls.map(foo))
      .then(function (results, error) {
        if (error) {
          return Promise.reject(error);
        }
        var _map = {};

        for(var i = 0 ; i < results.length; i++){
          _map[keys[i]] = results[i];
        }
        return Promise.resolve(_map);
      })
  },
  wrap: function (context) {
    return function wrap(foo) {
      return function () {
        var options = Array.prototype.slice.call(arguments,1);
        if (!foo.length) {
          return new Promise(function (resolve, fail) {
            var _result = foo.call(context);
            (_result || _result === undefined) ? resolve() : fail();
          });
        } else {
          return new Promise(foo.bind(context));
        }
      }
    }
  }
};

fabric.Object.prototype.set = function(key, value) {
  if (typeof key === 'object') {
    this._setObject(key, value);
  }
  else {
    if (typeof value === 'function' && key !== 'clipTo') {
      this._set(key, value(this.get(key)));
    }
    else {
      this._set(key, value);
    }
  }
  return this;
};

fabric.Object.prototype._setObject = function(options,callback) {
  var keys = Object.keys(options);
  if(this.optionsOrder){
    var middleIndex = this.optionsOrder.indexOf("*") || -1;

    var i = middleIndex, prop , keyIndex;

    while((prop = this.optionsOrder[--i])){
      if((keyIndex = keys.indexOf(prop)) !== -1){
        keys.splice(keyIndex, 1);
        keys.unshift(prop);
      }
    }
    i = middleIndex;
    while(prop = this.optionsOrder[++i]){
      if((keyIndex = keys.indexOf(prop)) !== -1){
        keys.splice(keyIndex, 1);
        keys.push(prop);
      }
    }

  }
  for (var i = 0; i < keys.length; i++) {
    var prop = keys[i];
    if(typeof options[prop] == "function"){
      keys.splice(i, 1);
      keys.unshift(prop);
    }
  }
  var queue;
  for (var i in keys) {
    var _key = keys[i];
    if(options[_key] === undefined || options[_key] === null)continue;
    var _fooName = "set" + fabric.util.string.capitalize(_key, true);
    if(this[_fooName] && this[_fooName].name && this[_fooName].name != "anonymous"){
      if(this[_fooName].length == 2){
        if(!queue){
          queue = fabric.util.queueLoad(2,callback);
        }else{
          queue.total ++;
        }
        this[_fooName](options[_key],function(_key){
          queue();
        }.bind(this,_key));
      }else{
        this[_fooName](options[_key])
      }
    } else {
      this.__set(_key, options[_key]);
    }
  }
  if(queue){
    queue()
  }else if(callback ){
    callback();
  }
};

var _get_pointer_overwritten = fabric.Canvas.prototype.getPointer;

fabric.util.object.extend(fabric.Canvas.prototype, {
  setWidth: function (value) {
    return this.setDimensions({ width: value }, {});
  },
  setHeight: function (value) {
    return this.setDimensions({ height: value }, {});
  },
  /**
   * @private
   */

  _setObject: fabric.Object.prototype._setObject,
  originalState: {},
  stateProperties: [],
  editingObject: null,
  getObjectByID: function(_id){
    var layers = this.layers || [{objects: this._objects}];
    for (var i in layers) {
      for (var j in layers[i].objects) {
        if (layers[i].objects[j].id === _id) {
          return layers[i].objects[j];
        }
      }
    }
    return null;
  },
  /*
   Add Custom Object Tranformations
   */
  getPointer: function (e, ignoreZoom, upperCanvasEl) {
    var pointer = _get_pointer_overwritten.call(this, e, ignoreZoom, upperCanvasEl);
    if (e._group) {
      return this._normalizePointer(e._group, pointer);
    }
    return pointer;
  },
  __set : fabric.Object.prototype._set,
  getModifiedStates: function (target) {
    var states = {
      original: {},
      modified: {}
    };
    for (var prop in target.originalState) {
      if (target.originalState[prop] !== target[prop]) {
        if(target.originalState[prop] instanceof Object){
          if(JSON.stringify(target.originalState[prop]) == JSON.stringify(target[prop])){
            continue;
          }
        }
        states.original[prop] = target.originalState[prop];
        states.modified[prop] = target[prop];
      }
    }
    return states;
  },
  _finalizeCurrentTransform: function () {

    var transform = this._currentTransform,
      target = transform.target;

    if (target._scaling) {
      target._scaling = false;
    }

    target.setCoords();

    this._restoreOriginXY(target);
    // only fire :modified event if target coordinates were changed during mousedown-mouseup
    this.fireModifiedIfChanged(target);
  },
  fireModifiedIfChanged: function (target) {
    if (this.stateful) {
      var _states = target.hasStateChanged();
      if(_states){
        this.fire('object:modified', {target: target , states: _states});
        target.fire('modified',{states: _states});
      }
    }
  },
  // _set: function (key, value,callback) {
  //   if (this.specialProperties.indexOf(key) !== -1) {
  //     this["set" + fabric.util.string.capitalize(key, true)](value,callback);
  //   } else {
  //     fabric.Object.prototype._set.call(this, key, value);
  //   }
  //   return this;
  // },
  get: fabric.Object.prototype.get,
  set: fabric.Object.prototype.set,
  hasStateChanged: fabric.Object.prototype.hasStateChanged,
  /** Creates a bottom canvas
   * @private
   * @param {HTMLElement} [canvasEl]
   */
  _createLowerCanvas: function (canvasEl) {
    if (typeof canvasEl == "string") {
      this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();
    } else if (canvasEl) {
      this.lowerCanvasEl = canvasEl;
    } else {
      this.virtual = true;
      this.lowerCanvasEl = fabric.util.createCanvasElement();
    }

    this._initCanvasElement(this.lowerCanvasEl);

    fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');

    if (this.interactive) {
      this._applyCanvasStyle(this.lowerCanvasEl);
    }

    this.contextContainer = this.lowerCanvasEl.getContext('2d');
  },
  findTarget: function (e, skipGroup) {
    if (this.skipTargetFind) {
      return;
    }

    var ignoreZoom = true,
      pointer = this.getPointer(e, ignoreZoom),
      activeGroup = this.getActiveGroup(),
      activeObject = this.getActiveObject();
    if (activeGroup && !skipGroup && this._checkTarget(pointer, activeGroup)) {
      return activeGroup;
    }

    if (activeObject && this._checkTarget(pointer, activeObject)) {
      //added visceroid
      this._fireOverOutEvents(activeObject, e);
      return activeObject;
    }

    this.targets = [ ];

    var target = this._searchPossibleTargets(this._objects, pointer);
    this._fireOverOutEvents(target, e);
    return target;
  }
});

fabric.util.object.extend(fabric.Object.prototype, {
  setAngle: function(angle) {
    this.angle = angle;
  },
  __set : fabric.Object.prototype._set,
  get : fabric.Object.prototype.get,
  _set: function (key, value ,callback) {
    var _fooName = "set" + fabric.util.string.capitalize(key, true);
    if(this[_fooName]  && this[_fooName].name && this[_fooName].name != "anonymous"){
      // if (this.specialProperties.indexOf(key) !== -1) {
      // if(this[_fooName]){
      this[_fooName](value,callback);
    }else{
      this.__set(key, value);
    }
    return this;
  },
  disable: function () {
    this.set({
      selectable: false,
      evented: false,
      hasControls: false,
      lockMovementX: true,
      lockMovementY: true
    });
  },
  stored: true,
  /**
   * Saves state of an object
   * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
   * @return {fabric.Object} thisArg
   */
  saveState: function(options) {
    this.stateProperties.forEach(function(prop) {
      var _val = this.get(prop);
      if(_val instanceof Object){
        this.originalState[prop] = fabric.util.object.cloneDeep(_val);
      }else{
        this.originalState[prop] = _val;
      }
    }, this);

    if (options && options.stateProperties) {
      options.stateProperties.forEach(function(prop) {
        this.originalState[prop] = this.get(prop);
      }, this);
    }
    return this;
  },
  hasStateChanged: function() {
    var modified = 0;
    var states = {
      original: {},
      modified: {}
    };
    for (var prop in this.originalState) {
      if (this.originalState[prop] !== this[prop]) {
        if(this.originalState[prop] instanceof Object){
          if(JSON.stringify(this.originalState[prop]) == JSON.stringify(this[prop])){
            continue;
          }
        }
        states.original[prop] = this.originalState[prop];
        states.modified[prop] = this[prop];
        modified++;
      }
    }
    return modified && states;
  }
});

fabric.util.getProportions = function (photo, container, mode) {
  mode = mode || 'fit';
  var _w = photo.naturalWidth || photo.width;
  var _h = photo.naturalHeight || photo.height;
  if (!container.height && !container.width) {
    return {
      scale: 1,
      width: _w,
      height: _h
    };
  }
  if (!photo.height && !photo.width) {
    return {
      scale: 0.001,
      width: container.width,
      height: container.height
    };
  }

  // var _asp = _w / _h, _c_asp = container.width / container.height;

  // if (_asp > _c_asp) {
  //   _h = container.height;
  //   _w = _h * _asp;
  //
  // } else {
  //   _w = container.width;
  //   _h = _w / _asp;
  // }
  // var scaleX = container.width / _w;
  // var scaleY = container.height / _h;
  var scaleX = container.width && container.width / _w || 999;
  var scaleY = container.height && container.height / _h || 999;

  var scale;
  if (mode === 'cover') {
    scale = Math.max(scaleX, scaleY);
  }
  if (mode === 'fit') {
    scale = Math.min(scaleX, scaleY);
  }
  if (mode === 'center') {
    scale = 1;
  }
  return {
    scale: scale,
    width: Math.floor(_w * scale),
    height: Math.floor(_h * scale)
  };
};

fabric.util.Utf8ArrayToStr = function(array) {
  var out, i, len, c;
  var char2, char3;

  out = "";
  len = array.length;
  i = 0;
  while(i < len) {
    c = array[i++];
    switch(c >> 4)
    {
      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
      // 0xxxxxxx
      out += String.fromCharCode(c);
      break;
      case 12: case 13:
      // 110x xxxx   10xx xxxx
      char2 = array[i++];
      out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
      break;
      case 14:
        // 1110 xxxx  10xx xxxx  10xx xxxx
        char2 = array[i++];
        char3 = array[i++];
        out += String.fromCharCode(((c & 0x0F) << 12) |
          ((char2 & 0x3F) << 6) |
          ((char3 & 0x3F) << 0));
        break;
    }
  }

  return out;
};

fabric.util.createObject = function (type, options, callback) {
  if(typeof type !== "string"){
    callback = options;
    options = type;
    type = null;
  }else{
    options.type = type;
  }
  var app = options.application;
  app && app.fire("entity:load",{options: options});

  var _klassName = fabric.util.string.camelize(fabric.util.string.capitalize(type || options.type || app.prototypes.Object.type,true));
  var _klass = fabric[_klassName] || app.klasses[_klassName];


  if(!_klass){
    console.error(_klassName + " is undefined");
    return callback(new fabric.Rect(options))
  }

  var el = _klass.fromObject(options, function (el) {
    callback && callback(el);
    callback = null;
  });
  if (el) {
    callback && callback(el);
    callback = null;
  }
  return el;
};

fabric.util.dataURItoBlob = function (dataURI, dataTYPE) {
  var binary = atob(dataURI.split(',')[1]), array = [];
  for (var i = 0; i < binary.length; i++) {
    array.push(binary.charCodeAt(i));
  }
  return new Blob([new Uint8Array(array)], {type: dataTYPE});
};

fabric.util.blobToDataURL = function (blob, callback) {
  var a = new FileReader();
  a.onload = function (e) {
    callback(e.target.result);
  };
  a.readAsDataURL(blob);
};

fabric.util.createCanvasElementWithSize = function (size) {
  var canvas = fabric.util.createCanvasElement();
  canvas.width = size.width;
  canvas.height = size.height;
  return canvas;
};

fabric.util.string.toDashed = function (str) {
  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
};

fabric.util.string.uncapitalize = function(string){
  return string.charAt(0).toLowerCase() +
    (string.slice(1));
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {var _GroupRemoveNetive = fabric.Group.prototype.remove;

fabric.util.object.extend(fabric.Group.prototype, {
  /**
   * Removes object from canvas to which it was added last
   * @return {fabric.Object} thisArg
   * @chainable
   */
  remove: function () {
    if (arguments.length === 0) {
      this.canvas && this.canvas.remove(this);
    } else {
      _GroupRemoveNetive.apply(this, arguments);
    }

    return this;
  }
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {
__webpack_require__(7);

fabric.util.object.extend(fabric.Image.prototype,fabric.ImageMixin, {
  async: true,
  toObjectNative: fabric.Image.prototype.toObject,
  toObject:     function(){
    var obj = fabric.Image.prototype.toObjectNative.apply(this,arguments);
    if(obj.src.indexOf(fabric.util.mediaRoot) == 0){
      obj.src = obj.src.replace(fabric.util.mediaRoot,"");
    }
    return obj;
  },
  initialize: function (element, options, callback) {
    options || (options = {});
    this.filters = [];
    this.resizeFilters = [];


    if (options.originalSrc) {
      this._edited = true;
      fabric.util.loadImage(options.originalSrc, function (img) {
        this._originalElement = img;
      }.bind(this));
    }

    this._initElement(element, options, callback && function () {
        fabric.Object.prototype.initialize.call(this, options, callback);
      }.bind(this));//adding callback
  },

  _initElement: function (element, options, callback) {
    this.setElement(fabric.util.getById(element), callback, options);
    fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);
  },
  /**
   * Sets crossOrigin value (on an instance and corresponding image element)
   * @return {fabric.Image} thisArg
   * @chainable
   */
  setCrossOrigin: function (value) {
    this.crossOrigin = value;
    if (this._element) {
      this._element.crossOrigin = value;
    }
    return this;
  },
  setElement: function (element, callback, options) {

    var _callback, _this;

    this._element = element;
    this._originalElement = element;
    this._initConfig(options);
    // this.setOptions(options );
    // this._setWidthHeight(this);
    // if (this._element && this.crossOrigin) {
    //   this._element.crossOrigin = this.crossOrigin;
    // }


    if (this.resizeFilters.length === 0) {
      _callback = callback;
    }
    else {
      _this = this;
      _callback = function () {
        _this.applyFilters(callback, _this.resizeFilters, _this._filteredEl || _this._originalElement, true);
      };
    }

    if (this.filters.length !== 0) {
      this.applyFilters(_callback);
    }
    else if (_callback) {
      _callback(this);
    }
    this.canvas.renderAll();
    return this;
  },
  actions : {
    source: {
      type: 'effect',
      className: 'fa fa-file-image-o',
      title: "source",
      actionParameters: function ($el, data) {
        data.target.application.createGallery(data.target, $el);
      }
    }
  }
});

fabric.util.initFilters = function (img, object, callback) {

  // if (fabric.version >= 1.6) {
  fabric.Image.prototype._initFilters.call(object, object.filters, function (filters) {
    object.filters = filters || [];
    fabric.Image.prototype._initFilters.call(object, object.resizeFilters, function (resizeFilters) {
      object.resizeFilters = resizeFilters || [];
      callback(img, object);
    });
  });
  // } else {
  //   fabric.Image.prototype._initFilters.call(object, object, function (filters) {
  //     object.filters = filters || [];
  //     callback(img, object);
  //   });
  // }
};

fabric.util.initImageAndFilters = function (object, callback) {
  if (object.image) {
    var img = object.image;
    delete object.src;
    delete object.image;
    fabric.util.initFilters(img, object, callback);
  }else if (object.src) {
    fabric.util.loadImage(object.src, function (img) {
      //delete object.src;
      fabric.util.initFilters(img, object, callback);
    }, null, object.crossOrigin);
  } else {
    fabric.util.initFilters(null, object, callback);
  }
};

fabric.Image.fromObject = function (object, callback) {
  fabric.util.initImageAndFilters(object, function (img, object) {
    var instance = new fabric.Image(img, object, callback);
  })
};


fabric.Image.prototype._to_object_overwritten = fabric.Image.prototype.toObject;
fabric.Image.prototype.setSrc = function (opt) {
  console.log(opt);
};

fabric.Image.prototype.toObject = function (opt) {
  var obj = fabric.Image.prototype._to_object_overwritten.call(this, opt);


  if (this._edited) {
    obj.originalSrc = this._original_src || this._originalElement.src || this._element.src;
    obj.src = this._element.src;
  } else {
    obj.src = this._original_src || this._originalElement.src || this._element.src;
  }
  if (this.contentOffsets) {
    obj.contentOffsets = this.contentOffsets;
  }


  if (!this.includeDefaultValues) {
    if (!obj.filters.length)delete obj.filters;
  }
  //if(this._originalElement){
  //    obj.thumb = this._element.src;
  //}

  return obj;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {

var isVML = function() { return typeof G_vmlCanvasManager !== 'undefined'; }

//weird stuff
// delete fabric.Rect.prototype.toObject;
// fabric.Rect.prototype.storeProperties = ["*","rx","ry"];

fabric.INCLUDE_ALL = "*";

var _toObject_overwritten = fabric.Object.prototype.toObject;
fabric.util.object.extend(fabric.Object.prototype, {
  storeProperties: ['*'],
  eventListeners: {},
  toObject: function (propertiesToInclude) {
    if (propertiesToInclude == fabric.INCLUDE_ALL) {
      propertiesToInclude = [fabric.INCLUDE_ALL];
    }

    propertiesToInclude = propertiesToInclude || [];
    propertiesToInclude = propertiesToInclude.concat(this.storeProperties);


    var obj = _toObject_overwritten.call(this, propertiesToInclude);
    if (propertiesToInclude[0] !== fabric.INCLUDE_ALL) {
      if (!this.includeDefaultValues) {
        this._removeDefaultValues(obj);
      }
    }

    if (this.storeProperties.indexOf("*") == -1) {
      for (var i in obj) {
        if (this.storeProperties.indexOf(i) == -1) {
          delete obj[i];
        }
      }
    }

    this.fire("before:object", {object: obj});
    return obj;
  },
  /**
   * Sets object's properties from options
   * @param {Object} [options] Options object
   */
  setOptions: function (options) {
    this._setObject(options);
    // this._initGradient(options);
    // this._initPattern(options);
    // this._initClipping(options);
  },
  _initEntity: function (options) {
    options.application && options.application.fire("entity:created", {target: this, options: options});
  },
  initialize: function (options, callback) {
    options = options || {};
    this._initEntity(options);
    // if(options.wholeCoordinates){
    //   var coordinates = ["left","top","width","height"];
    //   for(var i in coordinates){
    //     if(options[coordinates[i]]){
    //       options[coordinates[i]] = Math.round(options[coordinates[i]]);
    //     }
    //   }
    // }
    var _self = this;
    this._setObject(options, function () {
      _self.loaded = true;
      _self.fire("loaded");
      callback && callback(_self);
    });
  },
  add: function (canvas) {
    canvas.add(this);
  },
  set: function (key, value) {
    if (typeof key === 'object') {
      this._setObject(key);
    }
    else {
      if (key[0] == "&") {
        key = key.substr(1);
        this._set(key, value(this.get(key)));
      }
      else {
        this._set(key, value);
      }
    }
    return this;
  }
});



fabric.util.object.extend(fabric.Object.prototype, {
  hasBoundsControls: true,
  flipTools:     false,
  orderTools:    false,
  stroke: "transparent",
  onTop: function () {
    return this.canvas._objects.indexOf(this) == this.canvas._objects.length - 1;
  },
  flop: function () {
    this.flipY = !this.flipY;
    this.canvas.renderAll();
  },
  flip: function () {
    this.flipX = !this.flipX;
    this.canvas.renderAll();
  },
  onBottom: function () {
    return this.canvas._objects.indexOf(this) == 0;
  },
  duplicate: function() {
    var _object = this.toObject(fabric.INCLUDE_ALL);
    _object.active = true;

    var _clone = _object.cloneSync && _object.cloneSync() || this.canvas.createObject(_object);
    return _clone;
  },
  minStrokeWidth: 0,
  maxStrokeWidth: function(){
    return Math.min(this.width,this.height) / 2;
  },
  actions: {
    boundingRect: {
      type: 'label',
      template: '<dt>L:</dt><dd class="{leftClass}" title="{left}">{roundLeft}</dd><dt>T:</dt><dd class="{topClass}"  title="{top}">{roundTop}</dd><dt>R:</dt><dd class="{rightClass}" title="{right}">{roundRight}</dd><dt>B:</dt><dd class="{bottomClass}"  title="{bottom}">{roundBottom}</dd>',
      value: {
        observe: "modified scaling moving rotating",
        get: function(){
          var _rect = this.getBoundingRect();

          if(this.movementLimits) {

            if (this.movementLimits == this.canvas) {
              var _v = this.canvas.viewportTransform;
              var _mlr = {
                left: _v[4],
                top: _v[5],
                width: (this.canvas.originalWidth || this.canvas.width) * _v[0],
                height: (this.canvas.originalHeight || this.canvas.height)  * _v[3],
                right: 0,
                bottom: 0
              }
            }else{
              _mlr = this.movementLimits.getBoundingRect();
            }


            _rect.bottom = this.movementLimits.height - _rect.height;
            var _t = _rect.top - _mlr.top;
            var _l = _rect.left - _mlr.left;
            var _r = _mlr.width - _rect.width - _l;
            var _b = _mlr.height - _rect.height - _t;
          }else{
            _t = _rect.top;
            _l = _rect.left;
            _b = this.canvas.height - _rect.height - _rect.top;
            _r  = this.canvas.width - _rect.width - _rect.left;
          }

          return {
            topClass: _t > 0 ? "positive" : _t < 0 ? "negative" : "zero",
            bottomClass: _b > 0 ? "positive" : _b < 0 ? "negative" : "zero",
            leftClass: _l > 0 ? "positive" : _l < 0 ? "negative" : "zero",
            rightClass: _r > 0 ? "positive" : _r < 0 ? "negative" : "zero",
            top:    _t,
            left:   _l,
            bottom: _b,
            right:  _r,
            roundTop:    Math.round(_t),
            roundLeft:   Math.round(_l),
            roundBottom: Math.round(_b),
            roundRight:  Math.round(_r)
          }
        }
      }
    },
    position: {
      title: 'position',
      type: 'menu',
      menu: {
        objectLeft: {
          type:   'number',
          title:  'left',
          value: {
            set: function (val) {
              this.left = val;
              this.fire("modified");
              this.canvas.fire("object:modified", {target: this});
              this.canvas.renderAll();
            },
            get: function () {
              return this.left;
            },
            observe: "modified"
          }
        },
        objectTop: {
          type:   'number',
          title:  'top',
          value: {
            set: function (val) {
              this.top = val;
              this.fire("modified");
              this.canvas.fire("object:modified", {target: this});
              this.canvas.renderAll();
            },
            get: function () {
              return this.top;
            },
            observe: "modified"
          }
        }
      }
    },
    dimensions: {
      title: 'dimensions',
      type: 'menu',
      menu:{
        objectWidth: {
          type:   'number',
          title:  'width',
          value: {
            set: function(val){
              this.saveState();
              this.dimensionsWidthValue = val;
              this.scaleToWidth(val *  this.canvas.getZoom());
              this.canvas.fireModifiedIfChanged(this);
              this.canvas.renderAll();
              delete this.dimensionsWidthValue;
            },
            get: function(){
              if(this.dimensionsWidthValue){
                return this.dimensionsWidthValue;
              }
              return Math.round(this.getBoundingRect().width / this.canvas.getZoom());
            },
            observe: "modified"
          }
        },
        objectHeight: {
          type:   'number',
          title:  'height',
          value: {
            set: function(val){
              this.saveState();
              this.scaleToHeight(val *  this.canvas.getZoom());
              this.dimensionsHeightValue = val;
              this.canvas.fireModifiedIfChanged(this);
              this.canvas.renderAll();
              delete this.dimensionsHeightValue;
            },
            get: function(){
              if(this.dimensionsHeightValue){
                return this.dimensionsHeightValue;
              }
              return Math.round(this.getBoundingRect().height / this.canvas.getZoom());
            },
            observe: "modified"
          }
        }
      }
    },
    center: {
      className:  'fa fa-bullseye',
      title: 'Center',
      action: function(){
        this.center();
        this.setCoords();
      }
    },
    objectFlip: {
      className:  'fa fa-arrows-h',
      title:      'flip',
      action:     'flip'
    },
    flop: {
      className:  'fa fa-arrows-v',
      title:      'flop'
    },
    bringForward: {
      title:      'bring forward',
      className:  'fa fa-level-up',
      disabled:   'onTop'
    },
    sendBackwards: {
      title:      'send backwards',
      className:  'fa fa-level-down',
      disabled:   'onBottom'
    },
    remove: {
      className:  'fa fa-trash',
      title:      'remove',
      key:        "Delete"
    },
    duplicate: {
      className:  'fa fa-clone',
      title:      'duplicate'
    }
  }
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {


/**
 * @private
 * @param {String} eventName
 * @param {Function} handler
 */
function _removeEventListener(eventName, handler) {
  if (!this.__eventListeners[eventName]) {
    return;
  }
  var eventListener = this.__eventListeners[eventName];
  if (handler) {
    eventListener.splice(eventListener.indexOf(handler), 1)
  }
  else {
    eventListener.length = 0;
  }
}

fabric.Canvas.prototype.stopObserving = fabric.Object.prototype.stopObserving = function stopObserving(eventName, handler) {
  if (!this.__eventListeners) {
    return;
  }

  // remove all key/value pairs (event name -> event handler)
  if (arguments.length === 0) {
    for (eventName in this.__eventListeners) {
      _removeEventListener.call(this, eventName);
    }
  }
  // one object with key/value pairs was passed
  else if (arguments.length === 1 && typeof arguments[0] === 'object') {
    for (var prop in eventName) {
      _removeEventListener.call(this, prop, eventName[prop]);
    }
  }
  else {
    _removeEventListener.call(this, eventName, handler);
  }
  return this;
}


fabric.Observable.on = fabric.Canvas.prototype.on = fabric.Object.prototype.on = function (eventName, handler,priority) {
  if (eventName.constructor == Object) {
    for (var i in eventName) {
      this.on(i, eventName[i],priority)
    }
    return this;
  }
  var events = eventName.split(" ");
  for (var i in events) {
    eventName = events[i];
    this.observe(eventName, handler);
    if(priority){
      this.__eventListeners[eventName].unshift(this.__eventListeners[eventName].pop());
    }
  }
  return this;
};
fabric.Canvas.prototype.off = fabric.Object.prototype.off = function (eventName, handler) {
  var events = eventName.split(" ");
  for (var i in events) {
    this.stopObserving(events[i], handler)
  }
  return this;
};


fabric.Canvas.prototype.fire = fabric.Object.prototype.fire = function fire(eventName, options) {
  if (!this.__eventListeners) {
    return;
  }

  var listenersForEvent = this.__eventListeners[eventName];
  if (listenersForEvent) {
    for (var i = 0, len = listenersForEvent.length; i < len; i++) {
      listenersForEvent[i].call(this, options || {});
    }
  }

  var listenersForEventAll = this.__eventListeners['*'];
  if (listenersForEventAll) {
    options = options || {};
    options.eventName = eventName;
    options.listeners = listenersForEvent;
    for (i = 0, len = listenersForEventAll.length; i < len; i++) {
      listenersForEventAll[i].call(this, options);
    }
  }

  return this;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {

__webpack_require__(6);

/**
 * # SlideCanvas
 * Inherited from fabric.Canvas
 *
 *

 ## method: load

Mathod allows to add new objects and set new attributes of canvas.

 ```javascript
 load : ({
    backgroundImage: string,
    objects: [FabricShapeOptions],
    customSyncOption: any,
    customAsyncOption: any
  },callback) : void
 ```

 To extend loading behavior and use custom options it is possible to define **set fucntions** in Canvas prototype.

 ```javascript
 // Canvas Prototype
 setCustomAsyncOption: function(val,callback){
  this.doAsyncMethod(val,callback)
}
 setCustomSyncOption: function(val){
  this.customSyncOtion = val;
}
 ```

 ### attribute: backgroundImageProperties

 default attributes for background image

 ### freeDrawingBrush

 default active drawing brush

 ```
 freeDrawingBrush: "PaintBucketBrush" | "PaintPenBrush" | "PencilBrush"
 ```

 ### attribute: onSlideLoaded

 onSlideLoaded calls as a callback for load fucntion

 ### attribute: backgroundPosition

 onSlideLoaded calls as a callback for load fucntion

 ```
 backgroundPosition: 'manual' | 'resize' | 'fit' | 'cover' | 'center'
 ```

 - manual - background will ne not scaled and put at left top corner
 - resize - canvas will be resized according to image size
 - fit - will be scaled to fit canvas size
 - cover - will be scaled to cover all canvas size
 - center - backogrund will be not scaled but put in the middle

 ### method: setInteractiveMode

 switch between drawing and hand( moving cunvas by mouse) modes

 ```javascript
 canvas.setInteractiveMode( mode : "hand" | "mixed") : void
 ```

 ### drawingColor

 drawing color using by brushes

 */
fabric.SlideCanvas = fabric.util.createClass(fabric.Canvas,fabric.PluginsMixin, {
  type: 'slide-canvas',
  /**
   * initialized width of the canvas
   */
  width: 160 ,
  /**
   * initialized height of the canvas
   */
  height: 90,
  /**
   * output quality
   */
  dotsPerUnit: 1,
  scale: 1,
  loaded: false,
  /**
   * allow user to interact with canvas
   */
  interactive: true,
  /**
   * fill not the slide area, but whole canvas with background color
   */
  addTextTool: false,
  defaultText: "text",
  defaultTextType: "text",
  thumbSize: {
    width: 50,
    height: 100
  },
  storeProperties: ['*','backgroundImage','width','height'],
  contextTopImageSmoothingEnabled: true,
  plugins: {
    initialize: [
    ],
    preloaders: [
    ],
    loaders: [],
    savers : [
      function serializeThumb(propertiesToInclude, _data){
        if(propertiesToInclude.indexOf('thumb') !== -1){
          var size = fabric.util.getProportions(this.getOriginalSize(), this.thumbSize, 'fit');
          var canvas = fabric.util.createCanvasElement();
          canvas.width = size.width;
          canvas.height = size.height;
          this.renderThumb(canvas);
          _data.thumb = canvas.toDataURL();
        }
      },
      function serializeTemplate(propertiesToInclude, _data) {
        if (propertiesToInclude.indexOf('template') !== -1) {
          if (this.template) {
            for (var i in _data.template) {
              if (JSON.stringify(_data[i]) == JSON.stringify(_data.template[i])) {
                delete _data[i];
              }
            }
            _data.template = this.template.id;
          }
        }
      }
    ]
  },
  setBackgroundColor: function(backgroundColor, callback) {
    return this.__setBgOverlayColor('backgroundColor', backgroundColor, function(){
      this.renderAll();
      callback && callback()
    }.bind(this));
  },
  setInteractive: function (value) {
    this.interactive = value;
  },
  _initOptions: function (options) {
    this.width = this.width || parseInt(this.lowerCanvasEl.width, 10) || 0;
    this.height = this.height || parseInt(this.lowerCanvasEl.height, 10) || 0;

    if (!this.lowerCanvasEl.style) {
      return;
    }

    this.lowerCanvasEl.width = this.width;
    this.lowerCanvasEl.height = this.height;

    this.lowerCanvasEl.style.width = this.width + 'px';
    this.lowerCanvasEl.style.height = this.height + 'px';

    this.viewportTransform = this.viewportTransform.slice();
  },
  _createUpperCanvas: function () {
    fabric.Canvas.prototype._createUpperCanvas.call(this);
    var ctx = this.contextTop;

    if(ctx.imageSmoothingEnabled){
      ctx.imageSmoothingEnabled = this.contextTopImageSmoothingEnabled;
      return;
    }
    ctx.webkitImageSmoothingEnabled = this.contextTopImageSmoothingEnabled;
    ctx.mozImageSmoothingEnabled    = this.contextTopImageSmoothingEnabled;
    ctx.msImageSmoothingEnabled     = this.contextTopImageSmoothingEnabled;
    ctx.oImageSmoothingEnabled      = this.contextTopImageSmoothingEnabled;
  },
  _onMouseUpInDrawingMode: function(e) {
    this._isCurrentlyDrawing = false;
    if (this.clipTo) {
      this.contextTop.restore();
    }
    var pointer = this.getPointer(e);
    this.freeDrawingBrush.onMouseUp(pointer);
    this._handleEvent(e, 'up');
  },
  initialize: function (el, options,callback) {
    if(el && el.constructor == Object){
      callback= options;
      options = el;
      el = null;
    }
    options = options || {};



    if(options.application){
      options.application.fire("entity:created",{target : this , options : options});
    }

    this.id = fabric.SlideCanvas.__idcounter++;

    this._objects = [];
    this._createLowerCanvas(el);


    if(!this.virtual){
      this.created = true;


      this._currentTransform = null;
      this._groupSelector = null;
      this._initWrapperElement();
      this._createUpperCanvas();
      this._initEventListeners();
      this._initRetinaScaling();
      this.calcOffset();
      this.initLayers();



      this._createCacheCanvas();
      this._setImageSmoothing();
      this._initRetinaScaling();
    }else{
      this.initLayers();
    }

    this.plugins.initialize.forEach(function(initializer){
      initializer.call(this, options);
    }.bind(this));

    if(options["+actions"]) {
      this.set("+actions", options["+actions"])
    }
    if(options.actions){
      this.set("actions",options.actions)
    }


    if(options && options.onResize){
      this.onResize = options.onResize;
    }

    if (this.requestAnimFrame) {
      this.addVideosSupport();
    }

    this._initOptions();

    this._setObject(options);

    this.calcOffset();

    // this.load(options,callback);

    this.fire("created");
    // if(this.application){
    //   this.application.fire("canvas:created",{target : this});
    // }
  },
  initLayers: function(){
    if(this.upperCanvasEl){
      this.wrapperEl.appendChild(this.upperCanvasEl);
    }
    //todo from layers module
  },
  create: function () {
    this.created = true;
    this._initInteractive();
    this._createCacheCanvas();
  },
  toObject: function (propertiesToInclude) {

    propertiesToInclude = (propertiesToInclude || []).concat(this.storeProperties);

    var _self =  this;
    var _objs = this.getObjects();

    _objs = fabric.util.object.filter(_objs,{stored: true});
    _objs = _objs.map(function(instance) {
      return instance.toObject(_self.objectsPropertiesToInclude);
    });

    var _data = {
      objects: _objs
    };

    fabric.util.populateWithProperties(this, _data, this.propertiesToInclude);
    //
    // for(var i in propertiesToInclude){
    //   var _prop = propertiesToInclude[i];
    //   _data[_prop] = this[_prop];
    // }

    if(propertiesToInclude.indexOf('backgroundImage') !== -1){
      fabric.util.object.extend(_data, this.__serializeBgOverlay());
    }

    if(propertiesToInclude.indexOf('width') !== -1 && this.originalWidth){
      _data.width = this.originalWidth;
    }
    if(propertiesToInclude.indexOf('height') !== -1 && this.originalHeight){
      _data.height = this.originalHeight;
    }

    this.plugins.savers.forEach(function(saver){
      saver.call(this, propertiesToInclude, _data);
    }.bind(this));
    this.fire("before:object",{object: _data});

    return _data;
  },
  setTemplate: function(template){

    this.template = template;
    if(!template)return;

    this.setWidth(this.slideWidth || template.width);
    this.setHeight(this.slideHeight || template.height);
    this.originalHeight = this.height;
    this.originalWidth = this.width;

    this.set(fabric.util.object.rearrange(template,["areas","helpers","offsets"]));

    this._update_clip_rect();
    this._update_background_image();
    this.fire("modified",{type: "template"});
    this.renderAll();
  },
  addText: function (text, options) {
    this.createObject({
      position: "center",
      text: text,
      type:   this.defaultTextType,
      clipTo: this.activeArea,
      movementLimits : this.activeArea
    });
  },
  /**
   * Additional Event Listeners
   *  - loading:end
   *  - target:modified - couldbe used to detect active object changes
   *  - target:changed
   *  - target:cleared
   */
  eventListeners: {
    'object:moving': function (obj) {
      this.fire('target:modified', this, obj)
    },
    'selection:cleared': function (event) {
      if(!this.target)return;
      this.target.fire('deselected', event);
      this.target = null;
      this.fire('target:cleared', event);
    },
    'object:selected': function (event) {
      event.previous = this.target;
      this.target = event.target;
      if(event.previous){
        event.previous.fire('deselected', event);
      }
      this.fire('target:changed', event);
    },
    'group:selected': function (event) {
      this.target = event.target;
      this.fire('target:changed', event);
    }
  }
});
fabric.SlideCanvas.__idcounter = 0;
fabric.SlideCanvas.fromJson = function(url,callback , element){
  fabric.util.data.loadJson(url,function(data){
    new fabric.SlideCanvas(element,data,callback)
  })
};

fabric.SlideCanvas.prototype.actions = fabric.util.object.extend({}, {
  selectAll: {
   title: 'selectAll',
   type: 'key'
  },
  backgroundColor : {
    type: "color"
  },
  addText: {
    className:  'fa fa-font',
    title: 'text',
    action: function () {
      this.addText(this.defaultText,{});
    }
  }
});

fabric.util.object.extend(fabric.Application.prototype, {
  setSlide: function (value, callback) {
    var _canvas = this.canvas;
    if (_canvas.load) {
      _canvas.load(value, callback);
    } else {
      _canvas.createObjects(value, callback);
    }
  }
});

fabric.Application.prototype.canvasClass = 'SlideCanvas';

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {var textInitialize = fabric.Text.prototype.initialize;

fabric.util.object.extend(fabric.Text.prototype, {
  textInitialize: textInitialize,
  editTool: false,
  advancedColorsTools: false,
  textFontSizeTools: false,
  textAligmentTools: false,
  advancedTextStyleTools: false,
  rasterizeTool: false,
  rasterizeKlass: fabric.Image,
  initialize: function (text, options) {
    this._initEntity(options);
    this.textInitialize(text, options);
    // this.updateCache();
  },
    _render_cache: function (ctx) {
  ctx.save();
  ctx.scale(
    this.scaleX * (this.flipX ? -1 : 1),
    this.scaleY * (this.flipY ? -1 : 1)
  );
  this.transform(ctx);
  this._setShadow(ctx);
  ctx.translate(-this.width / 2, -this.height / 2);
  ctx.drawImage(this._cache, 0, 0, this.width, this.height);
  ctx.restore();
},
  updateCache: function () {

    var size = {
      width: this.width * this.canvas.dotsPerUnit,
      height: this.height * this.canvas.dotsPerUnit
    };

    var _clipTo = this.clipTo;
    delete this.clipTo;
    this._cache = fabric.util.createCanvasElementWithSize(size);
    var ctx = this._cache.getContext("2d");
    ctx.scale(
      this.canvas.dotsPerUnit,
      this.canvas.dotsPerUnit);
    ctx.translate(this.width / 2, this.height / 2);

    this.render(ctx, true);
    this.render = this._render_cache;
    this.clipTo = _clipTo;

  },
  rasterizeText: function () {
    this.updateCache();
    var img = fabric.util.createImage();

    img.onload = function () {
      var obj = this.toObject();
      obj.width = img.width;
      obj.height = img.height;
      obj.scaleX = this.scaleX * (this.height / img.height);
      obj.scaleY = this.scaleY * (this.width / img.width );
      obj.rasterizedType = obj.type;
      delete obj.type;

      var el = new this.rasterizeKlass(img, obj);
      this.canvas.add(el);
      this.canvas.remove(this);
      setTimeout(function () {
        this.canvas.setActiveObject(el);
        this.canvas.renderAll();
      }.bind(this))
    }.bind(this);
    img.src = this._cache.toDataURL();
    //this.on('modified',this.updateCache.bind(this));
  },
  getStyle: function (styleName) {
    var object = this;
    return (object.getSelectionStyles && object.isEditing)
      ? (object.getSelectionStyles()[styleName] || object[styleName])
      : (object[styleName] || object['__' + styleName] || '');
  },
  getPattern: function (url) {
    var _fill = this.getStyle('fill ');
    return _fill && _fill.source;
  },
  setPattern: function (url) {
    if (!url) {
      this.setStyle('fill');
    } else {
      // var _texture = _.findWhere(this.project.textures, {id: url});
      var _this = this;
      fabric.util.loadImage(url, function(img) {
        _this.setStyle('fill', new fabric.Pattern({
          source: img,
          repeat: 'repeat'
        }));
      });
    }
  },
  getOpacity: function () {
    return this.getStyle('opacity') * 100;
  },
  setOpacity: function (value) {
    this.setStyle('opacity', parseInt(value, 10) / 100);
  },
  getRadius: function () {
    return this.get('radius');
  },
  setShadow: function(options) {
    return this.setProperty('shadow', options ? new fabric.Shadow(options) : null);
  },
  setProperty: function (prop, value) {
    this[prop] = value;
    this.canvas && this.canvas.renderAll();
  },
  setRadius: function (value) {
    this.setProperty('radius', value);
  },
  getSpacing: function () {
    return this.get('spacing');
  },
  setSpacing: function (value) {
    this.setProperty('spacing', value);
  },
  getReverted: function () {
    return this.get('reverted');
  },
  setReverted: function (value) {
    this.setProperty('reverted', value);
  },
  getFill: function () {
    return this.getStyle('fill');
  },
  setFill: function (value) {
    this.setStyle('fill', value);
  },
  getText: function () {
    return this.get('text');
  },
  setText: function (value) {
    this.setProperty('text', value);
  },
  getTextAlign: function () {
    return this.get('textAlign');
  },
  setTextAlign: function (value) {
    this.setProperty('textAlign', value.toLowerCase());
  },
  getFontFamily: function () {
    return this.get('fontFamily');
  },
  setFontFamily: function (value) {
    this.setStyle('fontFamily', value);
  },
  getStyles: function(){
    return this.styles || {
        fill :                this.fill,
        fontSize :            this.fontSize,
        textBackgroundColor : this.textBackgroundColor,
        textDecoration :      this.textDecoration,
        fontFamily :          this.fontFamily,
        fontWeight :          this.fontWeight,
        fontStyle :           this.fontStyle,
        stroke :              this.stroke,
        strokeWidth :         this.strokeWidth
      };
  },
  getBgColor: function () {
    return this.get('backgroundColor');
  },
  setBgColor: function (value) {
    this.setProperty('backgroundColor', value);
  },
  getTextBgColor: function () {
    return this.get('textBackgroundColor');
  },
  setTextBgColor: function (value) {
    this.setProperty('textBackgroundColor', value);
  },
  getStroke: function () {
    return this.getStyle('stroke');
  },
  setStroke: function (value) {
    this.setStyle('stroke', value);
  },
  getStrokeWidth: function () {
    return this.getStyle('strokeWidth');
  },
  setStrokeWidth: function (value) {
    this.setStyle('strokeWidth', parseInt(value, 10));
  },
  decreaseFontSize: function () {
    this.setStyle('fontSize', parseInt(this.getStyle('fontSize')) - 1);
  },
  increaseFontSize: function () {
    this.setStyle('fontSize', parseInt(this.getStyle('fontSize')) + 1);
  },
  getFontSize: function () {
    return this.getStyle('fontSize');
  },
  setFontSize: function (value) {
    this.setStyle('fontSize', parseInt(value, 10));
  },
  getLineHeight: function () {
    return this.getStyle('lineHeight');
  },
  setLineHeight: function (value) {
    this.setStyle('lineHeight', parseFloat(value, 10));
  },
  addText: function (text,options) {

    var _match = this.text.match(/\n/g);
    var _lineIndex = _match && _match.length || 0;
    var charIndex = this.text.length - this.text.lastIndexOf("\n") - 1;

    if(!this.styles[_lineIndex]){
      this.styles[_lineIndex] = {}
    }

    if(!this.styles[_lineIndex][charIndex]){
      this.styles[_lineIndex][charIndex] = {}
    }
    fabric.util.object.extend(this.styles[_lineIndex][charIndex],options);
    this.text +=text;
    // this.styles;
  },
  getBold: function () {
    return this.getStyle('fontWeight') === "bold";
  },
  setBold: function (value) {
    this.setStyle('fontWeight', value ? 'bold' : '');
  },
  getItalic: function () {
    return this.getStyle('fontStyle') === 'italic';
  },
  setItalic: function (value) {
    this.setStyle('fontStyle', value ? 'italic' : '' );
  },
  getUnderline: function () {
    return this.getStyle('textDecoration').indexOf('underline') > -1;
  },
  setUnderline: function (value) {
    value = value ? (this.getStyle('textDecoration') + ' underline')
      : this.getStyle('textDecoration').replace('underline', '');

    this.setStyle('textDecoration', value);
  },
  getLinethrough: function () {
    return this.getStyle('textDecoration').indexOf('line-through') > -1;
  },
  setLinethrough: function (value) {
    value = value ? (this.getStyle('textDecoration') + ' line-through')
      : this.getStyle('textDecoration').replace('line-through', '');

    this.setStyle('textDecoration', value);
  },
  getOverline: function () {
    return this.getStyle('textDecoration').indexOf('overline') > -1;
  },
  setOverline: function (value) {
    value = value ? (this.getStyle('textDecoration') + ' overline')
      : this.getStyle('textDecoration').replace('overlin', '');

    this.setStyle('textDecoration', value);
  },
  setStyle: function (styleName, value) {
    var object = this;
    var _old = fabric.util.object.cloneDeep(object.getStyles());
    //var _old = fabric.util.object.deepExtend({}, object.getStyles);//getSelectionStyles();
    if (object.setSelectionStyles && object.isEditing) {
      var style = {};
      if (value !== undefined) {
        style[styleName] = value;
      } else {
        delete style[styleName];
      }
      object.setSelectionStyles(style);
      object.setCoords();
    }
    else {
      if (value !== undefined) {
        object[styleName] = value;
      } else {
        delete object[styleName];
      }
      for (var i in object.styles) {
        for (var j in object.styles[i]) {
          if (object.styles[i][j][styleName] !== undefined) {
            delete object.styles[i][j][styleName];
          }
        }
      }
    }

    var styles_data = object.getStyles();

    if(this.type != "text"){
      this.styles = fabric.util.object.cloneDeep(styles_data);
    }

    this.setCoords();

    this.fire("styles:modified", {
      original: _old,
      modified: styles_data
    });
    this.canvas && this.canvas.renderAll();
    /*
     this.project.history.add({
     slide: this.slide,
     object: this,
     undo: _old,
     redo: styles_data,
     type: 'styled',
     undoFn: function(){
     this.object.data.styles = this.undo;
     this.object.fabric.set('styles',this.undo);
     this.object.fabric.setCoords();
     this.object.slide.render();
     },
     redoFn:  function(){
     this.object.data.styles = this.redo;
     this.object.fabric.set('styles',this.redo);
     this.object.fabric.setCoords();
     this.object.slide.render();
     }
     });*/
  },

  generateTextStyle: function () {
    return {
      'font-style': this.isItalic() ? 'italic' : 'normal',
      'font-weight': this.isBold() ? 700 : 400,
      'text-decoration': (this.isLinethrough() ? 'line-through ' : '' ) +
      (this.isOverline() ? 'overline ' : '' ) +
      (this.isUnderline() ? 'underline ' : '')
    }
  },
  actions: {
    rasterizeText: {
      insert: 'rasterizeTool',
      className: 'button-easel',
      title: 'rasterizeText',
   //   action: _TEX.rasterizeText
    },
    fill: {
      type: 'color',
      title: 'fill',
      insert: '!advancedColorsTools',
      value: 'fill'
    },
    textBgcolor: {
      type: 'color',
      title: 'bgColor',
      value: 'bgColor'
    },
    textTextbgcolor: {
      type: 'color',
      title: 'textBgColor',
      value: 'textBgColor'
    },
    textFill: {
      type: 'color',
      title: 'fill',
      value: 'fill'
    },
    textBold: {
      type: "checkbox",
      title: 'bold',
      value: 'bold',
      className: 'fa fa-bold'
    },
    textItalic: {
      type: "checkbox",
      title: 'italic',
      value: 'italic',
      className: 'fa fa-italic'
    },
    textUnderline: {
      type: "checkbox",
      title: 'Underline',
      value: 'underline',
      className: 'fa fa-underline'
    },
    textLinethrough: {
      type: "checkbox",
      insert: 'advancedTextStyleTools',
      title: 'Linethrough',
      value: 'linethrough',
      className: 'text-linethrough fa fa-strikethrough'
    },
    textOverline: {
      type: "checkbox",
      insert: 'advancedTextStyleTools',
      title: 'overline',
      value: 'overline',
      className: 'text-overline fa fa-overline'
    },
    textAlign: {
      type: 'options',
      title: 'text align',
      insert: 'textAligmentTools',
      value: "textAlign",
      menu: {
        textAlignCenter: {
          title: 'align center',
          option: 'center',
          className: 'fa fa-align-center'
        },
        textAlignLeft: {
          title: 'align left',
          option: 'left',
          className: 'fa fa-align-left'
        },
        textAlignRight: {
          title: 'align right',
          option: 'right',
          className: 'fa fa-align-right'
        },
        textAlignJustify: {
          title: 'align justify',
          option: 'justify',
          className: 'fa fa-align-justify'
        }
      }
    },
    fontFamily: {
      type: 'fontFamily',
      title: 'font family',
      className: 'fa fa-text',
      value: 'fontFamily',
      data: function(){
        return this.application._fonts
      }
    },
    textFontSize: {
      insert: 'textFontSizeTools',
      type: 'number',
      title: 'fontSize',
      value: 'fontSize'
    },
    /*textFont: {
     insert: 'textFontSizeTools',
     type: 'menu',
     title: 'font',
     className: 'fa fa-font',
     menu: {
     textFontSizeDecrease: {
     title: 'decreaseFontSize',
     action: _TEX.decreaseFontSize,
     className: 'fa fa-font font-size-decrease'
     },
     textFontSizeIncrease: {
     title: 'increaseFontSize',
     action: _TEX.increaseFontSize,
     className: 'fa fa-font font-size-increase'
     }
     }
     }*/
    advancedColorsTools: {
      className: 'colors',
      type: 'menu',
      title: 'colors',
      toggled: true,
      menu: ["fill","textBgcolor","textTextbgcolor","textFill"]
    },
    textStyle: {
      type: 'menu',
      title: 'text style',
      toggled: true,
      className: 'fa fa-font',
      style: 'generateTextStyle',
      menu: [
        "textBold","textItalic","textUnderline","textLinethrough",
        "textOverline","textAlign","fontFamily","textFontSize"
      ]
    }
  }
});

fabric.util.object.extend(fabric.IText.prototype, {
  initHiddenTextarea_native: fabric.IText.prototype.initHiddenTextarea,
  initHiddenTextarea: function(){
    this.initHiddenTextarea_native();
    this.hiddenTextarea.style.width = "9999px";
  },
  /**
   * Exits from editing state
   * @return {fabric.IText} thisArg
   * @chainable
   */
  exitEditing: function() {
    // var isTextChanged = (this._textBeforeEdit !== this.text);
    this.selected = false;
    this.isEditing = false;
    this.selectable = true;

    this.selectionEnd = this.selectionStart;
    this.hiddenTextarea && this.canvas && this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);
    this.hiddenTextarea = null;

    this.abortCursorAnimation();
    this._restoreEditingProps();
    this._currentCursorOpacity = 0;

    this.fire('editing:exited');
    // isTextChanged && this.fire('modified');
    if (this.canvas) {
      this.canvas.off('mouse:move', this.mouseMoveHandler);
      this.canvas.fire('text:editing:exited', { target: this });
      this.canvas.fireModifiedIfChanged(this);
    }
    return this;
  },
  maxStrokeWidth: function(){
    return Math.ceil( this.getFontSize() / 10);
  },
  actions: {
    enterEditing: {
      insert:     'editTool',
      className:  'fa fa-pencil-square-o',
      title:      'edit'
      //action:     _TEX.enterEditing
    }
  }
});



/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {fabric.debug = true;
fabric.extensions = [];
fabric.util.data = __webpack_require__(12);
fabric.util.path = __webpack_require__(5);
fabric.util.compile = __webpack_require__(4);
fabric.util.loader = __webpack_require__(13);
fabric.util.syntax = __webpack_require__(14);
fabric.util.object.extend(fabric.util.object,__webpack_require__(2));
fabric.util.object.extend(fabric.util,__webpack_require__(3));

__webpack_require__(11);


if(!fabric.isLikelyNode){
  /**
   * inline script images
   * @type {{error: string}}
   */
  fabric.media = {
    /**
     * replace images loaded with errors
     */
    error: 'data:image/svg+xml;base64,' + __webpack_require__(10)
  };
}

module.exports  = fabric;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {


fabric.RemoveWhiteDP = fabric.Image.filters.RemoveWhiteDP =  fabric.util.createClass(fabric.Image.filters.BaseFilter,{
    type: 'RemoveWhiteDP',
    initialize: function(options) {
        if(options)delete options.type;
        this.options = fabric.util.object.defaults(options || {},{
                fromCorners : true,
                blurRadius: 2,
                colorThreshold: 32
            });
        this.pathfinder = new fabric.Pathfinder(this.options);
    },
    applyTo: function(canvasEl) {

        var pathfinder = this.pathfinder;

        pathfinder.colorThreshold = this.options.colorThreshold;
        pathfinder.setPicture(canvasEl);
        pathfinder.selectBackground(this.options.fromCorners);
        if(pathfinder.mask.count ) {
          pathfinder._fill([0, 0, 0, 0]);
          pathfinder.mask = fabric.MagicWand.invertMask(pathfinder.mask);
          //todo inverting mask

          if(pathfinder.mask.count){
            var _width = pathfinder.mask.bounds.maxX - pathfinder.mask.bounds.minX + 1;
            var _height = pathfinder.mask.bounds.maxY - pathfinder.mask.bounds.minY + 1;
            var ctx = canvasEl.getContext('2d');
            var imageData = pathfinder.editedImageCanvas.getContext('2d').getImageData(pathfinder.mask.bounds.minX, pathfinder.mask.bounds.minY, _width, _height);
            canvasEl.width  = _width;
            canvasEl.height = _height;
            ctx.putImageData(imageData, 0, 0);
            this.bounds = pathfinder.mask.bounds;
          }else{
            var ctx = canvasEl.getContext('2d');
            canvasEl.width  = 1;
            canvasEl.height = 1;
            ctx.clearRect(0,0,1,1);
            this.bounds = {
              maxX: 0,
              maxY: 0,
              minX: 0,
              minY: 0
            }
          }
        }



            //clip the image
        pathfinder.clearMemory();

    },
    toObject: function() {
        return fabric.util.object.extend(this.callSuper('toObject'), this.options);
    }
});

fabric.Image.filters.RemoveWhiteDP.fromObject = function(object) {
    return new fabric.Image.filters.RemoveWhiteDP(object);
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {
fabric.CacheMixin = {
  caching: true,
  dirty: true,
  render: function ( ctx) {

    ctx.save();
    if (this.transformMatrix) {
      ctx.transform.apply(ctx, this.transformMatrix);
    }
    this.transform(ctx);

    this._setShadow(ctx);
    this.clipTo && fabric.util.clipContext(this, ctx);

    ctx.translate(-this.width / 2, -this.height / 2);

    if (this.caching) {
      if(!this._cache){
        this._cache = fabric.util.createCanvasElementWithSize(this);
      }
      if(this.dirty){
        this._cache.width = this.width;
        this._cache.height = this.height;
        var cacheCtx = this._cache.getContext("2d");
        cacheCtx.clearRect(0,0,this._cache.width,this._cache.height)
        this._render(cacheCtx);
        this.dirty = false;
      }

      ctx.drawImage(this._cache, 0, 0, this.width, this.height,0, 0, this.width, this.height);
    }else{
      this._render(ctx);
    }

    this.clipTo && ctx.restore();
    ctx.restore();
  }

};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {fabric.StrokeMixin = {
  shape: {
    strokeWidthFull: 0,
    strokeWidthEmpty: 2,
    strokeWidthActive: 2,
    strokeDashArray : [5,5],
    fill: "transparent",
    strokeEmpty:  "red",
    strokeFull:   "red",
    strokeActive: "green"
  },
  setShape: function(el,cb){

    el =  fabric.util.object.extend({
      strokeWidthFull: this.shape.strokeWidthFull,
      strokeWidthEmpty: this.shape.strokeWidthEmpty,
      strokeWidthActive: this.shape.strokeWidthActive,
      dashArray : this.shape.dashArray,
      strokeEmpty:  this.shape.strokeEmpty,
      strokeFull:  this.shape.strokeFull,
      strokeActive:this.shape.strokeActive
    },el);


    var _this = this;
    if(el && el.src && !el.paths){
      fabric.loadSVGFromURL(el.src,function(paths,options) {
        el.paths  = paths;
        fabric.util.object.extend(el,options);
        _this._set_shape(el);
        _this.add(_this._fabric_shape)
        _this._apply_shape();
        cb && cb();
      })
    }else{
      _this._set_shape(el);
      _this.add(_this._fabric_shape);
      _this._apply_shape();
      cb && cb();
    }
  },
  initShape: function(options){

    var _shapeOptions = fabric.util.object.extend(options.shape || {} , this.shape);

    this._fabric_shape =  new fabric.Rect(fabric.util.object.extend({},_shapeOptions,{
      width:            options.width,
      height:           options.height,
      stroke:           _shapeOptions.strokeEmpty,
      strokeWidth:      _shapeOptions.strokeWidthEmpty
    }));
  },

  /**
   * �������������� ����� �� ������� ������� ����
   * @private
   */
  _apply_shape: function () {
    var shape = this.shape;

    var _off = shape && shape.offsets;

    if (!_off) {
      _off = [0, 0, 0, 0];
    }

    var _off_units = shape && shape.offsets_units;

    if (!_off_units) {
      //if (frame.border_image) {todo
      //    _off_units = frame.border_image.width_units || [0, 0, 0, 0];
      //} else {
      _off_units = [1, 1, 1, 1];
      //}
    }

    /*else if(shape.offsets && shape.offsets_units){
     var s = this.slide.scaleValue;
     this._fabric_shape = new fabric.Rect({
     originX: 'center',
     originY: 'center',
     width:  (this.data.geometry.width - shape.offsets[3] - shape.offsets[1]) * s,
     height: (this.data.geometry.height -shape.offsets[0] - shape.offsets[2]) * s
     });*/

    _off = {
      top:   _off[0] * (_off_units[0] ? this.height / 100 : 1) || 0,
      right: _off[1] * (_off_units[1] ? this.width / 100 : 1) || 0,
      bottom:_off[2] * (_off_units[2] ? this.height / 100 : 1) || 0,
      left:  _off[3] * (_off_units[3] ? this.width / 100 : 1) || 0
    };


    var _w = (this.width - _off.left - _off.right );// *this.slide.scaleValue;
    var _h = (this.height - _off.top - _off.bottom);// *this.slide.scaleValue;


    //if(this.resources.frame.data.shape && this.resources.frame.data.shape.radius){
    //
    //    this._fabric_shape.set({
    //        left: -this.width/2  + _off.left ,
    //        top:  -this.height/2 + _off.top ,
    //        width: _w - _off.left -_off.right,
    //        height:  _h - _off.top -_off.bottom,
    //        scaleX:  1,
    //        scaleY:  1
    //    });
    //}else{


    if(this.shape.path || this.shape.paths || this.shape.offsets){
      var _sw = this.shape.width || this._fabric_shape.width;
      var _sh = this.shape.height || this._fabric_shape.height;

      if(this._fabric_shape.strokeWidth){
        _sw += this._fabric_shape.strokeWidth ;
        _sh += this._fabric_shape.strokeWidth ;
      }

      var options = {
        left:   -this.width / 2 + _off.left,
        top:    -this.height / 2 + _off.top,
        scaleX: _w / 100 / (_sw / 100),// * (shape.scaleX || 1),
        scaleY: _h / 100 / (_sh / 100),// * (shape.scaleY || 1)
        angle: 0
      };
    }else{
      var options = {
        left:   -this.width / 2 + _off.left,
        top:    -this.height / 2 + _off.top,
        width:    _w,// * (shape.scaleX || 1),
        height:   _h,// * (shape.scaleY || 1)
        angle: 0
      };
    }

    this._fabric_shape.set(options);

    this.updateStroke();
    this.canvas && this.canvas.renderAll();
  },
  _set_shape: function (shape) {

    if(this._fabric_shape){
      this.remove(this._fabric_shape);
      delete this._fabric_shape;
    }
    var _fabric_shape;
    var _options = {
      fill:             "transparent",
      strokeDashArray : this.shape.dashArray,
    };

    this.shape = shape;

    if(!shape){
      _fabric_shape = new fabric.Rect({
        width: this.width,
        height: this.height
      });
      _fabric_shape.set(_options)
    }else if (shape.paths) {

      for(var i in shape.paths){
        shape.paths[i].set(_options)
      }

      _fabric_shape = fabric.util.groupSVGElements(shape.paths, shape);
      //this._objects.unshift(this._objects.pop());
    }else {
      var path;

      if (shape.radius) {
        path = fabric.util.getRadiusClipPath(shape.radius, shape.radius_units, this.width, this.height);
        _fabric_shape = new fabric.Path(path, _options);
      } else if (shape.path) {
        _fabric_shape = new fabric.Path(shape.path, _options);
        //} else if(shape.offsets){
        //  path = fabric.util.getOffsetsClipPath(shape.offsets, shape.offsets_units)
      }else{
        path =  'M 0 0 L {width} 0 L {width} {height} L 0 {height} z'.format(fabric.util.object.extend({
          width:            100,
          height:           100
        },shape));

        _fabric_shape = new fabric.Path(path, _options);
        //
        //_fabric_shape =  new fabric.Rect(fabric.util.object.extend({
        //  width:            100,
        //  height:           100
        //},shape));

      }
    }


    _fabric_shape.set({
      scaleX: this.width  / _fabric_shape.width,
      scaleY: this.height / _fabric_shape.height,
      perPixelTargetFind: true,
      selectable: false,
      originX: "left",
      originY: "top"
    });



    this._fabric_shape =  _fabric_shape;


    if(this.element){
      this.element.clipTo = this._fabric_shape;
    }


    this.updateStroke();

  },

  updateStroke: function(){

    var _stroke = this.shape.stroke;
    var _sw = 0;
    if((this._activated || this._clipmode )&& this.shape.strokeWidthActive){
      _sw = this.shape.strokeWidthActive
    }else if(this.element && this.shape.strokeWidthFull){
      _sw = this.shape.strokeWidthFull;
    }else if(!this.element && this.shape.strokeWidthEmpty){
      _sw = this.shape.strokeWidthEmpty;
    }
    if((this._activated || this._clipmode) && this.shape.strokeActive){
      _stroke = this.shape.strokeActive
    }else if(this.element && this.shape.strokeFull){
      _stroke = this.shape.strokeFull;
    }else if(!this.element && this.shape.strokeEmpty){
      _stroke = this.shape.strokeEmpty;
    }


    var _strokeWidth = _sw / Math.max(this._fabric_shape.scaleX,this._fabric_shape.scaleY);

    if(this.shape){
      if(this.shape.paths ){
        for(var i in this._fabric_shape.paths){
          this._fabric_shape.paths[i].setStrokeWidth(_strokeWidth)
          this._fabric_shape.paths[i].setStroke(_stroke)
        }
      }else{
        this._fabric_shape.setStrokeWidth(_strokeWidth)
        this._fabric_shape.setStroke(_stroke)
      }
    }
  },
  /**
   * кобъект готовится к замену фото
   */
  activate: function(){
    this._activated = true;
    this._fabric_shape.setOpacity(1);
    this.updateStroke();
    this.canvas.renderAll();
  },
  /**
   * кобъект не готовится к замену фото
   */
  deactivate: function(){
    this._activated = false;
    this.updateStroke();
    this.canvas.renderAll();
  },
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {


/**
   * Draw CSS3 border image on canvas.
   * @param canvas    {HTMLCanvasElement}
   * @param img       {HTMLImageElement} border-image-source image
   * @param options   {Object}
   *      slice {Array} border-image-slice values
   *      width {Array} border-image-width values
   *      outset {Array} border-image-outset values
   *      repeat {Array} border-image-repeat values
   * @param size      {Object}
   */
   fabric.util.drawBorderImage  = function(canvas, img, options){


    var options = fabric.util.object.extend({
      "slice":        [25,25,25,25],
      "width":        [25,25,25,25],
      "fill":         false,
      "repeat":       ["round","round"],
      "outset_values"	: [0, 0, 0, 0],
      "slice_units"   : [0, 0, 0, 0],
      "width_units"	: [0, 0, 0, 0],
      "outset_units"	: [0, 0, 0, 0],
      "size"			: [canvas.width, canvas.height]
    },options)


    var w = img.width;
    var h = img.height;

    var ctx = canvas.getContext("2d");
    var slice = options.slice;
    var width = options.width;

    var w2 = options.size[0];
    var h2 = options.size[1];


    if(options.slice_units[0] == 1)slice[0] *=  h / 100;
    if(options.slice_units[1] == 1)slice[1] *=  w / 100;
    if(options.slice_units[2] == 1)slice[2] *=  h / 100;
    if(options.slice_units[3] == 1)slice[3] *=  w / 100;

    if(options.width_units[0] == 1)width[0] *= h2 / 100;
    if(options.width_units[1] == 1)width[1] *= w2 / 100;
    if(options.width_units[2] == 1)width[2] *= h2 / 100;
    if(options.width_units[3] == 1)width[3] *= w2 / 100;


    function drawSide(side,sliceOffset,sliceWidth, drawOffset,drawWidth){
      var d;
      if(side == 0) {
        d = [slice[3] + sliceOffset, 0, sliceWidth,  slice[0],
          width[3] + drawOffset, 0, drawWidth,  width[0]]
      }
      if(side == 2){
        d = [slice[3] + sliceOffset, h - slice[2] ,sliceWidth,  slice[2],
          width[3] + drawOffset, h2 - width[2],drawWidth, width[2]]
      }
      if(side == 1) {
        d = [ w - slice[1], slice[0] + sliceOffset,  slice[1], sliceWidth,
          w2 - width[1], width[0] + drawOffset,width[1], drawWidth];
      }
      if(side == 3) {
        d = [ 0, slice[0] + sliceOffset,  slice[3], sliceWidth,
          0, width[0] + drawOffset, width[3],drawWidth];
      }
      ctx.drawImage(img,d[0],d[1],d[2],d[3],d[4],d[5],d[6],d[7])
    }


    function _draw_border_side(side){
      var _top_width, _top_slice, repeat;
      if(side == 0 || side == 2){
        _top_width = w2 - width[1]- width[3];
        _top_slice  =  w - slice[1] - slice[3];
        repeat = options.repeat[0];
      }else{
        _top_width = h2 - width[0]- width[2];
        _top_slice  =  h - slice[0] - slice[2];
        repeat = options.repeat[1];
      }


      if(repeat == "stretch"){
        return drawSide(side, 0,  _top_slice ,  0,     _top_width);
      }

      var _aspect =   slice[side] / width[side];
      var _one_width =  _top_slice *  width[side] / slice[side] ;
      var count = 1;
      var _left = 0;

      if(repeat == "repeat"){

        var _rest = _one_width - _top_width % _one_width / 2;
        var _rest_aspect  = _aspect * _rest;
        count =  Math.floor(_top_width / _one_width);


        if(_rest > 0){
          drawSide(side, _rest_aspect ,  _top_slice - _rest_aspect,  0,     _one_width - _rest)
        }

        _left =  _one_width - _rest;

        for(var i = 0 ; i< count;i ++){
          drawSide( side,0,   _top_slice ,  _left,     _one_width);
          _left +=_one_width;
        }

        if(_rest > 0){
          drawSide(side,  0 ,    _top_slice - _rest_aspect,  _left,    _one_width - _rest );
        }
      }
      if(repeat == "round"){

        _left = 0;
        count =  Math.max(1,Math.round(_top_width / _one_width));
        _one_width = _top_width / count;

        while(_left < _top_width){
          drawSide(side,0,     _top_slice ,  _left,     _one_width );
          _left +=_one_width;
        }
      }
    }

    _draw_border_side(0);
    _draw_border_side(2);
    _draw_border_side(1);
    _draw_border_side(3);

  //top left
    ctx.drawImage(img, 0, 0, slice[3], slice[0], 0, 0, width[3], width[0]);
  //top right
    ctx.drawImage(img, w - slice[1], 0, slice[1], slice[0],
      w2 - width[1], 0, width[1], width[0]);
  //bottom left
    ctx.drawImage(img, 0, h - slice[2], slice[3], slice[2],
      0, h2 - width[2], width[3], width[2]);

  //bottom right
    ctx.drawImage(img, w - slice[1], h - slice[2], slice[1], slice[2],
      w2 - width[1], h2 - width[2], width[1], width[2]);

  }

  /*
   var Frame = function(project,data){

   if(data.border_image){
   data.border_image = mixin( {
   "slice":          [25,25,25,25],
   "width":          [25,25,25,25],
   "fill":           false,
   "repeat":         ["round","round"],
   "outset"	:     [0, 0, 0, 0],
   "slice_units"   : [0, 0, 0, 0],
   "width_units"	: [0, 0, 0, 0],
   "outset_units"	: [0, 0, 0, 0]
   }, data.border_image)
   }


   this.superclass.constructor.call(this,project,data);
   this._add_root("mask");
   this._add_root("image");
   this.example = this._get_example();

   };*/
  fabric.util.getOffsetsClipPath = function(o) {

    return ['M', o[3], o[0], 'L', 100 - o[1], o[0], 'L', 100 - o[1], 100 - o[2], 'L', o[3], 100 - o[2], 'z'].join(" ");
  };

  fabric.util.getRadiusClipPath = function(radius,radius_units, width,height) {

  var br  = radius;
  var bru = radius_units || [1,1,1,1,1,1,1,1];



  var s = {
    "top-left-h":     br[0] * (bru[0] ? height / 100 : 1),
    "top-left-w":     br[1] * (bru[1] ? width / 100 : 1),
    "top-right-h":    br[2] * (bru[2] ? height / 100 : 1),
    "top-right-w":    br[3] * (bru[3] ? width / 100 : 1),
    "bottom-right-w": br[4] * (bru[4] ? width / 100 : 1),
    "bottom-right-h": br[5] * (bru[5] ? height / 100 : 1),
    "bottom-left-w":  br[6] * (bru[6] ? width / 100 : 1),
    "bottom-left-h":  br[7] * (bru[7] ? height / 100 : 1)
  };

  return [
    "M", 0, s["top-left-h"],
    "C", 0, s["top-left-h"], 0, 0, s["top-left-w"], 0,
    "H", width - s["top-right-w"],
    "C", width - s["top-right-w"], 0, width, 0, width, s["top-right-h"],
    "V", height - s["bottom-right-h"],
    "C", width, height - s["bottom-right-h"], width, height, width - s["bottom-right-w"], height,
    "H", s["bottom-left-w"],
    "C", s["bottom-left-w"], height, 0, height, 0, height - s["bottom-left-h"],
    "Z"
  ].join(" ");
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {


var _bindEvents = fabric.Canvas.prototype._bindEvents;
var _onMouseDown_overwritten = fabric.Canvas.prototype._onMouseDown;
var _onMouseUp_overwritten = fabric.Canvas.prototype._onMouseUp;
var _initEventListeners_overwritten = fabric.Canvas.prototype._initEventListeners;
var removeListeners_overwritten = fabric.Canvas.prototype.removeListeners;

fabric.util.object.extend(fabric.Canvas.prototype, {
  tapholdThreshold: 2000,
  _bindEvents: function () {
    _bindEvents.call(this);
    this._onClick = this._onClick.bind(this);
    this._onDoubleClick = this._onDoubleClick.bind(this);
    this._onTapHold = this._onTapHold.bind(this);
  },

  _onDoubleClick: function (e) {
    var self = this;

    var target = self.findTarget(e);
    self.fire('mouse:dblclick', {
      target: target,
      e: e
    });

    if (target && !self.isDrawingMode) {
      // To unify the behavior, the object's double click event does not fire on drawing mode.
      target.fire('dblclick', {
        e: e
      });
    }
  },

  _onDrop: function (e) {
    var _zoom = this.getZoom();
    e.x /= _zoom;
    e.y /= _zoom;
    e.offsetX /= _zoom;
    e.offsetY /= _zoom;
    e.width = e.helper.width() / _zoom;
    e.height = e.helper.height() / _zoom;
    var self = this;
    e.target = self.findTarget(e.originalEvent);

    self.fire('mouse:drop', e);

    if (e.target && !self.isDrawingMode) {
      // To unify the behavior, the object's double click event does not fire on drawing mode.
      e.target.fire('object:drop', e);
    }
  },

  _onDragMove: function (e) {
    var self = this;

    var target = self.findTarget(e.originalEvent);
    self.fire('mouse:dragmove', {
      target: target,
      e: e,
      data: e.data
    });
    if (target && !self.isDrawingMode) {
      // To unify the behavior, the object's double click event does not fire on drawing mode.
      target.fire('object:dragmove', {
        e: e,
        data: e.data
      });
    }
    if (this._last_target == target)return;
    if (this._last_target) {
      self.fire('mouse:dragleave', {
        target: this._last_target,
        e: e,
        data: e.data
      });
      this._last_target.fire('object:dragleave', {
        e: e,
        data: e.data
      });
      this._last_target = false;
    }
    if (target) {

      self.fire('mouse:dragenter', {
        target: target,
        e: e,
        data: e.data
      });
      target.fire('object:dragenter', {
        e: e,
        data: e.data
      });

      this._last_target = target;
    }

  },

  _onClick: function (e) {
    var self = this;

    var target = self.findTarget(e);
    self.fire('mouse:click', {
      target: target,
      e: e
    });

    if (target && !self.isDrawingMode) {
      if (
        target.originalState.left == target.left &&
        target.originalState.top == target.top &&
        target.originalState.scaleX == target.scaleX &&
        target.originalState.scaleY == target.scaleY &&
        target.originalState.angle == target.angle
      ) {
        // To unify the behavior, the object's double click event does not fire on drawing mode.
        target.fire('object:click', {
          e: e
        });
      }
    }
  },

  _onTapHold: function (e) {
    var self = this;

    var target = self.findTarget(e);
    self.fire('touch:taphold', {
      target: target,
      e: e
    });

    if (target && !self.isDrawingMode) {
      // To unify the behavior, the object's tap hold event does not fire on drawing mode.
      target.fire('taphold', {
        e: e
      });
    }

    if (e.type === 'touchend' && self.touchStartTimer != null) {
      clearTimeout(self.touchStartTimer);
    }
  },

  _onMouseDown: function (e) {
    _onMouseDown_overwritten.call(this, e);
    var self = this;
    if (e.type === 'touchstart') {
      var touchStartTimer = setTimeout(function () {
        self._onTapHold(e);
        self.isLongTap = true;
      }, self.tapholdThreshold);
      self.touchStartTimer = touchStartTimer;
      return;
    }

    // Add right click support
    if (e.which === 3) {
      var target = this.findTarget(e);
      self.fire('mouse:down', {target: target, e: e});
      if (target && !self.isDrawingMode) {
        // To unify the behavior, the object's mouse down event does not fire on drawing mode.
        target.fire('mousedown', {
          e: e
        });
      }
    }
  },

  _onMouseUp: function (e) {

    _onMouseUp_overwritten.call(this, e);

    if (e.type === 'touchend') {
      // Process tap hold.
      if (this.touchStartTimer != null) {
        clearTimeout(this.touchStartTimer);
      }
      // Process long tap.
      if (this.isLongTap) {
        this._onLongTapEnd(e);
        this.isLongTap = false;
      }
      // Process double click
      var now = new Date().getTime();
      var lastTouch = this.lastTouch || now + 1;
      var delta = now - lastTouch;
      if (delta < 300 && delta > 0) {
        // After we detct a doubletap, start over
        this.lastTouch = null;

        this._onDoubleTap(e);
      } else {
        this.lastTouch = now;
      }
    }
  },

  _onDoubleTap: function (e) {
    var self = this;

    var target = self.findTarget(e);
    self.fire('touch:doubletap', {
      target: target,
      e: e
    });

    if (target && !self.isDrawingMode) {
      // To unify the behavior, the object's double tap event does not fire on drawing mode.
      target.fire('object:doubletap', {
        e: e
      });
    }
  },

  _onLongTapEnd: function (e) {
    var self = this;

    var target = self.findTarget(e);
    self.fire('touch:longtapend', {
      target: target,
      e: e
    });

    if (target && !self.isDrawingMode) {
      // To unify the behavior, the object's long tap end event does not fire on drawing mode.
      target.fire('object:longtapend', {
        e: e
      });
    }
  },

  _initEventListeners: function () {
    var self = this;
    _initEventListeners_overwritten.call(self);

    fabric.util.addListener(self.upperCanvasEl, 'click', self._onClick);
    fabric.util.addListener(self.upperCanvasEl, 'dblclick', self._onDoubleClick);

    self.on('object:scaling', function (e) {
      if (e.target && e.target._scaling_events_enabled) {
        e.target.fire("scaling", e.e);
      }
    });
    self.on('object:selected', function (e) {
      if (e.target) {
        e.target.fire("object:selected", e.e);
      }
    });
    self.on('mouse:over', function (e) {
      if (e.target) {
        e.target.fire("mouse:over", e.e);
      }
    });

    self.on('mouse:out', function (e) {
      if (e.target) {
        e.target.fire("mouse:out", e.e);
      }
    });

  },

  removeListeners: function () {
    var self = this;
    removeListeners_overwritten.call(self);


    fabric.util.removeListener(self.upperCanvasEl, 'click', self._onClick);
    fabric.util.removeListener(self.upperCanvasEl, 'dblclick', self._onDoubleClick);
  }
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {

fabric.util.object.extend(fabric,{
  debugTimeout: 0
});

fabric.util.object.extend(fabric.Application.prototype, {
  setDebug: function () {
    this.on("ready", function () {
      this.enableDebugging();
    })
  },

  enableDebugging: function(){
    if(fabric.debug){

      var _operand = "color: #2EC06C; font-style: italic;";
      console.info("debug enabled. (use %capp%c, %cproject%c, %ccanvas%c, %ctarget%c in console)",
        _operand, "color: #202020",
        _operand, "color: #202020",
        _operand, "color: #202020",
        _operand, "color: #202020");

      window.app = this;
      window.canvas = this.canvas;
      window.project = this.project;
      window.target = null;
      this.canvas && this.canvas.on("target:changed", function () {
        window.target = this.target;
      });
    }
  }
});

fabric.Object.prototype.debug = function(noBorders){
  var canvas = document.createElement("canvas");
  canvas.width = noBorders ?this.width: this.width + 2;
  canvas.height = noBorders ?this.height : this.height + 2;

  var ctx = canvas.getContext('2d');
  if(!noBorders){
    ctx.lineWidth=1;
    ctx.strokeStyle="yellow";
    ctx.strokeRect(0,0,this.width + 2,this.height+ 2);
    ctx.setLineDash([4,4]);
    ctx.strokeStyle="#000000";
    ctx.strokeRect(0,0,this.width + 2,this.height+ 2);
  }
  ctx.translate(this.width/2  + 1,this.height/2 + 1);
  var _clipTo = this.clipTo;
  delete this.clipTo;
  this.render(ctx,true);
  this.clipTo = _clipTo;
  window.open(canvas.toDataURL(),"_blank");
};


fabric.Application.prototype.logEvents = fabric.Object.prototype.logEvents = function eventsLogger(options){
  var _counter = {};
  for(var i in options){
    _counter[i] = 0;
    this.on(options[i],function(i, event) {
      console.log(i + " " + ++_counter[i],event);
    }.bind(this,i));
  }
};




/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {if(typeof WebFont == "undefined"){
  fabric.webFontsLoader = __webpack_require__(24);
}else{
  fabric.webFontsLoader = WebFont;
}

//интересная библиотека
// http://opentype.js.org/index.html
//todo add step
//
// fabric.Application.prototype.steps.splice(3,0,"loadWebfonts");

fabric.util.object.extend(fabric.Application.prototype, {
  // setWebfonts: function (callback) {
  //
  // },
  setFonts: function (fonts, callback) {
    this.fonts = fonts;
    if(fabric.isLikelyNode){
      //todo шрифты не грузятся на сервере
      return callback();
    }
    // if(!fonts || !fonts.length){
    //   return callback();
    // }
    this.fire("loading",{type: "webfonts"});

    this._fonts = [];

    for(var i in this.fonts){
      this._fonts = this._fonts.concat(this.fonts[i]);
    }
    this._fonts = fabric.util.object.sortBy(this._fonts, function(font){ return font; });

    if(fabric.webFontsLoader && (this.fonts.google && this.fonts.google.length || this.fonts.custom && this.fonts.custom.length) ){
      var fonts_options = {
        active: function () {
          callback();
        }
      };
      if(this.fonts.google && this.fonts.google.length){
        fonts_options.google =  {
          families: this.fonts.google
        };
      }
      if(this.fonts.custom && this.fonts.custom.length){
        fonts_options.custom =  {
          families: this.fonts.custom
        };
      }

      fabric.webFontsLoader.load(fonts_options);
    } else {
      callback();
    }
    if (this.waitForWebfonts) {
      fabric.util.fonts.waitFor(this.waitForWebfonts, callback)
    }
  },
  fonts: {
    standart: [
      'Arial',
      'Arial Black',
      'Comic Sans MS',
      'Courier New',
      'Georgia',
      'Impact',
      'Lucida Console',
      'Tahoma',
      'Times New Roman',
      'Geneva',
      'sans-serif',
      'serif',
      'monospace',
      'cursive'
    ],
    google: [],
    custom: []
  }
});


fabric.util.fonts = {
  waitFor: function (fonts, callback) {
    var loadedFonts = 0;
    for (var i = 0, l = fonts.length; i < l; ++i) {
      (function (font) {
        var node = document.createElement('span');
        // Characters that vary significantly among different fonts
        node.innerHTML = 'giItT1WQy@!-/#';
        // Visible - so we can measure it - but not on the screen
        node.style.position = 'absolute';
        node.style.left = '-10000px';
        node.style.top = '-10000px';
        // Large font size makes even subtle changes obvious
        node.style.fontSize = '300px';
        // Reset any font properties
        node.style.fontFamily = 'sans-serif';
        node.style.fontVariant = 'normal';
        node.style.fontStyle = 'normal';
        node.style.fontWeight = 'normal';
        node.style.letterSpacing = '0';
        document.body.appendChild(node);

        // Remember width with no applied web font
        var width = node.offsetWidth;

        node.style.fontFamily = font;

        var interval;

        function checkFont() {
          // Compare current width with original width
          if (node && node.offsetWidth != width) {
            ++loadedFonts;
            node.parentNode.removeChild(node);
            node = null;
          }

          // If all fonts have been loaded
          if (loadedFonts >= fonts.length) {
            if (interval) {
              clearInterval(interval);
            }
            if (loadedFonts == fonts.length) {
              setTimeout(function () {
                callback();
              }, 50)
              return true;
            }
          }
        }

        if (!checkFont()) {
          interval = setInterval(checkFont, 50);
        }
      })(fonts[i]);
    }
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric, __dirname) {


fabric.util.mediaRoot = "";
fabric.util.addNoCache = false;

fabric.util._loadImage_overwritten = fabric.util.loadImage;


fabric.util.object.extend(fabric.Application.prototype, {
  optionsOrder: (function(){
    var oo = fabric.Application.prototype.optionsOrder;
    oo.splice(oo.indexOf("canvasContainer"),0,"mediaRoot");
    return oo;
  })(),
  setMediaRoot: function (_mediaRoot) {
    if (_mediaRoot) {
      var _dirname;
      if (fabric.isLikelyNode) {
        _dirname = __dirname;
      } else {
        _dirname = fabric.util.path.getParentDirectoryUrl(window.location.href);
      }

    //  if ((_mediaRoot.indexOf("./") == 0)) {
    //  }
      var _last = _mediaRoot[_mediaRoot.length - 1];
      if (_last != "/" && _last != "\\") {
        _mediaRoot += "/"
      }
      _mediaRoot = fabric.util.path.resolve(_dirname + _mediaRoot);
      fabric.util.mediaRoot = _mediaRoot;
    }
  }
});




// if(!fabric.isLikelyNode){
//
//   var URL = require('url'),
//     HTTP = require('http'),
//     HTTPS = require('https'),
//     Image = require('canvas').Image;
//
//   /** @private */
//   var request = function (url, encoding, callback) {
//     var oURL = URL.parse(url);
//
//     // detect if http or https is used
//     if ( !oURL.port ) {
//       oURL.port = ( oURL.protocol.indexOf('https:') === 0 ) ? 443 : 80;
//     }
//
//     // assign request handler based on protocol
//     var reqHandler = (oURL.protocol.indexOf('https:') === 0 ) ? HTTPS : HTTP,
//       req = reqHandler.request({
//         hostname: oURL.hostname,
//         port: oURL.port,
//         path: oURL.path,
//         method: 'GET'
//       }, function(response) {
//         var body = '';
//         if (encoding) {
//           response.setEncoding(encoding);
//         }
//         response.on('end', function () {
//           callback(body);
//         });
//         response.on('data', function (chunk) {
//           if (response.statusCode === 200) {
//             body += chunk;
//           }
//         });
//       });
//
//     req.on('error', function(err) {
//       if (err.errno === process.ECONNREFUSED) {
//         fabric.log('ECONNREFUSED: connection refused to ' + oURL.hostname + ':' + oURL.port);
//       }
//       else {
//         fabric.log(err.message);
//       }
//       callback(null);
//     });
//
//     req.end();
//   }
//
//   /** @private */
//   var requestFs = function (path, callback) {
//     var fs = require('fs');
//     fs.readFile(path, function (err, data) {
//       if (err) {
//         fabric.log(err);
//         throw err;
//       }
//       else {
//         callback(data);
//       }
//     });
//   };
//
//   fabric.util.loadImage = function(url, callback, context) {
//
//
//     var img = new Image();
//     img.onerror = function(){
//       console.log("error");
//       callback && callback.call(context, null, true);
//     };
//     img.onload = function(){
//       console.log("success");
//       callback && callback.call(context, img);
//     };
//
//     function createImageAndCallBack(data) {
//       if (data) {
//         img.src = data;
//         // preserving original url, which seems to be lost in node-canvas
//         img._src = url;
//       }
//       else {
//         img = null;
//         callback && callback.call(context, null, true);
//       }
//     }
//
//     if (url && (url instanceof Buffer || url.indexOf('data') === 0)) {
//       img.src = img._src = url;
//     }
//     else if (url && url.indexOf('http') !== 0) {
//       var path = require("path");
//       url = fabric.util.getURL(url);
//       url =   path.resolve(fabric.util.mediaRoot, url);
//       img.src =  url;
//       // requestFs(url, createImageAndCallBack);
//     }
//     else if (url) {
//       request(url, 'binary', createImageAndCallBack);
//     }
//     else {
//       callback && callback.call(context, url);
//     }
//   };
// }else{
  fabric.util.loadResources = function (resources, callback, context, crossOrigin) {

    var loadedResources = {};
    var loader = fabric.util.queueLoad(Object.keys(resources).length,function(){
      callback(loadedResources);
    });
    for(var i in resources){
      (function(i){
        fabric.util.loadImage(resources[i], function(image){
          loadedResources[i] = image;
          loader();
        }, context, crossOrigin);
      }(i));
    }
  };

  fabric.util.loadImage = function (url, callback, context, crossOrigin) {
    url = fabric.util.getURL(url);
    function _check_errors(img){
      //изображение не было загружено
      if (img) {
        callback.call(this,img);
      } else {
        fabric.errors.push({type: "image", message: "Image was not loaded"});
        fabric.util._loadImage_overwritten(fabric.media.error, callback, context, crossOrigin || 'Anonymous');
      }
    }

    if(fabric.debugTimeout){
      setTimeout(fabric.util._loadImage_overwritten.bind(this,url, _check_errors , context, crossOrigin || 'Anonymous'),fabric.debugTimeout)
    }else{
      fabric.util._loadImage_overwritten(url, _check_errors , context, crossOrigin || 'Anonymous');
    }
  };


fabric.util.getURL = function(url){
  if (url.indexOf('blob') !== 0 && url.indexOf('data') !== 0 && url.indexOf('://') == -1) {
    url = fabric.util.mediaRoot + url;
  }
  if (fabric.util.addNoCache && /^(http|https)\:\/\//.test(url)) {
    url += '?no-cache=' + new Date().getTime()
  }
  return url;
};


fabric.util.loadVideo = function (sources, callback, context, crossOrigin) {

  function loadIt(url){
    video.src = fabric.util.getURL(url);
    video.addEventListener("loadeddata", function(){
      callback(video);
    }, true);
    video.load();
  }




  var video = document.createElement('video');


  //trying to find the most suitable source for current browser
  for (var type in sources) {
    if(video.canPlayType(type) == "yes"){
      this.mediaType = type;
      loadIt(sources[type]);
      return;
    }
  }
  for (var type in sources) {
    if(video.canPlayType(type) == "maybe"){
      this.mediaType = type;
      loadIt(sources[type]);
      return;
    }
  }
  console.warn("video sources formats is not supported")


};

fabric.util._loadSVGFromURL_overwritten = fabric.loadSVGFromURL;
fabric.loadSVGFromURL = function (url, callback, reviver) {
  if (url.indexOf('data') !== 0 && url.indexOf('://') == -1) {
    url = fabric.util.mediaRoot + url;
  }
  if (fabric.util.addNoCache && /^(http|https)\:\/\//.test(url)) {
    url += '?no-cache=' + moment().format('x');
  }
  fabric.util._loadSVGFromURL_overwritten(url, function(data){
     if(data){
       return callback(data);
     }

    var xml = jQuery.parseXML(atob(fabric.media.error.substr(26)));

    fabric.parseSVGDocument(xml.documentElement, function (results, options) {
      callback && callback(results, options);
    }, reviver);

  }, reviver);
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), "/"))

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {
/*
export interface GalleryData : {
 target: fabricjs object
}
*/


fabric.Application.prototype.setElementFromMenu = function (selectedData) {
  this.canvas.createImageObject(selectedData.image, this.uploadClass);
};

fabric.Application.prototype.createGallery = function (target, $el, options) {
  if($el.constructor === String){
    $el = $("#" + $el);
  }
  options = options || {};

  if(target.galleryCategory){
    options.category = target.galleryCategory;
  }

  $el.empty();
  var library = this.getLibraryElements(options);

  _.each(library,function(libraryItem){
    var img = new Image();
    img.src = fabric.util.mediaRoot + libraryItem.src;

    var $img = $(img).width(100).height(100)
      .click(function(){

        var selectedData = {
          image: img,
          data: libraryItem,
          options: options
        };

        target.setElementFromMenu(selectedData);
      });

    $el.append($img);
  });
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {

var History = __webpack_require__(66);

History.prototype.insertRecords = false;
History.prototype.actions = {
  undo: {
    keyCode: 'z',
    ctrlKey:  true,
    observe: 'changed',
    className: 'fa fa-undo',
    title: 'undo',
    enabled: 'canUndo',
    action: function(){
      this.undo();
    }
  },
  records: {
    title:          "records",
    itemClassName:  "filters-selector",
    className:      "fa fa-history",
    type:           "select",
    templateSelection: function(state, container) {
      if (state.any) {
        return state.text;
      }
      return $('<span>' + state.id + ":" + state.type + '</span>');
    },
    templateResult: function(state, container,data) {
      if(!state.type)return;
      var _keys = state.originalState && Object.keys(state.originalState).join(',') || '';
      var type = state.object && state.object.type || '';
      return $("<span>{id}:{type}({otype} {keys})</span>".format(fabric.util.object.extend({keys : _keys, otype: type},state)));
      // if(state.id != "none"){
      //   var $canvas = $('<canvas>');
      //   $el.prepend($canvas);
      // }
      // return $el;
    },
    value:      {
      observe: 'changed',
      set : function(val,filtersData){
        this.goto(val);
      },
      get: function(){
        return this.records[this.current].id;
      },
      options: function(){
        return this.records;
      }
    }
  },
  redo: {
    keyCode: 'y',
    ctrlKey:  true,
    observe: 'changed',
    className: 'fa fa-repeat',
    title: 'redo',
    enabled: 'canRedo',
    action: function(){
      this.redo();
    }
  }
};

fabric.util.object.extend(fabric.SlideCanvas.prototype.actions, {
  history: {
    title: 'history',
    type: 'menu',
    target: function () {
      return this.history;
    },
    menu: function () {
      return this.actions;
    }
  }
});



fabric.util.object.extend(fabric.Canvas.prototype, {
  insertHistory: false,
  onObjectModified: function (e) {
    if (!this.history.enabled || this.processing || this.history.processing) {
      return false;
    }
    var _canvas = e.target.canvas || e.target.wrapperEl && e.target;

    this.history.add({
      canvas:  e.target.canvas.originalSlide || e.target.canvas,
      originalState:  e.states.original,
      modifiedState:  e.states.modified,
      object: e.target,
      type: 'object:modified',
      undo: function (_action) {
        _action.object.set(_action.originalState);
        if(_action.canvas.mirrorSlide == this.canvas){
          _action.object.setCoords();
          var _canvas = this.canvas || this;
          _canvas.renderAll();
        }
        _action.canvas.fire('object:modified', { target: _action.object });
        _action.object.fire('modified');
        _action.canvas.renderAll();
      },
      redo: function (_action) {
        _action.object.set(_action.modifiedState);
        _action.object.setCoords();
        if(_action.canvas.mirrorSlide == this.canvas){
          _action.object.setCoords();
          var _canvas = this.canvas || this;
          _canvas.renderAll();
        }
        _action.canvas.fire('object:modified', { target: _action.object });
        _action.object.fire('modified');
        _action.canvas.renderAll();
      }
    });
  },
  clearHistory: function () {
    this.history.clear();
  },
  disableHistory: function () {
    this.history.enabled = false;
  },
  _add_object_history_action: function (_action) {
    var _canvas = this.canvas || this;
    if(this.canvas && _action.canvas.mirrorSlide == this.canvas){
      _canvas.add(_action.object);
      _canvas.setActiveObject(_action.object);
      _canvas.renderAll();
    }else{
      _action.canvas.add(_action.object);
    }
    _action.canvas.renderAll();
  },

  _remove_object_history_action: function (_action) {
    _action.canvas.remove(_action.object);
    _action.canvas.renderAll();
    if(this.canvas && _action.canvas.mirrorSlide == this.canvas){
      this.canvas.renderAll();
    }
  },

  onObjectRemoved: function (e) {
    if (!this.history.enabled || this.processing || this.history.processing) {
      return false;
    }
    this.history.add({
      canvas: e.target.canvas.originalSlide || e.target.canvas,
      object: e.target,
      type: 'object:removed',
      redo: this._remove_object_history_action,
      undo: this._add_object_history_action
    });
  },
  onDrawAfter: function(event){
    if (!this.history.enabled || this.processing || this.history.processing) {
      return false;
    }
    this.history.add(this.freeDrawingBrush.getHistoryRecord(event))
  },
  onObjectAdded: function (e) {
    if (!this.history.enabled || this.processing || this.history.processing) {
      return false;
    }
    this.history.add({
      canvas:  e.target.canvas.originalSlide || e.target.canvas,
      object: e.target,
      type: 'object:added',
      undo: this._remove_object_history_action,
      redo: this._add_object_history_action
    });
  },
  initHistory: function (history) {
    if(!history){
      history = new History(this);
      history.application = this.application;
    }

    this.history = history;
    this.on({
      'loading:begin':    this.clearHistory,
      'draw:after':       this.onDrawAfter,
      'object:modified':  this.onObjectModified,
      'object:added':     this.onObjectAdded,
      'object:removed':   this.onObjectRemoved
    });

    var _this = this;
    this.history.on('changed', function(e){
      if(this.activeAction.canvas){
        this.activeAction.canvas.moment = e.action.moment;
      }
    });
    var proto = this.application.prototypes.History;
    if(proto){
      if(proto.eventListeners){
        history.on(proto.eventListeners);
      }
    }
  },
  enableHistory: function () {
    this.history.enabled = true;
  }
});

fabric.HISTORY_OPTIONS = {
  INDIVIDUAL: 0,
  SHARED: 1
};

fabric.util.object.extend(fabric.Application.prototype, {
  history: true,
  setHistory: function(historyOption){

    if(historyOption === fabric.HISTORY_OPTIONS.SHARED){
      this.history = new History(this);
      this.enableHistory();

      this.on("ready",function(){
        if (this.canvas) {
          this.canvas.initHistory(this.history);
        }
      })

    }
    if(historyOption === fabric.HISTORY_OPTIONS.INDIVIDUAL){
      //todo unsupported
    }

  },
  actions: fabric.util.object.extend(fabric.Application.prototype.actions,{
    history: {
      insert: 'historyTools',
      title: 'history',
      type: 'menu',
      target: function () {
        return this.history;
      },
      menu: function () {
        return this.actions;
      }
    }
  }),
  _default_event_listeners : {
    "slide:change:begin" : function(){
      this.processing = true ;
      if(this.history){
        this.history.processing = true ;
      }
    },
    "slide:changed" : function(){
      this.processing = false;
      if(this.history){
        this.history.processing = false;
      }
    }
  },
  historyTools: false,
  enableHistory: function () {
    this.history.enabled = true;
  }
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {

{

  /*
   fabric.Image.filters.Redify = fabric.util.createClass(fabric.Image.filters.BaseFilter, {
   type: 'Redify',
   applyTo: function (canvasEl) {
   var context = canvasEl.getContext('2d'),
   imageData = context.getImageData(0, 0,
   canvasEl.width, canvasEl.height),
   data = imageData.data;
   for (var i = 0, len = data.length; i < len; i += 4) {
   data[i + 1] = 0;
   data[i + 2] = 0;
   }
   context.putImageData(imageData, 0, 0);
   }
   });
   fabric.Image.filters.Redify.fromObject = function (object) {
   return new fabric.Image.filters.Redify(object);
   };
   */

  fabric.Image.filters.Sharpen = fabric.util.createClass(fabric.Image.filters.Convolute, {
    type: 'Sharpen',
    initialize: function(options) {
      options = options || { };

      this.opaque = options.opaque;
      this.matrix = options.matrix || [
          0, -1, 0,
          -1, 5, -1,
          0, -1, 0
        ];
    }
  });
  fabric.Image.filters.Sharpen.fromObject = function (object) {
    return new fabric.Image.filters.Sharpen(object);
  };

  fabric.Image.filters.Blur = fabric.util.createClass(fabric.Image.filters.Convolute, {
    type: 'Blur',
    initialize: function(options) {
      options = options || { };

      var _v = 1 / 9;
      this.opaque = options.opaque;
      this.matrix = options.matrix || [
          _v, _v, _v,
          _v, _v, _v,
          _v, _v, _v
        ];
    }
  });
  fabric.Image.filters.Blur.fromObject = function (object) {
    return new fabric.Image.filters.Blur(object);
  };

  fabric.Image.filters.Emboss = fabric.util.createClass(fabric.Image.filters.Convolute, {
    type: 'Emboss',
    initialize: function(options) {
      options = options || { };

      this.opaque = options.opaque;
      this.matrix = options.matrix || [
          1,   1,   1,
          1, 0.7,  -1,
          -1,  -1,  -1
        ];
    }
  });
  fabric.Image.filters.Emboss.fromObject = function (object) {
    return new fabric.Image.filters.Emboss(object);
  };


  fabric.Image.filters.Mask.prototype.maskFilter = true;

  var prototypeOptions = {
    Brightness: {
      "brightness": {value: 100, min: 0, max: 255}
    },
    Noise: {
      "noise": {value: 100, min: 0, max: 1000}
    },
    Convolute: {
      "opaque": {value: true, type: "boolean" },
      "matrix": {value: [1, 1, 1, 1, 1, 1, 1, 1, 1], type: "matrix" }
    },
    Blur: {},
    Sharpen: {},
    Emboss: {},
    Multiply: {
      "color": {type: 'color', value: "#F0F"}
    },
    Pixelate: {
      "blocksize": {value: 4, min: 2, max: 20}
    },
    Tint: {
      "color":  {type: 'color', value: "#3513B0"},
      "opacity": {value: 1, min: 0, max: 1, step: 0.1}
    },
    Mask: {
      mask: {
        type: 'image',
        value: {
          src:  "photos/explosion.png"
        }
      },
      channel: { value: 0}
    },
    Blend: {
      "color": {type: 'color', value: "#3513B0"},
      "mode": {
        value: "add",
        options: [
          {value: "add", title: "Add"},
          {value: "diff", title: "Diff"},
          {value: "subtract", title: "Subtract"},
          {value: "multiply", title: "Multiply"},
          {value: "screen", title: "Screen"},
          {value: "lighten", title: "Lighten"},
          {value: "darken", title: "Darken"}
        ]
      }
    }
  };


  for(var i in prototypeOptions){
    fabric.Image.filters[i].prototype.options = prototypeOptions[i];
  }



}




fabric.Image.getFiltersList = function(el){

  el = el || fabric.Image.prototype;
  var filterList = [];
  for(var i in el.availableFilters){
    var _f = fabric.Image.filters[el.availableFilters[i]];

    var _data = {
      type:     el.availableFilters[i]
    };
    if(_f.prototype.custom){
      if(!el.customFilters){
        continue;
      }
    }
    if(_f.prototype.maskFilter){
      if(!el.maskFilter){
        continue;
      }
    }
    if(_f.prototype.caman){
      if(!el.camanFilters){
        continue;
      }
      _data.caman = true;
    }else{
      if(!el.fabricFilters){
        continue;
      }
    }
    if(_f.prototype.options){
      _data.options = fabric.util.object.clone(_f.prototype.options);
    }
    _data.text = _f.prototype.title || el.availableFilters[i];

    filterList.push(_data)
  }
  return filterList;
};

fabric.util.object.extend(fabric.Image.prototype, {
  camanFilters: false,
  fabricFilters: true,
  customFilters: false,
  maskFilter: false,
  getFiltersData : function () {
    var _filters = fabric.Image.getFiltersList(this);
    for (var i in this.filters) {
      var _f = fabric.util.object.findWhere(_filters,{type: fabric.util.string.capitalize(this.filters[i].type)})
      if(_f){
        _f.enabled = true;
      }
    }
    return _filters;
  },
  availableFilters: [
    //fabricJS
    "Grayscale",
    "Sepia",
    "Sepia2",
    "Invert",
    "Blur",
    "Sharpen",
    "Emboss",
    "Blend",
    "Tint",
    "Multiply",
    //"Convolute",
    "Noise",
    "Brightness",
    "Pixelate",
    "GradientTransparency",
    "Mask"
  ],
  getFilter: function (filterName) {
    filterName = fabric.util.string.uncapitalize(filterName);
    for(var i in this.filters){
      if(fabric.util.string.uncapitalize(this.filters[i].type) === filterName){
        return this.filters[i];
      }
    }
    return false;
  },
  setFilter: function (filter) {

    var _old_filter = false;
    if(filter.replace){
      this.filters = [];
    }else{
      _old_filter = fabric.util.object.findWhere(this.filters, {type: filter.type});
      _old_filter = _old_filter && _old_filter.toObject() || false;
    }


    if(filter.type){
      var _type = fabric.util.string.capitalize(filter.type,true);
      var _new_filter = filter.options && fabric.util.object.clone(filter.options);


    }else{
      _type = false;
      _new_filter = false;
    }

    /* this.project.history.add({
     data:   [$.extend(true, {}, this.data)],
     slide:  this.slide,
     object: this,
     redo:   filter,
     undo:   _old_filter ,
     type:   "filter",
     undoFn: function(action){
     action.object._set_filter(action.undo);
     },
     redoFn:  function(action){
     action.object._set_filter(action.redo);
     }
     });
     */
    this._set_filter(_type, _new_filter, _old_filter);

  },

  _set_filter: function (_type, _new_filter) {

    if(_type){
      var _old_filter = this.getFilter(_type);
    }

    if (_old_filter && _new_filter) {
      for (var i in _new_filter) {
        _old_filter[i] = _new_filter[i];
      }
    } else if (_old_filter && !_new_filter) {
      this.filters.splice(this.filters.indexOf(_old_filter), 1);
    }
    if (!_old_filter && _new_filter) {
      this.filters.push(new fabric.Image.filters[_type](_new_filter));
    }
    this.applyFilters(this.canvas.renderAll.bind(this.canvas));
  },

  insertImageFilters: false,
  actions : fabric.util.object.extend(fabric.Image.prototype.actions, {
    imageFilters: {
      title: "фильтр",
      itemClassName: "filters-selector",
      className: "fa fa-filter",
      type: "select",
      templateSelection: function (state, container) {
        if (state.any) {
          return state.text;
        }
        return $('<span><span class="color-span" style="background-color:' + state.text + '"></span>' + state.text + '</span>');
      },
      templateResult: function (state, container, data) {
        var $el = $('<span>' + state.text + '</span>');
        if (state.id != "none") {
          var $canvas = $('<canvas>');
          fabric.util.drawFilter($canvas[0], data.target._element, state.id, {
            height: 22
          });
          $el.prepend($canvas);
        }
        return $el;
      },
      value: {
        set: function (val, filtersData) {
          var options = false;
          if (val == "none") {
            val = false;
          } else {
            var _f = _.findWhere(filtersData, {id: val});
            _f.enabled = !_f.enabled;
            for (var i in _f.options) {
              if ($.isNumeric(_f.options[i])) {
                _f.options[i] = parseFloat(_f.options[i]);
              }
            }
            if (_f.enabled) {
              options = {};
              for (var i in _f.options) {
                options[i] = _f.options[i].value;
              }
            }


          }
          this.setFilter({
            type: val,
            options: options,
            replace: true
          });
        },
        get: function () {
          return this.filters.length ? fabric.util.string.capitalize(this.filters[0].type, true) : "none"
        },
        options: function () {

          var _filters = this.getFiltersData();
          for (var i in _filters) {
            _filters[i].id = _filters[i].type;
          }
          return [{
            id: 'none',
            text: 'original',
            enabled: !this.filters || !this.filters.length
          }].concat(_filters);

        }
      }
    }
  })
});

//
// fabric.Image.filterManager = {
//
//   //hide: function(object){
//   //
//   //},
//   show: function (object) {
//     this.activeObject = object;
//     this.fire('show', object);
//     this.on('target:changed', object)
//   }
// // };



// fabric.util.observable(fabric.Image.filterManager);

fabric.util.drawFilter = function(element,src, filterName ,options){
  if(src.constructor === String){
    fabric.util.loadImage(src,function(el){
      fabric.util._drawFilter(element, el, filterName ,options);
    })
  }else{
    fabric.util._drawFilter(element,src, filterName ,options);
  }
};

fabric.util._drawFilter = function(element, el, filterName ,options){

  var ctx =element.getContext("2d");
  if(options){
    if(options.width && options.height){
      element.width = options.width;
      element.height = options.height;
    }else if(options.width){
      element.width = options.width;
      element.height = options.width * (el.height / el.width);
    }else if(options.height){
      element.height = options.height;
      element.width = options.height * (el.width / el.height);
    }
  }

  ctx.drawImage(el,0,0,element.width,element.height);
  if(!filterName)return;
  filterName = fabric.util.string.capitalize(filterName,true);

  if(fabric.Image.filters[filterName]){
    var _filter = new fabric.Image.filters[filterName]()
  }else{
    var _filter =fabric.Image.filters[filterName].create({});
  }

  //var _filter = new fabric.Image.filters[filterName];
  if(_filter){
    var _fo = fabric.Image.filters[filterName].prototype.options;
    var filterOptions = {};
    for(var i in _fo){
      filterOptions[i] = _fo[i].value;

    }
    fabric.util.object.extend(_filter,filterOptions);
    _filter.imageData = ctx.getImageData(0,0,element.width,element.height);
    _filter.applyTo(element);
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {/**
* InteractiveMode mixin. Allow to switch between pan/edit/drawing canvas modes.
*/




var _mouse_down_overwritten = fabric.Canvas.prototype._onMouseDown;
var _mouse_up_overwritten = fabric.Canvas.prototype._onMouseUp;
var _mouse_move_overwritten = fabric.Canvas.prototype._onMouseMove;

fabric.util.object.extend(fabric.SlideCanvas.prototype, {
  _initEventListeners_overwritten: fabric.Canvas.prototype._initEventListeners,
  _initEventListeners: function () {
    this._initEventListeners_overwritten();
    this.___onKeyDown = this._onKeyDown.bind(this);
    fabric.util.addListener(fabric.window, 'keydown', this.___onKeyDown);
  },
  _removeListeners_overwritten: fabric.Canvas.prototype.removeListeners,
  removeListeners: function () {
    this._removeListeners_overwritten();
    fabric.util.removeListener(fabric.window, 'keydown', this.___onKeyDown);
  },
  _onKeyDown: function (e) {
    return this._applyMixedMode(e);
  },
  getInteractiveMode: function () {
    return this.interactiveMode;
  },
  setInteractiveMode: function (tool) {
    //todo checkthis out
    // if (tool === 'hand') {
    //   this.setCursor('pointer');
    // }
    this.isDrawingMode = (tool === 'draw');
    this.isHandMode = (tool === 'hand');
    this.interactive = (tool !== 'disabled');
    this.isMixedMode = (tool === 'mixed');

    if (!this.interactive) {
      this.upperCanvasEl.style.cursor = 'default';
    }
    this.interactiveMode = tool;
  },

  /**
   *  current mode
   *  @values default | hand | selection
   *  @comment
   *      hand      - moving canvas
   *      draw - drawing reactangles
   *      selection - default behavior
   */
  interactiveMode: 'default',

  isHandMode: false,
  _handModeCursorMove: false,
  _handModeCursorDown: false,
  _handModeCursorPosition: {x: 0, y: 0},
  _handModeMouseMove: function (e) {
    if (this._handModeCursorDown === true) {

      if (e.pageY === this._handModeCursorPosition.y && e.pageX === this._handModeCursorPosition.x) {
        return;
      }

      this._handModeCursorMove = true;

      var scroll = {x: this.viewportTransform[4], y: this.viewportTransform[5]};

      var newScroll = {
        x: scroll.x - (this._handModeCursorPosition.x - e.pageX),
        y: scroll.y - (this._handModeCursorPosition.y - e.pageY)
      };

      var dims = {
        width: this.size.width * this.zoom - this.lowerCanvasEl.width,
        height: this.size.height * this.zoom - this.lowerCanvasEl.height
      };
      /*  todo need to add some restrictions later
       //Math.max(Math.min(0,newScroll.x),-dims.width);
       //Math.max(Math.min(0,newScroll.y),-dims.height);
       */
      this.viewportTransform[4] = newScroll.x;
      this.viewportTransform[5] = newScroll.y;

      this.fire('viewport:translate');

      this.renderAll();
      for (var i = 0, len = this._objects.length; i < len; i++) {
        this._objects[i].setCoords();
      }

      this._handModeCursorPosition.y = e.pageY;
      this._handModeCursorPosition.x = e.pageX;
    }
  },
  _handModeMouseUp: function () {
    this._handModeCursorDown = false;
    if (!this._handModeCursorMove) {

    }
  },
  _handModeMouseDown: function (e) {

    this._handModeCursorMove = false;
    this._handModeCursorDown = true;
    this._handModeCursorPosition = {
      y: e.pageY,
      x: e.pageX
    };
  },
  handModeEnabled: false,
  handModeKey: "Alt",
  _applyMixedMode: function (e) {
    this._current_target = this.findTarget(e);

    if (this.handModeEnabled && e.altKey || e.key === this.handModeKey) {
      //if shift use hand mode
      if (!this.isHandMode) {
        this.isHandMode = true;
        this.isDrawingMode = false;
        this.setCursor('pointer');
      }
    } else if (this.isMixedMode && !this._isCurrentlyDrawing && !this._currentTransform) {

      this.isHandMode = false;

      if (this._current_target) {
        if (this.freeDrawingBrush && this._current_target.allowDrawing) {
          var corner = this._current_target._findTargetCorner(this.getPointer(e, true));
          if (!corner) {
            this.isDrawingMode = true;
          } else {
            this.isDrawingMode = false;
          }
        } else if (this.isDrawingMode) {
          this.isDrawingMode = false;
        }
      } else {
        if (this.freeDrawingBrush && !this.isDrawingMode) {
          this.setCursor(this.freeDrawingCursor);
          this.isDrawingMode = true;
        }
      }
    } else {
      this.isHandMode = false;
    }

  },
  _onMouseMove: function (e) {
    if (!this.interactive) {
      return;
    }

    this._applyMixedMode(e);

    if (this.isHandMode) {

      if (this._current_target && this._current_target.selectable_overwritten) {
        this._current_target.selectable = true;
      }

      if (this._handModeActive) {
        return this._handModeMouseMove(e);
      }
      this.fire('mouse:move', {target: this._current_target, e: e});
      this._current_target && this._current_target.fire('mousemove', {e: e});
      return true;
    } else {
      return _mouse_move_overwritten.call(this, e);
    }
  }, /**
   * @private
   */
  _onScale: function (e, transform, x, y) {

    var useUniScale = e.shiftKey ^ this.shiftInverted;
    // rotate object only if shift key is not pressed
    // and if it is not a group we are transforming
    if ((useUniScale || this.uniScaleTransform) && !transform.target.get('lockUniScaling')) {
      transform.currentAction = 'scale';
      return this._scaleObject(x, y);
    }
    else {
      // Switch from a normal resize to proportional
      if (!transform.reset && transform.currentAction === 'scale') {
        this._resetCurrentTransform(e);
      }

      transform.currentAction = 'scaleEqually';
      return this._scaleObject(x, y, 'equally');
    }
  },
  shiftInverted: false,
  _setCursorFromEvent_overwritten: fabric.Canvas.prototype._setCursorFromEvent,
  _setCursorFromEvent: function (e, target) {
    if (this.isHandMode) {
      this.setCursor('pointer');
    } else {
      this._setCursorFromEvent_overwritten(e, target);
    }
  },
  _onMouseDown: function (e) {
    if (!this.interactive) {
      return;
    }

    e.preventDefault();
    e.stopPropagation();

    this._applyMixedMode(e);
    if (this.isHandMode && this._current_target) {
      this._current_target.selectable_overwritten = this._current_target.selectable;
      this._current_target.selectable = false;
    }

    _mouse_down_overwritten.call(this, e);


    if (this.isHandMode) {

      if (this._current_target && this._current_target.selectable_overwritten) {
        this._current_target.selectable = true;
      }
      this._handModeActive = true;
      this._handModeMouseDown(e);
    }
  },

  _onMouseUp: function (e) {
    if (!this.interactive) {
      return;
    }
    e.preventDefault();
    e.stopPropagation();
    _mouse_up_overwritten.call(this, e);

    if (this.isHandMode) {
      this._handModeActive = false;
    }
  }
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {

fabric.objectsLibrary = {
  text: {
    title: "Text",
    type: "i-text",
    text: "Текст"
  },
  line: {
    type: "line",
    strokeWidth: 5,
    stroke: "black",
    scaleX: 1,
    scaleY: 1,
    x1: 0,
    x2: 100,
    y1: 0,
    y2: 50
  },
  triangle: {
    type: "triangle",
    width: function(w,h){ return Math.min(w,h) - 4},
    height: function(w,h){ return Math.min(w,h) - 4}
  },
  rectangle: {
    type: "rect",
    width: function(w,h){ return Math.min(w,h) - 4},
    height: function(w,h){ return Math.min(w,h) - 4}
  },
  polygon: {
    scaleX: 1,
    scaleY: 1,
    type: "polygon",
    points: function(w,h) {
      return [
        {x: 25, y: 1},
        {x: 31, y: 18},
        {x: 49, y: 18},
        {x: 35, y: 29},
        {x: 40, y: 46},
        {x: 25, y: 36},
        {x: 10, y: 46},
        {x: 15, y: 29},
        {x:  1, y: 18},
        {x: 19, y: 18}
      ];
    }
  },
  path: {
    "type": "path",
    "path":  "m581.077942,2.537359c-2.053223,0.047071 -4.04071,0.188348 -6.108093,0.352907c-33.05542,2.663918 -62.235901,19.640541 -77.057678,44.925953l-7.8573,19.135319c1.698822,-6.633144 4.302979,-13.065384 7.8573,-19.135319c-26.430695,-22.16293 -63.531677,-32.388445 -100.192383,-27.574373c-36.661469,4.788353 -68.503082,24.041758 -85.901978,51.935225c-49.116486,-24.490013 -110.34288,-22.999454 -157.711807,3.860092c-47.369164,26.86068 -72.61673,74.40551 -64.941162,122.38308l5.021355,19.49968c-2.263329,-6.38501 -3.960793,-12.887695 -5.021355,-19.49968l-0.761948,1.798569c-41.179165,3.625244 -74.945375,29.465134 -83.716398,64.059235c-8.771805,34.597748 9.46701,70.085876 45.185621,87.96701l55.776558,10.973114c-19.480217,1.291962 -38.915543,-2.534515 -55.776558,-10.973114c-27.5478,24.96817 -33.888516,61.935303 -15.71492,92.467834c18.173733,30.524719 56.988899,48.110687 97.030457,44.11734l24.339722,-5.21109c-7.827499,2.651611 -15.960983,4.379059 -24.339722,5.21109c22.730042,33.857269 60.428192,58.556244 104.66893,68.383514c44.2491,9.81366 91.240952,4.014771 130.425949,-16.094604c31.96701,40.793823 88.707642,62.217468 145.596313,54.99707c56.902466,-7.219666 103.833984,-41.81427 120.501343,-88.770996l5.781433,-26.239532c-0.863708,8.909546 -2.742249,17.681366 -5.781433,26.239532c39.133301,20.753662 88.353333,21.927307 128.785095,3.049316c40.439819,-18.874084 65.665771,-54.869049 66.036133,-94.078247l-14.495605,-58.580597l-57.105713,-39.630768c44.163452,22.374573 71.992615,56.467255 71.601318,98.211365c52.49707,0.448181 97.103394,-35.956573 117.112427,-77.726288c20.011597,-41.769836 12.443604,-89.396759 -19.864929,-125.164642c13.401184,-26.637695 12.609985,-56.937332 -2.183472,-83.034088c-14.786194,-26.097893 -42.065491,-45.476891 -74.873047,-53.098335c-7.341431,-34.580929 -37.602661,-62.404482 -77.600708,-71.526293c-39.998474,-9.121368 -82.584839,2.123992 -109.364807,28.926123l-16.258179,22.19817c4.157959,-8.018612 9.583923,-15.495213 16.258179,-22.19817c-18.876953,-21.060713 -48.486023,-32.954061 -79.348938,-32.155401l0,0z",
    "width": function(w,h){return w - 4 },
    "height": function(w,h){return h - 4}
  },
  ellipse: {
    "type": "ellipse",
    "rx": function(w,h){return w /2 - 4},
    "ry": function(w,h){return h/ 2 - 4}
  },
  circle: {
    type: "circle",
    radius: function(w,h){ return Math.min(w,h)/2 - 4}
  }
};

fabric.getObjectsList = function(w,h){
  var _lib = [];
  for(var i in this.objectsLibrary){
    var o = _lib[i] = fabric.util.object.cloneDeep(this.objectsLibrary[i]);
    o.title = o.title || o.type;
    if(o.width === 0 ) o.width = w;
    if(o.height === 0 ) o.height = h;
    for(var j in o){
      if(o[j].constructor == Function){
        o[j] = o[j].call(o,w,h);
      }
    }
  }
  return _lib;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {

fabric.util.object.extend(fabric.Application.prototype, {
  // loaderTemplate: "<span class='fa fa-pulse fa-spinner canvas-load-spinner'></span>",
  loaderIcon:   'data:image/svg+xml;base64,' + __webpack_require__(18),
  loaderContainer: null,
  _showMainLoaderIndicator: function () {
    this.loaderEl.show();
    this.loaderContainer.addClass("processing");
  },
  _hideMainLoaderIndicator: function () {
    this.loaderEl.hide();
    this.loaderContainer.removeClass("processing");
  },
  setLoaderTemplate: function (val) {
    if(this.virtual) return false;
    this.loaderTemplate = val.replace("{loaderIcon}",this.loaderIcon);
    if(val) {
      this.loaderContainer = $(this.loaderContainer);
      this.loaderEl = $(this.loaderTemplate).hide();
      this.loaderContainer.append(this.loaderEl);
      // this.on("loading:begin", this._showMainLoaderIndicator);
      // this.on("loading:end", this._hideMainLoaderIndicator);


      this.on("project:changed",function(){
        this.project.on("slide:change:begin", this._showMainLoaderIndicator.bind(this));
        this.project.on("slide:changed", this._hideMainLoaderIndicator.bind(this));
      })

    }
  }
});


// fabric.util.object.extend(fabric.SlideCanvas.prototype, {
//   // loaderTemplate: "<span class='fa fa-pulse fa-spinner canvas-load-spinner'></span>",
//   setLoaderTemplate: function (val) {
//     if(this.virtual) return false;
//     this.loaderTemplate = val;
//     if(val) {
//       this.loaderEl = $(this.loaderTemplate).hide();
//       $(this.wrapperEl).append(this.loaderEl);
//       this.on("loading:begin", function () {
//         this.loaderEl.show();
//         $(this.wrapperEl).addClass("processing");
//       });
//       this.on("loading:end", function () {
//         this.loaderEl.hide();
//         $(this.wrapperEl).removeClass("processing");
//       });
//     }
//   }
// });

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {

fabric.MagicWand = __webpack_require__(8);

var MagicWand = fabric.MagicWand ;

/**
 * Pathfinder (Pathfinder) Interface for MagicWand selection tool
 * @param options
 * @constructor
 */
function Pathfinder(options) {
  this.initialize(options);
}

Pathfinder.prototype = {
  type: 'pathfinder',
  keepOldSelection: true,
  alphaChannel: true,
  pathfinderMode: 'new',
  selectionTool: 'magic',
  adjacentPixels: true,
  async: false,
  pathfinderTools: false,
  blurRadius: 0,
  hatchLength: 4,
  colorThreshold: 15,
  simplifyTolerant: 0,
  simplifyCount: 30,
  hatchOffset: 0,
  imageInfo: null,
  mask: null,
  downPoint: null,
  allowDraw: false,
  shapeSelectionTools: false,
  initialize: function (options) {

    options.application && options.application.fire('entity:created',{target : this,options : options})

    for (var i in options) {
      this[i] = options[i];
    }
  },
  asyncronous: function (cb) {
    if (this.async) {
      setTimeout(cb);
    } else {
      cb();
    }
  },
  fillWithCurrentColor: function () {
    this.fill(this.color);
  },
  clearMemory: function () {
    delete this.resultCanvas;
    delete this.editedImageCanvas;
    delete this.test_picture;
    delete this.mask;
  },
  hide: function () {
    if (this.editedImageCanvas) {
      this.editedImageCanvas.remove();
      this.resultCanvas.remove();
      clearInterval(this.interval);
      this.clearMemory();
      this.fire('hidden');
    }
  },
  setContainer: function (container) {
    if (container.constructor === String) {
      container = document.getElementById(container);
    }
    this.container = container;

    this.test_picture = new Image();
    this.test_picture.onload = this.initCanvas.bind(this);
    return this;
  },
  getSelectionTool: function () {
    return this.selectionTool;
  },
  setSelectionTool: function (tool) {
    this.selectionTool = tool;
    this.downPoint = false ;
    this.fire('tool:changed', tool);
  },
  getThreshold: function () {
    return this.colorThreshold;
  },
  setThreshold: function (thres) {
    if(thres !== undefined){
      this.colorThreshold = thres;
    }
    if (this.downPoint) {
      this.drawMask(this.downPoint.x, this.downPoint.y, this.adjacentPixels);
    }
    this.fire('threshold:changed', {threshold: this.colorThreshold});
  },
  setPicture: function (img) {
    this.setImage(img);
    var cvs = fabric.util.createCanvasElement();

    cvs.onmouseup = this.onMouseUp.bind(this);
    cvs.onmousedown = this.onMouseDown.bind(this);
    cvs.onmousemove = this.onMouseMove.bind(this);
    cvs.oncontextmenu = function () {
      return false;
    };
    this.initCanvas(cvs);
  },
  load: function (file) {
    if (!file)return;

    if (file.constructor === String) {
      Pathfinder.test_picture.setAttribute('src',file);
    } else {
      var reader = new FileReader();
      reader.onload = function (e) {
        this.test_picture.setAttribute('src', e.target.result);
      }.bind(this);
      reader.readAsDataURL(file);
    }
  },
  initCanvas: function (cvs) {
    var img = this.editedImageCanvas;
    if(this.resultCanvas){
      $(this.resultCanvas).remove()
    }
    this.resultCanvas = cvs;
    this.createSelectionDrawCanvas();


    this.context = cvs.getContext('2d');
    cvs.width = img.width;
    cvs.height = img.height;
    //this.setImage(img);
  },
  setImage: function (img) {
    this._test_todo_img = img;
    //this.mask = null;//MagicWand.createMask(img.width,img.height);
    this.editedImageCanvas = fabric.util.createCanvasElement();
    this.editedImageCanvas.width = img.width;
    this.editedImageCanvas.height = img.height;
    this.editedImageCanvas.getContext('2d').drawImage(img, 0, 0);
    this.initCanvas(fabric.util.createCanvasElement())
  },
  getInfo: function () {

    var ctx = this.editedImageCanvas.getContext('2d');
    var imageInfo = ctx.getImageData(0, 0, this.editedImageCanvas.width, this.editedImageCanvas.height);
    imageInfo.bytes = 4;
    return imageInfo;
  },
  getMousePosition: function (e) {
    var scale = this.resultCanvas.width / $(this.resultCanvas).width();
    var target = e.target || e.srcElement,
      rect = target.getBoundingClientRect(),
      offsetX = e.clientX - rect.left,
      offsetY = e.clientY - rect.top;
    return {x: Math.round(offsetX * scale), y: Math.round(offsetY * scale)};
  },
  radius: 20,
  resetSelectionDrawCanvas: function () {
    this.selectionDrawContext.fillStyle = "black";
    //this.selectionDrawContext(0, 0, canvas.width, canvas.height);
    this.selectionDrawContext.fillRect(0,0,this.selectionDrawCanvas.width,this.selectionDrawCanvas.height);
    this.selectionDrawContext.fillStyle = "white";
    this.selectionDrawContext.strokeStyle = "white";
  },
  createSelectionDrawCanvas: function () {

    if(this.selectionDrawCanvas ){
      $(this.selectionDrawCanvas ).remove();
    }
    this.selectionDrawCanvas = fabric.util.createCanvasElement();
    this.selectionDrawCanvas.width  = this.resultCanvas.width;
    this.selectionDrawCanvas.height = this.resultCanvas.height;
    this.selectionDrawContext = this.selectionDrawCanvas.getContext("2d");
    this.resetSelectionDrawCanvas();
  },
  _onMouseDown: function (point) {
    point.x = Math.min(Math.max(0, parseInt(point.x)), this.resultCanvas.width - 1);
    point.y = Math.min(Math.max(0, parseInt(point.y)), this.resultCanvas.height - 1);
    this.allowDraw = true;
    this.drawingTools[this.selectionTool].mouseDown.call(this,point);
  },
  onMouseDown: function (e) {
    e.preventDefault();
    e.stopPropagation();
    this._onMouseDown(this.getMousePosition(e));

  },
  _onMouseMove: function (p) {
    p.x = Math.min(Math.max(0, parseInt(p.x)), this.resultCanvas.width - 1);
    p.y = Math.min(Math.max(0, parseInt(p.y)), this.resultCanvas.height - 1);
    this.drawingTools[this.selectionTool].mouseMove.call(this,p);
  },
  onMouseMove: function (e) {
    var p = this.getMousePosition(e);
    this._onMouseMove(p);
  },
  color: [255, 0, 0, 255],
  onMouseUp: function (e) {
    this.allowDraw = false;
    this.drawingTools[this.selectionTool].mouseUp.call(this,e);
  },
  applyMask: function (canvas, left, top) {
    if (canvas.width === 0 || canvas.height === 0) {
      delete this.mask;
      this.render();
      return;
    }
    var info = this.getInfo(),
      mask = MagicWand.maskSelection(canvas,left,top) ;

    this.mask = mask;
    this.fire('selection:changed', {mask: mask, target: this.target});
  },
  setPathfinderMode: function (value) {
    this.pathfinderMode = value;
  },
  getPathfinderMode: function () {
    return this.pathfinderMode;
  },
  modifySelection: function (mask, pathfinderMode, noEvents) {
    this.shouldModify = false;
    if(this.selectionObject){
      this.selectionObject.remove();
    }
    this.downPoint = false;
    if (mask === undefined) {
      mask = this.mask;
    }
    if (pathfinderMode === undefined) {
      pathfinderMode = this.pathfinderMode;
    }
    if (pathfinderMode !== 'new' && this.oldMask) {
      mask = MagicWand[pathfinderMode](mask, this.oldMask);
    }
    if (this.blurRadius) {
      mask = MagicWand.gaussBlurOnlyBorder(mask, this.blurRadius);
    }
    //if (pathfinderMode !== 'new' && this.oldMask || this.blurRadius) {
    //  mask.cacheInd = MagicWand.getBorderIndices(mask);
    //}

    if(mask && mask.count && this.keepOldSelection){
      mask.makeCache();
      this.oldMask = mask;
    }else{
      delete this.oldMask ;
    }


    this.mask = MagicWand.createMask(this.editedImageCanvas.width, this.editedImageCanvas.height);
    if (!noEvents) {
      this.fire('selection:changed', {mask: mask, target: this.target});
    }
    this.render();
  },
  createSelection: function (mask) {
    if (this.shouldModify) {
      this.modifySelection();
    }

    this.mask = mask || MagicWand.createMask(this.editedImageCanvas.width, this.editedImageCanvas.height);
    this.render();
  },
  setSelection: function (mask) {
    this.mask = mask;
    this.render();
    this.fire('selection:changed', {mask: mask, target: this.target});
  },
  fill: function (color, callback) {
    this.asyncronous(function () {
      this._fill(color, false);
      callback && callback.call(this);
    }.bind(this), 0);
  },
  _fill: function (color, invert, canvas) {


    if (!this.mask) return;


    canvas = canvas || this.editedImageCanvas;
    var ctx = canvas.getContext('2d');//b.minX, b.minY, b.maxX - b.minX, b.maxY - b.minY);

    MagicWand.fillMask(ctx, this.mask, color);

    this.fire('image:changed', this.editedImageCanvas);
  },
  hatchTick: function () {
    this.hatchOffset = (this.hatchOffset + 1) % (this.hatchLength * 2);
    this.render(true);
  },
  show: function () {
    while (this.container.lastChild) {
      this.container.removeChild(this.container.lastChild);
    }
    this.container.appendChild(this.editedImageCanvas);
    this.container.appendChild(this.resultCanvas);
    this.interval = setInterval(this.hatchTick.bind(this), 300);

    this.fire('show');
  },
  clear: function (invert, canvas, callback) {
    this.asyncronous(function () {
      this._fill([0, 0, 0, 0], invert, canvas);
      callback && callback.call(this);
    }.bind(this), 0);
  },
  render: function (noBorder) {
    if (!this.context || !this.mask)return;

    var ctx = this.context;
    if (!noBorder) {
      this.mask.cacheInd = MagicWand.getBorderIndices(this.mask);
    }
    ctx.clearRect(0, 0, this.mask.width, this.mask.height);

    var _new_color = (!this.oldMask || this.pathfinderMode == "new" || this.pathfinderMode == "add"|| this.pathfinderMode == "exclude")
      ? this.newMaskColor : this.removedMaskColor;

    var _intersection_color;
    if(this.pathfinderMode == "add" || this.pathfinderMode == "new"|| this.pathfinderMode == "intersect"){
      _intersection_color = this.newMaskColor;
    }else{
      _intersection_color = this.removedMaskColor ;//intersectionRemovedMaskColor;
    }
    var _old_color;
    if(this.pathfinderMode == "exclude" || this.pathfinderMode == "substract"|| this.pathfinderMode == "add"){
      _old_color = this.newMaskColor;
    }else{
      _old_color = this.removedMaskColor;
    }

    this.oldMask && this.oldMask.render(ctx,{
      fill: _old_color
    });


    this.mask.render(ctx,{
      fill: _new_color,
      intersectionColor : _intersection_color,
      outerIntersectionColor : _old_color,
      // outerFill : "rgba(0,0,0,0.5)"
    });

    if(this.renderBorder){
      this.oldMask && this.oldMask.renderBorder(ctx,{});

      this.mask.renderBorder(ctx,{
        hatchOffset: this.hatchOffset
      });
    }

  },
  renderBorder: true,
  intersectionRemovedMaskColor: '#ffaaaa',
  removedMaskColor: '#aaaaff',
  newMaskColor:  '#aaFFaa' ,
  renderMask: function (ctx, mask, color, left, top) {
    mask = mask || this.mask;
    mask && mask.render(ctx,{
      intersectionColor: '#fff',
      outerIntersectionColor: '#000',
      fill :color || '#fff',
      left : left,
      top : top
    })
  },
  getContours: function () {
    if (!this.__cs) {
      this.__cs = MagicWand.traceContours(this.mask);
      this.__cs = MagicWand.simplifyContours(this.__cs, this.simplifyTolerant, this.simplifyCount);
    }
    return this.__cs;
  },
  traceInner: function (ctx) {

    var cs = this.getContours();
    var ctx = ctx || this.context;
    ctx.beginPath();
    for (var i = 0; i < cs.length; i++) {
      if (!cs[i].inner) continue;
      var ps = cs[i].points;
      ctx.moveTo(ps[0].x, ps[0].y);
      for (var j = 1; j < ps.length; j++) {
        ctx.lineTo(ps[j].x, ps[j].y);
      }
    }
    ctx.stroke();
  },
  getColor: function () {
    return 'rgba(' + this.color.join(', ') + ')';
  },
  setColor: function (color) {
    var _arr = color.substring(color.indexOf('(') + 1, color.length - 1).split(', ');
    for (var i in _arr) {
      _arr[i] = parseFloat(_arr[i]);
    }
    _arr[3] = Math.round(_arr[3] * 255);
    this.color = _arr;
  },
  trace: function (ctx) {
    var info = this.getInfo();
    var cs = MagicWand.traceContours(this.mask);
    cs = MagicWand.simplifyContours(cs, this.simplifyTolerant, this.simplifyCount);

    // draw contours
    var ctx = ctx || this.context;
    ctx.clearRect(0, 0, info.width, info.height);
    //inner
    ctx.beginPath();
    for (var i = 0; i < cs.length; i++) {
      if (!cs[i].inner) continue;
      var ps = cs[i].points;
      ctx.moveTo(ps[0].x, ps[0].y);
      for (var j = 1; j < ps.length; j++) {
        ctx.lineTo(ps[j].x, ps[j].y);
      }
    }
    ctx.strokeStyle = 'red';
    ctx.stroke();
    //outer
    ctx.beginPath();
    for (var i = 0; i < cs.length; i++) {
      if (cs[i].inner) continue;
      var ps = cs[i].points;
      ctx.moveTo(ps[0].x, ps[0].y);
      for (var j = 1; j < ps.length; j++) {
        ctx.lineTo(ps[j].x, ps[j].y);
      }
    }
    ctx.strokeStyle = 'blue';
    ctx.stroke();
  },
  removeNoise: function (threshold) {

    if(!this.mask || !this.mask.count)return;
    this.createSelectionDrawCanvas();
    //this.renderMask(this.selectionDrawContext, this.mask);

    var cs = MagicWand.traceContours(this.mask);
    cs = MagicWand.simplifyContours(cs, this.simplifyTolerant, this.simplifyCount);

    var ctx = this.selectionDrawContext, v = this.canvas.viewportTransform;

    //  cs = MagicWand.simplifyContours(cs, this.simplifyTolerant, this.simplifyCount);

    ctx.save();
    ctx.translate(0.5,0.5);
    ctx.fillStyle= "#fff";
    //ctx.fillStyle= "#0f0";
    ctx.strokeStyle= "#fff";
    for (var i = 0; i < cs.length; i++) {
      if (!cs[i].inner && cs[i].points.length > threshold) {
        var ps = cs[i].points;
        ctx.beginPath();
        ctx.moveTo(ps[0].x, ps[0].y);
        for (var j = 1; j < ps.length; j++) {
          ctx.lineTo(ps[j].x, ps[j].y);
        }
        ctx.closePath();
        ctx.fill();
      }

    }
    this.mask = MagicWand.maskSelection( this.selectionDrawCanvas);
    this.setSelection(this.mask);

    ctx.restore();
  },

  tools: [
    "adjacentPixels",
    "pathfinderRadius",
    "pathfinderThreshold",
    "selectionTool",
    "pathfinder",
    "fillWithCurrentColor",
    "clear",
    "pathfinderColor"
  ],
  actions : {

    cancelSelection: {
      visible: false,
      key:  'Escape',
      action: function(){
        delete this.shouldModify;
        this.mask = MagicWand.createMask(this.editedImageCanvas.width, this.editedImageCanvas.height);
      }
    },
    modifySelection: {
      visible: false,
      key:  'Enter',
      action: function(){
        if(this.shouldModify){
          this.modifySelection();
        }
      }
    },
    adjacentPixels: {
      className: 'button-adjacent',
      title: 'selet all',
      type: 'checkbox',
      value: 'adjacentPixels',
      visible: function () {
        return this.selectionTool === 'magic';
      },
      observe: 'tool:changed'
    },
    pathfinderRadius: {
      title: 'radius',
      type: 'range',
      value: {
        get: function () {
          return this.radius
        },
        set: function (val) {
          this.radius = val;
        },
        min: 1,
        max: 255
      },
      visible: function () {
        return this.selectionTool === 'brush';
      },
      observe: 'tool:changed'
    },
    pathfinderThreshold: {
      title: 'Threshold',
      type: 'range',
      value: {
        observe: 'threshold:changed',
        get: function () {
          return this.colorThreshold
        },
        set: function (val) {
          this.setThreshold(val);
        },
        min: 0,
        max: 255
      },
      visible: function () {
        return this.selectionTool === 'magic';
      },
      observe: 'tool:changed'
    },
    selectionTool: {
      title: 'selection-tool',
      type: 'options',
      value: 'selectionTool',
      menu: {
        selectionToolBrush: {
          className: 'fa fa-paint-brush',
          title: 'select-brush',
          option: 'brush'
        },
        selectionToolRectangle: {
          className: 'fa fa-square',
          title: 'select-rectangle',
          option: 'rectangle'
        },
        selectionElliptical: {
          className: 'fa fa-circle',
          title: 'select-circle',
          option: 'circle'
        },
        selectionToolMagic: {
          className: 'fa fa-magic',
          title: 'select-magic',
          option: 'magic'
        },
        selectionToolLasso: {
          use: 'shapeSelectionTools',
          title: 'select-lasso',
          option: 'lasso',
          icon: 'data:image/svg+xml;base64,'+ __webpack_require__(17)
        }
      }
    },
    pathfinder: {
      title: 'pathfinder',
      type: 'options',
      value: 'pathfinderMode',
      menu: {
        pathfinderNew: {
          title: 'pathfinder-new',
          option: 'new'
        },
        pathfinderExclude: {
          title: 'pathfinder-exclude',
          option: 'exclude'
        },
        pathfinderSubstract: {
          title: 'pathfinder-substract',
          option: 'substract'
        },
        pathfinderAdd: {
          title: 'pathfinder-add',
          option: 'add'
        },
        pathfinderIntersect: {
          title: 'pathfinder-intersect',
          option: 'intersect'
        }
      }
    },
    fillWithCurrentColor: {
      title: 'fillWithCurrentColor',
      className: 'fa fa-paint-brush'
    },
    clear: {
      className: 'fa fa-eraser',
      id:     'Pathfinder-clear',
      title:  'clear'
    },
    pathfinderColor: {
      title:  'color',
      type:   'color',
      value:  'color'
    }
  }
};

fabric.util.observable(Pathfinder.prototype);

fabric.util.object.extend(Pathfinder.prototype, {
  selectBackground: function (fromCorners) {
    var info = this.getInfo(), mask;

    if (fromCorners) {
      var mask1 = MagicWand.selectBackground(info, [255, 255, 255, false], this.colorThreshold);
      var mask2 = MagicWand.selectBackground(info, [false, false, false, 0], this.colorThreshold);
      mask = MagicWand.add(mask1, mask2);
    } else {
      mask = MagicWand.selectAllByColor(info, [255, 255, 255, 255], this.colorThreshold);
    }

    if (this.blurRadius) {
      mask = MagicWand.gaussBlurOnlyBorder(mask, this.blurRadius);
    }
    this.setSelection(mask);
  },
  colorSelection: function (colors, threshold) {
    var info = this.getInfo(), mask2,
      mask = MagicWand.createMask(info.width, info.height);
    for (var i in colors) {
      var _color = new fabric.Color(colors[i])._source;
      _color[3] = Math.round(_color[3] * 255);
      mask2 = MagicWand.selectAllByColor(info, _color, threshold[i])
      mask = MagicWand.add(mask, mask2);
    }
    delete this.oldMask;
    this.modifySelection(mask);
  },
  smartSelection: function (threshold) {
    var info = this.getInfo(), mask;
    mask = MagicWand.selectBackground(info, null, threshold || this.colorThreshold);
    mask = MagicWand.invertMask(mask);
    delete this.oldMask;
    this.modifySelection(mask);
  }
});


Pathfinder.prototype.drawingTools = {
  brush: {
    mouseUp: function(){
      this.modifySelection();
      this.resetSelectionDrawCanvas();
    },
    mouseMove: function(p){
      if (!this.allowDraw) return;
      this.drawCircle(p.x, p.y, this.radius);
    },
    mouseDown: function(point){
      this.createSelection();
      this.downPoint = point;
      this.createSelectionDrawCanvas();
      this.drawCircle(point.x, point.y, this.radius);
    },
    utils: {
      drawCircle: function (x, y, r) {
        var ctx = this.selectionDrawContext,
          v = this.canvas.viewportTransform;
        ctx.save();
        //  ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
        ctx.beginPath();
        ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);
        ctx.closePath();
        ctx.fill();
        ctx.restore();
        MagicWand.maskSelection( this.selectionDrawCanvas, 0,0, this.mask, 'add');
        this.setSelection(this.mask);
      }
    }
  },
  magic: {
    mouseUp: function(){
      this.shouldModify = true;
    },
    mouseMove: function (p){
      if (!this.allowDraw) return;
      var dist = p.x - this.downPoint.x;

      var val = this._init_thres + dist;
      var thres = Math.min(Math.max(val, 1), 255);
      if (thres != this.colorThreshold) {
        this.setThreshold(thres);
      }
    },
    mouseDown: function (point){
      if (this.shouldModify) {
        this.modifySelection();
      }
      this.downPoint = point;
      this.colorThreshold = 15;
      this.fire('threshold:changed', {threshold: this.colorThreshold});
      this._init_thres = this.colorThreshold;
      this.drawMask(this.downPoint.x, this.downPoint.y, this.adjacentPixels);
      return false;
    },
    utils:{
      drawMask: function (x, y, adjacentPixels) {
        this.asyncronous(this._drawMask.bind(this, x, y, adjacentPixels), 0);
      },
      _drawMask: function (x, y, adjacentPixels) {
        MagicWand.alphaChannel = this.alphaChannel;
        var info = this.getInfo(), mask;
        if (adjacentPixels) {
          MagicWand.floodFill(info, x, y, this.colorThreshold,{},null,function(mask){
            this.setSelection(mask);
          }.bind(this));
        } else {
          mask = MagicWand.selectAll(info, x, y, this.colorThreshold);
          this.setSelection(mask);
        }
      }
    }
  },
  rectangle: {
    mouseDown: function(point) {
      if (this.shouldModify) {
        this.modifySelection();
      }
      this.downPoint = point;
      this.shouldModify = true;
    },
    mouseUp: function(){
      //this.modifySelection();
      //this.resetSelectionDrawCanvas();
    },
    mouseMove: function(p){
      if (!this.allowDraw) return;
      this.drawRectangle(this.downPoint.x, this.downPoint.y, p.x, p.y);
    },
    utils:{
      drawRectangle: function (x, y, x2, y2) {
        var info = this.getInfo(),
          mask = MagicWand.selectRectangle(info, x, y, x2, y2);
        this.setSelection(mask);
      }
    }
  },
  circle: {
    mouseDown: function(point) {
      if (this.shouldModify) {
        this.modifySelection();
      }
      this.downPoint = point;
      this.createSelectionDrawCanvas();
      this.selectionObject = new fabric.Ellipse({
        left: point.x + this.target.left,
        top:  point.y + this.target.top,
        rx:1,
        ry:1,
        hasBorders: false,
        originX: 'center',
        originY: 'center',
        strokeWidth: 1,
        fill: 'transparent',
        stroke: 'transparent'
      });
      this.canvas.add(this.selectionObject);
      this.updateShape();
    },
    mouseUp: function(){
      this.canvas.setInteractiveMode("mixed");
      this.selectionObject.setCoords();
      var _this = this;
      this.selectionObject.on('scaling moving rotating',function(){
        _this.updateShape();
      });
      this.canvas.setActiveObject(this.selectionObject);
      this.shouldModify = true;
      //  this.modifySelection();
      //  this.resetSelectionDrawCanvas();
    },
    mouseMove: function(p){
      if (!this.allowDraw) return;
      this.selectionObject.set({
        rx: Math.abs((p.x + this.target.left -  this.selectionObject.get('left'))) ,
        ry: Math.abs((p.y + this.target.top  - this.selectionObject.get('top')))
      });

      this.updateShape();

    },
    utils:{
      updateShape: function () {
        this.resetSelectionDrawCanvas();
        this.selectionObject.fill = 'white';
        this.selectionDrawContext.save();
        this.selectionDrawContext.translate(-this.target.left, - this.target.top);
        this.selectionObject.render(this.selectionDrawContext);
        this.selectionDrawContext.restore();
        this.selectionObject.fill = 'transparent';
        this.mask = MagicWand.maskSelection( this.selectionDrawCanvas);
        this.setSelection(this.mask);
      }
    }
  },
  lasso: {
    mouseUp: function(){
      if(this.readyToClosePath) {
        this._closePath();
      }
    },
    mouseMove: function(p){
      if (!this.allowDraw) return;
      this.drawLine(this._last_point, p)
      this._points.push(p);
      this._last_point = p;
    },
    mouseDown: function(point){
      if(!this.downPoint){
        this.createSelection();
        this.createSelectionDrawCanvas();
        this._path_out = false;
        this.downPoint = point;
        this._points = [];
        this.selectionDrawContext.beginPath();
        this.canvas.on('mouse:move', this._changeCursorOverClosePoint);
      }
      if(this._last_point){
        if(this.readyToClosePath){
          this._closePath();
        }else{
          this.drawLine(this._last_point, point)
          this._last_point = point;
          this._points.push(point);
        }
      }else{

        this.drawLine({x:point.x - 0.5,y: point.y}, {x:point.x + 0.5,y: point.y })
        this._last_point = {x:point.x + 0.5,y: point.y };
        this._points.push(point);
        this.shouldModify = true;
      }
    },
    utils: {
      drawLine: function (p1 ,p2 ) {
        var ctx = this.selectionDrawContext,
          v = this.canvas.viewportTransform;
        ctx.save();
        //ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
        ctx.moveTo(p1.x,p1.y);
        ctx.lineTo(p2.x,p2.y);
        ctx.stroke();
        ctx.restore();
        MagicWand.maskSelection(this.selectionDrawCanvas,0,0,this.mask,'add');
        this.setSelection(this.mask);
      },
      _closePath:  function (e) {

        this.allowDraw = false;
        var ctx = this.selectionDrawContext;
        ctx.beginPath();
        ctx.moveTo(this._points[0].x,this._points[0].y)
        for(var i = 1 ; i < this._points.length;i ++){
          ctx.lineTo(this._points[i].x,this._points[i].y)
        }
        ctx.closePath();
        ctx.fill();
        MagicWand.maskSelection(this.selectionDrawCanvas,0,0,this.mask,'add');
        this.setSelection(this.mask);
        this.resetSelectionDrawCanvas();
        this._points = [];
        delete this.downPoint;
        delete this.readyToClosePath;
        delete this._last_point;
        this.canvas.off('mouse:move', this._changeCursorOverClosePoint);
        this.canvas.freeDrawingCursor = 'crosshair';
        this.canvas.setCursor(this.canvas.freeDrawingCursor);
        // this.drawLine(this._last_point, this.downPoint);
      },
      _changeCursorOverClosePoint:  function (e) {
        var canvas = this,
          pathfinder = canvas.pathfinder;
        if(!pathfinder.target)return;
        var ivt = fabric.util.invertTransform(canvas.viewportTransform),
          p = fabric.util.transformPoint(canvas.getPointer(e.e, true), ivt);
        p.x -= pathfinder.target.left;
        p.y -= pathfinder.target.top;
        if ( pathfinder.downPoint && pathfinder.downPoint.distanceFrom(p) < 10) {
          if(!pathfinder._path_out){
            return;
          }
          pathfinder.readyToClosePath = true;
          canvas.freeDrawingCursor = canvas.targetCursor;
          canvas.setCursor(canvas.freeDrawingCursor);
          //console.log(canvas.freeDrawingCursor);
        } else {
          pathfinder._path_out = true;
          pathfinder.readyToClosePath = false;
          canvas.freeDrawingCursor = 'crosshair';
          canvas.setCursor(canvas.freeDrawingCursor);
          // console.log(canvas.freeDrawingCursor);
        }
      }
    }
  }
};
for(var i in Pathfinder.prototype.drawingTools){
  fabric.util.object.extend(Pathfinder.prototype, Pathfinder.prototype.drawingTools[i].utils)
}
fabric.Pathfinder = Pathfinder;




fabric.util.object.extend(fabric.SlideCanvas.prototype, {
  pathfinder: false,
  setPathfinder: function (val) {
    if (val) {
      this.pathfinder = new fabric.Pathfinder('pathfinder');
      this.pathfinder.canvas = this;
    }
  },
  getPathfinder: function () {
    return this.pathfinder || this.application && this.application.pathfinder;
  }
});

fabric.util.object.extend(fabric.Application.prototype, {
  initPathfinder: function () {
    //if(this.pathfinder){

      this.pathfinder = new fabric.Pathfinder({
        application: this
      });

      this.pathfinder.on("image:changed", function (img) {
        var dataUrl = img.toDataURL();
        if (!this.target._originalElement) {
          this.target._originalElement = this.target._element;
        }
        this.target._element = new Image();

        this.target._element.onload = function(){
          this.target.fire("content:modified")
          this.target.canvas && this.target.canvas.renderAll();
        }.bind(this);

        this.target._element.src = dataUrl;
        this.target._edited = true
        if(this.target.dirty !== "undefined"){
          this.target.dirty = true;
        }


      });
    //}
  }
});

fabric.util.object.extend(fabric.Application.prototype, {
  eventListeners: fabric.util.object.extendArraysObject(fabric.Application.prototype.eventListeners, {
    "ready": function () {
      this.initPathfinder();
    }
  })
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {


var _set_sbackground_image_overwritten = fabric.Canvas.prototype.setBackgroundImage;

fabric.util.object.extend(fabric.Canvas.prototype, {
  /**
   * backgroundPosition
   * @values manual | cover | fit
   */
  backgroundPosition: 'manual',
  setBackgroundPosition: function (src) {
    this.backgroundPosition = src;
    this._update_background_image();
    return this;
  },
  offsets: {
    left: 0,
    right: 0,
    bottom: 0,
    top: 0
  },

  // setBackgroundImage: function (src, callback, options) {
  //
  //   _set_sbackground_image_overwritten.call(this, src, function () {
  //     this._update_background_image();
  //     callback && callback(this.backgroundImage);
  //   }.bind(this), options);
  //   return this;
  // },
  fillBackgroundColorOverCanvas: false,
  _renderBackgroundOrOverlay: function(ctx, property) {
    var object = this[property + 'Color'];
    if (object) {
      ctx.fillStyle = object.toLive
        ? object.toLive(ctx)
        : object;

      if(!this.fillBackgroundColorOverCanvas){
        ctx.fillRect(
          object.offsetX || this.viewportTransform[4]/ this.viewportTransform[0],
          object.offsetY || this.viewportTransform[5]/ this.viewportTransform[0],
          this.width * this.viewportTransform[0],
          this.height  * this.viewportTransform[0]);
      }else{
        ctx.fillRect(

          object.offsetX || 0,
          object.offsetY || 0,
          this.originalWidth ,
          this.originalHeight);
      }
    }
    object = this[property + 'Image'];
    if(object && object.constructor !== String &&  object.constructor !== Object){
        object.render(ctx);
    }
  },
  getImageData: function (options) {
    options = fabric.util.object.extend({
      clipped_area: false,
      clipped_area_only: false,
      draw_background: true,
      format: 'png',
      quality: 0.8
    }, options || {});

    var size;
    if (options.clipped_area) {
      size = options.clipped_area.getBoundingRect();
      var _zoom = this.getZoom();
      size.left   /= _zoom;
      size.top    /= _zoom;
      size.width  /= _zoom;
      size.height /= _zoom;
      fabric.util.object.extend(options, size);
    } else {
      size = {
        width: options.width || this.originalWidth || this.width,
        height: options.height || this.originalHeight || this.height,
      };

      if (options.clipped_area_only) {
        size.width -= this.offsets.left + this.offsets.right;
        size.height -= this.offsets.top + this.offsets.bottom;
      }
    }
    if (options.zoom) {
      size.width *= options.zoom;
      size.height *= options.zoom;
    }

    var canvas = fabric.util.createCanvasElement();
    canvas.width = size.width;
    canvas.height = size.height;

    options.left = Math.floor(options.left);
    options.top = Math.floor(options.top);
    options.height = Math.ceil(options.height);
    options.width = Math.ceil(options.width);

    this.renderThumb(canvas, options);

    var src = canvas.toDataURL(options);

    var blob = fabric.util.dataURItoBlob(src, 'image/' + options.format);
    var objectURL = URL.createObjectURL(blob);
    return {
      dataURL: src,
      blob: blob,
      url: objectURL,
      canvas: canvas
    };
  },
  getOriginalSize: function () {
    return {
      width: this.originalWidth,
      height: this.originalHeight
    }
  },

  renderThumb: function (canvas, options) {

    options = options || {
        objects: true,
        clipped_area_only: false,
        draw_background: true
      };

    if (options.zoom) {
      var _zoom = options.zoom;
    } else {
      if (canvas.width) {
        var _zoom = canvas.width / (this.originalWidth || this.width)
      } else {
        var _zoom = 1;
      }
    }
    var _old_Scale = this.viewportTransform[0];
    var old_x = this.viewportTransform[4];
    var old_y = this.viewportTransform[5];
    this.viewportTransform[4] = this.viewportTransform[5] = 0;
    this.viewportTransform[0] = this.viewportTransform[3] = 1;

    this.viewportTransform[0] = this.viewportTransform[3] = _zoom;
    //this._update_clip_rect();

    if (this.clipRect) {
      this.clipRect.setOpacity(0);
    }

    var size = {
      width: this.originalWidth || this.width,
      height: this.originalHeight || this.height
    };
    size.width = Math.ceil(size.width * _zoom);
    size.height = Math.ceil(size.height * _zoom);

    var _canvas = fabric.util.createCanvasElement();
    _canvas.width = size.width;
    _canvas.height = size.height;

    var canvasToDrawOn = _canvas.getContext('2d'), objsToRender;

    this.clearContext(canvasToDrawOn);
    canvasToDrawOn.save();
    canvasToDrawOn.transform.apply(canvasToDrawOn, this.viewportTransform);

    if (options.draw_background) {
      this._renderBackground(canvasToDrawOn);
      //if (this._backgroundLayer) {
      //  this._renderObjects(canvasToDrawOn, this._backgroundLayer);
      //}
    }

    if (!options.clipped_area_only && this.clipTo) {
      fabric.util.clipContext(this, canvasToDrawOn);
    }

    var _objects;
    if (options.objects && options.objects.constructor === Array) {
      _objects = options.objects;
    } else {
      _objects = options.objects !== false ? this._objects : [];
    }
    if (options.clipped_area) {
      _objects = fabric.util.object.clone(_objects);
      for (var i = _objects.length; i--;) {
        if (_objects[i].clipTo !== options.clipped_area) {
          _objects.splice(i, 1);
        }
      }
    }
    // if (fabric.version >= 1.6) {
      this._renderObjects(canvasToDrawOn, _objects);
    // } else {
    //   for (var i = 0, length = _objects.length; i < length; ++i) {
    //     this._draw(canvasToDrawOn, _objects[i]);
    //   }
    // }


    canvasToDrawOn.restore();
    if (!options.clipped_area_only && this.clipTo) {
      canvasToDrawOn.restore();
    }
    this._renderOverlay(canvasToDrawOn);
    canvasToDrawOn.restore();
    if (this.clipRect) {
      this.clipRect.setOpacity(1);
    }
    var ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    if (options.clipped_area_only && this.clipRect) {
      var _rect = {
        left: this.clipRect.left * _zoom,
        top: this.clipRect.top * _zoom,
        width: this.clipRect.width * _zoom,
        height: this.clipRect.height * _zoom
      };
    } else {
      var _rect = {
        left: options.left * _zoom || 0,
        top: options.top * _zoom || 0,
        width: options.width * _zoom || size.width,
        height: options.height * _zoom || size.height
      };
    }
    if (options.angle) {
      ctx.rotate(-options.angle * Math.PI / 180);
      ctx.drawImage(_canvas,
        0, 0, _rect.width + _rect.left + _canvas.width, _rect.height + _rect.top + _canvas.height,
        -_rect.left, -_rect.top, canvas.width + _rect.left + _canvas.width, canvas.height + _rect.top + _canvas.height);
    } else {
      ctx.drawImage(_canvas, _rect.left, _rect.top, _rect.width, _rect.height, 0, 0, canvas.width, canvas.height);
    }

    this.viewportTransform[0] = this.viewportTransform[3] = _old_Scale;
    // this._update_background_image();
    //this._update_clip_rect();

    this.viewportTransform[4] = old_x;
    this.viewportTransform[5] = old_y;


    return canvas;
  },

  // setOffsets: function (_offsets) {
  //   this.offsets = _offsets || fabric.util.object.extend({}, fabric.SlideCanvas.prototype.offsets);
  //   //this._update_clip_rect();
  //   return this;
  // },
  getRect: function (options) {


    var rect = {};

    var _w = this.originalWidth || this.width; //this.originalWidth
    var _flexArray = fabric.util.flex(_w , [{value: options.left, flex: 0},{value: options.width, flex: 1},{value: options.right, flex: 0}] );
    rect.left = _flexArray[0];
    rect.width = _flexArray[1];
    rect.right = _flexArray[2];

    var _h = this.originalHeight|| this.height;   //this.originalHeight
    var _flexArray = fabric.util.flex(_h , [{value: options.top, flex: 0},{value: options.height, flex: 1},{value: options.bottom, flex: 0}] );
    rect.top = _flexArray[0];
    rect.height = _flexArray[1];
    rect.bottom = _flexArray[2];

    return rect;
  },
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {


var _set_object_scale_overwritten = fabric.Canvas.prototype._setObjectScale;
var _setup_current_transform = fabric.Canvas.prototype._setupCurrentTransform;

fabric.util.object.extend(fabric.Canvas.prototype, {
  _setupCurrentScaleTransform: _setup_current_transform,
  _setupCurrentTransform: function (e, target) {
    if (!target)return;
    if (target.setupCurrentTransform) {
      return target.setupCurrentTransform(e);
    } else {
      if (target.resizable) {
        return this._setupCurrentResizeTransform(e, target);
      } else {
        return this._setupCurrentScaleTransform.call(this, e, target);
      }
    }
  },
  _setObjectScale: function (localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {

    var t = transform.target;

    if (!_dim) {
      var strokeWidth = t.stroke ? t.strokeWidth : 0;
      _dim = {
        x: (t.width + (strokeWidth / 2)),
        y: (t.height + (strokeWidth / 2))
      }
    }

    if (t.setObjectScale) {
      return t.setObjectScale(localMouse, transform,
        lockScalingX, lockScalingY, by, lockScalingFlip, _dim);
    }
    else {
      if (t.resizable) {
        return this._setObjectSize(localMouse, transform,
          lockScalingX, lockScalingY, by, lockScalingFlip, _dim);
      } else {
        return _set_object_scale_overwritten.call(this, localMouse, transform,
          lockScalingX, lockScalingY, by, lockScalingFlip, _dim);
      }
    }
  },
  _setObjectSize: function (localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {

    var target = transform.target, forbidScalingX = false, forbidScalingY = false;
    var _stroke = transform.target.strokeWidth || 0;
    transform.newWidth = this.width * ((localMouse.x / transform.scaleX) / (this.width + _stroke));
    transform.newHeight = this.height * ((localMouse.y / transform.scaleY) / (this.height + _stroke));

    if(this.wholeCoordinates || target.wholeCoordinates){
      transform.newWidth = Math.round(transform.newWidth);
      transform.newHeight = Math.round(transform.newHeight);
    }
    if(transform.newHeight < 0 ){
      target.top = transform.top - transform.newHeight;
    }
    if (target.minWidth && transform.newWidth <= target.minWidth) {
      transform.newWidth = target.minWidth;
    }
    if (target.minHeight && transform.newHeight <= target.minHeight) {
      transform.newHeight = target.minHeight;
    }
    if (lockScalingFlip && transform.newWidth < target.width) {
      forbidScalingX = true;
    }
    if (lockScalingFlip && transform.newHeight < target.height) {
      forbidScalingY = true;
    }

    if (by === 'equally') {
      forbidScalingX || forbidScalingY || this._resizeObjectEqually(localMouse, target, transform, _dim);
    }
    else if (!by) {
      forbidScalingX || target.setWidth(transform.newWidth);
      forbidScalingY || target.setHeight(transform.newHeight);
    }
    else if (by === 'x' && !target.get('lockUniScaling')) {
      forbidScalingX || target.setWidth(transform.newWidth);
    }
    else if (by === 'y' && !target.get('lockUniScaling')) {
      forbidScalingY || target.setHeight(transform.newHeight);
    }
    return !forbidScalingX && !forbidScalingY;
    //transform.newWidth -= _stroke;
    //transform.newHeight -= _stroke;
  },
  _setupCurrentResizeTransform: function (e, target) {
    this._setupCurrentScaleTransform(e, target);
    this._currentTransform.original.height = target.height;
    this._currentTransform.original.width = target.width;
  },
  _resizeObjectEqually: function (localMouse, target, transform, _dim) {

    var dist = localMouse.y + localMouse.x,
      lastDist = _dim.y * transform.original.height / target.height +
        _dim.x * transform.original.width / target.width;

    transform.newWidth = transform.original.width * dist / lastDist;
    transform.newHeight = transform.original.height * dist / lastDist;

    var ratio = transform.original.height / transform.original.width;
    if (ratio > 1) {
      if (target.minWidth && transform.newWidth <= target.minWidth) {
        transform.newWidth = target.minWidth;
        transform.newHeight = target.minHeight * ratio;
      }
    } else {
      if (target.minHeight && transform.newHeight <= target.minHeight) {
        transform.newHeight = target.minHeight;
        transform.newWidth = target.minWidth / ratio;
      }
    }

    target.setWidth(transform.newWidth);
    target.setHeight(transform.newHeight);
  }
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {
if(typeof saveAs == "undefined"){
  fabric.saveAs  = __webpack_require__(23).saveAs;
}else{
  fabric.saveAs = saveAs;
}

fabric.util.object.extend(fabric.SlideCanvas.prototype, {
  insertRenderArea: false,
  insertRenderFull: false,
});


fabric.util.object.extend(fabric.SlideCanvas.prototype.actions, {
  renderArea: {
    className: 'fa fa-download',
    title: 'download',
    action: function () {
      fabric.saveAs(this.getImageData({
        clipped_area: this.activeArea,
        zoom: this.dotsPerUnit,
        clipped_area_only: true,
        draw_background: true
      }).blob, this.title);
    }
  },
  renderFull: {
    title: 'download with background',
    action: function () {
      fabric.saveAs(this.getImageData({
        zoom: this.dotsPerUnit,
        clipped_area_only: false,
        draw_background: true
      }).blob, this.title);
    }
  }
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {/*todo
fabric.SlideCanvas.addPlugin("initialize",function(){
  if(typeof this.freeDrawingBrush == "string" ){
    this.setFreeDrawingBrush(this.freeDrawingBrush);
  }
});*/

fabric.util.object.extend(fabric.SlideCanvas.prototype,{
  /**
   * ['PencilBrush','RectangleBrush']
   */
  activeDrawingTools: [],
  /**
   *
     {
      BrushClassName: {
        className: 'brush className',
        title: 'brush title'
      }
    }
   */
  drawingTools: {},
  insertDrawingTool: false,
  actions: fabric.util.object.extend(fabric.SlideCanvas.prototype.actions,{
    drawingTool: {
      title: 'drawing-tool',
      type: 'options',
      value: 'freeDrawingBrush',
      menu: function(){
        var _tools = {};
        for(var i in this.activeDrawingTools){
          var _tool = this.activeDrawingTools[i];
          _tools[_tool] = fabric.util.object.extend({option: _tool},this.drawingTools[_tool]);
        }
        return _tools;
      }
    }
  }),
  freeDrawingBrush: 'PencilBrush',
  drawingColor: [0,0,0,255],
  _onMouseDownInDrawingMode: function(e) {
    this._isCurrentlyDrawing = true;
    if(!this.freeDrawingBrush.target){
      this.discardActiveObject(e).renderAll();
    }
    if (this.clipTo) {
      fabric.util.clipContext(this, this.contextTop);
    }
    var pointer = this.getPointer(e);
    this.freeDrawingBrush.onMouseDown(pointer);
    this._handleEvent(e, 'down');
  },
  getFreeDrawingBrush: function() {
    if(!this.freeDrawingBrush){
      return "Selection";
    }
    return  fabric.util.string.capitalize(fabric.util.string.camelize(this.freeDrawingBrush.type),true);
  },
  setFreeDrawingBrush: function(brush) {

    if(brush == 'Selection'){
      this.isDrawingMode = false;
      this.freeDrawingBrush = "";
      return;
    }
    var className = fabric.util.string.capitalize(fabric.util.string.camelize(brush),true);
    if(this["__" + className]){
      this.freeDrawingBrush = this["__" + className] ;
    }else{
      this.freeDrawingBrush = this["__" + className] = new  fabric[className](this);
    }
    this.fire("brush:changed",{brush: this.freeDrawingBrush});
  },
  drawZoomedArea : function(ctx,left, top ,width, height , pointer ) {

    width = width || 90;
    height = height || 90;

    ctx.save();
    ctx.translate(left || 0, top || 0);

    ctx.fillStyle = 'black';
    ctx.strokeStyle = "#fff";
    ctx.strokeWidth = 1;
    ctx.setLineDash([2, 2]);
    ctx.drawImage(this.backgroundImage._element,Math.floor(pointer.x) - 4, Math.floor(pointer.y) - 4 , 9 , 9, 0,0 , width, width );
    ctx.strokeRect(0,0 , width, width);
    ctx.strokeRect(40 , 40 , 10, 10);
    ctx.restore();
  }
});

fabric.SlideCanvas.prototype.drawingTools.Selection = {
  className: 'fa fa-mouse-pointer',
  title: 'Selection'
};
fabric.SlideCanvas.prototype.activeDrawingTools.push("Selection");

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {fabric.util.createThumb = function(slide, $el){

  var _canvas = slide.canvas,
      firstDraw = true,
      modified,
      _w = +$el.getAttribute("width"),
      _h = +$el.getAttribute("height");

  if (_h) {
    $el.style.height = $el.height;
  }

  function renderThumb() {
    if (_canvas.processing || !_canvas.loaded) {
      return false;
    }
    _canvas.renderThumb($el);
    modified = _canvas.modified;
  }

  function forceRenderThumb() {
    if (this.canvas) {
      if (this.canvas.loaded) {
        this.canvas.renderThumb($el);
      }
      return;
    }
    if (firstDraw && this.data.thumb) {
      var img = new Image();
      img.onload = function () {
        var ctx = $el.getContext("2d");
        ctx.clearRect(0, 0, $el.width, $el.height);
        ctx.drawImage(img, 0, 0, $el.width, $el.height);
        modified = this.modified;
      };
      img.src = this.data.thumb;
      return;
    }

    if (attrs.force !== "true") return;
    var canvas = new fabric.SlideCanvas(null, this.data, function () {
      canvas.renderThumb($el);
      //modified = slide.modified;
    });
  }


  function scaleThumb() {

    var _container = {
      width: _w,
      height: _h,
    };

    var size = {
      width: slide.canvas.originalWidth || slide.canvas.width,
      height: slide.canvas.originalHeight || slide.canvas.height
    };

    var _fitSize = fabric.util.getProportions( size,_container,"fit");

    $el.width = _fitSize.width;
    $el.height = _fitSize.height;


    $el.style.width = _fitSize.width + 'px';
    $el.style.height = _fitSize.height  + 'px';
    renderThumb();
  }

  function canvasChanged() {
    // _canvas && _canvas.off('after:render', renderThumb);
    // if (this.canvas) {
      // _canvas = scope.ffThumb.canvas;
      this.canvas.on('after:render', renderThumb);
      this.canvas.on("dimensions:modified", scaleThumb);
      this.canvas.on("loading:end", scaleThumb);
    // }
  }


  $el.setAttribute("title", slide.title);
  slide.on('canvas:changed', canvasChanged);
  slide.on('modified', forceRenderThumb);

  scaleThumb.call(slide);
  forceRenderThumb.call(slide);
  canvasChanged.call(slide);

};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {
if(!Toolbar){
  var Toolbar = __webpack_require__(1);
  __webpack_require__(72);
  __webpack_require__(74);
  __webpack_require__(75);
  __webpack_require__(76);
  __webpack_require__(73);
}

Toolbar.prototype.setFunctionCallback = function(target){
  if(target.canvas){
    return target.canvas.renderAll();
  }
  if(target.renderAll){
    return target.renderAll()
  }
};


fabric.util.object.extend(fabric.Object.prototype,{
  /**
   *
   * @param tools ["x", "*", "y"]
   * @param proto
   * @returns ["x", "a", "b", "c", "y"]
   * @private
   */
  _getTools: function(tools,proto){
    var indexOfStar = -1;
    if((indexOfStar = tools.indexOf("*")) == -1){
      return tools;
    }

    var klassname = fabric.util.string.capitalize(fabric.util.string.camelize(proto.type),true);
    var protoFabric = fabric[klassname].prototype;
    var protoApp = this.application.prototypes[klassname];

    var tools2 = protoApp && protoApp.tools || protoFabric.tools;
    if(tools2){
      tools.splice.apply(tools, [indexOfStar, 1].concat(tools2));
    }
    return this._getTools(tools, protoFabric.__proto__ );
  },
  setTools: function(tools){
    this.tools = this._getTools(tools , this.__proto__.__proto__);
  },
  makeActions: function(){
    Toolbar.makeActions(this)
  }
});

fabric.util.object.extend(fabric.Application.prototype,{
  toolbar: false,
  setApplicationToolbarContainer: function(containerId) {
    this.applicationToolbarContainer = containerId;
    new Toolbar(this, containerId);
  },
  setCanvasToolbarContainer: function(containerId) {
    this.canvasToolbarContainer = containerId;
    new Toolbar(this.canvas, containerId);
  },
  setObjectsToolbarOptions: function(options) {
    options = _.defaults(options || {
      originX: "left",
      originY: "top",
      marginX: 0,
      marginY: 0
    });

    this.objectsToolbarOptions = options;
  },
  setObjectsToolbarContainer: function(containerId) {
    this.objectsToolbarContainer = containerId;

    var canvas = this.canvas;

    if (containerId) {
      this.$menu = $(document.getElementById(containerId)).hide();
    } else {
      this.$menu = this.$menu || $('<div>');
      $(this.wrapperEl).prepend(this.$menu);
    }
    this.$menu.hide();

    var _last_target = canvas.target;
    canvas.on({
      'object:moving': function (event) {
        var $menu = this.getToolbarContainer();
        canvas.setToolbarCoords($menu, canvas.target, canvas.application.objectsToolbarOptions);
      },
      'target:cleared': function (event) {
        if (_last_target) {
          var $menu = this.getToolbarContainer();
          $menu.hide();
          canvas.objectToolbar.destroy();
          delete canvas.objectToolbar;
          _last_target = null;
        }
      },
      'target:changed': function (event) {
        if (_last_target) {
          canvas.objectToolbar.destroy();
        }
        canvas.createFloatedMenu(this.application.objectsToolbarOptions);
        _last_target = event.target;
      }
    });
  },
  setToolbarOptions: function(toolbarOptions){

    fabric.util.object.deepExtend(Toolbar.tools, toolbarOptions.tools);
    for (var klassName in toolbarOptions.actions) {
      var actions = toolbarOptions.actions[klassName];
      if(!fabric[klassName].prototype.actions){
        fabric[klassName].prototype.actions = {}
      }
      var protoActions = fabric[klassName].prototype.actions;

      if (actions.constructor == Function) {
        actions = actions.call(fabric[klassName].prototype)
      }else{
        actions = fabric.util.object.cloneDeep(actions);
      }
     // var $order = actions["$order"];
     // delete actions["$order"];

      for (var j in actions) {
        if(protoActions[j]){
          if (actions[j]["$clone"]) {
            protoActions[j] = fabric.util.object.deepExtend({}, protoActions[j]);
            delete actions[j]["$clone"];
          }
          fabric.util.object.deepExtend(protoActions[j], actions[j]);
        }else{
          protoActions[j] = actions[j];
        }
      }
     /* if($order){
        fabric[klassName].prototype.actions = fabric.util.object.rearrange(protoActions, $order);
      }*/
    }
  },
  eventListeners: fabric.util.object.extendArraysObject(fabric.Application.prototype.eventListeners, {
   // "canvas:created" : function(){
    //  this.initTools();
   // },
   //  "canvas:created": function(){
   //    this.createToolbars();
   //  }
  })
});


fabric.Toolbar = Toolbar;

fabric.util.object.extend(fabric.Canvas.prototype, {
  setToolbarCoords: function ($menu, target, options) {

    options = fabric.util.object.extend({
      originX: "left",
      originY: "top",
      marginX: 0,
      marginY: 0
    }, options);

    target.setCoords();
    var r = target.getBoundingRect();

    var _left;
    switch (options.originX) {
      case "left":
        _left = r.left;
        break;
      case "right":
        _left = r.left + r.width;
        break;
      case "center":
        _left = r.left + r.width / 2;
        break;
    }
    ;
    var _top;
    switch (options.originY) {
      case "top":
        _top = r.top - $menu.height();
        break;
      case "bottom":
        _top = r.top + r.height;
        break;
      case "center":
        _top = r.top + r.height / 2 - $menu.height() / 2;
        break;
    }
    ;


    _top += options.marginY;
    _left += options.marginX

    var _menuContainerOffset = $($menu.parents()[0]).offset();
    var _canvasOffset = $(this.wrapperEl).offset();

    _top += _canvasOffset.top - _menuContainerOffset.top;
    _left += _canvasOffset.left - _menuContainerOffset.left;

    var coords = {
      top: Math.max(3, _top),
      left: Math.min(Math.max(3, _left), $(this.wrapperEl).width() - $menu.width() - 5)
    };


    $(this.wrapperEl).offset();

    $menu.css(coords);
    return coords;
  },
  getToolbarContainer: function (id, options) {
    return $(document.getElementById(this.application.objectsToolbarContainer));
  },
  createFloatedMenu: function (options) {

    var $menu = this.getToolbarContainer();

    $menu.show();
    //this.toolsContainer = this.$menu;
   /* var _tc = $menu.find(".toolbar-tools-container");
    if (_tc.length) {
      this.toolsContainer = _tc;
    }*/
   // this.toolsContainer.empty();
    if (this.target.actions) {
      this.objectToolbar = new Toolbar (this.target, $menu, options);
    }
    this.setToolbarCoords($menu, this.target, this.application.objectsToolbarOptions);
  }
});



/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {


fabric.util.uploadImageMaxSize = {
  width: 400,
  height: 400
};

fabric.util.uploadImageMinSize = {
  width: 100,
  height: 100
};

fabric.util.multiUpload = false;

fabric.util.readFile = function(file,callback){

  var reader = new FileReader();
  reader.onload = function (e) {
    var result = e.target.result;
    var type = result.substr(11, result.indexOf(";") - 11);
    var img = new Image();
    img.type = type;
    img.name = file.name;
    img.onload = function () {

      if(!fabric.util.multiUpload){
        if (fabric.util.uploadPreprocessor) {
          fabric.util.uploadPreprocessor([this], function (val) {
            callback(val);
          },options)
        } else {
          callback(this);
        }
      }else{
        callback();
      }
    };
    img.src = result;
  };
  reader.readAsDataURL(file );
};


fabric.util.createUploadInput = function (options, complete, progress) {

  var input = document.createElement("input");
  input.setAttribute("type", "file");
  input.setAttribute("multiple", true);
  input.className = "hidden";

  $(input).change(function () {

    if(input.files && input.files.length){

      var _loader = fabric.util.queueLoad(input.files.length,function(loaded){

        if(fabric.util.multiUpload){
          if (fabric.util.uploadPreprocessor) {
            fabric.util.uploadPreprocessor(loaded, function (val) {
              complete(val,options);
            },options)
          } else {
            complete(loaded,options);
          }
        }else{
          complete(loaded[0],options);

        }
      },function(total, current, image){
        if(fabric.util.multiUpload) {
          if (progress) {
            progress(total, current, image);
          }
        }
      });



      for(var i =0; i< input.files.length; i++){
        fabric.util.readFile(input.files[i],_loader);
      }



    }

  });

  fabric.util.uploadInput = input;
};


//fabric.util.resizeImage(img, callback);
fabric.util.uploadPreprocessor = null;


fabric.util.uploadImage = function (cb,progress,options) {
  fabric.util.createUploadInput(options,cb,progress);
  $(fabric.util.uploadInput).trigger('click');
};


fabric.util.resizeUploadedImage = function (img, callback) {

  if (img.type === "svg+xml") {
    callback(img);
    return;
  }
  //Here we can put a restriction to upload a minim sized logo
  if (img.width < fabric.util.uploadImageMinSize.width || img.height < fabric.util.uploadImageMinSize.height) {
    alert("Logo is too small. MInimum size is " + fabric.util.uploadImageMinSize.width + "x" + fabric.util.uploadImageMinSize.height);
    callback(false);
    return;
  }

  if (img.width > fabric.util.uploadImageMaxSize.width || img.height > fabric.util.uploadImageMaxSize.height) {

    var size = fabric.util.getProportions(img, fabric.util.uploadImageMaxSize, "fit");

    var filter = new fabric.Image.filters.ResizeDP();

    var canvas = fabric.util.createCanvasElementWithSize(img);
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    filter.applyTo(canvas, size.width, size.height);
    callback(canvas);
  } else {
    callback(img);
  }
};


fabric.util.object.extend(fabric.Canvas.prototype,{
  uploadClass: 'Image',
  uploadImageTool: false,
  createImageObject: function (img, objectType) {
    if (!img)return;
    this.createObject({
      position: "center",
      active: true,
      type: this.uploadClass,
      image: img,
      clipTo: this.activeArea,
      movementLimits: this.activeArea
    });
  },
  actions: fabric.util.object.extend(fabric.SlideCanvas.prototype.actions,{
    uploadImage: {
      className:  'fa fa-upload',
      key: 'U',
      title: 'upload image',
      action: function () {
        fabric.util.uploadImage(function(img){
          this.createImageObject(img,this.uploadClass)
        }.bind(this))
      }
    }
  })
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {



/////////////////module responsive borders//////////////////////////////////////////////////////////////////////////////////////////

fabric.util.object.extend(fabric.Object.prototype, {
  responsiveBorders: false
});

if(!fabric.SlideCanvas.prototype._default_event_listeners){
  fabric.SlideCanvas.prototype._default_event_listeners = {};
};

fabric.Object.prototype.updateResponsiveBorder = function(){
  if(this.responsiveBorders){
    if(!this.originalStrokeWidth){
      this.originalStrokeWidth = this.strokeWidth;
    }
    this.strokeWidth = this.canvas ? this.originalStrokeWidth / this.canvas.viewportTransform[0] : 0;
  }
};

fabric.util.object.extend(fabric.SlideCanvas.prototype, {
  _default_event_listeners: {
    "dimensions:modified": function () {
      this.centerAndZoomOut();
    },
    'viewport:scaled': function () {
      if (this.backgroundImage) {
        this.backgroundImage.updateResponsiveBorder();
      }
      for (var i in this._objects) {
        this._objects[i].updateResponsiveBorder();
      }
    },
    "background-image:loaded": function (event) {
      if (this.autoCenterAndZoomOutEnabled) {
        this.centerAndZoomOut();
      }
    },
    "loading:end": function (event) {
      if (this.autoCenterAndZoomOutEnabled && (this.originalHeight || this.originalWidth)) {
        this.centerAndZoomOut();
      }
    },
    "object:added": function (event) {
      event.target.updateResponsiveBorder()
    }
  }
});


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



fabric.util.object.extend(fabric.SlideCanvas.prototype, {
  zoomCtrlKey: true,
  mouseWheelEnabled : false,
  _setZoomNative  : fabric.Canvas.prototype.setZoom,
  _zoomToPointNative  : fabric.Canvas.prototype.zoomToPoint,
  changeDimensionOnZoom: false,
  drawZoomArea : function(_ctx,left, top ,width, height ){
    _ctx.save();
    _ctx.translate(left || 0, top || 0);
    var _scale = this.getZoom();
    var _size = fabric.util.getProportions(this.backgroundImage, {width: width || 100, height: height || 100});
    _ctx.globalAlpha = 0.5;
    _ctx.fillRect(0,0,_size.width, _size.height);
    _ctx.strokeStyle = "red";

    var v = this.viewportTransform;

    var x1 = -v[4] * _size.scale / _scale;
    var y1 = -v[5] * _size.scale / _scale;
    var x2 = x1 + this.width * _size.scale / _scale;
    var y2 = y1 + this.height * _size.scale / _scale;

    x1 = Math.max(x1,0);
    y1 = Math.max(y1,0);
    x2 = Math.min(x2,_size.width);
    y2 = Math.min(y2,_size.height);

    _ctx.globalAlpha = 1;
    _ctx.beginPath();
    _ctx.moveTo(x1,y1);
    _ctx.lineTo(x2,y1);
    _ctx.lineTo(x2,y2);
    _ctx.lineTo(x1,y2);
    _ctx.lineTo(x1,y1);

    _ctx.fill();
    _ctx.clip();
    // _ctx.globalCompositeOperation = "source-in";
    _ctx.drawImage(this.backgroundImage._element,0,0,_size.width, _size.height)
    // _ctx.globalCompositeOperation = "source-over";
    // _ctx.drawImage(this.backgroundImage._element,0,0,_size.width, _size.height)
    _ctx.stroke();
    _ctx.strokeRect(0,0,_size.width, _size.height);
    _ctx.restore();
  },
  setZoom: function (_scale){
    if(this.changeDimensionOnZoom){
      var _w = Math.round(this.originalWidth * _scale);
      var _h = Math.round(this.originalHeight * _scale);
      this.setDimensions({
        width: _w,
        height: _h
      });
    }
    this._zoomToPointNative( new fabric.Point(0, 0), _scale)
    //  this._setZoomNative(_scale);
    this.fire('viewport:scaled', {scale: _scale});
  },
  zoomToPoint: function(point, newZoom){
    var _max =  this.getMaxZoom();
    var _min =  this.getMinZoom().scale;
    if(newZoom > _max){
      newZoom = _max;
    }
    if(newZoom < _min){
      newZoom = _min;
    }
    this._zoomToPointNative( point, newZoom);
    for (var i in this._objects) {
      this._objects[i].setCoords();
    }
    this.fire('viewport:scaled', {scale: newZoom});
  },
  resetViewport: function () {
    _canvas.viewportTransform[0] = 1;
    _canvas.viewportTransform[3] = 1;
    _canvas.viewportTransform[4] = 0;
    _canvas.viewportTransform[5] = 0;
    _canvas.renderAll();
    for (var i in this._objects) {
      this._objects[i].setCoords();
    }
  },
  zoomToPointEnabled: true,
  minZoomFactor: 1,
  maxZoom: 20,
  autoCenterAndZoomOutEnabled: false,
  getMaxZoom: function () {
    return this.maxZoom;
  },
  getMinZoom: function () {
    var _containerSize = {
      width: $(this.wrapperEl).width(),
      height: $(this.wrapperEl).height()
    };
    var _bgSize = {
      width: this.originalWidth,
      height: this.originalHeight
    };
    var _maxSize = {
      width: _containerSize.width * this.minZoomFactor,
      height: _containerSize.height * this.minZoomFactor
    };

    return fabric.util.getProportions(_bgSize, _maxSize, 'fit');
  },
  centerAndZoomOut: function () {

    if(this.virtual){
      return;
    }
    var options = this.getMinZoom();

    var _containerSize = {
      width: $(this.wrapperEl).width(),
      height: $(this.wrapperEl).height()
    };

    var vpt = this.viewportTransform.slice(0);
    vpt[0] = options.scale;
    vpt[3] = options.scale;
    vpt[4] = (_containerSize.width - options.width ) / 2;
    vpt[5] = (_containerSize.height - options.height) / 2;

    this.setViewportTransform(vpt);


    this._update_background_image();
    // this.fire("viewport:scaled",{scale: options.scale})
    //this.renderAll();
  },
  centerOnObject: function(tag){
    var br = tag.getBoundingRect();
    var ct = this.viewportTransform;
    br.width /= ct[0];
    br.height /= ct[3];
    var size = {
      width: br.width * 1.1,
      height: br.height * 1.1
    };

    var prop = fabric.util.getProportions(size,this);
    var _w = (this.width / prop.scale - size.width ) / 2;
    var _h = (this.height / prop.scale - size.height) / 2;
    var _l = (br.left  - ct[4]) / ct[0];
    var _t = (br.top - ct[5]) / ct[3];

    var x1 = [
      prop.scale,
      0,0,
      prop.scale,
      - tag.left * prop.scale + (tag.width * 0.05 + _w) * prop.scale,
      - tag.top * prop.scale + (tag.height * 0.05 + _h )* prop.scale
    ];
    var x2 = [
      prop.scale,
      0,0,
      prop.scale,
      - _l  * prop.scale + (br.width * 0.05 + _w) * prop.scale,
      - _t  * prop.scale + (br.height * 0.05 + _h )* prop.scale
    ];

    this.setViewportTransform(x2);
    this.fire("viewport:scaled",{scale: prop.scale})
    this.renderAll();
  },

  __onMouseWheel: function (event) {

    if(!this.mouseWheelEnabled || this.zoomCtrlKey && !event.ctrlKey){
      return;
    }
//Find nearest point, that is inside image END
    var zoomStep;// = 0.1 * event.deltaY;
    if (event.deltaY < 0) {
      zoomStep = 1.1;
    } else {
      zoomStep = 0.9;
    }

    var newZoom = this.getZoom() * zoomStep;
    var minZoom = this.getMinZoom().scale;


    if(this.zoomToPointEnabled){
      var point = new fabric.Point(event.offsetX, event.offsetY);
      var _x = this.viewportTransform[4];
      var _y = this.viewportTransform[5];

      // Find nearest point, that is inside image BEGIN
      // It is needed to prevent canvas to zoom outside image
      var _w = this.originalWidth * this.getZoom() + _x;
      var _h = this.originalHeight * this.getZoom() + _y;


      if (point.x < _x) {
        point.x = _x;
      }
      if (point.y < _y) {
        point.y = _y;
      }
      if (point.x > _w) {
        point.x = _w;
      }
      if (point.y > _h) {
        point.y = _h;
      }
      if (minZoom > newZoom) {
        if(this.autoCenterAndZoomOutEnabled){
          this.centerAndZoomOut();
        }
      } else {
        this.zoomToPoint(point, newZoom);
      }
    }else{
      this.setZoom(newZoom);
    }




    for (var i in this._objects) {
      this._objects[i].setCoords();
    }
    this.renderAll();
    event.stopPropagation();
    event.preventDefault();
    return false; //preventing scroll page
  },
  scaleFactor: 1.1,
  getOrignalCenter : function(){
    var point = this.getCenter();
    point.left += this.viewportTransform[4] ;
    point.top += this.viewportTransform[5];
    return point;
  }
});




fabric.util.object.extend(fabric.SlideCanvas.prototype.actions, {
  zoomOut: {
    className: 'fa fa-search-minus',
    title: 'zoom-out',
    action: function (m) {
      var point = this.getOrignalCenter();
      var scaleValue = this.getZoom() / this.scaleFactor;
      this.zoomToPoint({x: point.left, y: point.top},scaleValue);
    }
  },
  zoomNumber: {
    type: 'number',
    value: {
      min:  function(){return 0.01},
      max:  function(){return 10},
      set: function (val) {
        this.setZoom(val)
      },
      get: function () {
        return this.getZoom()
      },
      observe: "viewport:scaled"
    }
  },
  zoomIn: {
    className: 'fa fa-search-plus',
    title: 'zoom-in',
    action: function (m) {
      var point = this.getOrignalCenter();
      var scaleValue = this.getZoom() * this.scaleFactor;
      this.zoomToPoint({x: point.left, y: point.top},scaleValue);
    }
  }
  // zoom: {
  //   title: "zoom",
  //   menu: zoomOut
  // }
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {


var utils = __webpack_require__(3);
utils.object = __webpack_require__(2);


/***********************************************************************************************************************
 ** DPHistory
 ***********************************************************************************************************************/


var DPHistory = function (parent, initAction) {
    this.parent = parent;
    this.clear(initAction);
};

DPHistory.prototype.setRecords = function (records,current) {
  this.canUndo = records.length;
  this.canRedo = false;

  if(!records.length){
    records = [{
      type: 'initialized',
      id: 0,
      text : 'initialized'
    }]
  }
  this.records = records;
  this.length = this.records.length ;
  this.current = current === undefined ? records.length - 1 : current;
  this.activeAction = this.records[this.current];
  this.fire("changed",{action: this.activeAction});
  return this;
};

DPHistory.prototype.restore = function () {
  this.setRecords(this.saved.records,this.saved.current);
  return this;
};

DPHistory.prototype.save = function () {
  this.saved = {
    current: this.current,
    records: utils.object.cloneDeep(this.records)
  }
  return this;
};

DPHistory.prototype.clear = function (initAction) {
    if (initAction) {
        initAction.id = 0;
    } else {
        initAction = {
            type: 'initialized',
            id: 0,
          text : 'initialized'
        }
    }
    this.records = [initAction];
    this.current = 0;
    this.canUndo = false;
    this.canRedo = false;
    this.activeAction = this.records[this.current];
  this.fire("changed",{action: this.activeAction});
  return this;
};


DPHistory.prototype.add = function(action){


    if (!this.enabled || this.processing) {
      return false;
    }

    action.moment = new Date().getTime();
    this.canUndo = true;
    this.canRedo = false;
    this.records.splice(this.current+ 1);
    this.records.push(action);
    this.length = this.records.length;
    action.id = this.length - 1;
    action.text = action.type || action.text;
    this.current = this.length - 1;

  this.activeAction = this.records[this.current];
  this.fire("changed",{action: action});
  return this;
};
DPHistory.prototype.disable = function(){
  this.enabled = false;
  return this;
};
DPHistory.prototype.enable = function(){
  this.enabled = true;
  return this;
};
DPHistory.prototype.undo = function(noFire){
    this.canRedo = true;
    var _action = this.records[this.current];
    this.current--;
  this.processing = true;
    _action.undo.call(this.parent,_action);
  this.processing = false;
    if(this.current == 0){
        this.canUndo = false;
    }
    if(!noFire){
      this.activeAction = this.records[this.current];
      this.fire("changed",{action: _action});
    }
  return this;
};

DPHistory.prototype.goto = function(index){
    if(index == this.current)return;
    if(index < this.current){
        for(var i = this.current - index ;i--; ){
            this.undo(true);
        }
    }if(index > this.current){
        for(var i = index - this.current ;i--; ){
            this.redo(true);
        }
    }
  this.activeAction = this.records[this.current];
  this.fire("changed",{action: this.activeAction});
  return this;
};

DPHistory.prototype.redo = function(noFire){
    if(this.current == this.length - 1){
        return;
    }
  this.processing = true;
    this.canUndo = true;
    this.current++;
    var _action = this.records[this.current];

    _action.redo.call(this.parent,_action);

    if(this.current == this.length - 1){
        this.canRedo = false;
    }
  this.processing = false;
  if(!noFire) {
    this.activeAction = this.records[this.current];
    this.fire("changed",{action: _action});
  }
  return this;
};
utils.observable(DPHistory.prototype);
module.exports = DPHistory;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {
fabric.util.object.extend(fabric.PathGroup.prototype,{
  initialize_overwritten: fabric.PathGroup.prototype.initialize,
  initialize: function(paths, options){

    if(paths.constructor != Array){
      options = paths.toObject();
      delete options.paths;
      paths = paths.paths;
    }

    this.initialize_overwritten(paths, options);
  },
  extractColors: function () {
    var _colors = {};
    var _paths = this.paths;
    for (var i in _paths) {
      if (_paths[i].fill.type) {
        for (var j in _paths[i].fill.colorStops) {
          var _color = _paths[i].fill.colorStops[j].color;
          if (!_colors[_color]) _colors[_color] = [];
          _colors[_color].push({object: _paths[i], stop: _paths[i].fill.colorStops[j]});
        }

      } else {
        var _color = _paths[i].fill;
        if (!_colors[_color]) _colors[_color] = [];
        _colors[_color].push({object: _paths[i], color: _paths[i]});
      }
    }
    return _colors;
  }
})

fabric.PathGroup.fromElements = function (elements, object, url) {
  var _options = {
    toBeParsed: true,
    //originX: "center",
    //originY: "center"
  };

  //смещаем элементы так, чтобы их кооринаты начинались от 0.0
  if (elements.length) {

    var minX = Infinity,
      minY = Infinity;
    for (var i in elements) {
      minX = Math.min(elements[i].left, minX);
      minY = Math.min(elements[i].top, minY);
    }


    minX = Math.max(minX, 0);
    minY = Math.max(minY, 0);
    /* for (var i in elements) {
     elements[i].translate(-minX, -minY);
     elements[i].left -= minX;
     elements[i].pathOffset.x -= minX;
     elements[i].top -= minY;
     elements[i].pathOffset.y -= minY;
     }*/
  }

  var el = fabric.util.groupSVGElements(elements, _options, url);

  var scaleX = object.width ? object.width / el.width : null,
    scaleY = object.height ? object.height / el.height : null;
  if (scaleX && !scaleY) {
    scaleY = scaleX;
  }
  if (scaleY && !scaleX) {
    scaleX = scaleY;
  }
  if (!scaleY && !scaleX) {
    scaleX = scaleY = 1;
  }

  delete object.height;
  delete object.width;
  el.set(fabric.util.object.extend(object, {
    //left: 0, top: 0,
    scaleX: scaleX,
    scaleY: scaleY
  }));
  el.setLeft(object.left);
  el.setTop(object.top);
  return el;
};

// fabric.PathGroup.prototype.render = function(ctx,noTransform) {
//   if (!this.visible) {
//     return;
//   }
//   var x = noTransform ? 0 : - this.width * this.scaleX / 2,
//     y = noTransform ? 0 : - this.height * this.scaleY / 2;
//
//   ctx.save();
//   ctx.translate(x,y);
//
//   if (this.transformMatrix) {
//     ctx.transform.apply(ctx, this.transformMatrix);
//   }
//   this.transform(ctx);
//
//   this._setShadow(ctx);
//   this.clipTo && fabric.util.clipContext(this, ctx);
//   ctx.translate(-this.width/2, -this.height/2);
//   for (var i = 0, l = this.paths.length; i < l; ++i) {
//     this.paths[i].render(ctx, true);
//   }
//   this.clipTo && ctx.restore();
//   ctx.restore();
// }






fabric.PathGroup.fromURL = function (url, callback, object) {

  fabric.loadSVGFromURL(url,function(els){

    var el = new fabric.PathGroup(els, {toBeParsed:true});

    // //смещаем элементы так, чтобы их кооринаты начинались от 0.0
    // if (el.paths.length) {
    //
    //   var minX = Infinity,
    //     minY = Infinity;
    //   var maxX = -Infinity,
    //     maxY = -Infinity;
    //
    //   for (var i in el.paths) {
    //     var _p = el.paths[i];
    //     minX = Math.min(_p.left, minX);
    //     minY = Math.min(_p.top, minY);
    //     maxX = Math.max(_p.left + _p.width, maxX);
    //     maxY = Math.max(_p.top + _p.height, maxY);
    //   }
    //
    //   var _W = maxX - minX;
    //   var _H = maxY - minY;
    //   //
    //   //
    //   // minX = Math.max(minX, 0);
    //   // minY = Math.max(minY, 0);
    //   /* for (var i in elements) {
    //    elements[i].translate(-minX, -minY);
    //    elements[i].left -= minX;
    //    elements[i].pathOffset.x -= minX;
    //    elements[i].top -= minY;
    //    elements[i].pathOffset.y -= minY;
    //    }*/
    // }else{
    //   _W = 1;
    //   _H = 1;
    // }

    var scaleX = object.width ? object.width / el.width : null,
      scaleY = object.height ? object.height / el.height : null;
    if (scaleX && !scaleY) {
      scaleY = scaleX;
    }
    if (scaleY && !scaleX) {
      scaleX = scaleY;
    }
    if (!scaleY && !scaleX) {
      scaleX = scaleY = 1;
    }
    // console.log(object.width,el.width,object.height,el.height)
    // console.log(el);
    el.set( {
      scaleX: scaleX ,
      scaleY: scaleY
    });

    callback(el);
  });

  // fabric.loadSVGFromURL(url,function(els){
  //   callback(fabric.PathGroup.fromElements(els, object));
  // });
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {

__webpack_require__(45);
__webpack_require__(44);
__webpack_require__(67);
__webpack_require__(7);
__webpack_require__(59);

/**
 * @author Denis Ponomarev
 * @email den.ponomarev@gmail.com
 */
fabric.Clipart = fabric.util.createClass(
  fabric.Group,
  fabric.StrokeMixin,
  fabric.CacheMixin,
  fabric.ImageMixin, {
    type: 'clipart',
    colors: null,
    format: 'svg',
    resizable: true,
    processing: false,
    stateProperties: fabric.Group.prototype.stateProperties.concat(["colors"]),
    optionsOrder: ["*","colors","element"],
    getOriginalSize: function(){
      return {
        width: this.element.width,
        height: this.element.height
      }
    },
    initialize: function (options) {
      options || ( options = {});

      if (options.constructor != Object) {

        var _obj = options.toObject();
        if (options.element) {
          _obj.element = options.element.cloneSync();
          _obj.element.clipTo = _obj._fabric_shape;
        }
        _obj.shape = options.shape;
        options = _obj;
      }

      this.on({
        "scaling": this.updateElement
      });

      this.initShape(options);
      this._fabric_shape.set({
        opacity: 0,
        originX : 'center',
        originY : 'center',
      });

      this.callSuper('initialize', [this._fabric_shape], options);
      this._setWidthHeight(options);
    },
    setShape: function(el,cb){

      el =  fabric.util.object.extend({
        strokeWidthFull: this.shape.strokeWidthFull,
        strokeWidthEmpty: this.shape.strokeWidthEmpty,
        strokeWidthActive: this.shape.strokeWidthActive,
        dashArray : this.shape.dashArray,
        strokeEmpty:  this.shape.strokeEmpty,
        strokeFull:  this.shape.strokeFull,
        strokeActive:this.shape.strokeActive
      },el);

      var _this = this;
      if(el && el.src && !el.paths){
        fabric.loadSVGFromURL(el.src,function(paths,options) {
          el.paths  = paths;
          fabric.util.object.extend(el,options);
          _this._set_shape(el);
          _this.add(_this._fabric_shape)
          _this._apply_shape();
          cb && cb();
        })
      }else{
        _this._set_shape(el);
        _this.add(_this._fabric_shape);
        _this._apply_shape();
        cb && cb();
      }
    },
    setElement: function (element) {
      if(this.element){
        this.remove(this.element);
      }
      if(!element){
        return;
      }
      element.set({
        originX : 'center',
        originY : 'center'
      });
      this.add(element);
      this.element = element;
      if (this.format === 'png' || this.format === 'image/png' || this.format === 'jpeg' || this.format === 'image/jpeg') {
        this._cache = this.element._element;
      } else {
        this._init_color_array();
      }
      this.dirty = true;
      this.canvas && this.canvas.renderAll();
    },
    updateElement: function () {
      if(this.element){
        this.element.scaleX = this.width / this.element.width;
        this.element.scaleY = this.height / this.element.height;
      }
      if(this._fabric_shape){
        this._fabric_shape.set({
          width: this.width,
          height: this.height
        });
      }
      this.dirty = true;
    },
    _render: function (ctx) {
      ctx.save();
      ctx.scale(this.element.scaleX,this.element.scaleY)
      for (var i = 0, l = this.element.paths.length; i < l; ++i) {
        this.element.paths[i].render(ctx, true);
      }
      ctx.restore();
    },
    /**
     * кобъект готовится к замену фото
     */
    activate: function () {
      this._activated = true;
      this._fabric_shape.setOpacity(1);
      this.updateStroke();
      this.canvas.renderAll();
    },
    /**
     * кобъект не готовится к замену фото
     */
    deactivate: function () {
      this._activated = false;
      this.updateStroke();
      this.canvas.renderAll();
    },
    _init_color_array: function () {

      this.processing = true;
      this._colors = this.element.extractColors();

      this.colors = this.colors || {};

      for (var _color in this.colors) {
        this.setClipartColor(_color, this.colors[_color],true)
      }
    },
    setElementFromMenu: function(options){
      var _this = this;
      fabric.PathGroup.fromURL(options.image.src, function (el) {
        _this.setElement(el);
        _this.makeActions();
        _this.canvas.createFloatedMenu(_this.application.objectsToolbarOptions);
      },{
        width: this.width,
        height: this.height
      });
    },
    // render: function (ctx) {
    //   // var x = noTransform ? 0 : - this.width * this.scaleX / 2,
    //   //   y = noTransform ? 0 : - this.height * this.scaleY / 2;
    //   //
    //   // ctx.save();
    //   // ctx.translate(x,y);
    //   fabric.Group.prototype.render.apply(this,arguments)
    //   // ctx.restore();
    // },
    setClipartColor: function (key, value, preventCacheUpdate) {

      if (!value) {
        value = key;
        delete this.colors[key];
      } else {
        this.colors[key] = value;
      }
      var _colors = this._colors[key];
      for (var i in _colors) {
        if (_colors[i].color) {
          _colors[i].color.fill = value;
        }
        if (_colors[i].stop) {
          _colors[i].stop.color = value;
        }
      }

      this.dirty = true;
      this.canvas && this.canvas.renderAll();
    },
    toObject: function (propertiesToInclude) {
      var _obj = this.callSuper('toObject', ['src', 'colors'].concat(propertiesToInclude));
      delete _obj.objects;
      return _obj;
    },
    actions:  {
      source: {
        type: 'effect',
        className: 'fa fa-file-image-o',
        title: "source",
        actionParameters: function ($el, data) {
          data.target.application.createGallery(data.target, $el, data);
        }
      },
      colors: {
        type: 'menu',
        title: 'color menu',
        menu: function () {
          var _menu = [];
          for (var key in this._colors) {
            _menu.push({
              title: "Color (" + key + ")",
              value: {
                defaultValue: key,
                value: this.colors[key] || key,
                get: function (key) {
                  return this.colors[key] || key;
                }.bind(this, key),
                set: this.setClipartColor.bind(this, key)
              },
              type: "color"
            })
          }
          return _menu;
        }
      }
    }
  }
);

fabric.Clipart.async = true;

/**
 * Creates fabric.PathGroup instance from an object representation
 * @static
 * @memberOf fabric.PathGroup
 * @param {Object} object Object to create an instance from
 * @param {Function} callback Callback to invoke when an fabric.PathGroup instance is created
 */
fabric.Clipart.fromObject = function (object, callback) {
  if (typeof object.src === 'string') {
    if (object.format === 'png' || object.format === "image/png" || object.format === 'jpeg' || object.format === "image/jpeg") {
      fabric.Image.fromURL(object.src, function (el) {
        object.element = el;
        callback(new fabric.Clipart(object));
      }, {
        width: object.width || fabric.Clipart.prototype.width,
        height: object.height || fabric.Clipart.prototype.height
      });
    } else {
      fabric.PathGroup.fromURL(object.src, function (el) {
        object.element = el;
        callback(new fabric.Clipart(object));
      }, {
        width: object.width || fabric.Clipart.prototype.width,
        height: object.height || fabric.Clipart.prototype.height
      });
    }
  } else {
    return new fabric.Clipart(object);
  }
};

fabric.util.createAccessors(fabric.Clipart);

if (fabric.objectsLibrary) {
  fabric.util.object.extend(fabric.objectsLibrary, {
    clipart: {
      "width": function (w, h) {
        var _asp = Math.min(285 / 365, w / h);
        return w;
      },
      "height": function (w, h) {
        var _asp = Math.min(285 / 365, w / h);
        return h;
      },
      "type": "clipart",
      "src": "data:image/svg+xml;utf8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTkuMC4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgLS0+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeD0iMHB4IiB5PSIwcHgiIHZpZXdCb3g9IjAgMCA1MTIgNTEyIiBzdHlsZT0iZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCA1MTIgNTEyOyIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgd2lkdGg9IjUxMnB4IiBoZWlnaHQ9IjUxMnB4Ij4KPGc+Cgk8cGF0aCBzdHlsZT0iZmlsbDojRkY4QzQ2OyIgZD0iTTE2My4xODksNjcuMTQ4QzEyOS42MTYsNjcuMTQ4LDEyMS4yMjIsMCw3OS4yNTUsMEM1Mi43MTMsMCwyOC44OTQsMTYuNzg3LDI4Ljg5NCw1MC4zNjEgICBzNTguNzU0LDUwLjM2MSw0MS45NjcsMTA5LjExNUwxNjMuMTg5LDY3LjE0OHoiLz4KCTxwYXRoIHN0eWxlPSJmaWxsOiNGRjhDNDY7IiBkPSJNMzQ3Ljg0NSw2Ny4xNDhDMzgxLjQxOSw2Ny4xNDgsMzg5LjgxMiwwLDQzMS43OCwwYzI2LjU0MiwwLDUwLjM2MSwxNi43ODcsNTAuMzYxLDUwLjM2MSAgIHMtNTguNzU0LDUwLjM2MS00MS45NjcsMTA5LjExNUwzNDcuODQ1LDY3LjE0OHoiLz4KPC9nPgo8Zz4KCTxwYXRoIHN0eWxlPSJmaWxsOiNGRkVCRDI7IiBkPSJNMzMxLjU0MSw0NjEuNjM5QzMzMS41NDEsNDg5LjQ1MywzMTEuNjI2LDUxMiwyNTYsNTEycy03NS41NDEtMjIuNTQ3LTc1LjU0MS01MC4zNjF2LTguMzkzaDE1MC41OTkgICBMMzMxLjU0MSw0NjEuNjM5eiIvPgoJPHBhdGggc3R5bGU9ImZpbGw6I0ZGRUJEMjsiIGQ9Ik00NTkuMzY4LDE4Mi45MWMzNC40NDYsNTYuMzAzLDQwLjA0MiwxMDIuNDY3LDQwLjA0MiwxMDIuNDY3aC0xNi43ODcgICBjMCwwLDE2Ljc4Nyw0MS40NDMsMTYuNzg3LDY3LjE0OGwtMjUuMTgtOC4zOTNjMCwwLDE2Ljc4NywzNy43NywxNi43ODcsNjcuMTQ4YzAsMC41MjUtMjUuMTgtOC4zOTMtMjUuMTgtOC4zOTMgICBzMTIuNTksMjguMzI4LDguMzkzLDQxLjk2N2MtMC4xNTQsMC41MDEtMjUuMTgtOC4zOTMtMjUuMTgtOC4zOTNzNy4zNDQsMTkuNTg1LDAsMzMuNTc0bC00MS45NjctMTYuNzg3ICAgYzAsMC03Ljg0NiwyNS42ODEtOC4zOTMsMjUuMThjLTE4LjM2MS0xNi43ODctNDEuOTY3LTI1LjE4LTQxLjk2Ny0yNS4xOEgxNTUuMjc5YzAsMC0yMy42MDcsOC4zOTMtNDEuOTY3LDI1LjE4ICAgYy0wLjU0OCwwLjUtOC4zOTMtMjUuMTgtOC4zOTMtMjUuMThsLTQxLjk2NywxNi43ODdjLTcuMzQ0LTEzLjk4OSwwLTMzLjU3NCwwLTMzLjU3NHMtMjUuMDI2LDguODk1LTI1LjE4LDguMzkzICAgYy00LjE5Ny0xMy42MzksOC4zOTMtNDEuOTY3LDguMzkzLTQxLjk2N3MtMjUuMTgsOC45MTgtMjUuMTgsOC4zOTNjMC0yOS4zNzcsMTYuNzg3LTY3LjE0OCwxNi43ODctNjcuMTQ4bC0yNS4xOCw4LjM5MyAgIGMwLTI1LjcwNSwxNi43ODctNjcuMTQ4LDE2Ljc4Ny02Ny4xNDhIMTIuNTljMCwwLDUuNTk1LTQ2LjE2NCw0MC4wNDItMTAyLjQ2N0g0NTkuMzY4eiIvPgo8L2c+CjxlbGxpcHNlIHN0eWxlPSJmaWxsOiNGRkE1NEI7IiBjeD0iMjU1LjUxNyIgY3k9IjIzMC44MiIgcng9IjIwOS44MzYiIHJ5PSIxOTcuMjQ2Ii8+CjxnPgoJCgkJPGVsbGlwc2UgdHJhbnNmb3JtPSJtYXRyaXgoLTAuNjA0MiAtMC43OTY4IDAuNzk2OCAtMC42MDQyIDYzLjk0NzUgNDk5Ljg5MjYpIiBzdHlsZT0iZmlsbDojRkZFQkQyOyIgY3g9IjE1Ni4xMjMiIGN5PSIyMzQuMDY1IiByeD0iMzcuNzY5IiByeT0iNDYuMTYzIi8+CgkKCQk8ZWxsaXBzZSB0cmFuc2Zvcm09Im1hdHJpeCgtMC42MDQyIDAuNzk2OCAtMC43OTY4IC0wLjYwNDIgNzU1LjkyMDQgOTIuNzAzMSkiIHN0eWxlPSJmaWxsOiNGRkVCRDI7IiBjeD0iMzU0LjkzNyIgY3k9IjIzNC4wODYiIHJ4PSIzNy43NjkiIHJ5PSI0Ni4xNjMiLz4KPC9nPgo8cGF0aCBzdHlsZT0iZmlsbDojRkY4QzQ2OyIgZD0iTTI1NS41MjQsMjYwLjE5N2gtMC4wMTNjLTI4LjcxMSwwLTU1LjA0NSwxOC4yNjgtNjguNTM2LDQ3LjUxMSAgYy0xOC4xNjMsMzkuMzc0LTQwLjU3Myw5MS45OTYtNDAuNTczLDExMS45NjRoMjE4LjIyOWMwLTE5Ljk2Ny0yMi40MDktNzIuNTktNDAuNTczLTExMS45NjQgIEMzMTAuNTY5LDI3OC40NjQsMjg0LjIzNCwyNjAuMTk3LDI1NS41MjQsMjYwLjE5N3oiLz4KPHBhdGggc3R5bGU9ImZpbGw6I0ZGREVCNzsiIGQ9Ik0zMDQuNzk1LDM2OS4zMTFjLTE5LjM5MywwLTM2Ljg1NSw2LTQ5LjI3OCwxNS41ODhjLTEyLjQyMi05LjU4OC0yOS44ODUtMTUuNTg4LTQ5LjI3OC0xNS41ODggIGMtMzcuNjgyLDAtNjguMjMsMjIuNTQ3LTY4LjIzLDUwLjM2MXMzMC41NDgsNTAuMzYxLDY4LjIzLDUwLjM2MWMxNS43MjgsMCwzMC4xODctMy45NDcsNDEuNzE2LTEwLjU1NCAgYzQuNzY0LTIuNzMsMTAuMzU3LTIuNzMsMTUuMTIyLDBjMTEuNTI5LDYuNjA3LDI1Ljk4OCwxMC41NTQsNDEuNzE2LDEwLjU1NGMzNy42ODIsMCw2OC4yMy0yMi41NDcsNjguMjMtNTAuMzYxICBTMzQyLjQ3OCwzNjkuMzExLDMwNC43OTUsMzY5LjMxMXoiLz4KPGc+Cgk8cGF0aCBzdHlsZT0iZmlsbDojNDY0NjU1OyIgZD0iTTIxNS4zNDQsMzc0Ljk5MWwzMy40OCw0NC4yMzJjMy4zNTgsNC40MzcsMTAuMDI2LDQuNDM3LDEzLjM4NCwwbDMzLjQ4LTQ0LjIzMiAgIGM0LjE4NC01LjUyOCwwLjI0MS0xMy40NTktNi42OTMtMTMuNDU5aC00LjVjLTIuNTIsMC01LjAyNiwwLjM3OC03LjQzMiwxLjEyMmwtMTQuMTE2LDQuMzYxYy00Ljg0MiwxLjQ5Ni0xMC4wMjMsMS40OTYtMTQuODY1LDAgICBsLTE0LjExNi00LjM2MWMtMi40MDgtMC43NDQtNC45MTMtMS4xMjItNy40MzItMS4xMjJoLTQuNDk5QzIxNS4xMDMsMzYxLjUzMiwyMTEuMTYsMzY5LjQ2MywyMTUuMzQ0LDM3NC45OTF6Ii8+Cgk8Y2lyY2xlIHN0eWxlPSJmaWxsOiM0NjQ2NTU7IiBjeD0iMTU0Ljc5NiIgY3k9IjIzNS4wMTYiIHI9IjE2Ljc4NyIvPgoJPGNpcmNsZSBzdHlsZT0iZmlsbDojNDY0NjU1OyIgY3g9IjM1Ni4yMzkiIGN5PSIyMzUuMDE2IiByPSIxNi43ODciLz4KCTxwYXRoIHN0eWxlPSJmaWxsOiM0NjQ2NTU7IiBkPSJNNzcuMzU4LDMzNS4wMDFsNDYuMjA2LTM3LjgwNWM0LjAxMi0zLjI4MywxLjEyMy05Ljc2MS00LjAwMS04Ljk2OWwtNjEuNDc4LDkuNSAgIEM2My4xMjMsMzEwLjg2LDY5LjYxOCwzMjMuMzMxLDc3LjM1OCwzMzUuMDAxeiIvPgoJPHBhdGggc3R5bGU9ImZpbGw6IzQ2NDY1NTsiIGQ9Ik0xMjEuNDkzLDM4Mi41NzdsMjUuMDUyLTY2LjgwN2MxLjkyMi01LjEyNS00LjQ5NC05LjI1Ni04LjM2NC01LjM4NWwtNDUuMTgzLDQ1LjE4MyAgIEMxMDEuNTU1LDM2NS40MDYsMTExLjA5OCwzNzQuNDU1LDEyMS40OTMsMzgyLjU3N3oiLz4KCTxwYXRoIHN0eWxlPSJmaWxsOiM0NjQ2NTU7IiBkPSJNMjI2LjQwNSwxMDkuMTQ5bC02LjYzMy03Mi42NjdjLTguMTA2LDEuMzA4LTE2LjA1MiwzLjA0NC0yMy44MTEsNS4yMDFsMjEuNTMyLDY5LjIzOSAgIEMyMTkuMTIsMTE2LjE1NywyMjYuOTAzLDExNC42MDksMjI2LjQwNSwxMDkuMTQ5eiIvPgoJPHBhdGggc3R5bGU9ImZpbGw6IzQ2NDY1NTsiIGQ9Ik0yOTEuMjYzLDM2LjQ4MmwtNi42MzMsNzIuNjY3Yy0wLjQ5OCw1LjQ2LDcuMjg0LDcuMDA3LDguOTEzLDEuNzcybDIxLjUzMi02OS4yMzkgICBDMzA3LjMxNSwzOS41MjcsMjk5LjM2OSwzNy43OSwyOTEuMjYzLDM2LjQ4MnoiLz4KCTxwYXRoIHN0eWxlPSJmaWxsOiM0NjQ2NTU7IiBkPSJNMzM3LjM4Nyw0OS4xNTZsLTIwLjUwOSw0Ny40NDljLTIuMTM3LDQuOTQ2LDQuNTQ5LDguODY4LDcuODIzLDQuNTg4bDMyLjczLTQyLjc5MSAgIEMzNTAuOTQ2LDU1LjAxLDM0NC4yNzEsNTEuOSwzMzcuMzg3LDQ5LjE1NnoiLz4KCTxwYXRoIHN0eWxlPSJmaWxsOiM0NjQ2NTU7IiBkPSJNMTk0LjE1Nyw5Ni42MDVsLTIwLjUwOS00Ny40NDljLTYuODg0LDIuNzQ1LTEzLjU1OSw1Ljg1My0yMC4wNDQsOS4yNDdsMzIuNzMsNDIuNzkgICBDMTg5LjYwOCwxMDUuNDczLDE5Ni4yOTUsMTAxLjU1MSwxOTQuMTU3LDk2LjYwNXoiLz4KCTxwYXRoIHN0eWxlPSJmaWxsOiM0NjQ2NTU7IiBkPSJNMjcyLjIyNCwzNC4yNTNjLTUuNTE4LTAuNDA4LTExLjA3Ny0wLjY3OS0xNi43MDctMC42NzljLTUuNjMsMC0xMS4xODksMC4yNzEtMTYuNzA3LDAuNjc5ICAgbDEyLjE2OSwxMDMuNDRjMC42MzMsNS4zOCw4LjQ0Miw1LjM4LDkuMDc1LDBMMjcyLjIyNCwzNC4yNTN6Ii8+Cgk8cGF0aCBzdHlsZT0iZmlsbDojNDY0NjU1OyIgZD0iTTQzNC44NjgsMzM1LjAwMWwtNDYuMjA2LTM3LjgwNWMtNC4wMTItMy4yODMtMS4xMjMtOS43NjEsNC4wMDEtOC45NjlsNjEuNDc4LDkuNSAgIEM0NDkuMTA0LDMxMC44Niw0NDIuNjA4LDMyMy4zMzEsNDM0Ljg2OCwzMzUuMDAxeiIvPgoJPHBhdGggc3R5bGU9ImZpbGw6IzQ2NDY1NTsiIGQ9Ik0zOTAuNzMzLDM4Mi41NzdsLTI1LjA1Mi02Ni44MDdjLTEuOTIyLTUuMTI1LDQuNDk0LTkuMjU2LDguMzY0LTUuMzg1bDQ1LjE4Myw0NS4xODMgICBDNDEwLjY3MSwzNjUuNDA2LDQwMS4xMjksMzc0LjQ1NSwzOTAuNzMzLDM4Mi41Nzd6Ii8+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPC9zdmc+Cg=="
    }
  });
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(fabric) {


__webpack_require__(57);
//fabric.require("SlideImage",["SlideObject"/*,"Pathfinder"*/],function() {

fabric.util.object.extend(fabric.Image.prototype, {
  contentOffsets: null,
  /**
   * @private
   * @param {CanvasRenderingContext2D} ctx Context to render on
   * @param {Boolean} noTransform
   */
  _render: function (ctx, noTransform) {
    var x, y, imageMargins = this._findMargins(), elementToDraw;

    x = (noTransform ? this.left : -this.width / 2);
    y = (noTransform ? this.top : -this.height / 2);

    if (this.meetOrSlice === 'slice') {
      ctx.beginPath();
      ctx.rect(x, y, this.width, this.height);
      ctx.clip();
    }

    if (this.isMoving === false && this.resizeFilters.length && this._needsResize()) {
      this._lastScaleX = this.scaleX;
      this._lastScaleY = this.scaleY;
      elementToDraw = this.applyFilters(null, this.resizeFilters, this._filteredEl || this._originalElement, true);
    }
    else {
      elementToDraw = this._element;
    }
    this._renderFill(ctx);
    elementToDraw && ctx.drawImage(elementToDraw,
      x + imageMargins.marginX,
      y + imageMargins.marginY,
      imageMargins.width,
      imageMargins.height
    );

    this._stroke(ctx);
    this._renderStroke(ctx);
  },
  imageTools: false,
  photoshopTools: false,
  cloneSync: function () {
    var _object = this.toObject();
    delete _object.filters;
    var clone = new fabric.Image(this._element, _object);
    clone._filteredEl = this._filteredEl;
    clone.filters = this.filters;
    return clone;
  },
  revertChanges: function () {
    var pathfinder = this.canvas.getPathfinder();
    if (pathfinder.target && pathfinder.target == this) {
      pathfinder.hide();
    }

    if (this._element == this._originalElement) {
      return;
    }

    this.filters.length = 0;
    if (this._filteredEl) {
      delete this._filteredEl;
    }
    delete this._edited;
    this._element = this._originalElement;

    this.fire("content:modified", {
      bounds: {minX: 0, minY: 0, maxX: this._element.width, maxY: this._element.height}
    });


    this.canvas.renderAll();
  },
  extractColors: function() {
    var _colors = fabric.MagicWand.extractColors(this._element);
    var colors = {};
    for(var i in _colors){
      var _str = "rgb(" + _colors[i].join(",") + ")";
      colors[_str] = {};
    }
    return colors;
  },
  actions: fabric.util.object.extend( fabric.Image.prototype.actions, {
    photoshopTools: {
      type: 'effect',
      effectTpl: '<div id="editor-tools" class="inline-actions compact"></div>' +
                    '<div class="checkboard" ><div id="pathfinder"></div></div>',
      className: 'fa fa-pencil-square-o',
      title: "advanced tools",
      action: function () {
        var pathfinder = this.canvas.getPathfinder();
        pathfinder.target = this;
        pathfinder.setPicture(this._element);
        pathfinder.show();
      },
      actionParameters: function (el, data) {

        var pathfinder = this.canvas.getPathfinder();
        pathfinder.canvas = this.canvas;

        new fabric.Toolbar(pathfinder, 'editor-tools');


        pathfinder.setContainer('pathfinder');

        // if (pathfinder.target)pathfinder.hide();
        pathfinder.target = this;
        pathfinder.setPicture(this._element);
        pathfinder.show();
      }
    },
    revertChanges: {
      className: 'fa fa-history',
      title: "revert to orignal image",
      action: "revertChanges",
      observe: "content:modified",
      visible: function () {
        return !!this._filteredEl || this._edited;
      }
    }
  })
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {
// require("../modules/pathfinder");
__webpack_require__(43);

fabric.util.object.extend(fabric.Image.prototype, {
  removeWhite: function (threshold, removeAll, callback) {


    var rwf = _.findWhere(this.filters, {type: 'RemoveWhiteDP'});

    if (rwf) {
      rwf.options.colorThreshold = threshold;
      rwf.options.fromCorners = !removeAll;
    } else {
      rwf = new fabric.Image.filters.RemoveWhiteDP({
        fromCorners: !removeAll,
        blurRadius: 2,
        colorThreshold: threshold
      });
      this.filters.push(rwf);
    }

    var _this = this;
    this.applyFilters(function () {
      //_this.width = _this._element.width;
      //_this.height = _this._element.height;
      _this.canvas.renderAll();
      _this.fire("content:modified", {filter: rwf, bounds: rwf.bounds});
      callback && callback();
    });
  },
  removeWhiteAll: true,

  actions: fabric.util.object.extend(fabric.Image.prototype.actions, {
    removeWhiteFromBorders: {
      title: 'Remove Background',
      type: 'effect',
      className: "fa fa-dot-circle-o",
      effectTpl: '<button id="select-colors-action-button" class="fa fa-check"></button>' +
      '<input id="select-colors-checkbox" type="checkbox">' +
      '<input id="select-colors-threshold" type="range"   min="1" max="255">',
      actionParameters: function (el, data) {
        var
          actionChk = el.find('#select-colors-checkbox'),
          actionBtn = el.find('#select-colors-action-button');
        data.thresholdEl = el.find('#select-colors-threshold');

        data.removeWhiteAll = actionChk.is(":checked");
        actionChk.change(function () {
          data.removeWhiteAll = actionChk.is(":checked")
        });
        actionBtn.click(function () {
          data.action();
        });
        if (!data.__action) {

          data.__action = data.action;
          data.action = function () {
            data.__action(parseInt(data.thresholdEl.val()), data.removeWhiteAll)
          };
        }
      },
      action: "removeWhite",
      insert: 'imageTools'
    }
  })
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(fabric) {
//----------------------------------------------------------------------------------------------------------------------
// ListStyle

fabric.util.object.extend(fabric.Textbox.prototype, {
  listStyleType: "none",
  listStyleFormat: "N.",
  listTextPadding: 40,
  textPadding: 0,
  setTextPadding: function(val){
    this.textPadding = val;
    this._initDimensions();
  },
  setListStyleType: function(val){
    this.listStyleType = val;
    this.setTextPadding(val === "none" ? 0: this.listTextPadding);
  },
  /**
   * Wraps text using the 'width' property of Textbox. First this function
   * splits text on newlines, so we preserve newlines entered by the user.
   * Then it wraps each line using the width of the Textbox by calling
   * _wrapLine().
   * @param {CanvasRenderingContext2D} ctx Context to use for measurements
   * @param {String} text The string of text that is split into lines
   * @returns {Array} Array of lines
   */
  _wrapText: function(ctx, text) {
    var lines = text.split(this._reNewline), wrapped = [], i;


    this._paragraphs = {};

    for (i = 0; i < lines.length; i++) {
      this._paragraphs[wrapped.length] = this.listStyleFormat.replace("N",i + 1)
      wrapped = wrapped.concat(this._wrapLine(ctx, lines[i], i));
    }

    return wrapped;
  },


  /**
   * Wraps a line of text using the width of the Textbox and a context.
   * @param {CanvasRenderingContext2D} ctx Context to use for measurements
   * @param {String} text The string of text to split into lines
   * @param {Number} lineIndex
   * @returns {Array} Array of line(s) into which the given text is wrapped
   * to.
   */
  _wrapLine: function(ctx, text, lineIndex) {
    var lineWidth        = 0,
      lines            = [],
      line             = '',
      words            = text.split(' '),
      word             = '',
      offset           = 0,
      infix            = ' ',
      wordWidth        = 0,
      infixWidth       = 0,
      largestWordWidth = 0,
      lineJustStarted = true,
      additionalSpace = this._getWidthOfCharSpacing();



    var _textAreaWidth = this.width;
    if(this.textPadding){
      _textAreaWidth -= this.textPadding
    }
    for (var i = 0; i < words.length; i++) {
      word = words[i];
      wordWidth = this._measureText(ctx, word, lineIndex, offset);

      offset += word.length;

      lineWidth += infixWidth + wordWidth - additionalSpace;

      if (lineWidth >= _textAreaWidth && !lineJustStarted) {
        lines.push(line);
        line = '';
        lineWidth = wordWidth;
        lineJustStarted = true;
      }
      else {
        lineWidth += additionalSpace;
      }

      if (!lineJustStarted) {
        line += infix;
      }
      line += word;

      infixWidth = this._measureText(ctx, infix, lineIndex, offset);
      offset++;
      lineJustStarted = false;
      // keep track of largest word
      if (wordWidth > largestWordWidth) {
        largestWordWidth = wordWidth;
      }
    }

    i && lines.push(line);

    if (largestWordWidth > this.dynamicMinWidth) {
      this.dynamicMinWidth = largestWordWidth - additionalSpace;
    }

    return lines;
  },
  /**
   * @private
   * @param {Number} lineWidth Width of text line
   * @return {Number} Line left offset
   */
  _getLineLeftOffset: function(lineWidth) {
    if (this.textAlign === 'center') {
      return (this.width - lineWidth) / 2 + this.textPadding/2;
    }
    if (this.textAlign === 'right') {
      return this.width - lineWidth;
    }
    return this.textPadding;
  },
  /**
   * @private
   * @param {CanvasRenderingContext2D} ctx Context to render on
   * @param {String} method Method name ("fillText" or "strokeText")
   */
  _renderTextCommon: function(ctx, method) {

    var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset();

    for (var i = 0, len = this._textLines.length; i < len; i++) {
      var heightOfLine = this._getHeightOfLine(ctx, i),
        maxHeight = heightOfLine / this.lineHeight,
        lineWidth = this._getLineWidth(ctx, i),
        leftOffset = this._getLineLeftOffset(lineWidth);


      this._renderTextLine(
        method,
        ctx,
        this._textLines[i],
        left + leftOffset,
        top + lineHeights + maxHeight,
        i
      );
      lineHeights += heightOfLine;
    }
  },


  /**
   * @private
   * @param {String} method Method name ("fillText" or "strokeText")
   * @param {CanvasRenderingContext2D} ctx Context to render on
   * @param {String} line Text to render
   * @param {Number} left Left position of text
   * @param {Number} top Top position of text
   * @param {Number} lineIndex Index of a line in a text
   */
  _renderTextLine: function(method, ctx, line, left, top, lineIndex) {



    // lift the line by quarter of fontSize
    top -= this.fontSize * this._fontSizeFraction;

    switch(this.listStyleType){
      case "decimal":
        if( this._paragraphs[lineIndex]){
          // lift the line by quarter of fontSize
          this._renderChars(method, ctx, this._paragraphs[lineIndex] , left - this.textPadding , top  , lineIndex, 0);
        }
    }


    // short-circuit
    var lineWidth = this._getLineWidth(ctx, lineIndex);
    if (this.textAlign !== 'justify' || this.width < lineWidth) {

      this._renderChars(method, ctx, line, left, top, lineIndex);
      return;
    }


    // stretch the line
    var words = line.split(/\s+/),
      charOffset = 0,
      wordsWidth = this._getWidthOfWords(ctx, words.join(''), lineIndex, 0),
      widthDiff = this.width - wordsWidth - this.textPadding,
      numSpaces = words.length - 1,
      spaceWidth = numSpaces > 0 ? widthDiff / numSpaces : 0,
      leftOffset = 0, word;

    for (var i = 0, len = words.length; i < len; i++) {
      while (line[charOffset] === ' ' && charOffset < line.length) {
        charOffset++;
      }
      word = words[i];
      this._renderChars(method, ctx, word, left + leftOffset, top, lineIndex, charOffset);
      leftOffset += this._getWidthOfWords(ctx, word, lineIndex, charOffset) + spaceWidth;
      charOffset += word.length;
    }
  },
  toggleListStyleType: function(){
    this.setListStyleType(this.listStyleType == "none" ? "decimal" : "none");
    this.canvas.renderAll();
  },
  actions: {
    toggleListStyleType: {
      className: 'fa fa-list-ol',
      title: 'ordered list'
    }
  }

})

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

if(!$.minicolors){
    __webpack_require__(22);
}

if(typeof Toolbar === "undefined"){
  var Toolbar = __webpack_require__(1);
}

Toolbar.prototype.colorpicker = function (el, options) {
  options.format = 'rgb';
  options.opacity = true;
  el.minicolors(options);
};

Toolbar.prototype.tools.color = {
  template:
    '<div class="object-menu-item" title="{title}">' +
    '<div class="btn button-{id} {className}">' +
    '<input type="text" data-format="rgba" data-opacity="true" data-text="true" data-control="saturation" data-swatches="#fff|#000|#f00|#0f0|#00f|#ff0|#0ff"  value="{valueCurrent}" transclude>',
  post: function ($item, data, options, transclude) {
    var target = data.target;

    var _visible = false;
    this.colorpicker(transclude, {
      // value:        data.value.get() ,//|| data.value.get(),
      defaultValue: /*data.value.defaultValue ||*/ data.value.get(),
      control:      transclude.attr('data-control') || 'hue',
      format:       transclude.attr('data-format') || 'hex',
      keywords:     transclude.attr('data-keywords') || '',
      inline:       transclude.attr('data-inline') === 'true',
      letterCase:   transclude.attr('data-letterCase') || 'lowercase',
      opacity:      transclude.attr('data-opacity'),
      position:     transclude.attr('data-position') || this.tools.color.colorpickerPosition || 'right bottom',
      swatches:     transclude.attr('data-swatches') ? transclude.attr('data-swatches').split('|') : [],
      text:     transclude.attr('data-text'),
      hide: function () {
        _visible = false
      },
      show: function () {
        _visible = true;
      },
      change: function (value, opacity) {
        data.value.set(value);
      }
    });

    var _el = $(transclude.parents()[0]).find(".minicolors-panel");

    var _HIDE = function(e){
      if(_visible && $(e.target).parents().index(_el) == -1){
        transclude.minicolors("hide");
      }
    };
    $("body").on("mousedown",_HIDE)
  }
};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {


if(typeof Toolbar === "undefined"){
  var Toolbar = __webpack_require__(1);
}

Toolbar.prototype.colorpicker = function (el, options) {
  options.format = 'rgb';
  options.opacity = true;
  el.minicolors(options);
};

Toolbar.prototype.tools.effect = {
  scope: function (data, options) {
    return {
      buttonsTitle: options.buttons && options.buttons.title || false,
      isParameters: !!data.actionParameters,
      buttonscClassName: (options.buttons && options.buttons.className || '')
    }
  },
  template: '<div class="object-menu-item" title="{title}">' +
      '<button class="btn button-{id} {className} {buttonscClassName}">' +
      '<span dp-if="buttonsTitle" class="button-title">{title}</span>' +
      '</button>' +
      '<div dp-if="isParameters" class="menu-action-parameters" style="display: none" transclude></div>' +
    '</div>',
    post: function ($item, data, options, transclude) {

    if(data.container){
      transclude = $(document.getElementById(data.container));
    }

    var $tpl;
    var foo = function () {
      if (data.effectTpl) {
        $tpl = $(data.effectTpl);
        transclude.html($tpl);
      }
      if (data.actionParametersId) {
        $tpl = $("#" + data.actionParametersId).clone();
        transclude.html($tpl);
      }
      return data.actionParameters.call(data.target, transclude, data, options);
    };
    this.toggleByButton($item, transclude, foo ,data);
  }
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {


if(!$.fontSelector){
  __webpack_require__(21);
}

if(typeof Toolbar === "undefined"){
  var Toolbar = __webpack_require__(1);
}

Toolbar.prototype.fonts = [
  'Arial,Helvetica,sans-serif',
  'Arial Black,Gadget,sans-serif',
  'Comic Sans MS,cursive',
  'Courier New,Courier,monospace',
  'Georgia,serif',
  'Impact,Charcoal,sans-serif',
  'Lucida Console,Monaco,monospace',
  'Lucida Sans Unicode,Lucida Grande,sans-serif',
  'Palatino Linotype,Book Antiqua,Palatino,serif',
  'Tahoma,Geneva,sans-serif',
  'Times New Roman,Times,serif',
  'Trebuchet MS,Helvetica,sans-serif',
  'Verdana,Geneva,sans-serif',
  'Gill Sans,Geneva,sans-serif'
];


Toolbar.prototype.tools.fontFamily = {
  scope: function (data, options) {
    return {
      //currentValue: data.value.get(),
      onchange: function (e) {
        data.value.set(parseFloat($(e.target).val()));
      }
    }
  },
  template: '<div class="object-menu-item object-menu-font-family" title="{title}">' +
  '<div class="fontSelect" transclude><div class="arrow-down">',
    post: function ($item, data, options, transclude) {

    transclude.fontSelector({
      'hide_fallbacks': true,
      'initial': data.value.get(),//'Courier New,Courier New,Courier,monospace',
      'selected': data.value.set.bind(data.target),
      'fonts': data.data
    });
  }
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

;
if(typeof Toolbar === "undefined"){
  var Toolbar = __webpack_require__(1);
}

Toolbar.prototype.updateSelectedOption = function(data){
  var $checked = data.$item.find(":checked");
  var $checkedOptionEl = $($checked.parents()[0]);


  var selOption = data.$item.find('.btn-selected-option');
  selOption.html( $checkedOptionEl.find("label")[0].outerHTML );
};

Toolbar.prototype.tools.option = {
  scope: function (data, options) {
    var _self = this;
    return {
      parentId: data.parent.id,
      valueCurrent: data.parent.value.get() === data.option,
      onchange: function () {
        //оптимизировать

        var $checked = data.$item.find(":checked");
        var _value = $checked.val();
        if (_value == data.option) {
          data.parent.value.set(_value);
        }
        _self.updateSelectedOption(data.parent);
      }
    }
  },
  template:
    '<div class="object-menu-item object-menu-option " title="{title}" >' +
    '<input type="radio" id="tool-{id}" dp-checked="{valueCurrent}" name="{parentId}" value="{option}" onchange="onchange()">' +
    '<label class="btn button-{id} {className}" for="tool-{id}">' +
      '<img dp-if="icon" dp-src="icon">' +
      '<span dp-include="svg" dp-if="svg"></span>' +
      '<span dp-if="title" class="option-title">{title}</span>'
};

Toolbar.prototype.tools.options = {
  scope: function (data, options) {
    return {
      className: data.className || 'items-column',
      buttonsTitle: options.buttons && options.buttons.title || false,
      buttonsClassName: (options.buttons.className || '')
    }
  },
  template:
  '<div class="object-menu-item object-menu-options {className}" title="{title}">' +
  '<div class="btn btn-selected-option"></div>' +
  '<div class="object-menu-options-container" transclude>',
  post: function ($item, data, options, transclude) {
    this.generateMenu(data.target, transclude, options, data.menu);
    this.updateSelectedOption(data);
  }
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

;
if(typeof Toolbar === "undefined"){
  var Toolbar = __webpack_require__(1);
}

Toolbar.prototype.tools.select =  {
  scope: function (data, options) {
    return {
      getInputValue: function () {
        return parseFloat(data.$item.find("input").val());
      },
      getValue: data.value.get,
      setValue: data.value.set,
      onchange: function (e,model) {
        data.value.set(e.params.data.id,model);
      }
    }
  },
  template: '<div class="object-menu-item object-menu-select {itemClassName}" title="{title}" ><label for="xxx" class="btn button-{id} {className}"></label><select id="xxx">',
  post: function ($item, data, options, tool, val) {
    var model =  data.value.options();
    var _val = data.value.get();
    var _select = $item.find("select");
    _select.dpSelect({
      minimumResultsForSearch: Infinity,
      dropdownParent: $("body"),
      data:  model,
      templateSelection: function(state, container) {
        return data.templateSelection(state, container,data);
      },
      templateResult: function(state, container){
        return data.templateResult(state, container,data);
      },
    }).on("select2:select", function(e) {
      data.onchange(e, model);
    });
    _select.dpSelect("val",[_val]);
  }
}


/***/ }),
/* 77 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllcmEuZGV2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDk4NjM1NGE2ODM2OWVlNmQxYjVjIiwid2VicGFjazovLy9leHRlcm5hbCBcImZhYnJpY1wiIiwid2VicGFjazovLy8uLi90b29sYmFyL3NyYy90b29sYmFyLmpzIiwid2VicGFjazovLy8uL3V0aWwvb2JqZWN0LmpzIiwid2VicGFjazovLy8uL3V0aWwvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi91dGlsL2NvbXBpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vdXRpbC9wYXRoLmpzIiwid2VicGFjazovLy8uL2NvcmUvc3RhdGljLWNhbnZhcy5leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbWl4aW5zL3Byb3BvcnRpYW5hbFNpemVNaXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL21hZ2ljd2FuZC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCIkXCIiLCJ3ZWJwYWNrOi8vLy4vbWVkaWEvZXJyb3ItYnV0dG9uLnN2ZyIsIndlYnBhY2s6Ly8vLi9tb2R1bGVzLmpzIiwid2VicGFjazovLy8uL3V0aWwvZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi91dGlsL2xvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi91dGlsL3N5bnRheC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbWVkaWEvbGFzc28uc3ZnIiwid2VicGFjazovLy8uL21lZGlhL2xvYWRlci5zdmciLCJ3ZWJwYWNrOi8vLy4vbWVkaWEvcGFpbnQtYnVja2V0LnN2ZyIsIndlYnBhY2s6Ly8vLi9tZWRpYS9wb2x5Z29uLnBuZyIsIndlYnBhY2s6Ly8vLi4vcGx1Z2lucy8kLmZvbnRTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi4vcGx1Z2lucy8kLm1pbmljb2xvcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL3BsdWdpbnMvc2F2ZUFzLmpzIiwid2VicGFjazovLy8uLi9wbHVnaW5zL3dlYmZvbnQuanMiLCJ3ZWJwYWNrOi8vLy4vYnJ1c2hlcy9CYXNlQnJ1c2guanMiLCJ3ZWJwYWNrOi8vLy4vYnJ1c2hlcy9QYWludEJ1Y2tldEJydXNoLmpzIiwid2VicGFjazovLy8uL2JydXNoZXMvUGFpbnRQZW5CcnVzaC5qcyIsIndlYnBhY2s6Ly8vLi9icnVzaGVzL1BlbmNpbEJydXNoLmpzIiwid2VicGFjazovLy8uL2JydXNoZXMvUG9pbnRzQnJ1c2guanMiLCJ3ZWJwYWNrOi8vLy4vYnJ1c2hlcy9Qb2x5Z29uQnJ1c2guanMiLCJ3ZWJwYWNrOi8vLy4vYnJ1c2hlcy9SZWN0YW5nbGVCcnVzaC5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2FwcGxpY2F0aW9uLmpzIiwid2VicGFjazovLy8uL2NvcmUvYXBwbGljYXRpb24ucHJvdG90eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2FwcGxpY2F0aW9uLnNsaWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9ncm91cC5leHQuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9pbWFnZS5leHQuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9vYmplY3QuZXh0LmpzIiwid2VicGFjazovLy8uL2NvcmUvb2JzZXJ2ZS5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL3NsaWRlLmpzIiwid2VicGFjazovLy8uL2NvcmUvdGV4dC5leHQuanMiLCJ3ZWJwYWNrOi8vLy4vZmllcmEuanMiLCJ3ZWJwYWNrOi8vLy4vZmlsdGVycy9yZW1vdmVXaGl0ZS5qcyIsIndlYnBhY2s6Ly8vLi9taXhpbnMvQ2FjaGVNaXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9taXhpbnMvU3Ryb2tlTWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vbW9kdWxlcy9ib3JkZXJJbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9tb2R1bGVzL2NhbnZhcy5ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbW9kdWxlcy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9tb2R1bGVzL2ZvbnRzLmpzIiwid2VicGFjazovLy8uL21vZHVsZXMvZnJvbVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9tb2R1bGVzL2dhbGxlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbW9kdWxlcy9oaXN0b3J5LmpzIiwid2VicGFjazovLy8uL21vZHVsZXMvaW1hZ2UuZmlsdGVycy5qcyIsIndlYnBhY2s6Ly8vLi9tb2R1bGVzL2ludGVyYWN0aXZlTW9kZS5qcyIsIndlYnBhY2s6Ly8vLi9tb2R1bGVzL2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbW9kdWxlcy9sb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbW9kdWxlcy9wYXRoZmluZGVyLmpzIiwid2VicGFjazovLy8uL21vZHVsZXMvcmVuZGVyLmpzIiwid2VicGFjazovLy8uL21vZHVsZXMvcmVzaXphYmxlLmpzIiwid2VicGFjazovLy8uL21vZHVsZXMvc2F2ZUFzLmpzIiwid2VicGFjazovLy8uL21vZHVsZXMvc2xpZGUuZHJhd2luZy10b29scy5qcyIsIndlYnBhY2s6Ly8vLi9tb2R1bGVzL3RodW1iLmpzIiwid2VicGFjazovLy8uL21vZHVsZXMvdG9vbGJhci5qcyIsIndlYnBhY2s6Ly8vLi9tb2R1bGVzL3VwbG9hZC5qcyIsIndlYnBhY2s6Ly8vLi9tb2R1bGVzL3pvb20uanMiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9oaXN0b3J5LmpzIiwid2VicGFjazovLy8uL3NoYXBlcy9QYXRoR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vc2hhcGVzL2NsaXBhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vc2hhcGVzL2ltYWdlLnBob3Rvc2hvcC10b29scy5qcyIsIndlYnBhY2s6Ly8vLi9zaGFwZXMvaW1hZ2UucmVtb3ZlLXdoaXRlLmpzIiwid2VicGFjazovLy8uL3NoYXBlcy90ZXh0Ym94Lmxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL3Rvb2xiYXIvbW9kdWxlcy90b29sYmFyLmNvbG9ycy5qcyIsIndlYnBhY2s6Ly8vLi4vdG9vbGJhci9tb2R1bGVzL3Rvb2xiYXIuZWZmZWN0LmpzIiwid2VicGFjazovLy8uLi90b29sYmFyL21vZHVsZXMvdG9vbGJhci5mb250cy5qcyIsIndlYnBhY2s6Ly8vLi4vdG9vbGJhci9tb2R1bGVzL3Rvb2xiYXIub3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi4vdG9vbGJhci9tb2R1bGVzL3Rvb2xiYXIuc2VsZWN0LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImZzXCIiXSwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0Mik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgOTg2MzU0YTY4MzY5ZWU2ZDFiNWMiLCJtb2R1bGUuZXhwb3J0cyA9IGZhYnJpYztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImZhYnJpY1wiXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi8uLi9zcmMvdXRpbC91dGlsLmpzJyk7XG51dGlscy5vYmplY3QgPSByZXF1aXJlKCcuLy4uLy4uL3NyYy91dGlsL29iamVjdC5qcycpO1xudXRpbHMuY29tcGlsZSA9IHJlcXVpcmUoJy4vLi4vLi4vc3JjL3V0aWwvY29tcGlsZS5qcycpO1xuXG5mdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZywgZmlyc3RMZXR0ZXJPbmx5KSB7XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgK1xuICAgIChmaXJzdExldHRlck9ubHkgPyBzdHJpbmcuc2xpY2UoMSkgOiBzdHJpbmcuc2xpY2UoMSkudG9Mb3dlckNhc2UoKSk7XG59XG5cbmZ1bmN0aW9uIHRvRGFzaGVkIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5cbnZhciBUb29sYmFyID0gZnVuY3Rpb24oUEFSRU5ULCBlbCwgb3B0aW9ucywgbWVudSl7XG4gIHRoaXMuYnV0dG9ucyA9IFtdO1xuICAvL3RvZG8g0Y3RgtC+INC90LUg0YHQvtCy0YHQtdC8INGF0L7RgNC+0YjQvi4g0L3QtdC70YzQt9GPINGB0L7Qt9C00LDRgtGMINGD0LvQsdGA0LDRiyDRgSDRgNCw0LfQvdGL0LzQuCDQutC+0L3RhNC40LPQsNC80Lgg0LrQvdC+0L/QvtC6XG4gIC8vIHRoaXMudG9vbHMgPSB1dGlscy5vYmplY3QuY2xvbmVEZWVwKHRoaXMudG9vbHMpO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuYnV0dG9uKSB7XG4gICAgICB1dGlscy5vYmplY3QuZXh0ZW5kKHRoaXMudG9vbHMuYnV0dG9uLCBvcHRpb25zLmJ1dHRvbik7XG4gICAgfVxuICB9XG4gIGlmICghUEFSRU5ULmdlbmVyYXRlZEFjdGlvbnMpIHtcbiAgICBUb29sYmFyLm1ha2VBY3Rpb25zKFBBUkVOVCwgbWVudSk7XG4gIH1cblxuICBpZihlbC5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nKXtcbiAgICBlbCA9ICQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWwpKTtcbiAgfVxuICBpZihlbC5sZW5ndGggJiYgT2JqZWN0LmtleXMoUEFSRU5ULmdlbmVyYXRlZEFjdGlvbnMpLmxlbmd0aCl7XG4gICAgdGhpcy5nZW5lcmF0ZU1lbnUoUEFSRU5ULCBlbCwgb3B0aW9ucywgUEFSRU5ULmdlbmVyYXRlZEFjdGlvbnMpO1xuICAgIHRoaXMub25DcmVhdGUoKTtcbiAgICBlbC5zaG93KCk7XG4gIH1cbiAgVG9vbGJhci5pbml0S2V5cyhQQVJFTlQuZ2VuZXJhdGVkQWN0aW9ucyk7XG59O1xuXG5cblRvb2xiYXIuX2dldEtleVN0cmluZyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgdmFyIHN0cmluZyA9IFwiXCI7XG5cbiAgaWYgKGNvbmZpZy5jdHJsS2V5KXN0cmluZyArPSBcIkN0cmwgKyBcIjtcbiAgaWYgKGNvbmZpZy5hbHRLZXkpc3RyaW5nICs9IFwiQWx0ICsgXCI7XG4gIGlmIChjb25maWcuc2hpZnRLZXkpc3RyaW5nICs9IFwiU2hpZnQgKyBcIjtcblxuICB2YXIgX2NvZGUgPSBjb25maWcua2V5O1xuICBpZihfY29kZSl7XG4gICAgc3RyaW5nICs9IGNvbmZpZy5rZXk7XG4gIH1cbiAgcmV0dXJuIHN0cmluZztcbn07XG5cblRvb2xiYXIuX2dldEFjdGlvblZhbHVlID0gZnVuY3Rpb24gKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgZG97XG4gICAgaWYob2JqZWN0LmFjdGlvbnMgJiYgb2JqZWN0LmFjdGlvbnNbcHJvcGVydHldKXtcbiAgICAgIHJldHVybiBvYmplY3QuYWN0aW9uc1twcm9wZXJ0eV07XG4gICAgfVxuICB9d2hpbGUob2JqZWN0ID0gb2JqZWN0Ll9fcHJvdG9fXyk7XG4gIHJldHVybiBudWxsO1xufTtcblxuVG9vbGJhci5tYWtlQWN0aW9ucyA9IGZ1bmN0aW9uIChQQVJFTlQsIGFjdGlvbnMpIHtcbiAgICBpZighYWN0aW9ucyl7XG4gICAgICBhY3Rpb25zID0ge307XG4gICAgICBfLmVhY2goUEFSRU5ULnRvb2xzLCBmdW5jdGlvbih0b29sKXtcblxuICAgICAgICB2YXIgX3ZhbCA9IFRvb2xiYXIuX2dldEFjdGlvblZhbHVlKFBBUkVOVCx0b29sKTtcblxuICAgICAgICBpZihfdmFsKXtcbiAgICAgICAgICBhY3Rpb25zW3Rvb2xdID0gX3ZhbDtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwidG9vbCBcIiArIHRvb2wgKyBcIiBpcyB1bmRlZmluZWRcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSB7fTtcblxuICAgIGZvciAodmFyIGkgaW4gYWN0aW9ucykge1xuICAgICAgdmFyIF9hY3Rpb24gPSB0aGlzLm1ha2VBY3Rpb24oaSwgYWN0aW9uc1tpXSwgUEFSRU5UKTtcbiAgICAgIGlmKF9hY3Rpb24pe1xuICAgICAgICByZXN1bHRbaV0gPSBfYWN0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgICBQQVJFTlQuZ2VuZXJhdGVkQWN0aW9ucyA9IHJlc3VsdDtcbn07XG5Ub29sYmFyLm1ha2VBY3Rpb24gPSBmdW5jdGlvbiAoaWQsIF9PUklHSU5BTCwgcGFyZW50KSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmIChfT1JJR0lOQUwuY29uc3RydWN0b3IgPT09IEZ1bmN0aW9uKSB7XG4gICAgX09SSUdJTkFMID0gX09SSUdJTkFMLmNhbGwodGFyZ2V0KTtcbiAgfVxuXG4gIHZhciB0YXJnZXQ7XG5cbiAgaWYgKF9PUklHSU5BTC50YXJnZXQgJiYgX09SSUdJTkFMLnRhcmdldC5jb25zdHJ1Y3RvciA9PSBGdW5jdGlvbikge1xuICAgIHRhcmdldCA9IF9PUklHSU5BTC50YXJnZXQuY2FsbChwYXJlbnQpO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IF9PUklHSU5BTC50YXJnZXQgfHwgcGFyZW50O1xuICB9XG5cbiAgdmFyIF9fX3RhcmdldCA9IF9PUklHSU5BTC50YXJnZXQ7XG4gIHZhciBfX19wYXJlbnQgPSBfT1JJR0lOQUwucGFyZW50O1xuICBkZWxldGUgX09SSUdJTkFMLnBhcmVudDtcbiAgZGVsZXRlIF9PUklHSU5BTC50YXJnZXQ7XG4gIHZhciBSRVMgPSB1dGlscy5vYmplY3QuY2xvbmVEZWVwKF9PUklHSU5BTCk7XG4gIF9PUklHSU5BTC5wYXJlbnQgPSBfX19wYXJlbnQ7XG4gIF9PUklHSU5BTC50YXJnZXQgPSBfX190YXJnZXQ7XG5cblxuICBSRVMucGFyZW50ID0gX19fcGFyZW50O1xuICBSRVMudGFyZ2V0ID0gdGFyZ2V0O1xuICBSRVMuaWQgPSB0b0Rhc2hlZChpZCk7XG5cblxuICBmdW5jdGlvbiBjcmVhdGVHZXR0ZXIocHJvcGVydHksdXNlUGFyZW50KSB7XG4gICAgaWYgKHByb3BlcnR5LmNvbnN0cnVjdG9yID09IFN0cmluZykge1xuICAgICAgdmFyIG5lZ2F0aXZlID0gZmFsc2U7XG4gICAgICBpZiAocHJvcGVydHlbMF0gPT0gXCIhXCIpIHtcbiAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0eS5zdWJzdHIoMSk7XG4gICAgICAgIG5lZ2F0aXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmKHVzZVBhcmVudCl7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudCAmJiAhIXBhcmVudFtwcm9wZXJ0eV0gXiBuZWdhdGl2ZTtcbiAgICAgICAgfVxuICAgICAgfWVsc2V7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldCAmJiAhIXRhcmdldFtwcm9wZXJ0eV0gXiBuZWdhdGl2ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvcGVydHkuY29uc3RydWN0b3IgPT0gRnVuY3Rpb24pIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0eS5iaW5kKHRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cblxuICAvKnZhciBfaW5zZXJ0ID0gX09SSUdJTkFMLmluc2VydDtcbiAgaWYgKCFfaW5zZXJ0IHx8IF9pbnNlcnQuY29uc3RydWN0b3IgPT0gU3RyaW5nKSB7XG5cbiAgICBpZihfT1JJR0lOQUwucGFyZW50KXtcbiAgICAgIHZhciBpbnNlcnRwcm9wZXJ0eSA9IGZhYnJpYy51dGlsLnN0cmluZy5jYXBpdGFsaXplKGZhYnJpYy51dGlsLnN0cmluZy5jYW1lbGl6ZShfT1JJR0lOQUwucGFyZW50LmlkKSlcbiAgICB9ZWxzZXtcbiAgICAgIHZhciBpbnNlcnRwcm9wZXJ0eSA9IF9pbnNlcnQgfHwgXCJpbnNlcnRcIiArIGZhYnJpYy51dGlsLnN0cmluZy5jYXBpdGFsaXplKGlkLHRydWUpO1xuICAgIH1cblxuICAgIGlmKHRhcmdldFtpbnNlcnRwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCl7XG4gICAgICBfaW5zZXJ0ID0gdGFyZ2V0W2luc2VydHByb3BlcnR5XS8vIGNyZWF0ZUdldHRlcihpbnNlcnRwcm9wZXJ0eSx0cnVlKSgpXG4gICAgfWVsc2V7XG4gICAgICBfaW5zZXJ0ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZighX2luc2VydClyZXR1cm47Ki9cblxuICBpZiAoIVJFUy50eXBlKSB7XG4gICAgaWYgKFJFUy5tZW51KSB7XG4gICAgICBSRVMudHlwZSA9IFwibWVudVwiO1xuICAgIH1lbHNle1xuICAgICAgUkVTLnR5cGUgPSBcImJ1dHRvblwiO1xuICAgIH1cbiAgfVxuICBpZiAoIVJFUy5hY3Rpb24pIHtcbiAgICBpZihSRVMudHlwZSA9PSBcImJ1dHRvblwiKXtcbiAgICAgIFJFUy5hY3Rpb24gPSBpZDtcbiAgICB9XG4gIH1cblxuXG4gIGlmIChSRVMuYWN0aW9uKSB7XG4gICAgaWYgKFJFUy5hY3Rpb24uY29uc3RydWN0b3IgPT0gU3RyaW5nKSB7XG4gICAgICBSRVMuYWN0aW9uID0gdGFyZ2V0W1JFUy5hY3Rpb25dO1xuICAgIH1cbiAgICAvL1JFUyA9IFJFUy5hY3Rpb24uYmluZCh0YXJnZXQpO1xuICAgIC8vUkVTLmFjdGlvbiA9IFJFUy5hY3Rpb24uYmluZCh0YXJnZXQpO1xuICAgIC8vXy5leHRlbmQoUkVTLCBfYWN0KTtcbiAgICAvL2FyZ3VtZW50cyBmb3IgYWN0aW9uIGZ1bmN0aW9uXG4gICAgaWYgKF9PUklHSU5BTC5hcmdzKSB7XG4gICAgICBSRVMuX2FjdGlvbiA9IFJFUy5hY3Rpb24uYmluZCh0YXJnZXQsIF9PUklHSU5BTC5hcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUkVTLl9hY3Rpb24gPSBSRVMuYWN0aW9uLmJpbmQodGFyZ2V0KTtcbiAgICB9XG4gICAgUkVTLmFjdGlvbiA9IGZ1bmN0aW9uKCl7XG4gICAgICBpZihSRVMuZGlzYWJsZWQpcmV0dXJuO1xuICAgICAgUkVTLl9hY3Rpb24uYXBwbHkodGhpcyxhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG5cbiAgaWYgKF9PUklHSU5BTC5tZW51ICYmIF9PUklHSU5BTC5tZW51LmNvbnN0cnVjdG9yID09IEZ1bmN0aW9uKSB7XG4gICAgUkVTLm1lbnUgPSBfT1JJR0lOQUwubWVudS5iaW5kKHRhcmdldCk7XG4gIH1cbiAgaWYgKF9PUklHSU5BTC5hY3RpdmUpIHtcbiAgICBSRVMuYWN0aXZlID0gY3JlYXRlR2V0dGVyKF9PUklHSU5BTC5hY3RpdmUpO1xuICB9XG4gIGlmIChfT1JJR0lOQUwudmlzaWJsZSkge1xuICAgIFJFUy52aXNpYmxlID0gY3JlYXRlR2V0dGVyKF9PUklHSU5BTC52aXNpYmxlKTtcbiAgfVxuICBpZiAoX09SSUdJTkFMLmVuYWJsZWQpIHtcbiAgICBSRVMuZW5hYmxlZCA9IGNyZWF0ZUdldHRlcihfT1JJR0lOQUwuZW5hYmxlZCk7XG4gIH1cbiAgaWYgKCFfT1JJR0lOQUwudmFsdWUpIHtcbiAgICBzd2l0Y2goX09SSUdJTkFMLnR5cGUpe1xuICAgICAgY2FzZSBcImNvbG9yXCI6XG4gICAgICBjYXNlIFwidGV4dFwiOlxuICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgY2FzZSBcInJhbmdlXCI6XG4gICAgICBjYXNlIFwibGFiZWxcIjpcbiAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxuICAgICAgICBfT1JJR0lOQUwudmFsdWUgPSBpZDtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGlkLCBfT1JJR0lOQUwpO1xuICAgIH1cbiAgfVxuICBpZiAoX09SSUdJTkFMLnZhbHVlKSB7XG4gICAgdmFyIF9zZXQsIF9nZXQsIF9vcHRpb25zO1xuICAgIGlmIChfT1JJR0lOQUwudmFsdWUuY29uc3RydWN0b3IgPT0gU3RyaW5nKSB7XG5cbiAgICAgIHZhciBzZXRGdW5jdGlvbk5hbWUgPSBcInNldFwiICsgY2FwaXRhbGl6ZShfT1JJR0lOQUwudmFsdWUsIHRydWUpLFxuICAgICAgICBnZXRGdW5jdGlvbk5hbWUgPSBcImdldFwiICsgY2FwaXRhbGl6ZShfT1JJR0lOQUwudmFsdWUsIHRydWUpLFxuICAgICAgICBtaW5OYW1lID0gXCJtaW5cIiArIGNhcGl0YWxpemUoX09SSUdJTkFMLnZhbHVlLCB0cnVlKSxcbiAgICAgICAgbWF4TmFtZSA9IFwibWF4XCIgKyBjYXBpdGFsaXplKF9PUklHSU5BTC52YWx1ZSwgdHJ1ZSksXG4gICAgICAgIHNldEZvbyA9IGZ1bmN0aW9uKHZhbCl7XG4gICAgICAgICAgdGFyZ2V0W3NldEZ1bmN0aW9uTmFtZV0odmFsKTtcbiAgICAgICAgICAvLyB0b2RvIHNlbGYuc2V0RnVuY3Rpb25DYWxsYmFjayh0YXJnZXQpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRGb28gPSB0YXJnZXRbZ2V0RnVuY3Rpb25OYW1lXSxcbiAgICAgICAgbWluRm9vID0gdGFyZ2V0W21pbk5hbWVdLFxuICAgICAgICBtYXhGb28gPSB0YXJnZXRbbWF4TmFtZV07XG5cbiAgICAgIF9zZXQgPSBzZXRGb28gfHwgKF9PUklHSU5BTC5hcmdzID9cbiAgICAgICAgICBmdW5jdGlvbiAodmFsLCBhcmdzKSB7XG4gICAgICAgICAgICB0aGlzW19PUklHSU5BTC52YWx1ZV1bYXJnc10gPSB2YWw7XG4gICAgICAgICAgfSA6XG4gICAgICAgICAgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgdGhpc1tfT1JJR0lOQUwudmFsdWVdID0gdmFsO1xuICAgICAgICAgIH0pO1xuXG4gICAgICBfZ2V0ID0gZ2V0Rm9vIHx8IChfT1JJR0lOQUwuYXJncyA/XG4gICAgICAgICAgZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW19PUklHSU5BTC52YWx1ZV1bYXJnc107XG4gICAgICAgICAgfSA6XG4gICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbX09SSUdJTkFMLnZhbHVlXTtcbiAgICAgICAgICB9KTtcblxuXG4gICAgICBSRVMudmFsdWUgPSB7XG4gICAgICAgIG1pbjogbWluRm9vLFxuICAgICAgICBtYXg6IG1heEZvb1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIF9zZXQgPSBfT1JJR0lOQUwudmFsdWUuc2V0O1xuICAgICAgX2dldCA9IF9PUklHSU5BTC52YWx1ZS5nZXQ7XG4gICAgICBfb3B0aW9ucyA9IF9PUklHSU5BTC52YWx1ZS5vcHRpb25zO1xuICAgIH1cblxuICAgIGlmKFJFUy52YWx1ZS5taW4gIT09IHVuZGVmaW5lZCAmJiBSRVMudmFsdWUubWluLmNvbnN0cnVjdG9yID09IFN0cmluZyl7XG4gICAgICBSRVMudmFsdWUubWluID0gdGFyZ2V0W1JFUy52YWx1ZS5taW5dO1xuICAgIH1cbiAgICBpZihSRVMudmFsdWUubWF4ICE9PSB1bmRlZmluZWQgJiYgUkVTLnZhbHVlLm1heC5jb25zdHJ1Y3RvciA9PSBTdHJpbmcpe1xuICAgICAgUkVTLnZhbHVlLm1heCA9IHRhcmdldFtSRVMudmFsdWUubWF4XTtcbiAgICB9XG4gICAgaWYoUkVTLnZhbHVlLnN0ZXAgIT09IHVuZGVmaW5lZCAmJiBSRVMudmFsdWUuc3RlcC5jb25zdHJ1Y3RvciA9PSBTdHJpbmcpe1xuICAgICAgUkVTLnZhbHVlLnN0ZXAgPSB0YXJnZXRbUkVTLnZhbHVlLnN0ZXBdO1xuICAgIH1cbiAgICB2YXIgX21pbiA9IFJFUy52YWx1ZS5taW4sIF9tYXggPSBSRVMudmFsdWUubWF4LCBfc3RlcCA9IFJFUy52YWx1ZS5zdGVwO1xuXG4gICAgaWYgKF9zZXQpIHtcbiAgICAgIFJFUy52YWx1ZS5zZXQgPSAoIF9PUklHSU5BTC5hcmdzID8gX3NldC5iaW5kKHRhcmdldCwgX09SSUdJTkFMLmFyZ3MpIDogX3NldC5iaW5kKHRhcmdldCkpO1xuICAgIH1cbiAgICBpZiAoX2dldCkge1xuICAgICAgUkVTLnZhbHVlLmdldCA9ICggX09SSUdJTkFMLmFyZ3MgPyBfZ2V0LmJpbmQodGFyZ2V0LCBfT1JJR0lOQUwuYXJncykgOiBfZ2V0LmJpbmQodGFyZ2V0KSk7XG4gICAgfVxuICAgIGlmIChfbWluICYmIF9taW4uY29uc3RydWN0b3IgPT0gRnVuY3Rpb24pIHtcbiAgICAgIFJFUy52YWx1ZS5taW4gPSAoIF9PUklHSU5BTC5hcmdzID8gX21pbi5iaW5kKHRhcmdldCwgX09SSUdJTkFMLmFyZ3MpIDogX21pbi5iaW5kKHRhcmdldCkpO1xuICAgIH1cbiAgICBpZiAoX21heCAmJiBfbWF4LmNvbnN0cnVjdG9yID09IEZ1bmN0aW9uKSB7XG4gICAgICBSRVMudmFsdWUubWF4ID0gKCBfT1JJR0lOQUwuYXJncyA/IF9tYXguYmluZCh0YXJnZXQsIF9PUklHSU5BTC5hcmdzKSA6IF9tYXguYmluZCh0YXJnZXQpKTtcbiAgICB9XG4gICAgaWYgKF9zdGVwICYmIF9zdGVwLmNvbnN0cnVjdG9yID09IEZ1bmN0aW9uKSB7XG4gICAgICBSRVMudmFsdWUuc3RlcCA9ICggX09SSUdJTkFMLmFyZ3MgPyBfc3RlcC5iaW5kKHRhcmdldCwgX09SSUdJTkFMLmFyZ3MpIDogX3N0ZXAuYmluZCh0YXJnZXQpKTtcbiAgICB9XG4gICAgaWYgKF9vcHRpb25zKSB7XG4gICAgICBSRVMudmFsdWUub3B0aW9ucyA9ICggX09SSUdJTkFMLmFyZ3MgPyBfb3B0aW9ucy5iaW5kKHRhcmdldCwgX09SSUdJTkFMLmFyZ3MpIDogX29wdGlvbnMuYmluZCh0YXJnZXQpKTtcbiAgICB9XG4gIH1cblxuICBpZiAoX09SSUdJTkFMLmRhdGEpIHtcbiAgICBSRVMuZGF0YSA9IF9PUklHSU5BTC5kYXRhLmNhbGwodGFyZ2V0KTtcbiAgfVxuICBpZiAoUkVTLm1lbnUpIHtcbiAgICBpZiAoX09SSUdJTkFMLm1lbnUuY29uc3RydWN0b3IgPT09IEZ1bmN0aW9uKXtcbiAgICAgIFJFUy5tZW51ID0gIF9PUklHSU5BTC5tZW51LmNhbGwodGFyZ2V0KTtcbiAgICB9XG4gICAgaWYgKFJFUy50eXBlID09IFwib3B0aW9uc1wiKSB7XG4gICAgICBmb3IgKHZhciBpIGluIFJFUy5tZW51KSB7XG4gICAgICAgIFJFUy5tZW51W2ldLnBhcmVudCA9IFJFUztcbiAgICAgICAgUkVTLm1lbnVbaV0udHlwZSA9IFwib3B0aW9uXCI7XG4gICAgICAgIGlmKCFSRVMubWVudVtpXS50aXRsZSl7XG4gICAgICAgICAgUkVTLm1lbnVbaV0udGl0bGUgPSBpO1xuICAgICAgICB9XG4gICAgICAgIGlmKCFSRVMubWVudVtpXS5vcHRpb24pIHtcbiAgICAgICAgICBSRVMubWVudVtpXS5vcHRpb24gPSBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGkgaW4gUkVTLm1lbnUpIHtcbiAgICAgIGlmKFJFUy5tZW51W2ldLmNvbnN0cnVjdG9yID09IFN0cmluZyl7XG4gICAgICAgIFJFUy5tZW51W2ldID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lKFJFUy50YXJnZXQuYWN0aW9uc1tSRVMubWVudVtpXV0pO1xuICAgICAgICBSRVMubWVudVtpXS5wYXJlbnQgPSBSRVM7XG4gICAgICB9XG4gICAgICBSRVMubWVudVtpXSA9IFRvb2xiYXIubWFrZUFjdGlvbihpLCBSRVMubWVudVtpXSwgdGFyZ2V0KTtcbiAgICAgIGlmKCFSRVMubWVudVtpXSl7XG4gICAgICAgIGRlbGV0ZSBSRVMubWVudVtpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG5cbiAgaWYgKF9PUklHSU5BTC5rZXlib2FyZCAhPT0gZmFsc2UgJiYgKF9PUklHSU5BTC5rZXkgfHwgX09SSUdJTkFMLnNoaWZ0S2V5IHx8IF9PUklHSU5BTC5hbHRLZXkgfHwgX09SSUdJTkFMLmN0cmxLZXkgfHwgX09SSUdJTkFMLm1ldGFLZXkpKSB7XG4gICAgaWYoX09SSUdJTkFMLmtleUNvZGUgJiYgX09SSUdJTkFMLmtleUNvZGUuY29uc3RydWN0b3IgPT0gU3RyaW5nKXtcbiAgICAgIFJFUy5rZXlDb2RlID0gX09SSUdJTkFMLmtleUNvZGUudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApO1xuICAgICAgUkVTLmtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoUkVTLmtleUNvZGUpO1xuICAgIH1cbiAgICBSRVMua2V5Ym9hcmQgPSB0cnVlXG4gIH07XG5cbiAgcmV0dXJuIFJFUztcbn07XG5cblRvb2xiYXIuZ2V0QnV0dG9ucyA9IGZ1bmN0aW9uIChhY3Rpb25zKSB7XG4gIHZhciBfYnV0dG9ucyA9IFtdO1xuICBmb3IodmFyIGkgaW4gYWN0aW9ucyl7XG4gICAgdmFyIGFjdGlvbiA9IGFjdGlvbnNbaV07XG4gICAgaWYoYWN0aW9uLmtleWJvYXJkKXtcbiAgICAgIGFjdGlvbi50aXRsZSArPSBcIiAoXCIgKyBUb29sYmFyLl9nZXRLZXlTdHJpbmcoYWN0aW9uKSArIFwiKVwiO1xuICAgICAgX2J1dHRvbnMucHVzaChhY3Rpb24pO1xuICAgIH1cbiAgICBpZiAoYWN0aW9ucy5tZW51KSB7XG4gICAgICBfYnV0dG9ucyA9IF9idXR0b25zLmNvbmNhdChUb29sYmFyLmdldEJ1dHRvbnMoYWN0aW9ucy5tZW51KSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBfYnV0dG9ucztcbn07XG5Ub29sYmFyLmluaXRLZXlzID0gZnVuY3Rpb24gKGFjdGlvbnMpIHtcblxuICB2YXIgYnV0dG9ucyA9IFRvb2xiYXIuZ2V0QnV0dG9ucyhhY3Rpb25zKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gICQoXCJib2R5XCIpLm9uKCBcImtleWRvd25cIixmdW5jdGlvbiAoZSkge1xuICAgIGZvciAodmFyIGkgaW4gYnV0dG9ucykge1xuICAgICAgdmFyIF9jb25maWcgPSBidXR0b25zW2ldO1xuXG4gICAgICBpZihfY29uZmlnLmVuYWJsZWQgJiYgIV9jb25maWcuZW5hYmxlZCgpKXtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZihfY29uZmlnLmRpc2FibGVkIHx8IF9jb25maWcuZGlzYWJsZWQpe1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICgoIV9jb25maWcuZGlzYWJsZWQgJiYgIV9jb25maWcuaGlkZGVuKSAmJlxuICAgICAgICAoX2NvbmZpZy5rZXlDb2RlID09IGUua2V5Q29kZSB8fCBfY29uZmlnLmtleSA9PSBlLmtleSkgJiZcbiAgICAgICAgKF9jb25maWcuY3RybEtleSA9PT0gdW5kZWZpbmVkIHx8IF9jb25maWcuY3RybEtleSA9PSBlLmN0cmxLZXkgKSAmJlxuICAgICAgICAoX2NvbmZpZy5hbHRLZXkgPT09IHVuZGVmaW5lZCB8fCBfY29uZmlnLmFsdEtleSA9PSBlLmFsdEtleSApICYmXG4gICAgICAgIChfY29uZmlnLnNoaWZ0S2V5ID09PSB1bmRlZmluZWQgfHwgX2NvbmZpZy5zaGlmdEtleSA9PSBlLnNoaWZ0S2V5ICkgJiZcbiAgICAgICAgKF9jb25maWcubWV0YUtleSA9PT0gdW5kZWZpbmVkIHx8IF9jb25maWcubWV0YUtleSA9PSBlLm1ldGFLZXkgKSkge1xuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgaWYgKF9jb25maWcub3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBfY29uZmlnLmFjdGlvbi5jYWxsKF9jb25maWcudGFyZ2V0LCBfY29uZmlnLm9wdGlvbiwgZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfY29uZmlnLmFjdGlvbi5jYWxsKF9jb25maWcudGFyZ2V0LCBlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyQod2luZG93KS5vbihcIm1vdXNld2hlZWxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIC8vICBmb3IgKHZhciBpIGluIHNlbGYuYnV0dG9ucykge1xuICAvLyAgICB2YXIgZGF0YSA9IHNlbGYuYnV0dG9uc1tpXTtcbiAgLy8gICAgaWYgKCFkYXRhLm1vdXNld2hlZWwpY29udGludWU7XG4gIC8vICAgIGlmICghZGF0YS5jdHJsS2V5IHx8IGRhdGEuY3RybEtleSAmJiBldmVudC5jdHJsS2V5KSB7XG4gIC8vICAgICAgaWYgKGV2ZW50LmRlbHRhWSA+IDAgJiYgZGF0YS5tb3VzZXdoZWVsID09IFwiPlwiKSB7XG4gIC8vICAgICAgICBkYXRhLmFjdGlvbi5jYWxsKHRhcmdldCwgZGF0YS5vcHRpb24gfHwgZXZlbnQsIGV2ZW50KVxuICAvLyAgICAgIH1cbiAgLy8gICAgICBpZiAoZXZlbnQuZGVsdGFZIDwgMCAmJiBkYXRhLm1vdXNld2hlZWwgPT0gXCI8XCIpIHtcbiAgLy8gICAgICAgIGRhdGEuYWN0aW9uLmNhbGwodGFyZ2V0LCBkYXRhLm9wdGlvbiB8fCBldmVudCwgZXZlbnQpXG4gIC8vICAgICAgfVxuICAvLyAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIC8vICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIC8vICAgICAgcmV0dXJuIGZhbHNlO1xuICAvLyAgICB9XG4gIC8vICB9XG4gIC8vfSk7XG5cbn07XG5cblRvb2xiYXIucHJvdG90eXBlID0ge1xuXG4gIC8vIHNldEZ1bmN0aW9uQ2FsbGJhY2s6IGZ1bmN0aW9uKCl7fSxcbiAgdG9vbHM6IHtcblxuICAgIFwibGFiZWxcIjoge1xuICAgICAgc2NvcGU6IGZ1bmN0aW9uIChkYXRhLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZ2V0VmFsdWU6IGRhdGEudmFsdWUuZ2V0LFxuICAgICAgICAgIHZhbHVlQ3VycmVudDogZGF0YS52YWx1ZS5nZXQoKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdGVtcGxhdGU6ICc8c3BhbiBjbGFzcz1cIm9iamVjdC1tZW51LWl0ZW0gb2JqZWN0LW1lbnUtbGFiZWxcIiB0aXRsZT1cInt0aXRsZX1cIj4nLFxuICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoJGl0ZW0sIGRhdGEsIG9wdGlvbnMsIHRvb2wsIHZhbCkge1xuICAgICAgICB2YXIgc2NvcGUgPSBmYWJyaWMudXRpbC5vYmplY3QuZGVmYXVsdHModG9vbC5zY29wZS5jYWxsKHRoaXMsIGRhdGEsIG9wdGlvbnMpLGRhdGEpO1xuICAgICAgICAkaXRlbS5odG1sKGRhdGEudGVtcGxhdGUuZm9ybWF0KGRhdGEudmFsdWUuZ2V0KCkpKTtcbiAgICAgICAgdXRpbHMuY29tcGlsZS5jb21waWxlRWxlbWVudCgkaXRlbSxzY29wZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBcIm51bWJlclwiOiB7XG4gICAgICBzY29wZTogZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBnZXRJbnB1dFZhbHVlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoZGF0YS4kaXRlbS5maW5kKFwiaW5wdXRcIikudmFsKCkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0VmFsdWU6IGRhdGEudmFsdWUuZ2V0LFxuICAgICAgICAgIHNldFZhbHVlOiBkYXRhLnZhbHVlLnNldCxcbiAgICAgICAgICBtaW5WYWx1ZTogZGF0YS52YWx1ZS5taW4gJiYgZGF0YS52YWx1ZS5taW4oKSxcbiAgICAgICAgICBtYXhWYWx1ZTogZGF0YS52YWx1ZS5tYXggJiYgZGF0YS52YWx1ZS5tYXgoKSxcbiAgICAgICAgICB2YWx1ZUN1cnJlbnQ6IGRhdGEudmFsdWUuZ2V0KCksXG4gICAgICAgICAgb25jaGFuZ2U6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBkYXRhLnZhbHVlLnNldChwYXJzZUZsb2F0KCQoZS50YXJnZXQpLnZhbCgpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdGVtcGxhdGU6ICc8c3BhbiBjbGFzcz1cIm9iamVjdC1tZW51LWl0ZW0gb2JqZWN0LW1lbnUtbnVtYmVyXCIgdGl0bGU9XCJ7dGl0bGV9XCI+JyArXG4gICAgICAnPGlucHV0IHR5cGU9XCJudW1iZXJcIiBtaW49XCJ7bWluVmFsdWV9XCIgbWF4PVwie21heFZhbHVlfVwiIHZhbHVlPVwie3ZhbHVlQ3VycmVudH1cIiBvbmNoYW5nZT1cIm9uY2hhbmdlKGV2ZW50KVwiPicsXG4gICAgICByZW5kZXI6IGZ1bmN0aW9uICgkaXRlbSwgZGF0YSwgb3B0aW9ucywgdG9vbCwgdmFsKSB7XG4gICAgICAgICRpdGVtLmZpbmQoXCJpbnB1dFwiKS52YWwoZGF0YS52YWx1ZS5nZXQoKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBcInJhbmdlXCI6IHtcbiAgICAgIHNjb3BlOiBmdW5jdGlvbiAoZGF0YSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1pblZhbHVlOiBkYXRhLnZhbHVlLm1pbiA/IHR5cGVvZiBkYXRhLnZhbHVlLm1pbiA9PSBcImZ1bmN0aW9uXCIgPyBkYXRhLnZhbHVlLm1pbigpIDogZGF0YS52YWx1ZS5taW46IDAsXG4gICAgICAgICAgbWF4VmFsdWU6IGRhdGEudmFsdWUubWF4ID8gdHlwZW9mIGRhdGEudmFsdWUubWF4ID09IFwiZnVuY3Rpb25cIiA/IGRhdGEudmFsdWUubWF4KCkgOiBkYXRhLnZhbHVlLm1heDogMSxcbiAgICAgICAgICB2YWx1ZVN0ZXA6IGRhdGEudmFsdWUuc3RlcCA/IHR5cGVvZiBkYXRhLnZhbHVlLnN0ZXAgPT0gXCJmdW5jdGlvblwiID8gZGF0YS52YWx1ZS5zdGVwKCkgOiBkYXRhLnZhbHVlLnN0ZXA6IDAuMSxcbiAgICAgICAgICB2YWx1ZUN1cnJlbnQ6IGRhdGEudmFsdWUuZ2V0KCksXG4gICAgICAgICAgb25jaGFuZ2U6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBkYXRhLnZhbHVlLnNldChwYXJzZUZsb2F0KCQoZS50YXJnZXQpLnZhbCgpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdGVtcGxhdGU6ICc8c3BhbiBjbGFzcz1cIm9iamVjdC1tZW51LWl0ZW0gb2JqZWN0LW1lbnUtcmFuZ2VcIiB0aXRsZT1cInt0aXRsZX1cIj4nICtcbiAgICAgICc8aW5wdXQgdHlwZT1cInJhbmdlXCIgc3RlcD1cInt2YWx1ZVN0ZXB9XCIgbWluPVwie21pblZhbHVlfVwiIG1heD1cInttYXhWYWx1ZX1cIiB2YWx1ZT1cInt2YWx1ZUN1cnJlbnR9XCIgb25jaGFuZ2U9XCJvbmNoYW5nZShldmVudClcIj4nLFxuICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoJGl0ZW0sIGRhdGEsIG9wdGlvbnMsIHRvb2wsIHZhbCkge1xuICAgICAgICAkaXRlbS5maW5kKFwiaW5wdXRcIikudmFsKGRhdGEudmFsdWUuZ2V0KCkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJjaGVja2JveFwiOiB7XG4gICAgICBzY29wZTogZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBvbmNoYW5nZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGRhdGEudmFsdWUuc2V0KGUudGFyZ2V0LmNoZWNrZWQpXG4gICAgICAgICAgfSxcbiAgICAgICAgICB2YWx1ZUN1cnJlbnQ6IGRhdGEudmFsdWUuZ2V0KClcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlOlxuICAgICAgJzxzcGFuIGNsYXNzPVwib2JqZWN0LW1lbnUtaXRlbSBvYmplY3QtbWVudS1jaGVja2JveFwiIHRpdGxlPVwie3RpdGxlfVwiPicgK1xuICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBvbmNoYW5nZT1cIm9uY2hhbmdlKGV2ZW50KVwiIGRwLWNoZWNrZWQ9XCJ7dmFsdWVDdXJyZW50fVwiIGlkPVwiY2hlY2tib3gte2lkfVwiPicgK1xuICAgICAgJzxsYWJlbCBmb3I9XCJjaGVja2JveC17aWR9XCIgIGNsYXNzPVwiYnRuIGJ1dHRvbi17aWR9IHtjbGFzc05hbWV9XCI+JyxcbiAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCRpdGVtLCBkYXRhLCBvcHRpb25zLCB0b29sLCB2YWwpIHtcbiAgICAgICAgJGl0ZW0uZmluZChcImlucHV0XCIpLnZhbCh2YWwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJtZW51XCI6IHtcbiAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm9iamVjdC1tZW51LWl0ZW0gb2JqZWN0LW1lbnUtbWVudVwiIHRpdGxlPVwie3RpdGxlfVwiPicgK1xuICAgICAgJzxsYWJlbCBkcC1pZj1cInRpdGxlXCIgZm9yPVwiYnV0dG9uLXtpZH1cIj57dGl0bGV9PC9sYWJlbD4nICtcbiAgICAgICc8YnV0dG9uIGNsYXNzPVwiYnRuIGJ1dHRvbi1tZW51LXRyaWdnZXIgYnV0dG9uLXtpZH0ge2NsYXNzTmFtZX1cIiBpZD1cImJ1dHRvbi17aWR9XCIvPicgK1xuICAgICAgJzxkaXYgY2xhc3M9XCJvYmplY3QtbWVudSBzdWJtZW51XCIgdHJhbnNjbHVkZS8+JyxcbiAgICAgIHBvc3Q6IGZ1bmN0aW9uICgkaXRlbSwgZGF0YSwgb3B0aW9ucywgdHJhbnNjbHVkZSkge1xuICAgICAgICAvLyRpdGVtLmZpbmQoXCIuYnV0dG9uLW1lbnUtdHJpZ2dlclwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vICAkaXRlbS5maW5kKFwiLm9iamVjdC1tZW51XCIpLnRvZ2dsZSgpO1xuICAgICAgICAvL30pXG4gICAgICAgIGlmIChkYXRhLmhvdmVyZWQpIHtcbiAgICAgICAgICAkaXRlbS5hZGRDbGFzcyhcImhvdmVyZWRcIik7XG4gICAgICAgICAgdGhpcy50b2dnbGVCeUhvdmVyKCRpdGVtLCB0cmFuc2NsdWRlLCBudWxsLCBkYXRhKVxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnRvZ2dsZWQpIHtcbiAgICAgICAgICAkaXRlbS5hZGRDbGFzcyhcInRvZ2dsZWRcIik7XG4gICAgICAgICAgdGhpcy50b2dnbGVCeUJ1dHRvbigkaXRlbSwgdHJhbnNjbHVkZSlcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZU1lbnUoZGF0YS50YXJnZXQsIHRyYW5zY2x1ZGUsIG9wdGlvbnMsIGRhdGEubWVudSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBcImJ1dHRvblwiOiB7XG4gICAgICBzY29wZTogZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBidXR0b25zVGl0bGU6IG9wdGlvbnMuYnV0dG9ucyAmJiBvcHRpb25zLmJ1dHRvbnMudGl0bGUgfHwgZmFsc2UsXG4gICAgICAgICAgYnV0dG9uc2NDbGFzc05hbWU6IChvcHRpb25zLmJ1dHRvbnMgJiYgb3B0aW9ucy5idXR0b25zLmNsYXNzTmFtZSB8fCAnJylcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlOlxuICAgICAgJzxzcGFuIGNsYXNzPVwib2JqZWN0LW1lbnUtaXRlbVwiIHRpdGxlPVwie3RpdGxlfVwiPicgK1xuICAgICAgJzxidXR0b24gY2xhc3M9XCJidG4gYnV0dG9uLXtpZH0ge2NsYXNzTmFtZX0ge2J1dHRvbnNjQ2xhc3NOYW1lfVwiICBvbmNsaWNrPVwiIWRpc2FibGVkICYmIG9wdGlvbiA/IGFjdGlvbihvcHRpb24pIDogYWN0aW9uKClcIj4nICtcbiAgICAgICc8aW1nIGRwLWlmPVwiaWNvblwiIGRwLXNyYz1cImljb25cIj4nICtcbiAgICAgICc8c3BhbiBkcC1pbmNsdWRlPVwic3ZnXCIgZHAtaWY9XCJzdmdcIj48L3NwYW4+JyArXG4gICAgICAnPHNwYW4gZHAtaWY9XCJidXR0b25zVGl0bGVcIiBjbGFzcz1cImJ1dHRvbi10aXRsZVwiPnt0aXRsZX08L3NwYW4+J1xuICAgIH1cbiAgfSxcbiAgb25DcmVhdGU6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMuYnV0dG9ucy5sZW5ndGg7aS0tOykge1xuICAgICAgdmFyIF9jb25maWcgPSB0aGlzLmJ1dHRvbnNbaV07XG4gICAgICBpZih0YXJnZXQgJiYgX2NvbmZpZy50YXJnZXQgIT0gdGFyZ2V0ICl7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5idXR0b25zLnNwbGljZShpLDEpO1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlSW5wdXQ6IGZ1bmN0aW9uICgkaXRlbSwgZGF0YSwgdHlwZSkge1xuXG4gICAgdmFyIHRhcmdldCA9IGRhdGEudGFyZ2V0O1xuICAgIHZhciAkaW5wdXQgPSAkKFwiPGlucHV0PlwiKVxuICAgICAgLmF0dHIoXCJ0eXBlXCIsIHR5cGUpXG4gICAgICAuYXR0cihcIm1pblwiLCBkYXRhLnZhbHVlLm1pbigpKVxuICAgICAgLmF0dHIoXCJtYXhcIiwgZGF0YS52YWx1ZS5tYXgoKSk7XG5cbiAgICAkaW5wdXQudmFsKGRhdGEudmFsdWUuZ2V0KCkpO1xuICAgIGlmIChkYXRhLnZhbHVlLm9ic2VydmUpIHtcbiAgICAgIHRhcmdldC5vbihkYXRhLnZhbHVlLm9ic2VydmUsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgJGlucHV0LnZhbChkYXRhLnZhbHVlLmdldCgpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAkaW5wdXQuY2hhbmdlKGZ1bmN0aW9uIChlKSB7XG4gICAgICBkYXRhLnZhbHVlLnNldChwYXJzZUZsb2F0KCRpbnB1dC52YWwoKSkpXG4gICAgfSk7XG4gICAgJGl0ZW0uYXBwZW5kKCRpbnB1dCk7XG4gIH0sXG4gIGluaXRJdGVtOiBmdW5jdGlvbiAoJGl0ZW0sIGRhdGEpIHtcblxuICAgIGlmIChkYXRhLmFjdGl2ZSkge1xuICAgICAgaWYgKGRhdGEuYWN0aXZlLmNhbGwoZGF0YS50YXJnZXQsIGRhdGEub3B0aW9uKSkge1xuICAgICAgICAkaXRlbS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGF0YS52aXNpYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChkYXRhLnZpc2libGUuY29uc3RydWN0b3IgPT0gRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKCFkYXRhLnZpc2libGUuY2FsbChkYXRhLnRhcmdldCkpIHtcbiAgICAgICAgICAkaXRlbS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWRhdGEudmlzaWJsZSkge1xuICAgICAgICAkaXRlbS5oaWRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGF0YS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIGlmIChkYXRhLmVuYWJsZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGRhdGEuZW5hYmxlZC5jb25zdHJ1Y3RvciA9PSBGdW5jdGlvbikge1xuICAgICAgICBpZiAoIWRhdGEuZW5hYmxlZC5jYWxsKGRhdGEudGFyZ2V0KSkge1xuICAgICAgICAgICRpdGVtLmF0dHIoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgICBkYXRhLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkYXRhLm9ic2VydmUpIHtcbiAgICAgIC8vdG9kb1xuICAgICAgaWYgKGRhdGEudmlzaWJsZSAmJiBkYXRhLnZpc2libGUuY29uc3RydWN0b3IgPT0gRnVuY3Rpb24pIHtcbiAgICAgICAgZGF0YS50YXJnZXQgJiYgZGF0YS50YXJnZXQub24oZGF0YS5vYnNlcnZlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFkYXRhLnZpc2libGUuY2FsbChkYXRhLnRhcmdldCkpIHtcbiAgICAgICAgICAgICRpdGVtLmhpZGUoKTtcbiAgICAgICAgICAgIGRhdGEuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGl0ZW0uc2hvdygpO1xuICAgICAgICAgICAgZGF0YS5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS50eXBlID09IFwib3B0aW9uc1wiKSB7XG4gICAgICAgIGRhdGEudGFyZ2V0ICYmIGRhdGEudGFyZ2V0Lm9uKGRhdGEub2JzZXJ2ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBfdmFsID0gZGF0YS52YWx1ZS5nZXQoKTtcbiAgICAgICAgICAkKFwiW25hbWU9XCIgKyBkYXRhLmlkICsgXCJdXCIpLnByb3AoXCJjaGVja2VkXCIsZmFsc2UpO1xuICAgICAgICAgICQoXCJbbmFtZT1cIiArIGRhdGEuaWQgKyBcIl1bdmFsdWU9XCIgKyBfdmFsICtcIl1cIikucHJvcChcImNoZWNrZWRcIix0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLmVuYWJsZWQgJiYgZGF0YS5lbmFibGVkLmNvbnN0cnVjdG9yID09IEZ1bmN0aW9uKSB7XG4gICAgICAgIGRhdGEudGFyZ2V0ICYmIGRhdGEudGFyZ2V0Lm9uKGRhdGEub2JzZXJ2ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghZGF0YS5lbmFibGVkLmNhbGwoZGF0YS50YXJnZXQpKSB7XG4gICAgICAgICAgICAkaXRlbS5hdHRyKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICBkYXRhLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGl0ZW0ucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgZGF0YS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICB0b2dnbGVCeUhvdmVyOiBmdW5jdGlvbiAoJGl0ZW0sICR0b2dnbGVFbGVtZW50LCBmb28sZGF0YSkge1xuXG4gICAgdmFyIG9uQ2xvc2U7XG5cbiAgICAkdG9nZ2xlRWxlbWVudC5oaWRlKCk7XG4gICAgJGl0ZW0ubW91c2VvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgJHRvZ2dsZUVsZW1lbnQuaGlkZSgpO1xuICAgICAgb25DbG9zZSAmJiBvbkNsb3NlKCk7XG4gICAgfSk7XG4gICAgJGl0ZW0ubW91c2VvdmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICR0b2dnbGVFbGVtZW50LnNob3coKTtcbiAgICAgIG9uQ2xvc2UgPSBmb28gJiYgZm9vKCk7XG4gICAgfSk7XG5cbiAgICAkaXRlbS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZGF0YSAmJiBkYXRhLmltbWVkaWF0ZWx5KSB7XG4gICAgICAgIGRhdGEuYWN0aW9uKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIHRvZ2dsZUJ5QnV0dG9uOiBmdW5jdGlvbiAoJGl0ZW0sICR0b2dnbGVFbGVtZW50LCBmb28sZGF0YSkge1xuXG4gICAgdmFyIG9uQ2xvc2U7XG4gICAgdmFyIF90cnlfaGlkZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgX3BhcmVudHMgPSAkKGUudGFyZ2V0KS5wYXJlbnRzKCk7XG4gICAgICBmb3IgKHZhciBpIGluIF9wYXJlbnRzKSB7XG4gICAgICAgIGlmIChfcGFyZW50c1tpXSA9PT0gJGl0ZW1bMF0pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgkdG9nZ2xlRWxlbWVudC5jc3MoXCJkaXNwbGF5XCIpICE9PSBcIm5vbmVcIikge1xuICAgICAgICAkdG9nZ2xlRWxlbWVudC5oaWRlKCk7XG4gICAgICAgIG9uQ2xvc2UgJiYgb25DbG9zZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAkdG9nZ2xlRWxlbWVudC5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcbiAgICAkdG9nZ2xlRWxlbWVudC5oaWRlKCk7XG4gICAgJGl0ZW0uY2xpY2soZnVuY3Rpb24gKCkge1xuXG4gICAgICBpZiAoJHRvZ2dsZUVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSAhPT0gXCJub25lXCIpIHtcbiAgICAgICAgJHRvZ2dsZUVsZW1lbnQuaGlkZSgpO1xuICAgICAgICBvbkNsb3NlICYmIG9uQ2xvc2UoKTtcbiAgICAgICAgJCh3aW5kb3cpLm9mZihcImNsaWNrXCIsIF90cnlfaGlkZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkdG9nZ2xlRWxlbWVudC5zaG93KCk7XG4gICAgICAgICQod2luZG93KS5vbihcImNsaWNrXCIsIF90cnlfaGlkZSk7XG5cbiAgICAgICAgb25DbG9zZSA9IGZvbyAmJiBmb28oKTtcblxuICAgICAgICBpZihkYXRhICYmIGRhdGEuaW1tZWRpYXRlbHkpe1xuICAgICAgICAgIGRhdGEuYWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9LFxuICBnZW5lcmF0ZU1lbnU6IGZ1bmN0aW9uICh0YXJnZXQsICRlbCwgb3B0aW9ucywgbWVudSkge1xuXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge1xuICAgICAgICB0aXRsZTogZmFsc2VcbiAgICAgIH07XG4gICAgb3B0aW9ucy5idXR0b25zID0gb3B0aW9ucy5idXR0b25zIHx8IHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLFxuICAgICAgICB0aXRsZTogZmFsc2VcbiAgICAgIH07XG5cbiAgICAkZWwuZW1wdHkoKTtcblxuICAgIHZhciBfdGhpcyA9ICB0aGlzO1xuICAgIGZvciAodmFyIGkgaW4gbWVudSkge1xuICAgICAgdmFyIGRhdGEgPSBtZW51W2ldO1xuICAgICAgaWYgKCFkYXRhIHx8IGRhdGEuaW5zZXJ0ICE9PSB1bmRlZmluZWQgJiYgIWRhdGEuaW5zZXJ0KSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZGF0YS50eXBlID0gZGF0YS50eXBlIHx8IFwiYnV0dG9uXCI7XG5cbiAgICAgIC8vdG9kbyDQvdC10L/QvtC90Y/RgtC90L4g0LfQsNGH0LXQvCDQsNGA0LPRg9C80LXQvdGCIHRhcmdldCDQsiDQvdCw0YfQsNC70LVcbiAgICAgIHZhciB0YXJnZXQgPSBkYXRhLnRhcmdldDtcblxuICAgICAgdmFyIHRvb2wgPSB0aGlzLnRvb2xzW2RhdGEudHlwZV07XG5cbiAgICAgIGlmICghdG9vbCkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJ0b29sICdcIiArIGRhdGEudHlwZSArIFwiJyB1bmRlZmluZWRcIik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHNjb3BlID0gZGF0YTtcbiAgICAgIGlmICh0b29sLnNjb3BlKSB7XG4gICAgICAgIHNjb3BlID0gZmFicmljLnV0aWwub2JqZWN0LmRlZmF1bHRzKHRvb2wuc2NvcGUuY2FsbCh0aGlzLCBkYXRhLCBvcHRpb25zKSxkYXRhKTtcbiAgICAgIH1cblxuICAgICAgdmFyICRpdGVtID0gJCh0b29sLnRlbXBsYXRlLmZvcm1hdChzY29wZSkpO1xuICAgICAgdmFyIHRyYW5zY2x1ZGUgPSAkaXRlbS5maW5kKFwiW3RyYW5zY2x1ZGVdXCIpO1xuICAgICAgc2NvcGUuJGl0ZW0gPSBkYXRhLiRpdGVtID0gJGl0ZW07XG4gICAgICBpZihkYXRhLnRlbXBsYXRlKXtcbiAgICAgICAgJGl0ZW0uaHRtbChkYXRhLnRlbXBsYXRlLmZvcm1hdChkYXRhLnZhbHVlLmdldCgpKSk7XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmNvbXBpbGUuY29tcGlsZUVsZW1lbnQoJGl0ZW0sc2NvcGUpO1xuXG4gICAgICBpZiAoZGF0YS52YWx1ZSAmJiBkYXRhLnZhbHVlLm9ic2VydmUpIHtcblxuICAgICAgICB0YXJnZXQub24oZGF0YS52YWx1ZS5vYnNlcnZlLCBmdW5jdGlvbiAodmFsKSB7XG5cbiAgICAgICAgICBpZiAodG9vbC5wb3N0KSB7XG4gICAgICAgICAgICB0b29sLnBvc3QuY2FsbChfdGhpcywkaXRlbSwgc2NvcGUsIG9wdGlvbnMsIHRyYW5zY2x1ZGUubGVuZ3RoID8gdHJhbnNjbHVkZSA6IG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZih0b29sLnJlbmRlcil7XG4gICAgICAgICAgICB0b29sLnJlbmRlci5jYWxsKF90aGlzLCAkaXRlbSwgZGF0YSwgb3B0aW9ucywgdG9vbCwgdmFsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy90aGlzLmZpcmUoZGF0YS50eXBlICsgXCI6cmVuZGVyXCIse2l0ZW06ICRpdGVtLCBkYXRhOiBkYXRhLCBvcHRpb25zOiBvcHRpb25zLCB0b29sOiB0b29sLCB2YWw6IHZhbH0pXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluaXRJdGVtKCRpdGVtLCBkYXRhKTtcblxuICAgICAgaWYgKHRvb2wucG9zdCkge1xuICAgICAgICB0b29sLnBvc3QuY2FsbCh0aGlzLCRpdGVtLCBzY29wZSwgb3B0aW9ucywgdHJhbnNjbHVkZS5sZW5ndGggPyB0cmFuc2NsdWRlIDogbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZmlyZShkYXRhLnR5cGUgKyBcIjpjcmVhdGVkXCIse2l0ZW06ICRpdGVtLCBkYXRhOiBkYXRhLCBvcHRpb25zOiBvcHRpb25zLCB0b29sOiB0b29sfSk7XG5cbiAgICAgICRlbC5hcHBlbmQoJGl0ZW0pO1xuICAgIH1cbiAgfVxufTtcbnV0aWxzLm9ic2VydmFibGUoVG9vbGJhci5wcm90b3R5cGUpO1xuXG5cblRvb2xiYXIuc2luZ2xlID0gZnVuY3Rpb24oZGF0YSxlbGVtZW50KXtcbiAgZGF0YS4kaXRlbSA9IGVsZW1lbnQ7XG4gIGRhdGEudHlwZSA9IGRhdGEudHlwZSB8fCBcImJ1dHRvblwiO1xuXG4gIHZhciB0b29sID0gVG9vbGJhci5wcm90b3R5cGUudG9vbHNbZGF0YS50eXBlXTtcblxuICBUb29sYmFyLnByb3RvdHlwZS5pbml0SXRlbShlbGVtZW50LGRhdGEpO1xuXG4gIGlmIChkYXRhLnZhbHVlICYmIGRhdGEudmFsdWUub2JzZXJ2ZSkge1xuICAgIGRhdGEudGFyZ2V0Lm9uKGRhdGEudmFsdWUub2JzZXJ2ZSwgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgdG9vbC5yZW5kZXIoIGVsZW1lbnQsIGRhdGEsIHt9LCB0b29sLCB2YWwpXG4gICAgfSk7XG4gIH1cblxuICBpZih0b29sLnBvc3Qpe1xuICAgIHZhciB0cmFuc2NsdWRlID0gZWxlbWVudC5maW5kKFwiW3RyYW5zY2x1ZGVdXCIpO1xuXG4gICAgdG9vbC5wb3N0LmNhbGwoVG9vbGJhci5wcm90b3R5cGUsIGVsZW1lbnQsIGRhdGEsIHt9LCB0cmFuc2NsdWRlLmxlbmd0aCA/IHRyYW5zY2x1ZGUgOiBudWxsKTtcbiAgfVxuXG4gIHZhciBzY29wZSA9IGRhdGE7XG4gIGlmKHRvb2wuc2NvcGUpe1xuICAgIHNjb3BlID0gXy5kZWZhdWx0cyhkYXRhLCB0b29sLnNjb3BlLmNhbGwoVG9vbGJhci5wcm90b3R5cGUsIGRhdGEsIHt9KSk7XG4gIH1cblxuICBlbGVtZW50LmVhY2hTZWxmKFwiKlwiLGZ1bmN0aW9uKCl7XG4gICAgdmFyIG5vZGVzPVtdLCB2YWx1ZXM9W107XG4gICAgZm9yICh2YXIgYXR0LCBpID0gMCwgYXR0cyA9IHRoaXMuYXR0cmlidXRlcywgbiA9IGF0dHMubGVuZ3RoOyBpIDwgbjsgaSsrKXtcbiAgICAgIGF0dCA9IGF0dHNbaV07XG4gICAgICBub2Rlcy5wdXNoKGF0dC5ub2RlTmFtZSk7XG4gICAgICB2YWx1ZXMucHVzaChhdHQubm9kZVZhbHVlKTtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dC5ub2RlTmFtZSxhdHQubm9kZVZhbHVlLmZvcm1hdChzY29wZSkpO1xuICAgIH1cbiAgfSk7XG4gIHV0aWxzLmNvbXBpbGUuY29tcGlsZUVsZW1lbnQoZWxlbWVudCxzY29wZSk7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gVG9vbGJhcjtcblxuXG5cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL3Rvb2xiYXIvc3JjL3Rvb2xiYXIuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHV0aWxzID0ge1xuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGFyclxuICAgKiBAcGFyYW0gYXJyMlxuICAgKiBAcmV0dXJucyB7e319XG4gICAqIEBleGFtcGxlXG4gICAqICAgIHggPSB7YTogMSAsYjogMSwgYzogWzEsMl19XG4gICAqICAgIHkgPSB7YTogMiAsICBjIDogMyAsIGQgOiAxfVxuICAgKlxuICAgKiAgICBleHRlbmRBcnJheXNPYmplY3QoeCx5KSA9IHthOiBbMSwyXSBiIDogWzFdIGMgOiBbMSwyLDNdLCBkIFsxXSB9XG4gICAqL1xuICBleHRlbmRBcnJheXNPYmplY3QgOiBmdW5jdGlvbihhcnIsYXJyMil7XG4gICAgdmFyIG5ld0FycmF5ID0ge307XG5cbiAgICBmb3IodmFyIGkgaW4gYXJyKXtcbiAgICAgIGlmKGFycltpXS5jb25zdHJ1Y3RvciA9PSBBcnJheSl7XG4gICAgICAgIG5ld0FycmF5W2ldICA9IFtdLmNvbmNhdChhcnJbaV0pO1xuICAgICAgfWVsc2V7XG4gICAgICAgIG5ld0FycmF5W2ldID0gW2FycltpXV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yKHZhciBpIGluIGFycjIpe1xuICAgICAgaWYobmV3QXJyYXlbaV0pe1xuICAgICAgICBuZXdBcnJheVtpXS5wdXNoKGFycjJbaV0pO1xuICAgICAgfWVsc2V7XG4gICAgICAgIG5ld0FycmF5W2ldID0gW2FycjJbaV1dO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3QXJyYXk7XG4gIH0sXG4gIGZpbHRlclZhbHVlczogZnVuY3Rpb24gKGFycmF5LCB2YWx1ZXMpIHtcbiAgICB2YXIgbmV3X2FycmF5ID0gW107XG4gICAgZm9yICh2YXIgaSBpbiBhcnJheSkge1xuICAgICAgdmFyIF9uZXdfb2JqZWN0ID0ge307XG4gICAgICBmb3IgKHZhciBqIGluIHZhbHVlcykge1xuICAgICAgICBfbmV3X29iamVjdFt2YWx1ZXNbal1dID0gYXJyYXlbaV1bdmFsdWVzW2pdXVxuICAgICAgfVxuICAgICAgbmV3X2FycmF5LnB1c2goX25ld19vYmplY3QpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3X2FycmF5O1xuICB9LFxuXG4gIC8qKlxuICAgKiAg0KLQsNGB0L7QstCw0L3QuNC1INCk0LjRiNC10YDQsOKAk9CZ0LXRgtGB0LAs0YHQu9GD0YfQsNC50L3QvtC1INGC0LDRgdC+0LLQsNC90LjQtSDQvNC90L7QttC10YHRgtCy0LBcbiAgICogQHBhcmFtIG9iamVjdFxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIHNodWZmbGU6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICBpZiAoIW9iamVjdC5sZW5ndGgpIHJldHVybjtcbiAgICB2YXIgaSA9IG9iamVjdC5sZW5ndGg7XG4gICAgd2hpbGUgKC0taSkge1xuICAgICAgdmFyIGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaSArIDEpKTtcbiAgICAgIHZhciB0ZW1wID0gb2JqZWN0W2ldO1xuICAgICAgb2JqZWN0W2ldID0gb2JqZWN0W2pdO1xuICAgICAgb2JqZWN0W2pdID0gdGVtcDtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqZWN0OyAvLyBmb3IgY29udmVuaWVuY2UsIGluIGNhc2Ugd2Ugd2FudCBhIHJlZmVyZW5jZSB0byB0aGUgYXJyYXlcbiAgfSxcbiAgLyoqXG4gICAqIERlcGVuZGVuY3k6IHVuZGVyc2NvcmUuanMgKCBodHRwOi8vZG9jdW1lbnRjbG91ZC5naXRodWIuY29tL3VuZGVyc2NvcmUvIClcbiAgICpcbiAgICogTWl4IGl0IGluIHdpdGggdW5kZXJzY29yZS5qczpcbiAgICogXy5taXhpbih7ZGVlcEV4dGVuZDogZGVlcEV4dGVuZH0pO1xuICAgKlxuICAgKiBDYWxsIGl0IGxpa2UgdGhpczpcbiAgICogdmFyIG15T2JqID0gdXRpbHMuZGVlcEV4dGVuZChncmFuZHBhcmVudCwgY2hpbGQsIGdyYW5kY2hpbGQsIGdyZWF0Z3JhbmRjaGlsZClcbiAgICpcbiAgICogTm90ZXM6XG4gICAqIEtlZXAgaXQgRFJZLlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGVzcGVjaWFsbHkgdXNlZnVsIGlmIHlvdSdyZSB3b3JraW5nIHdpdGggSlNPTiBjb25maWcgZG9jdW1lbnRzLiBJdCBhbGxvd3MgeW91IHRvIGNyZWF0ZSBhIGRlZmF1bHRcbiAgICogY29uZmlnIGRvY3VtZW50IHdpdGggdGhlIG1vc3QgY29tbW9uIHNldHRpbmdzLCB0aGVuIG92ZXJyaWRlIHRob3NlIHNldHRpbmdzIGZvciBzcGVjaWZpYyBjYXNlcy4gSXQgYWNjZXB0cyBhbnlcbiAgICogbnVtYmVyIG9mIG9iamVjdHMgYXMgYXJndW1lbnRzLCBnaXZpbmcgeW91IGZpbmUtZ3JhaW5lZCBjb250cm9sIG92ZXIgeW91ciBjb25maWcgZG9jdW1lbnQgaGllcmFyY2h5LlxuICAgKlxuICAgKiBTcGVjaWFsIEZlYXR1cmVzIGFuZCBDb25zaWRlcmF0aW9uczpcbiAgICogLSBwYXJlbnRSRSBhbGxvd3MgeW91IHRvIGNvbmNhdGVuYXRlIHN0cmluZ3MuIGV4YW1wbGU6XG4gICAqICAgdmFyIG9iaiA9IHV0aWxzLmRlZXBFeHRlbmQoe3VybDogXCJ3d3cuZXhhbXBsZS5jb21cIn0sIHt1cmw6IFwiaHR0cDovLyN7X30vcGF0aC90by9maWxlLmh0bWxcIn0pO1xuICAgKiAgIGNvbnNvbGUubG9nKG9iai51cmwpO1xuICAgKiAgIG91dHB1dDogXCJodHRwOi8vd3d3LmV4YW1wbGUuY29tL3BhdGgvdG8vZmlsZS5odG1sXCJcbiAgICpcbiAgICogLSBwYXJlbnRSRSBhbHNvIGFjdHMgYXMgYSBwbGFjZWhvbGRlciwgd2hpY2ggY2FuIGJlIHVzZWZ1bCB3aGVuIHlvdSBuZWVkIHRvIGNoYW5nZSBvbmUgdmFsdWUgaW4gYW4gYXJyYXksIHdoaWxlXG4gICAqICAgbGVhdmluZyB0aGUgb3RoZXJzIHVudG91Y2hlZC4gZXhhbXBsZTpcbiAgICogICB2YXIgYXJyID0gdXRpbHMuZGVlcEV4dGVuZChbMTAwLCAgICB7aWQ6IDEyMzR9LCB0cnVlLCAgXCJmb29cIiwgIFsyNTAsIDUwMF1dLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiI3tffVwiLCBcIiN7X31cIiwgICAgIGZhbHNlLCBcIiN7X31cIiwgXCIje199XCJdKTtcbiAgICogICBjb25zb2xlLmxvZyhhcnIpO1xuICAgKiAgIG91dHB1dDogWzEwMCwge2lkOiAxMjM0fSwgZmFsc2UsIFwiZm9vXCIsIFsyNTAsIDUwMF1dXG4gICAqXG4gICAqIC0gVGhlIHByZXZpb3VzIGV4YW1wbGUgY2FuIGFsc28gYmUgd3JpdHRlbiBsaWtlIHRoaXM6XG4gICAqICAgdmFyIGFyciA9IHV0aWxzLmRlZXBFeHRlbmQoWzEwMCwgICAge2lkOjEyMzR9LCAgIHRydWUsICBcImZvb1wiLCAgWzI1MCwgNTAwXV0sXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBbXCIje199XCIsIHt9LCAgICAgICAgICBmYWxzZSwgXCIje199XCIsIFtdXSk7XG4gICAqICAgY29uc29sZS5sb2coYXJyKTtcbiAgICogICBvdXRwdXQ6IFsxMDAsIHtpZDogMTIzNH0sIGZhbHNlLCBcImZvb1wiLCBbMjUwLCA1MDBdXVxuICAgKlxuICAgKiAtIEFuZCBhbHNvIGxpa2UgdGhpczpcbiAgICogICB2YXIgYXJyID0gdXRpbHMuZGVlcEV4dGVuZChbMTAwLCAgICB7aWQ6MTIzNH0sICAgdHJ1ZSwgIFwiZm9vXCIsICBbMjUwLCA1MDBdXSxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIFtcIiN7X31cIiwge30sICAgICAgICAgIGZhbHNlXSk7XG4gICAqICAgY29uc29sZS5sb2coYXJyKTtcbiAgICogICBvdXRwdXQ6IFsxMDAsIHtpZDogMTIzNH0sIGZhbHNlLCBcImZvb1wiLCBbMjUwLCA1MDBdXVxuICAgKlxuICAgKiAtIEFycmF5IG9yZGVyIGlzIGltcG9ydGFudC4gZXhhbXBsZTpcbiAgICogICB2YXIgYXJyID0gdXRpbHMuZGVlcEV4dGVuZChbMSwgMiwgMywgNF0sIFsxLCA0LCAzLCAyXSk7XG4gICAqICAgY29uc29sZS5sb2coYXJyKTtcbiAgICogICBvdXRwdXQ6IFsxLCA0LCAzLCAyXVxuICAgKlxuICAgKiAtIFlvdSBjYW4gcmVtb3ZlIGFuIGFycmF5IGVsZW1lbnQgc2V0IGluIGEgcGFyZW50IG9iamVjdCBieSBzZXR0aW5nIHRoZSBzYW1lIGluZGV4IHZhbHVlIHRvIG51bGwgaW4gYSBjaGlsZCBvYmplY3QuXG4gICAqICAgZXhhbXBsZTpcbiAgICogICB2YXIgb2JqID0gdXRpbHMuZGVlcEV4dGVuZCh7YXJyOiBbMSwgMiwgMywgNF19LCB7YXJyOiBbXCIje199XCIsIG51bGxdfSk7XG4gICAqICAgY29uc29sZS5sb2cob2JqLmFycik7XG4gICAqICAgb3V0cHV0OiBbMSwgMywgNF1cbiAgICpcbiAgICoqL1xuICBkZWVwRXh0ZW5kOiBmdW5jdGlvbiAoLypvYmpfMSwgW29ial8yXSwgW29ial9OXSovKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxIHx8IHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gYXJndW1lbnRzWzBdO1xuXG4gICAgdmFyIHRhcmdldCA9IGFyZ3VtZW50c1swXTtcblxuICAgIC8vIGNvbnZlcnQgYXJndW1lbnRzIHRvIGFycmF5IGFuZCBjdXQgb2ZmIHRhcmdldCBvYmplY3RcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIga2V5LCB2YWwsIHNyYywgY2xvbmUsIHRtcEJ1ZjtcblxuICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHJldHVybjtcblxuICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBvYmopKSBjb250aW51ZTtcblxuICAgICAgICBzcmMgPSB0YXJnZXRba2V5XTtcbiAgICAgICAgdmFsID0gdXRpbHMuY2xvbmVEZWVwKG9ialtrZXldKTtcblxuXG4gICAgICAgIGlmICh0eXBlb2Ygc3JjICE9PSAnb2JqZWN0JyB8fCBzcmMgPT09IG51bGwpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICAgICAgfWVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgIGNsb25lID0gKEFycmF5LmlzQXJyYXkoc3JjKSkgPyBzcmMgOiBbXTtcblxuICAgICAgICAgIHZhbC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICAgICAgY2xvbmUucHVzaCh1dGlscy5jbG9uZURlZXAoaXRlbSkpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBjbG9uZTtcbiAgICAgICAgICAvL3RvZG8gINC10YHQu9C4INC30LDQuNC80YHRgtCy0YPQtdC8INC80LDRgdGB0LjQsiAsINGC0L4g0YHRgdC+0YXRgNCw0L3Rj9C10Lwg0LfQvdCw0YfQtdC90LjRjyDQuNC3INC+0LHQvtC40YUg0LzQsNGB0YHQuNCy0L7QslxuICAgICAgICAgIC8vdGFyZ2V0W2tleV0gPSB1dGlscy5kZWVwRXh0ZW5kKGNsb25lLCB2YWwpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvbmUgPSAoIUFycmF5LmlzQXJyYXkoc3JjKSkgPyBzcmMgOiB7fTtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHV0aWxzLmRlZXBFeHRlbmQoY2xvbmUsIHZhbCk7XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSxcbiAgY2xvbmVEZWVwOiBmdW5jdGlvbiAodmFsKSB7XG5cbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmICh2YWwgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUodmFsLmdldFRpbWUoKSk7XG4gICAgfSBlbHNlIGlmICh2YWwgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKHZhbCk7XG4gICAgfVxuXG4gICAgaWYodmFsLmNsb25lU3luYyl7XG4gICAgICByZXR1cm4gdmFsLmNsb25lU3luYygpO1xuICAgIH1lbHNlIGlmKHZhbC5jb25zdHJ1Y3RvciA9PSBPYmplY3Qpe1xuICAgICAgcmV0dXJuIHV0aWxzLmRlZXBFeHRlbmQoe30sIHZhbCk7XG4gICAgfWVsc2UgaWYodmFsLmNvbnN0cnVjdG9yID09IEFycmF5KXtcbiAgICAgIHZhciBjbG9uZSA9IFtdO1xuICAgICAgZm9yKHZhciBpID0wIDtpIDwgdmFsLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY2xvbmUucHVzaCh1dGlscy5jbG9uZURlZXAodmFsW2ldKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xvbmU7XG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfSxcbiAgcmVhcnJhbmdlOiBmdW5jdGlvbiAob2JqZWN0LCBrZXlzKSB7XG4gICAgdmFyIF9uZXdPcmRlciA9IHt9O1xuICAgIGZvciAodmFyIGkgaW4ga2V5cykge1xuICAgICAgaWYob2JqZWN0W2tleXNbaV1dICE9PSB1bmRlZmluZWQpe1xuICAgICAgICBfbmV3T3JkZXJba2V5c1tpXV0gPSBvYmplY3Rba2V5c1tpXV1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZm9yIChpIGluIG9iamVjdCkge1xuICAgIC8vICAgZGVsZXRlIG9iamVjdFtpXTtcbiAgICAvLyB9XG4gICAgLy8gZm9yIChpIGluIF9uZXdPcmRlcikge1xuICAgIC8vICAgb2JqZWN0W2ldID0gX25ld09yZGVyW2ldO1xuICAgIC8vIH1cbiAgICByZXR1cm4gX25ld09yZGVyO1xuICB9LFxuICBzb3J0Qnk6IF8uc29ydEJ5LFxuICBkZWZhdWx0czogXy5kZWZhdWx0cyxcbiAgd2hlcmU6IF8ud2hlcmUsXG4gIGZpbmRXaGVyZTogXy5maW5kV2hlcmUsXG4gIGZpbHRlcjogXy5maWx0ZXIsXG4gIHBpY2s6IF8ucGljayxcbiAgZXh0ZW5kOiBmdW5jdGlvbiAoZGVzdGluYXRpb24pIHtcbiAgICAvLyBKU2NyaXB0IERvbnRFbnVtIGJ1ZyBpcyBub3QgdGFrZW4gY2FyZSBvZlxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gc291cmNlKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IHNvdXJjZVtwcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbiAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gIHV0aWxzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi91dGlsL29iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgb2JqZWN0VXRpbHMgPSByZXF1aXJlKFwiLi9vYmplY3RcIilcblxudmFyIHV0aWxzID0ge1xuICAvKipcbiAgICogd2lsbCBkaXZpZGUgdG90YWwgd2lkdGggZm9yIGV2ZXJ5IG9iamVjdCBpbiBjb2x1bW50cyBhcnJheVxuICAgKlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgICAgdmFyIF9mbGV4QXJyYXkgPSBmYWJyaWMudXRpbC5mbGV4KDIwMCAsIFt7ZmxleDogMH0se3ZhbHVlOiAxMDAsIGZsZXg6IDF9LHtmbGV4OiAwfV0gKTtcbiAgICogQHBhcmFtIHRvdGFsXG4gICAqIEBwYXJhbSBjb2x1bW5zXG4gICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICogQGV4YW1wbGUgWzUwLDEwMCw1MF1cbiAgICovXG4gIGZsZXg6IGZ1bmN0aW9uICh0b3RhbCxjb2x1bW5zKXtcbiAgICB2YXIgX3JldHVybiA9IFtdO1xuICAgIHZhciBzcGxpdCA9IDA7XG4gICAgY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbiwgaW5kZXgpe1xuICAgICAgaWYoY29sdW1uLnZhbHVlID09PSB1bmRlZmluZWQpe1xuICAgICAgICBzcGxpdCsrO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHRvdGFsIC09IGNvbHVtbi52YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgX3cgPSB0b3RhbCAvIHNwbGl0O1xuICAgIGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuICAgICAgX3JldHVybi5wdXNoKGNvbHVtbi52YWx1ZSA9PT0gdW5kZWZpbmVkID8gX3cgOiAgY29sdW1uLnZhbHVlICk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF9yZXR1cm47XG4gIH0sXG4gIHdvcmtlcjogZnVuY3Rpb24gKGZvbykge1xuICAgIGlmICh3aW5kb3cuV29ya2VyKSB7XG4gICAgICB2YXIgc3RyID0gZm9vLnRvU3RyaW5nKCk7XG4gICAgICB2YXIgZXZlbnRBcmcgPSBzdHIuc3Vic3RyaW5nKHN0ci5pbmRleE9mKFwiKFwiKSArIDEsc3RyLmluZGV4T2YoXCIsXCIpKTtcbiAgICAgIHZhciBwb3N0TWVzc2FnZUFyZyA9IHN0ci5zdWJzdHJpbmcoc3RyLmluZGV4T2YoXCIsXCIpICsgMSxzdHIuaW5kZXhPZihcIilcIikpO1xuICAgICAgdmFyIF9mdW5jdGlvbkJvZHkgPSBzdHIuc3Vic3RyaW5nKHN0ci5pbmRleE9mKFwie1wiKSArIDEpO1xuICAgICAgc3RyID0gXCJvbm1lc3NhZ2U9ZnVuY3Rpb24oXCIgKyBldmVudEFyZyArIFwiKXtcIiArIHBvc3RNZXNzYWdlQXJnICsgXCI9IHBvc3RNZXNzYWdlO1wiICsgX2Z1bmN0aW9uQm9keTtcbiAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW3N0cl0pO1xuICAgICAgLy9cIm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHsgcG9zdE1lc3NhZ2UoJ21zZyBmcm9tIHdvcmtlcicpOyB9XCJdKTtcbiAgICAgIHZhciBibG9iVVJMID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICByZXR1cm4gbmV3IFdvcmtlcihibG9iVVJMKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHdvcmtlciA9IHtcbiAgICAgICAgdGVybWluYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3RNZXNzYWdlOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm9vKHtkYXRhOiBkYXRhfSwgZnVuY3Rpb24gKHJlc3BvbnNlRGF0YSkge1xuICAgICAgICAgICAgICB3b3JrZXIub25tZXNzYWdlICYmIHdvcmtlci5vbm1lc3NhZ2Uoe2RhdGE6IHJlc3BvbnNlRGF0YX0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiB3b3JrZXI7XG4gICAgfVxuICB9LFxuICBvYnNlcnZhYmxlOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgXy5leHRlbmQob2JqLCB7XG5cbiAgICAgIGZpcmU6IGZ1bmN0aW9uIGZpcmUoZXZlbnROYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5fX2V2ZW50TGlzdGVuZXJzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsaXN0ZW5lcnNGb3JFdmVudCA9IHRoaXMuX19ldmVudExpc3RlbmVyc1tldmVudE5hbWVdO1xuICAgICAgICBpZiAoIWxpc3RlbmVyc0ZvckV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaXN0ZW5lcnNGb3JFdmVudC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGxpc3RlbmVyc0ZvckV2ZW50W2ldLmNhbGwodGhpcywgb3B0aW9ucyB8fCB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgb246IGZ1bmN0aW9uIChldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGV2ZW50TmFtZS5jb25zdHJ1Y3RvciA9PSBPYmplY3QpIHtcbiAgICAgICAgICBmb3IgKHZhciBpIGluIGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgdGhpcy5vbihpLCBldmVudE5hbWVbaV0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBldmVudHMgPSBldmVudE5hbWUuc3BsaXQoXCIgXCIpO1xuICAgICAgICBmb3IgKHZhciBpIGluIGV2ZW50cykge1xuICAgICAgICAgIHRoaXMub2JzZXJ2ZShldmVudHNbaV0sIGhhbmRsZXIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgb2JzZXJ2ZTogZnVuY3Rpb24gKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgICBpZiAoIXRoaXMuX19ldmVudExpc3RlbmVycykge1xuICAgICAgICAgIHRoaXMuX19ldmVudExpc3RlbmVycyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBldmVudE5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMub24ocHJvcCwgZXZlbnROYW1lW3Byb3BdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSkge1xuICAgICAgICAgICAgdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0gPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0ucHVzaChoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBvZmY6IGZ1bmN0aW9uIHN0b3BPYnNlcnZpbmcoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgIGZ1bmN0aW9uIF9yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgICAgIGlmICghdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgdmFyIGlkeCA9IHRoaXMuX19ldmVudExpc3RlbmVyc1tldmVudE5hbWVdLmluZGV4T2YoaGFuZGxlcik7XG4gICAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgICB0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXS5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXS5sZW5ndGggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fX2V2ZW50TGlzdGVuZXJzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fX2V2ZW50TGlzdGVuZXJzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gZXZlbnROYW1lKSB7XG4gICAgICAgICAgICBfcmVtb3ZlRXZlbnRMaXN0ZW5lci5jYWxsKHRoaXMsIHByb3AsIGV2ZW50TmFtZVtwcm9wXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIF9yZW1vdmVFdmVudExpc3RlbmVyLmNhbGwodGhpcywgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuICBpbk9yZGVyOiBmdW5jdGlvbiAoYXJyYXksIGZvbywgY2FsbGJhY2spIHtcbiAgICB2YXIgX2luZGV4ID0gMDtcbiAgICBmdW5jdGlvbiBfaW5PcmRlckluZGV4KCkge1xuICAgICAgaWYgKCsrX2luZGV4IDwgYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIGZvbyhhcnJheVtfaW5kZXhdLCBfaW5kZXgsIF9pbk9yZGVySW5kZXgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb28oYXJyYXlbX2luZGV4XSwgX2luZGV4LCBfaW5PcmRlckluZGV4KVxuICB9LFxuICAvKipcbiAgICog0LLQvtC30LLRgNCw0YnQsNC10YIg0L7QsdGK0LXQutGCINGBINC60LvRjtGH0LDQvNC4INGB0YLRgNC+0LrQuCB1cmxcbiAgICogQHJldHVybnMge3t9fVxuICAgKi9cbiAgcXVlcnlTdHJpbmc6IGZ1bmN0aW9uIChxdWVyeSkge1xuICAgIGlmKHF1ZXJ5KSB7XG4gICAgICBxdWVyeSA9IHF1ZXJ5LnN1YnN0cihxdWVyeS5pbmRleE9mKFwiP1wiKSArIDEpIDtcbiAgICB9ZWxzZXtcbiAgICAgIHF1ZXJ5ID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSk7XG4gICAgfVxuICAgIHZhciBvYmogPSB7fTtcbiAgICB2YXIgX2xlbmd0aCA9IDA7XG4gICAgaWYgKCFxdWVyeSlyZXR1cm4gb2JqO1xuICAgIHZhciB2YXJzID0gcXVlcnkuc3BsaXQoXCImXCIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhaXIgPSB2YXJzW2ldLnNwbGl0KFwiPVwiKTtcbiAgICAgIHZhciBfdm5hbWUgPSBwYWlyWzBdLCB2YWwgPSBwYWlyWzFdO1xuICAgICAgaWYgKHR5cGVvZiBvYmpbX3ZuYW1lXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBvYmpbX3ZuYW1lXSA9IHZhbCB8fCBcIlwiO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBfbGVuZ3RoLCB7dmFsdWU6IF92bmFtZSwgZW51bWVyYWJsZTogZmFsc2V9KTtcbiAgICAgICAgX2xlbmd0aCsrO1xuICAgICAgICAvLyBJZiBzZWNvbmQgZW50cnkgd2l0aCB0aGlzIG5hbWVcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9ialtfdm5hbWVdID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHZhciBhcnIgPSBbb2JqW192bmFtZV0sIHZhbF07XG4gICAgICAgIG9ialtfdm5hbWVdID0gYXJyO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBfbGVuZ3RoLCB7dmFsdWU6IF92bmFtZSwgZW51bWVyYWJsZTogZmFsc2V9KTtcbiAgICAgICAgX2xlbmd0aCsrO1xuICAgICAgICAvLyBJZiB0aGlyZCBvciBsYXRlciBlbnRyeSB3aXRoIHRoaXMgbmFtZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW192bmFtZV0ucHVzaCh2YWwpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBfbGVuZ3RoLCB7dmFsdWU6IF92bmFtZSwgZW51bWVyYWJsZTogZmFsc2V9KTtcbiAgICAgICAgX2xlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBcImxlbmd0aFwiLCB7dmFsdWU6IF9sZW5ndGgsIGVudW1lcmFibGU6IGZhbHNlfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfSxcbiAgY29weVZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgaWYgKHZhbHVlID09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICBzd2l0Y2ggKHZhbHVlLmNvbnN0cnVjdG9yKSB7XG4gICAgICBjYXNlIE9iamVjdDpcbiAgICAgICAgcmV0dXJuIG9iamVjdFV0aWxzLmRlZXBFeHRlbmQoe30sIHZhbHVlKTtcbiAgICAgIGNhc2UgQXJyYXk6XG4gICAgICAgIHJldHVybiBvYmplY3RVdGlscy5kZWVwRXh0ZW5kKFtdLCB2YWx1ZSk7XG4gICAgICBjYXNlIFN0cmluZzpcbiAgICAgIGNhc2UgTnVtYmVyOlxuICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvL2NvbnNvbGUubG9nKHZhbHVlLmNvbnN0cnVjdG9yKTtcbiAgICAgICAgcmV0dXJuIG9iamVjdFV0aWxzLmRlZXBFeHRlbmQoe30sIHZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIGNsZWFyVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHN3aXRjaCAodmFsdWUuY29uc3RydWN0b3IpIHtcbiAgICAgIGNhc2UgT2JqZWN0OlxuICAgICAgICBmb3IgKHZhciBtZW1iZXIgaW4gdmFsdWUpIGRlbGV0ZSB2YWx1ZVttZW1iZXJdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQXJyYXk6XG4gICAgICAgIHZhbHVlLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZGVsZXRlIHZhbHVlO1xuICAgIH1cbiAgfSxcbiAgb2JqZWN0c0RpZmZlcmVuY2U6IGZ1bmN0aW9uIChwcmV2LCBub3cpIHtcbiAgICB2YXIgY2hhbmdlcyA9IHt9O1xuICAgIGZvciAodmFyIHByb3AgaW4gbm93KSB7XG4gICAgICBpZiAoIXByZXYgfHwgcHJldltwcm9wXSAhPT0gbm93W3Byb3BdKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygbm93W3Byb3BdID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICB2YXIgYyA9IHV0aWxzLm9iamVjdHNEaWZmZXJlbmNlKHByZXZbcHJvcF0sIG5vd1twcm9wXSk7XG4gICAgICAgICAgaWYgKCFfLmlzRW1wdHkoYykpIC8vIHVuZGVyc2NvcmVcbiAgICAgICAgICAgIGNoYW5nZXNbcHJvcF0gPSBjO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZXNbcHJvcF0gPSBub3dbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoYW5nZXM7XG4gIH0sXG4gIHNwbGl0Qnk6IGZ1bmN0aW9uIChxdWVyeSwgZGVsaW1pdGVyKSB7XG4gICAgdmFyIHRyYWNlUXVlcmllcyA9IFtdO1xuICAgIHZhciByID0gMCxcbiAgICAgIGYgPSAwLFxuICAgICAgX3Bfc3RhcnQgPSAwO1xuICAgIGlmIChxdWVyeSA9PSBcIlwiKSByZXR1cm4gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWVyeS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBxdWVyeVtpXTtcbiAgICAgIGlmIChjID09IFwiKFwiKSB7XG4gICAgICAgIHIrKztcbiAgICAgICAgZiA9IDE7XG4gICAgICB9IGVsc2UgaWYgKGMgPT0gXCIpXCIpIHtcbiAgICAgICAgci0tO1xuICAgICAgfVxuICAgICAgaWYgKHIgPT0gMCAmJiBmID09IDEpIGYgPSAwO1xuICAgICAgaWYgKGRlbGltaXRlci5pbmRleE9mKGMpICE9IC0xICYmIHIgPT0gMCAmJiBmID09IDApIHtcbiAgICAgICAgdHJhY2VRdWVyaWVzLnB1c2gocXVlcnkuc3Vic3RyaW5nKF9wX3N0YXJ0LCBpKSk7XG4gICAgICAgIF9wX3N0YXJ0ID0gaSArIDE7XG4gICAgICB9XG4gICAgfVxuICAgIHRyYWNlUXVlcmllcy5wdXNoKHF1ZXJ5LnN1YnN0cmluZyhfcF9zdGFydCkpO1xuICAgIHJldHVybiB0cmFjZVF1ZXJpZXM7XG4gIH0sXG4gIHF1ZXVlTG9hZDogZnVuY3Rpb24gKHRvdGFsLCBjb21wbGV0ZUNCLCBwcm9ncmVzc0NCKSB7XG4gICAgdmFyIGxvYWRlciA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgbG9hZGVyLmxvYWRlZC5wdXNoKGVsKTtcbiAgICAgIGxvYWRlci5wcm9ncmVzc0NCICYmIGxvYWRlci5wcm9ncmVzc0NCKGxvYWRlci5sb2FkZWQubGVuZ3RoLCBsb2FkZXIudG90YWwsIGVsLCBsb2FkZXIubG9hZGVkKTtcblxuICAgICAgaWYgKGxvYWRlci5sb2FkZWQubGVuZ3RoID09IGxvYWRlci50b3RhbCkge1xuICAgICAgICBsb2FkZXIuY29tcGxldGVDQiAmJiBsb2FkZXIuY29tcGxldGVDQihsb2FkZXIubG9hZGVkKTtcbiAgICAgICAgbG9hZGVyLmZpcmUoXCJsb2FkZWRcIik7XG4gICAgICB9XG4gICAgfTtcbiAgICBsb2FkZXIuY29tcGxldGVDQiA9IGNvbXBsZXRlQ0I7XG4gICAgbG9hZGVyLnByb2dyZXNzQ0IgPSBwcm9ncmVzc0NCO1xuICAgIGxvYWRlci50b3RhbCA9IHRvdGFsO1xuICAgIGxvYWRlci5sb2FkZWQgPSBbXTtcbiAgICB1dGlscy5vYnNlcnZhYmxlKGxvYWRlcik7XG5cbiAgICByZXR1cm4gbG9hZGVyO1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSAgdXRpbHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3V0aWwvdXRpbC5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcblN0cmluZy5wcm90b3R5cGUuZm9ybWF0ICA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBhcmd1bWVudHNbMF1cbiAgICAgICwgYXJncyA9IHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykgOiBhcmd1bWVudHNbMF1cbiAgICAvL1xuICAgIC8vIGZvciAodmFyIGFyZyBpbiBhcmdzKSBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxceycgKyBhcmcgKyAnXFxcXH0nLCAnZ2knKSwgYXJnc1thcmddKVxuXG4gICAgc3RyID0gc3RyLnJlcGxhY2UoL1xceyhbXn1dKilcXH0vZyxmdW5jdGlvbihhLGIpe1xuICAgICAgcmV0dXJuIHV0aWxzLmV2YWxJbkNvbnRleHQoYixhcmdzKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gc3RyXG59O1xuXG51dGlscyA9IHtcbiAgZXh0cmFjdFZhcmlhYmxlczogZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIubWF0Y2goLyg/ISg/OmRvfGlmfGlufGZvcnxsZXR8bmV3fHRyeXx2YXJ8Y2FzZXxlbHNlfGVudW18ZXZhbHxmYWxzZXxudWxsfHRoaXN8dHJ1ZXx2b2lkfHdpdGh8YnJlYWt8Y2F0Y2h8Y2xhc3N8Y29uc3R8c3VwZXJ8dGhyb3d8d2hpbGV8eWllbGR8ZGVsZXRlfGV4cG9ydHxpbXBvcnR8cHVibGljfHJldHVybnxzdGF0aWN8c3dpdGNofHR5cGVvZnxkZWZhdWx0fGV4dGVuZHN8ZmluYWxseXxwYWNrYWdlfHByaXZhdGV8Y29udGludWV8ZGVidWdnZXJ8ZnVuY3Rpb258YXJndW1lbnRzfGludGVyZmFjZXxwcm90ZWN0ZWR8aW1wbGVtZW50c3xpbnN0YW5jZW9mKSQpWyRBLVpcXF9hLXpcXHhhYVxceGI1XFx4YmFcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDJjMVxcdTAyYzYtXFx1MDJkMVxcdTAyZTAtXFx1MDJlNFxcdTAyZWNcXHUwMmVlXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdhLVxcdTAzN2RcXHUwMzg2XFx1MDM4OC1cXHUwMzhhXFx1MDM4Y1xcdTAzOGUtXFx1MDNhMVxcdTAzYTMtXFx1MDNmNVxcdTAzZjctXFx1MDQ4MVxcdTA0OGEtXFx1MDUyN1xcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNWQwLVxcdTA1ZWFcXHUwNWYwLVxcdTA1ZjJcXHUwNjIwLVxcdTA2NGFcXHUwNjZlXFx1MDY2ZlxcdTA2NzEtXFx1MDZkM1xcdTA2ZDVcXHUwNmU1XFx1MDZlNlxcdTA2ZWVcXHUwNmVmXFx1MDZmYS1cXHUwNmZjXFx1MDZmZlxcdTA3MTBcXHUwNzEyLVxcdTA3MmZcXHUwNzRkLVxcdTA3YTVcXHUwN2IxXFx1MDdjYS1cXHUwN2VhXFx1MDdmNFxcdTA3ZjVcXHUwN2ZhXFx1MDgwMC1cXHUwODE1XFx1MDgxYVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhhMFxcdTA4YTItXFx1MDhhY1xcdTA5MDQtXFx1MDkzOVxcdTA5M2RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTc3XFx1MDk3OS1cXHUwOTdmXFx1MDk4NS1cXHUwOThjXFx1MDk4ZlxcdTA5OTBcXHUwOTkzLVxcdTA5YThcXHUwOWFhLVxcdTA5YjBcXHUwOWIyXFx1MDliNi1cXHUwOWI5XFx1MDliZFxcdTA5Y2VcXHUwOWRjXFx1MDlkZFxcdTA5ZGYtXFx1MDllMVxcdTA5ZjBcXHUwOWYxXFx1MGEwNS1cXHUwYTBhXFx1MGEwZlxcdTBhMTBcXHUwYTEzLVxcdTBhMjhcXHUwYTJhLVxcdTBhMzBcXHUwYTMyXFx1MGEzM1xcdTBhMzVcXHUwYTM2XFx1MGEzOFxcdTBhMzlcXHUwYTU5LVxcdTBhNWNcXHUwYTVlXFx1MGE3Mi1cXHUwYTc0XFx1MGE4NS1cXHUwYThkXFx1MGE4Zi1cXHUwYTkxXFx1MGE5My1cXHUwYWE4XFx1MGFhYS1cXHUwYWIwXFx1MGFiMlxcdTBhYjNcXHUwYWI1LVxcdTBhYjlcXHUwYWJkXFx1MGFkMFxcdTBhZTBcXHUwYWUxXFx1MGIwNS1cXHUwYjBjXFx1MGIwZlxcdTBiMTBcXHUwYjEzLVxcdTBiMjhcXHUwYjJhLVxcdTBiMzBcXHUwYjMyXFx1MGIzM1xcdTBiMzUtXFx1MGIzOVxcdTBiM2RcXHUwYjVjXFx1MGI1ZFxcdTBiNWYtXFx1MGI2MVxcdTBiNzFcXHUwYjgzXFx1MGI4NS1cXHUwYjhhXFx1MGI4ZS1cXHUwYjkwXFx1MGI5Mi1cXHUwYjk1XFx1MGI5OVxcdTBiOWFcXHUwYjljXFx1MGI5ZVxcdTBiOWZcXHUwYmEzXFx1MGJhNFxcdTBiYTgtXFx1MGJhYVxcdTBiYWUtXFx1MGJiOVxcdTBiZDBcXHUwYzA1LVxcdTBjMGNcXHUwYzBlLVxcdTBjMTBcXHUwYzEyLVxcdTBjMjhcXHUwYzJhLVxcdTBjMzNcXHUwYzM1LVxcdTBjMzlcXHUwYzNkXFx1MGM1OFxcdTBjNTlcXHUwYzYwXFx1MGM2MVxcdTBjODUtXFx1MGM4Y1xcdTBjOGUtXFx1MGM5MFxcdTBjOTItXFx1MGNhOFxcdTBjYWEtXFx1MGNiM1xcdTBjYjUtXFx1MGNiOVxcdTBjYmRcXHUwY2RlXFx1MGNlMFxcdTBjZTFcXHUwY2YxXFx1MGNmMlxcdTBkMDUtXFx1MGQwY1xcdTBkMGUtXFx1MGQxMFxcdTBkMTItXFx1MGQzYVxcdTBkM2RcXHUwZDRlXFx1MGQ2MFxcdTBkNjFcXHUwZDdhLVxcdTBkN2ZcXHUwZDg1LVxcdTBkOTZcXHUwZDlhLVxcdTBkYjFcXHUwZGIzLVxcdTBkYmJcXHUwZGJkXFx1MGRjMC1cXHUwZGM2XFx1MGUwMS1cXHUwZTMwXFx1MGUzMlxcdTBlMzNcXHUwZTQwLVxcdTBlNDZcXHUwZTgxXFx1MGU4MlxcdTBlODRcXHUwZTg3XFx1MGU4OFxcdTBlOGFcXHUwZThkXFx1MGU5NC1cXHUwZTk3XFx1MGU5OS1cXHUwZTlmXFx1MGVhMS1cXHUwZWEzXFx1MGVhNVxcdTBlYTdcXHUwZWFhXFx1MGVhYlxcdTBlYWQtXFx1MGViMFxcdTBlYjJcXHUwZWIzXFx1MGViZFxcdTBlYzAtXFx1MGVjNFxcdTBlYzZcXHUwZWRjLVxcdTBlZGZcXHUwZjAwXFx1MGY0MC1cXHUwZjQ3XFx1MGY0OS1cXHUwZjZjXFx1MGY4OC1cXHUwZjhjXFx1MTAwMC1cXHUxMDJhXFx1MTAzZlxcdTEwNTAtXFx1MTA1NVxcdTEwNWEtXFx1MTA1ZFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNmUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOGVcXHUxMGEwLVxcdTEwYzVcXHUxMGM3XFx1MTBjZFxcdTEwZDAtXFx1MTBmYVxcdTEwZmMtXFx1MTI0OFxcdTEyNGEtXFx1MTI0ZFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVhLVxcdTEyNWRcXHUxMjYwLVxcdTEyODhcXHUxMjhhLVxcdTEyOGRcXHUxMjkwLVxcdTEyYjBcXHUxMmIyLVxcdTEyYjVcXHUxMmI4LVxcdTEyYmVcXHUxMmMwXFx1MTJjMi1cXHUxMmM1XFx1MTJjOC1cXHUxMmQ2XFx1MTJkOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVhXFx1MTM4MC1cXHUxMzhmXFx1MTNhMC1cXHUxM2Y0XFx1MTQwMS1cXHUxNjZjXFx1MTY2Zi1cXHUxNjdmXFx1MTY4MS1cXHUxNjlhXFx1MTZhMC1cXHUxNmVhXFx1MTZlZS1cXHUxNmYwXFx1MTcwMC1cXHUxNzBjXFx1MTcwZS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZjXFx1MTc2ZS1cXHUxNzcwXFx1MTc4MC1cXHUxN2IzXFx1MTdkN1xcdTE3ZGNcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4YThcXHUxOGFhXFx1MThiMC1cXHUxOGY1XFx1MTkwMC1cXHUxOTFjXFx1MTk1MC1cXHUxOTZkXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOWFiXFx1MTljMS1cXHUxOWM3XFx1MWEwMC1cXHUxYTE2XFx1MWEyMC1cXHUxYTU0XFx1MWFhN1xcdTFiMDUtXFx1MWIzM1xcdTFiNDUtXFx1MWI0YlxcdTFiODMtXFx1MWJhMFxcdTFiYWVcXHUxYmFmXFx1MWJiYS1cXHUxYmU1XFx1MWMwMC1cXHUxYzIzXFx1MWM0ZC1cXHUxYzRmXFx1MWM1YS1cXHUxYzdkXFx1MWNlOS1cXHUxY2VjXFx1MWNlZS1cXHUxY2YxXFx1MWNmNVxcdTFjZjZcXHUxZDAwLVxcdTFkYmZcXHUxZTAwLVxcdTFmMTVcXHUxZjE4LVxcdTFmMWRcXHUxZjIwLVxcdTFmNDVcXHUxZjQ4LVxcdTFmNGRcXHUxZjUwLVxcdTFmNTdcXHUxZjU5XFx1MWY1YlxcdTFmNWRcXHUxZjVmLVxcdTFmN2RcXHUxZjgwLVxcdTFmYjRcXHUxZmI2LVxcdTFmYmNcXHUxZmJlXFx1MWZjMi1cXHUxZmM0XFx1MWZjNi1cXHUxZmNjXFx1MWZkMC1cXHUxZmQzXFx1MWZkNi1cXHUxZmRiXFx1MWZlMC1cXHUxZmVjXFx1MWZmMi1cXHUxZmY0XFx1MWZmNi1cXHUxZmZjXFx1MjA3MVxcdTIwN2ZcXHUyMDkwLVxcdTIwOWNcXHUyMTAyXFx1MjEwN1xcdTIxMGEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMWRcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJhLVxcdTIxMmRcXHUyMTJmLVxcdTIxMzlcXHUyMTNjLVxcdTIxM2ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRlXFx1MjE2MC1cXHUyMTg4XFx1MmMwMC1cXHUyYzJlXFx1MmMzMC1cXHUyYzVlXFx1MmM2MC1cXHUyY2U0XFx1MmNlYi1cXHUyY2VlXFx1MmNmMlxcdTJjZjNcXHUyZDAwLVxcdTJkMjVcXHUyZDI3XFx1MmQyZFxcdTJkMzAtXFx1MmQ2N1xcdTJkNmZcXHUyZDgwLVxcdTJkOTZcXHUyZGEwLVxcdTJkYTZcXHUyZGE4LVxcdTJkYWVcXHUyZGIwLVxcdTJkYjZcXHUyZGI4LVxcdTJkYmVcXHUyZGMwLVxcdTJkYzZcXHUyZGM4LVxcdTJkY2VcXHUyZGQwLVxcdTJkZDZcXHUyZGQ4LVxcdTJkZGVcXHUyZTJmXFx1MzAwNS1cXHUzMDA3XFx1MzAyMS1cXHUzMDI5XFx1MzAzMS1cXHUzMDM1XFx1MzAzOC1cXHUzMDNjXFx1MzA0MS1cXHUzMDk2XFx1MzA5ZC1cXHUzMDlmXFx1MzBhMS1cXHUzMGZhXFx1MzBmYy1cXHUzMGZmXFx1MzEwNS1cXHUzMTJkXFx1MzEzMS1cXHUzMThlXFx1MzFhMC1cXHUzMWJhXFx1MzFmMC1cXHUzMWZmXFx1MzQwMC1cXHU0ZGI1XFx1NGUwMC1cXHU5ZmNjXFx1YTAwMC1cXHVhNDhjXFx1YTRkMC1cXHVhNGZkXFx1YTUwMC1cXHVhNjBjXFx1YTYxMC1cXHVhNjFmXFx1YTYyYVxcdWE2MmJcXHVhNjQwLVxcdWE2NmVcXHVhNjdmLVxcdWE2OTdcXHVhNmEwLVxcdWE2ZWZcXHVhNzE3LVxcdWE3MWZcXHVhNzIyLVxcdWE3ODhcXHVhNzhiLVxcdWE3OGVcXHVhNzkwLVxcdWE3OTNcXHVhN2EwLVxcdWE3YWFcXHVhN2Y4LVxcdWE4MDFcXHVhODAzLVxcdWE4MDVcXHVhODA3LVxcdWE4MGFcXHVhODBjLVxcdWE4MjJcXHVhODQwLVxcdWE4NzNcXHVhODgyLVxcdWE4YjNcXHVhOGYyLVxcdWE4ZjdcXHVhOGZiXFx1YTkwYS1cXHVhOTI1XFx1YTkzMC1cXHVhOTQ2XFx1YTk2MC1cXHVhOTdjXFx1YTk4NC1cXHVhOWIyXFx1YTljZlxcdWFhMDAtXFx1YWEyOFxcdWFhNDAtXFx1YWE0MlxcdWFhNDQtXFx1YWE0YlxcdWFhNjAtXFx1YWE3NlxcdWFhN2FcXHVhYTgwLVxcdWFhYWZcXHVhYWIxXFx1YWFiNVxcdWFhYjZcXHVhYWI5LVxcdWFhYmRcXHVhYWMwXFx1YWFjMlxcdWFhZGItXFx1YWFkZFxcdWFhZTAtXFx1YWFlYVxcdWFhZjItXFx1YWFmNFxcdWFiMDEtXFx1YWIwNlxcdWFiMDktXFx1YWIwZVxcdWFiMTEtXFx1YWIxNlxcdWFiMjAtXFx1YWIyNlxcdWFiMjgtXFx1YWIyZVxcdWFiYzAtXFx1YWJlMlxcdWFjMDAtXFx1ZDdhM1xcdWQ3YjAtXFx1ZDdjNlxcdWQ3Y2ItXFx1ZDdmYlxcdWY5MDAtXFx1ZmE2ZFxcdWZhNzAtXFx1ZmFkOVxcdWZiMDAtXFx1ZmIwNlxcdWZiMTMtXFx1ZmIxN1xcdWZiMWRcXHVmYjFmLVxcdWZiMjhcXHVmYjJhLVxcdWZiMzZcXHVmYjM4LVxcdWZiM2NcXHVmYjNlXFx1ZmI0MFxcdWZiNDFcXHVmYjQzXFx1ZmI0NFxcdWZiNDYtXFx1ZmJiMVxcdWZiZDMtXFx1ZmQzZFxcdWZkNTAtXFx1ZmQ4ZlxcdWZkOTItXFx1ZmRjN1xcdWZkZjAtXFx1ZmRmYlxcdWZlNzAtXFx1ZmU3NFxcdWZlNzYtXFx1ZmVmY1xcdWZmMjEtXFx1ZmYzYVxcdWZmNDEtXFx1ZmY1YVxcdWZmNjYtXFx1ZmZiZVxcdWZmYzItXFx1ZmZjN1xcdWZmY2EtXFx1ZmZjZlxcdWZmZDItXFx1ZmZkN1xcdWZmZGEtXFx1ZmZkY11bJEEtWlxcX2EtelxceGFhXFx4YjVcXHhiYVxceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHUwMmMxXFx1MDJjNi1cXHUwMmQxXFx1MDJlMC1cXHUwMmU0XFx1MDJlY1xcdTAyZWVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN2EtXFx1MDM3ZFxcdTAzODZcXHUwMzg4LVxcdTAzOGFcXHUwMzhjXFx1MDM4ZS1cXHUwM2ExXFx1MDNhMy1cXHUwM2Y1XFx1MDNmNy1cXHUwNDgxXFx1MDQ4YS1cXHUwNTI3XFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1ZDAtXFx1MDVlYVxcdTA1ZjAtXFx1MDVmMlxcdTA2MjAtXFx1MDY0YVxcdTA2NmVcXHUwNjZmXFx1MDY3MS1cXHUwNmQzXFx1MDZkNVxcdTA2ZTVcXHUwNmU2XFx1MDZlZVxcdTA2ZWZcXHUwNmZhLVxcdTA2ZmNcXHUwNmZmXFx1MDcxMFxcdTA3MTItXFx1MDcyZlxcdTA3NGQtXFx1MDdhNVxcdTA3YjFcXHUwN2NhLVxcdTA3ZWFcXHUwN2Y0XFx1MDdmNVxcdTA3ZmFcXHUwODAwLVxcdTA4MTVcXHUwODFhXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwOGEwXFx1MDhhMi1cXHUwOGFjXFx1MDkwNC1cXHUwOTM5XFx1MDkzZFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5NzdcXHUwOTc5LVxcdTA5N2ZcXHUwOTg1LVxcdTA5OGNcXHUwOThmXFx1MDk5MFxcdTA5OTMtXFx1MDlhOFxcdTA5YWEtXFx1MDliMFxcdTA5YjJcXHUwOWI2LVxcdTA5YjlcXHUwOWJkXFx1MDljZVxcdTA5ZGNcXHUwOWRkXFx1MDlkZi1cXHUwOWUxXFx1MDlmMFxcdTA5ZjFcXHUwYTA1LVxcdTBhMGFcXHUwYTBmXFx1MGExMFxcdTBhMTMtXFx1MGEyOFxcdTBhMmEtXFx1MGEzMFxcdTBhMzJcXHUwYTMzXFx1MGEzNVxcdTBhMzZcXHUwYTM4XFx1MGEzOVxcdTBhNTktXFx1MGE1Y1xcdTBhNWVcXHUwYTcyLVxcdTBhNzRcXHUwYTg1LVxcdTBhOGRcXHUwYThmLVxcdTBhOTFcXHUwYTkzLVxcdTBhYThcXHUwYWFhLVxcdTBhYjBcXHUwYWIyXFx1MGFiM1xcdTBhYjUtXFx1MGFiOVxcdTBhYmRcXHUwYWQwXFx1MGFlMFxcdTBhZTFcXHUwYjA1LVxcdTBiMGNcXHUwYjBmXFx1MGIxMFxcdTBiMTMtXFx1MGIyOFxcdTBiMmEtXFx1MGIzMFxcdTBiMzJcXHUwYjMzXFx1MGIzNS1cXHUwYjM5XFx1MGIzZFxcdTBiNWNcXHUwYjVkXFx1MGI1Zi1cXHUwYjYxXFx1MGI3MVxcdTBiODNcXHUwYjg1LVxcdTBiOGFcXHUwYjhlLVxcdTBiOTBcXHUwYjkyLVxcdTBiOTVcXHUwYjk5XFx1MGI5YVxcdTBiOWNcXHUwYjllXFx1MGI5ZlxcdTBiYTNcXHUwYmE0XFx1MGJhOC1cXHUwYmFhXFx1MGJhZS1cXHUwYmI5XFx1MGJkMFxcdTBjMDUtXFx1MGMwY1xcdTBjMGUtXFx1MGMxMFxcdTBjMTItXFx1MGMyOFxcdTBjMmEtXFx1MGMzM1xcdTBjMzUtXFx1MGMzOVxcdTBjM2RcXHUwYzU4XFx1MGM1OVxcdTBjNjBcXHUwYzYxXFx1MGM4NS1cXHUwYzhjXFx1MGM4ZS1cXHUwYzkwXFx1MGM5Mi1cXHUwY2E4XFx1MGNhYS1cXHUwY2IzXFx1MGNiNS1cXHUwY2I5XFx1MGNiZFxcdTBjZGVcXHUwY2UwXFx1MGNlMVxcdTBjZjFcXHUwY2YyXFx1MGQwNS1cXHUwZDBjXFx1MGQwZS1cXHUwZDEwXFx1MGQxMi1cXHUwZDNhXFx1MGQzZFxcdTBkNGVcXHUwZDYwXFx1MGQ2MVxcdTBkN2EtXFx1MGQ3ZlxcdTBkODUtXFx1MGQ5NlxcdTBkOWEtXFx1MGRiMVxcdTBkYjMtXFx1MGRiYlxcdTBkYmRcXHUwZGMwLVxcdTBkYzZcXHUwZTAxLVxcdTBlMzBcXHUwZTMyXFx1MGUzM1xcdTBlNDAtXFx1MGU0NlxcdTBlODFcXHUwZTgyXFx1MGU4NFxcdTBlODdcXHUwZTg4XFx1MGU4YVxcdTBlOGRcXHUwZTk0LVxcdTBlOTdcXHUwZTk5LVxcdTBlOWZcXHUwZWExLVxcdTBlYTNcXHUwZWE1XFx1MGVhN1xcdTBlYWFcXHUwZWFiXFx1MGVhZC1cXHUwZWIwXFx1MGViMlxcdTBlYjNcXHUwZWJkXFx1MGVjMC1cXHUwZWM0XFx1MGVjNlxcdTBlZGMtXFx1MGVkZlxcdTBmMDBcXHUwZjQwLVxcdTBmNDdcXHUwZjQ5LVxcdTBmNmNcXHUwZjg4LVxcdTBmOGNcXHUxMDAwLVxcdTEwMmFcXHUxMDNmXFx1MTA1MC1cXHUxMDU1XFx1MTA1YS1cXHUxMDVkXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2ZS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4ZVxcdTEwYTAtXFx1MTBjNVxcdTEwYzdcXHUxMGNkXFx1MTBkMC1cXHUxMGZhXFx1MTBmYy1cXHUxMjQ4XFx1MTI0YS1cXHUxMjRkXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNWEtXFx1MTI1ZFxcdTEyNjAtXFx1MTI4OFxcdTEyOGEtXFx1MTI4ZFxcdTEyOTAtXFx1MTJiMFxcdTEyYjItXFx1MTJiNVxcdTEyYjgtXFx1MTJiZVxcdTEyYzBcXHUxMmMyLVxcdTEyYzVcXHUxMmM4LVxcdTEyZDZcXHUxMmQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNWFcXHUxMzgwLVxcdTEzOGZcXHUxM2EwLVxcdTEzZjRcXHUxNDAxLVxcdTE2NmNcXHUxNjZmLVxcdTE2N2ZcXHUxNjgxLVxcdTE2OWFcXHUxNmEwLVxcdTE2ZWFcXHUxNmVlLVxcdTE2ZjBcXHUxNzAwLVxcdTE3MGNcXHUxNzBlLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NmNcXHUxNzZlLVxcdTE3NzBcXHUxNzgwLVxcdTE3YjNcXHUxN2Q3XFx1MTdkY1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThhOFxcdTE4YWFcXHUxOGIwLVxcdTE4ZjVcXHUxOTAwLVxcdTE5MWNcXHUxOTUwLVxcdTE5NmRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5YWJcXHUxOWMxLVxcdTE5YzdcXHUxYTAwLVxcdTFhMTZcXHUxYTIwLVxcdTFhNTRcXHUxYWE3XFx1MWIwNS1cXHUxYjMzXFx1MWI0NS1cXHUxYjRiXFx1MWI4My1cXHUxYmEwXFx1MWJhZVxcdTFiYWZcXHUxYmJhLVxcdTFiZTVcXHUxYzAwLVxcdTFjMjNcXHUxYzRkLVxcdTFjNGZcXHUxYzVhLVxcdTFjN2RcXHUxY2U5LVxcdTFjZWNcXHUxY2VlLVxcdTFjZjFcXHUxY2Y1XFx1MWNmNlxcdTFkMDAtXFx1MWRiZlxcdTFlMDAtXFx1MWYxNVxcdTFmMTgtXFx1MWYxZFxcdTFmMjAtXFx1MWY0NVxcdTFmNDgtXFx1MWY0ZFxcdTFmNTAtXFx1MWY1N1xcdTFmNTlcXHUxZjViXFx1MWY1ZFxcdTFmNWYtXFx1MWY3ZFxcdTFmODAtXFx1MWZiNFxcdTFmYjYtXFx1MWZiY1xcdTFmYmVcXHUxZmMyLVxcdTFmYzRcXHUxZmM2LVxcdTFmY2NcXHUxZmQwLVxcdTFmZDNcXHUxZmQ2LVxcdTFmZGJcXHUxZmUwLVxcdTFmZWNcXHUxZmYyLVxcdTFmZjRcXHUxZmY2LVxcdTFmZmNcXHUyMDcxXFx1MjA3ZlxcdTIwOTAtXFx1MjA5Y1xcdTIxMDJcXHUyMTA3XFx1MjEwYS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExZFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMmEtXFx1MjEyZFxcdTIxMmYtXFx1MjEzOVxcdTIxM2MtXFx1MjEzZlxcdTIxNDUtXFx1MjE0OVxcdTIxNGVcXHUyMTYwLVxcdTIxODhcXHUyYzAwLVxcdTJjMmVcXHUyYzMwLVxcdTJjNWVcXHUyYzYwLVxcdTJjZTRcXHUyY2ViLVxcdTJjZWVcXHUyY2YyXFx1MmNmM1xcdTJkMDAtXFx1MmQyNVxcdTJkMjdcXHUyZDJkXFx1MmQzMC1cXHUyZDY3XFx1MmQ2ZlxcdTJkODAtXFx1MmQ5NlxcdTJkYTAtXFx1MmRhNlxcdTJkYTgtXFx1MmRhZVxcdTJkYjAtXFx1MmRiNlxcdTJkYjgtXFx1MmRiZVxcdTJkYzAtXFx1MmRjNlxcdTJkYzgtXFx1MmRjZVxcdTJkZDAtXFx1MmRkNlxcdTJkZDgtXFx1MmRkZVxcdTJlMmZcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM2NcXHUzMDQxLVxcdTMwOTZcXHUzMDlkLVxcdTMwOWZcXHUzMGExLVxcdTMwZmFcXHUzMGZjLVxcdTMwZmZcXHUzMTA1LVxcdTMxMmRcXHUzMTMxLVxcdTMxOGVcXHUzMWEwLVxcdTMxYmFcXHUzMWYwLVxcdTMxZmZcXHUzNDAwLVxcdTRkYjVcXHU0ZTAwLVxcdTlmY2NcXHVhMDAwLVxcdWE0OGNcXHVhNGQwLVxcdWE0ZmRcXHVhNTAwLVxcdWE2MGNcXHVhNjEwLVxcdWE2MWZcXHVhNjJhXFx1YTYyYlxcdWE2NDAtXFx1YTY2ZVxcdWE2N2YtXFx1YTY5N1xcdWE2YTAtXFx1YTZlZlxcdWE3MTctXFx1YTcxZlxcdWE3MjItXFx1YTc4OFxcdWE3OGItXFx1YTc4ZVxcdWE3OTAtXFx1YTc5M1xcdWE3YTAtXFx1YTdhYVxcdWE3ZjgtXFx1YTgwMVxcdWE4MDMtXFx1YTgwNVxcdWE4MDctXFx1YTgwYVxcdWE4MGMtXFx1YTgyMlxcdWE4NDAtXFx1YTg3M1xcdWE4ODItXFx1YThiM1xcdWE4ZjItXFx1YThmN1xcdWE4ZmJcXHVhOTBhLVxcdWE5MjVcXHVhOTMwLVxcdWE5NDZcXHVhOTYwLVxcdWE5N2NcXHVhOTg0LVxcdWE5YjJcXHVhOWNmXFx1YWEwMC1cXHVhYTI4XFx1YWE0MC1cXHVhYTQyXFx1YWE0NC1cXHVhYTRiXFx1YWE2MC1cXHVhYTc2XFx1YWE3YVxcdWFhODAtXFx1YWFhZlxcdWFhYjFcXHVhYWI1XFx1YWFiNlxcdWFhYjktXFx1YWFiZFxcdWFhYzBcXHVhYWMyXFx1YWFkYi1cXHVhYWRkXFx1YWFlMC1cXHVhYWVhXFx1YWFmMi1cXHVhYWY0XFx1YWIwMS1cXHVhYjA2XFx1YWIwOS1cXHVhYjBlXFx1YWIxMS1cXHVhYjE2XFx1YWIyMC1cXHVhYjI2XFx1YWIyOC1cXHVhYjJlXFx1YWJjMC1cXHVhYmUyXFx1YWMwMC1cXHVkN2EzXFx1ZDdiMC1cXHVkN2M2XFx1ZDdjYi1cXHVkN2ZiXFx1ZjkwMC1cXHVmYTZkXFx1ZmE3MC1cXHVmYWQ5XFx1ZmIwMC1cXHVmYjA2XFx1ZmIxMy1cXHVmYjE3XFx1ZmIxZFxcdWZiMWYtXFx1ZmIyOFxcdWZiMmEtXFx1ZmIzNlxcdWZiMzgtXFx1ZmIzY1xcdWZiM2VcXHVmYjQwXFx1ZmI0MVxcdWZiNDNcXHVmYjQ0XFx1ZmI0Ni1cXHVmYmIxXFx1ZmJkMy1cXHVmZDNkXFx1ZmQ1MC1cXHVmZDhmXFx1ZmQ5Mi1cXHVmZGM3XFx1ZmRmMC1cXHVmZGZiXFx1ZmU3MC1cXHVmZTc0XFx1ZmU3Ni1cXHVmZWZjXFx1ZmYyMS1cXHVmZjNhXFx1ZmY0MS1cXHVmZjVhXFx1ZmY2Ni1cXHVmZmJlXFx1ZmZjMi1cXHVmZmM3XFx1ZmZjYS1cXHVmZmNmXFx1ZmZkMi1cXHVmZmQ3XFx1ZmZkYS1cXHVmZmRjMC05XFx1MDMwMC1cXHUwMzZmXFx1MDQ4My1cXHUwNDg3XFx1MDU5MS1cXHUwNWJkXFx1MDViZlxcdTA1YzFcXHUwNWMyXFx1MDVjNFxcdTA1YzVcXHUwNWM3XFx1MDYxMC1cXHUwNjFhXFx1MDY0Yi1cXHUwNjY5XFx1MDY3MFxcdTA2ZDYtXFx1MDZkY1xcdTA2ZGYtXFx1MDZlNFxcdTA2ZTdcXHUwNmU4XFx1MDZlYS1cXHUwNmVkXFx1MDZmMC1cXHUwNmY5XFx1MDcxMVxcdTA3MzAtXFx1MDc0YVxcdTA3YTYtXFx1MDdiMFxcdTA3YzAtXFx1MDdjOVxcdTA3ZWItXFx1MDdmM1xcdTA4MTYtXFx1MDgxOVxcdTA4MWItXFx1MDgyM1xcdTA4MjUtXFx1MDgyN1xcdTA4MjktXFx1MDgyZFxcdTA4NTktXFx1MDg1YlxcdTA4ZTQtXFx1MDhmZVxcdTA5MDAtXFx1MDkwM1xcdTA5M2EtXFx1MDkzY1xcdTA5M2UtXFx1MDk0ZlxcdTA5NTEtXFx1MDk1N1xcdTA5NjJcXHUwOTYzXFx1MDk2Ni1cXHUwOTZmXFx1MDk4MS1cXHUwOTgzXFx1MDliY1xcdTA5YmUtXFx1MDljNFxcdTA5YzdcXHUwOWM4XFx1MDljYi1cXHUwOWNkXFx1MDlkN1xcdTA5ZTJcXHUwOWUzXFx1MDllNi1cXHUwOWVmXFx1MGEwMS1cXHUwYTAzXFx1MGEzY1xcdTBhM2UtXFx1MGE0MlxcdTBhNDdcXHUwYTQ4XFx1MGE0Yi1cXHUwYTRkXFx1MGE1MVxcdTBhNjYtXFx1MGE3MVxcdTBhNzVcXHUwYTgxLVxcdTBhODNcXHUwYWJjXFx1MGFiZS1cXHUwYWM1XFx1MGFjNy1cXHUwYWM5XFx1MGFjYi1cXHUwYWNkXFx1MGFlMlxcdTBhZTNcXHUwYWU2LVxcdTBhZWZcXHUwYjAxLVxcdTBiMDNcXHUwYjNjXFx1MGIzZS1cXHUwYjQ0XFx1MGI0N1xcdTBiNDhcXHUwYjRiLVxcdTBiNGRcXHUwYjU2XFx1MGI1N1xcdTBiNjJcXHUwYjYzXFx1MGI2Ni1cXHUwYjZmXFx1MGI4MlxcdTBiYmUtXFx1MGJjMlxcdTBiYzYtXFx1MGJjOFxcdTBiY2EtXFx1MGJjZFxcdTBiZDdcXHUwYmU2LVxcdTBiZWZcXHUwYzAxLVxcdTBjMDNcXHUwYzNlLVxcdTBjNDRcXHUwYzQ2LVxcdTBjNDhcXHUwYzRhLVxcdTBjNGRcXHUwYzU1XFx1MGM1NlxcdTBjNjJcXHUwYzYzXFx1MGM2Ni1cXHUwYzZmXFx1MGM4MlxcdTBjODNcXHUwY2JjXFx1MGNiZS1cXHUwY2M0XFx1MGNjNi1cXHUwY2M4XFx1MGNjYS1cXHUwY2NkXFx1MGNkNVxcdTBjZDZcXHUwY2UyXFx1MGNlM1xcdTBjZTYtXFx1MGNlZlxcdTBkMDJcXHUwZDAzXFx1MGQzZS1cXHUwZDQ0XFx1MGQ0Ni1cXHUwZDQ4XFx1MGQ0YS1cXHUwZDRkXFx1MGQ1N1xcdTBkNjJcXHUwZDYzXFx1MGQ2Ni1cXHUwZDZmXFx1MGQ4MlxcdTBkODNcXHUwZGNhXFx1MGRjZi1cXHUwZGQ0XFx1MGRkNlxcdTBkZDgtXFx1MGRkZlxcdTBkZjJcXHUwZGYzXFx1MGUzMVxcdTBlMzQtXFx1MGUzYVxcdTBlNDctXFx1MGU0ZVxcdTBlNTAtXFx1MGU1OVxcdTBlYjFcXHUwZWI0LVxcdTBlYjlcXHUwZWJiXFx1MGViY1xcdTBlYzgtXFx1MGVjZFxcdTBlZDAtXFx1MGVkOVxcdTBmMThcXHUwZjE5XFx1MGYyMC1cXHUwZjI5XFx1MGYzNVxcdTBmMzdcXHUwZjM5XFx1MGYzZVxcdTBmM2ZcXHUwZjcxLVxcdTBmODRcXHUwZjg2XFx1MGY4N1xcdTBmOGQtXFx1MGY5N1xcdTBmOTktXFx1MGZiY1xcdTBmYzZcXHUxMDJiLVxcdTEwM2VcXHUxMDQwLVxcdTEwNDlcXHUxMDU2LVxcdTEwNTlcXHUxMDVlLVxcdTEwNjBcXHUxMDYyLVxcdTEwNjRcXHUxMDY3LVxcdTEwNmRcXHUxMDcxLVxcdTEwNzRcXHUxMDgyLVxcdTEwOGRcXHUxMDhmLVxcdTEwOWRcXHUxMzVkLVxcdTEzNWZcXHUxNzEyLVxcdTE3MTRcXHUxNzMyLVxcdTE3MzRcXHUxNzUyXFx1MTc1M1xcdTE3NzJcXHUxNzczXFx1MTdiNC1cXHUxN2QzXFx1MTdkZFxcdTE3ZTAtXFx1MTdlOVxcdTE4MGItXFx1MTgwZFxcdTE4MTAtXFx1MTgxOVxcdTE4YTlcXHUxOTIwLVxcdTE5MmJcXHUxOTMwLVxcdTE5M2JcXHUxOTQ2LVxcdTE5NGZcXHUxOWIwLVxcdTE5YzBcXHUxOWM4XFx1MTljOVxcdTE5ZDAtXFx1MTlkOVxcdTFhMTctXFx1MWExYlxcdTFhNTUtXFx1MWE1ZVxcdTFhNjAtXFx1MWE3Y1xcdTFhN2YtXFx1MWE4OVxcdTFhOTAtXFx1MWE5OVxcdTFiMDAtXFx1MWIwNFxcdTFiMzQtXFx1MWI0NFxcdTFiNTAtXFx1MWI1OVxcdTFiNmItXFx1MWI3M1xcdTFiODAtXFx1MWI4MlxcdTFiYTEtXFx1MWJhZFxcdTFiYjAtXFx1MWJiOVxcdTFiZTYtXFx1MWJmM1xcdTFjMjQtXFx1MWMzN1xcdTFjNDAtXFx1MWM0OVxcdTFjNTAtXFx1MWM1OVxcdTFjZDAtXFx1MWNkMlxcdTFjZDQtXFx1MWNlOFxcdTFjZWRcXHUxY2YyLVxcdTFjZjRcXHUxZGMwLVxcdTFkZTZcXHUxZGZjLVxcdTFkZmZcXHUyMDBjXFx1MjAwZFxcdTIwM2ZcXHUyMDQwXFx1MjA1NFxcdTIwZDAtXFx1MjBkY1xcdTIwZTFcXHUyMGU1LVxcdTIwZjBcXHUyY2VmLVxcdTJjZjFcXHUyZDdmXFx1MmRlMC1cXHUyZGZmXFx1MzAyYS1cXHUzMDJmXFx1MzA5OVxcdTMwOWFcXHVhNjIwLVxcdWE2MjlcXHVhNjZmXFx1YTY3NC1cXHVhNjdkXFx1YTY5ZlxcdWE2ZjBcXHVhNmYxXFx1YTgwMlxcdWE4MDZcXHVhODBiXFx1YTgyMy1cXHVhODI3XFx1YTg4MFxcdWE4ODFcXHVhOGI0LVxcdWE4YzRcXHVhOGQwLVxcdWE4ZDlcXHVhOGUwLVxcdWE4ZjFcXHVhOTAwLVxcdWE5MDlcXHVhOTI2LVxcdWE5MmRcXHVhOTQ3LVxcdWE5NTNcXHVhOTgwLVxcdWE5ODNcXHVhOWIzLVxcdWE5YzBcXHVhOWQwLVxcdWE5ZDlcXHVhYTI5LVxcdWFhMzZcXHVhYTQzXFx1YWE0Y1xcdWFhNGRcXHVhYTUwLVxcdWFhNTlcXHVhYTdiXFx1YWFiMFxcdWFhYjItXFx1YWFiNFxcdWFhYjdcXHVhYWI4XFx1YWFiZVxcdWFhYmZcXHVhYWMxXFx1YWFlYi1cXHVhYWVmXFx1YWFmNVxcdWFhZjZcXHVhYmUzLVxcdWFiZWFcXHVhYmVjXFx1YWJlZFxcdWFiZjAtXFx1YWJmOVxcdWZiMWVcXHVmZTAwLVxcdWZlMGZcXHVmZTIwLVxcdWZlMjZcXHVmZTMzXFx1ZmUzNFxcdWZlNGQtXFx1ZmU0ZlxcdWZmMTAtXFx1ZmYxOVxcdWZmM2ZdKi9naSk7XG4gIH0sXG4gIGV2YWxJbkNvbnRleHQ6IGZ1bmN0aW9uIChqcykge1xuICAgIGpzID0ganMucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG5cblxuICAgIHZhciBrZXlzID0gW10sIHZhbHVlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChPYmplY3Qua2V5cyhhcmd1bWVudHNbaV0pKTtcbiAgICAgIGZvciAodmFyIGogaW4gYXJndW1lbnRzW2ldKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKGFyZ3VtZW50c1tpXVtqXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvL2lmKF8uaXNDb3JyZWN0VmFyaWFibGVOYW1lKGpzKSAmJiBrZXlzLmluZGV4T2YoanMpID09PSAtMSl7XG4gICAgLy8gIGtleXMucHVzaChqcyk7XG4gICAgLy8gIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgLy99XG5cbiAgICB2YXIgYXJyID0gdXRpbHMuZXh0cmFjdFZhcmlhYmxlcyhqcyk7XG4gICAgLy9jb25zb2xlLmxvZyhhcnIpO1xuICAgIGZvciAodmFyIGkgaW4gYXJyKSB7XG4gICAgICBpZiAoa2V5cy5pbmRleE9mKGFycltpXSkgPT09IC0xKSB7XG4gICAgICAgIGtleXMucHVzaChhcnJbaV0pO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH1cbiAgICBqcyA9IFwidmFyIGZvbyA9IGZ1bmN0aW9uKFwiICsga2V5cy5qb2luKFwiLFwiKSArIFwiKXsgdmFyIF9fcmV0dXJuX192YWx1ZSA9IFwiICsganMgKyBcIiA7cmV0dXJuIF9fcmV0dXJuX192YWx1ZTt9OyBmb287XCI7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBmb28gPSBldmFsKGpzKTtcbiAgICAgIHJldHVybiBmb28uYXBwbHkodGhpcywgdmFsdWVzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICB9LFxuICBjb21waWxlRWxlbWVudDogZnVuY3Rpb24gKCRpdGVtLCBzY29wZSkge1xuXG4gICAgZnVuY3Rpb24gX2VhY2hTZWxmKGVsLCBzZWxlY3RvciwgZm9vKSB7XG4gICAgICBlbC5maW5kKHNlbGVjdG9yKS5lYWNoKGZvbyk7XG4gICAgICBpZiAoZWwuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIGZvby5jYWxsKGVsWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLy5hZGRCYWNrKCdzZWxlY3RvcicpXG4gICAgX2VhY2hTZWxmKCRpdGVtLCBcIltvbmNsaWNrXVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb25DbGljayA9ICQodGhpcykuYXR0cihcIm9uY2xpY2tcIik7XG4gICAgICAkKHRoaXMpLnJlbW92ZUF0dHIoXCJvbmNsaWNrXCIpO1xuICAgICAgJCh0aGlzKS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdXRpbHMuZXZhbEluQ29udGV4dChvbkNsaWNrLCBzY29wZSwge2V2ZW50OiBldmVudH0pO1xuICAgICAgfSlcbiAgICB9KVxuXG5cbiAgICBfZWFjaFNlbGYoJGl0ZW0sIFwiW29uY2hhbmdlXVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb25DaGFuZ2UgPSAkKHRoaXMpLmF0dHIoXCJvbmNoYW5nZVwiKTtcbiAgICAgICQodGhpcykucmVtb3ZlQXR0cihcIm9uY2hhbmdlXCIpO1xuICAgICAgJCh0aGlzKS5jaGFuZ2UoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHV0aWxzLmV2YWxJbkNvbnRleHQob25DaGFuZ2UsIHNjb3BlLCB7ZXZlbnQ6IGV2ZW50fSk7XG4gICAgICB9KVxuICAgIH0pO1xuXG4gICAgX2VhY2hTZWxmKCRpdGVtLCBcIltkcC1jaGVja2VkXVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3ZhbCA9ICQodGhpcykuYXR0cihcImRwLWNoZWNrZWRcIik7XG4gICAgICB2YXIgdmFsID0gdXRpbHMuZXZhbEluQ29udGV4dChfdmFsLCBzY29wZSk7XG4gICAgICBpZiAodmFsKSB7XG4gICAgICAgICQodGhpcykuYXR0cihcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCh0aGlzKS5yZW1vdmVBdHRyKFwiY2hlY2tlZFwiKTtcbiAgICAgIH1cblxuICAgIH0pO1xuICAgIF9lYWNoU2VsZigkaXRlbSwgXCJbZHAtc3JjXVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3ZhbCA9ICQodGhpcykuYXR0cihcImRwLXNyY1wiKTtcbiAgICAgIHZhciB2YWwgPSB1dGlscy5ldmFsSW5Db250ZXh0KF92YWwsIHNjb3BlKTtcbiAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgJCh0aGlzKS5hdHRyKFwic3JjXCIsIHZhbCk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgICBfZWFjaFNlbGYoJGl0ZW0sIFwiW2RwLWlmXVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3ZhbCA9ICQodGhpcykuYXR0cihcImRwLWlmXCIpO1xuICAgICAgaWYgKF92YWwgPT09IFwiZmFsc2VcIikge1xuICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKF92YWwgPT09IFwidHJ1ZVwiKSB7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB2YWwgPSB1dGlscy5ldmFsSW5Db250ZXh0KF92YWwsIHNjb3BlKTtcbiAgICAgICAgaWYgKCF2YWwpIHtcbiAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2VhY2hTZWxmKCRpdGVtLCBcIltkcC1pbmNsdWRlXVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2VsID0gJCh0aGlzKTtcbiAgICAgIHZhciBfdmFsID0gX2VsLmF0dHIoXCJkcC1pbmNsdWRlXCIpO1xuICAgICAgdmFyIHZhbCA9IHV0aWxzLmV2YWxJbkNvbnRleHQoX3ZhbCwgc2NvcGUpO1xuICAgICAgX2VsLmxvYWQodmFsKTtcbiAgICB9KTtcbiAgfSxcbiAgcGFyc2VUZW1wbGF0ZTogZnVuY3Rpb24gKHRwbCwgc2NvcGUpIHtcbiAgICB2YXIgJGl0ZW0gPSAkKHRwbC5mb3JtYXQoc2NvcGUpKTtcbiAgICBfLmNvbXBpbGVFbGVtZW50KCRpdGVtLCBzY29wZSk7XG4gICAgcmV0dXJuICRpdGVtO1xuICB9XG59O1xuaWYodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIil7XG4gIG1vZHVsZS5leHBvcnRzID0gdXRpbHM7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3V0aWwvY29tcGlsZS5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVzb2x2ZTogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICB2YXIgY2h1bmtzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gICAgdmFyIHByZXYgPSAwO1xuICAgIGZvciAodmFyIGkgPSBjaHVua3MubGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGNodW5rc1tpXSA9PSBcIi4uXCIpIHtcbiAgICAgICAgcHJldisrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2hpbGUgKHByZXYgPiAwKSB7XG4gICAgICAgICAgY2h1bmtzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBjaHVua3Muc3BsaWNlKGktLSwgMSk7XG4gICAgICAgICAgcHJldi0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaHVua3Muam9pbihcIi9cIik7XG4gIH0sXG4gIGdldFBhcmVudERpcmVjdG9yeVVybDogZnVuY3Rpb24gKHVybCkge1xuICAgIHJldHVybiB1cmwuc3Vic3RyKDAsIHVybC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi91dGlsL3BhdGguanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG52YXIgRXh0Q2FudmFzTWl4aW4gPSB7XG4gIGFuaW1hdGVkOiBmYWxzZSxcbiAgZml0SW5kZXg6IDAuOCxcbiAgb3B0aW9uc09yZGVyOiBbXCJvcmlnaW5hbFdpZHRoXCIsXCJvcmlnaW5hbEhlaWdodFwiLFwid2lkdGhcIixcImhlaWdodFwiLFwiKlwiXSxcbiAgLyoqXG4gICAqIHJlcXVpcmVkIHRvIHNob3cgdmlkZW9cbiAgICovXG4gIHNldEFuaW1hdGVkOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgaWYoIXZhbCl7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZmFicmljLnV0aWwucmVxdWVzdEFuaW1GcmFtZShmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB0aGlzLnJlbmRlckFsbCgpO1xuICAgICAgZmFicmljLnV0aWwucmVxdWVzdEFuaW1GcmFtZShyZW5kZXIpO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIH0sXG4gIGZpbmQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09IFwic3RyaW5nXCIpe1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgdHlwZTogb3B0aW9uc1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFicmljLnV0aWwub2JqZWN0LndoZXJlKHRoaXMuX29iamVjdHMsb3B0aW9ucyk7XG4gIH0sXG4gIF91cGRhdGVfYmFja2dyb3VuZF9pbWFnZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBwaG90byA9IHRoaXMuYmFja2dyb3VuZEltYWdlO1xuICAgIGlmICghcGhvdG8gfHwgcGhvdG8uY29uc3RydWN0b3IgPT0gT2JqZWN0IHx8IHBob3RvLmNvbnN0cnVjdG9yID09IFN0cmluZykgcmV0dXJuO1xuXG4gICAgaWYgKHRoaXMuYmFja2dyb3VuZFBvc2l0aW9uID09ICdyZXNpemUnKSB7XG4gICAgICB0aGlzLm9yaWdpbmFsV2lkdGggPSBwaG90by53aWR0aDtcbiAgICAgIHRoaXMub3JpZ2luYWxIZWlnaHQgPSBwaG90by5oZWlnaHQ7XG5cbiAgICB9ZWxzZSBpZiAodGhpcy5iYWNrZ3JvdW5kUG9zaXRpb24gIT0gJ21hbnVhbCcpIHtcblxuICAgICAgdmFyIF93ICA9ICB0aGlzLm9yaWdpbmFsV2lkdGggfHwgdGhpcy53aWR0aCwgIF9oID0gdGhpcy5vcmlnaW5hbEhlaWdodCB8fCB0aGlzLmhlaWdodDtcblxuICAgICAgaWYocGhvdG8uX29yaWdpbmFsRWxlbWVudCl7XG4gICAgICAgIHZhciBzaXplID0gZmFicmljLnV0aWwuZ2V0UHJvcG9ydGlvbnMocGhvdG8uX29yaWdpbmFsRWxlbWVudCwge1xuICAgICAgICAgIHdpZHRoOiBfdyxcbiAgICAgICAgICBoZWlnaHQ6IF9oXG4gICAgICAgIH0sIHRoaXMuYmFja2dyb3VuZFBvc2l0aW9uKTtcbiAgICAgIH1lbHNle1xuICAgICAgICBzaXplID0ge1xuICAgICAgICAgIHdpZHRoOiBfdyxcbiAgICAgICAgICBoZWlnaHQ6IF9oXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIF9sIDtcbiAgICAgIGlmKHRoaXMuYmFja2dyb3VuZEltYWdlLm9yaWdpblggPT0gJ2NlbnRlcicpe1xuICAgICAgICBfbCA9IF93IC8gMjtcbiAgICAgIH1lbHNle1xuICAgICAgICBfbCA9IChfdyAtIHNpemUud2lkdGgpIC8gMiA7XG4gICAgICB9XG4gICAgICB2YXIgX3QgO1xuICAgICAgaWYodGhpcy5iYWNrZ3JvdW5kSW1hZ2Uub3JpZ2luWSA9PSAnY2VudGVyJyl7XG4gICAgICAgIF90ID0gX2ggLyAyO1xuICAgICAgfWVsc2V7XG4gICAgICAgIF90ID0gKF9oIC0gc2l6ZS5oZWlnaHQpIC8gMiA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlLnNldCh7XG4gICAgICAgIGxlZnQ6IF9sICsgdGhpcy52aWV3cG9ydFRyYW5zZm9ybVs0XSxcbiAgICAgICAgdG9wOiAgX3QgKyB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzVdLFxuICAgICAgICB3aWR0aDogc2l6ZS53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBzaXplLmhlaWdodFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHZhciBfb3JpZyA9IHRoaXMuYmFja2dyb3VuZEltYWdlLmdldE9yaWdpbmFsU2l6ZSgpO1xuICAgICAgLy8gdGhpcy5iYWNrZ3JvdW5kSW1hZ2Uuc2V0KHtcbiAgICAgIC8vICAgb3JpZ2luWDogJ2xlZnQnLFxuICAgICAgLy8gICBvcmlnaW5ZOiAndG9wJyxcbiAgICAgIC8vICAgbGVmdDogMCwgLy90aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzRdLFxuICAgICAgLy8gICB0b3A6IDAsIC8vdGhpcy52aWV3cG9ydFRyYW5zZm9ybVs1XSxcbiAgICAgIC8vICAgd2lkdGg6IF9vcmlnLndpZHRoLFxuICAgICAgLy8gICBoZWlnaHQ6IF9vcmlnLmhlaWdodFxuICAgICAgLy8gfSk7XG4gICAgfVxuICB9LFxuICBzZXRCYWNrZ3JvdW5kSW1hZ2U6IGZ1bmN0aW9uIChiZywgY2FsbGJhY2spIHtcbiAgICB2YXIgX2JnaW1hZ2VMb2FkZWQgPSBmdW5jdGlvbiAoZWwpe1xuXG4gICAgICB0aGlzLmJhY2tncm91bmRJbWFnZSA9IGVsO1xuICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2UuY2FudmFzID0gdGhpcztcbiAgICAgIHRoaXMuX3VwZGF0ZV9iYWNrZ3JvdW5kX2ltYWdlKCk7XG4gICAgICBpZighdGhpcy5vcmlnaW5hbFdpZHRoICYmICF0aGlzLm9yaWdpbmFsSGVpZ2h0KXtcbiAgICAgICAgdGhpcy5vcmlnaW5hbFdpZHRoID0gZWwud2lkdGg7XG4gICAgICAgIHRoaXMub3JpZ2luYWxIZWlnaHQgPSBlbC5oZWlnaHQ7XG4gICAgICB9XG4gICAgICB0aGlzLmZpcmUoXCJiYWNrZ3JvdW5kLWltYWdlOmxvYWRlZFwiLHt0YXJnZXQ6IGVsfSk7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgIH1cblxuXG4gICAgaWYgKCFiZykge1xuICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2UgPSBudWxsO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIGlmIChiZyBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgfHwgYmcgaW5zdGFuY2VvZiBJbWFnZSl7XG5cbiAgICAgIHZhciBlbCA9IG5ldyBmYWJyaWMuSW1hZ2UoYmcse1xuICAgICAgICB3aWR0aDogYmcubmF0dXJhbFdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGJnLm5hdHVyYWxIZWlnaHRcbiAgICAgIH0pO1xuXG4gICAgICBfYmdpbWFnZUxvYWRlZC5jYWxsKHRoaXMsZWwpO1xuICAgIH1cbiAgICBpZiAoYmcuY29uc3RydWN0b3IgPT0gU3RyaW5nKSB7XG4gICAgICBiZyA9IHtcbiAgICAgICAgc3JjOiBiZ1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgX3Byb3RvID0gdGhpcy5hcHBsaWNhdGlvbi5wcm90b3R5cGVzO1xuICAgIGlmKF9wcm90byAmJiBfcHJvdG8uU2xpZGVDYW52YXMgJiYgX3Byb3RvLlNsaWRlQ2FudmFzLmJhY2tncm91bmRJbWFnZVByb3BlcnRpZXMpe1xuICAgICAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChiZyxfcHJvdG8uU2xpZGVDYW52YXMuYmFja2dyb3VuZEltYWdlUHJvcGVydGllcyk7XG4gICAgfVxuICAgIGJnLmFwcGxpY2F0aW9uID0gdGhpcy5hcHBsaWNhdGlvbjtcbiAgICBiZy50eXBlID0gYmcudHlwZSB8fCBcImltYWdlXCI7XG4gICAgLy8gYmcud2lkdGggPSBiZy5uYXR1cmFsV2lkdGg7XG4gICAgLy8gYmcuaGVpZ2h0ID0gYmcubmF0dXJhbEhlaWdodDtcbiAgICAvL1xuICAgIGZhYnJpYy51dGlsLmNyZWF0ZU9iamVjdChiZyxfYmdpbWFnZUxvYWRlZC5iaW5kKHRoaXMpKTtcbiAgfSxcbiAgY3JlYXRlT2JqZWN0czogZnVuY3Rpb24ob2JqZWN0cyxjYWxsYmFjayl7XG5cbiAgICBpZih0aGlzLmFwcGxpY2F0aW9uKXtcbiAgICAgIGZvcih2YXIgaSBpbiBvYmplY3RzKXtcbiAgICAgICAgaWYob2JqZWN0c1tpXS5jb25zdHJ1Y3RvciA9PSBTdHJpbmcpe1xuICAgICAgICAgIG9iamVjdHNbaV0gPSB0aGlzLmFwcGxpY2F0aW9uLm9iamVjdHNbb2JqZWN0c1tpXV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX2NhbnZhcyA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBzdWNjZXNzKF9vYmplY3RzKSB7XG4gICAgICBfY2FudmFzLmZpcmUoXCJwcm9ncmVzczpjb21wbGV0ZVwiLCB7b2JqZWN0czogb2JqZWN0c30pO1xuICAgICAgZm9yICh2YXIgaSBpbiBfb2JqZWN0cykge1xuICAgICAgICBfY2FudmFzLmFkZChfb2JqZWN0c1tpXS5vYmplY3QpO1xuICAgICAgfVxuICAgICAgX2NhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwoX2NhbnZhcylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9ncmVzcyhsLCB0KSB7XG4gICAgICBfY2FudmFzLmZpcmUoXCJwcm9ncmVzc1wiLCB7IGxvYWRlZCA6IGwsIHRvdGFsIDogdCB9KTtcbiAgICAgIGlmIChmYWJyaWMudXRpbC5sb2FkZXJEZWJ1Zykge1xuICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRlZCBcIiArIGwgKyBcIiAvIFwiICsgdCk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICB2YXIgX29iamVjdHMgPSBbXTtcbiAgICBpZiAoIW9iamVjdHMgfHwgIW9iamVjdHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmZpcmUoXCJwcm9ncmVzczpjb21wbGV0ZVwiLCAwKTtcbiAgICAgIHN1Y2Nlc3MoX29iamVjdHMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBxdWV1ZUxvYWRDYWxsYmFjayA9IGZhYnJpYy51dGlsLnF1ZXVlTG9hZChvYmplY3RzLmxlbmd0aCwgZnVuY3Rpb24oKXtcbiAgICAgIHN1Y2Nlc3MoX29iamVjdHMpXG4gICAgfSwgcHJvZ3Jlc3MpO1xuXG4gICAgcXVldWVMb2FkQ2FsbGJhY2suZGF0YSA9ICh0aGlzLnRpdGxlIHx8IFwiXCIpICsgXCJvYmplY3RzXCI7XG5cbiAgICBmb3IgKHZhciBpIGluIG9iamVjdHMpIHtcbiAgICAgIChmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgX29iamVjdF9zbG90ID0ge29iamVjdDogbnVsbCwgb3B0aW9uczogb3B0aW9uc307XG4gICAgICAgIF9vYmplY3RzLnB1c2goX29iamVjdF9zbG90KTtcblxuICAgICAgICBvcHRpb25zLmFwcGxpY2F0aW9uID0gX2NhbnZhcy5hcHBsaWNhdGlvbjtcbiAgICAgICAgZmFicmljLnV0aWwuY3JlYXRlT2JqZWN0KG9wdGlvbnMsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIF9vYmplY3Rfc2xvdC5vYmplY3QgPSBlbDtcbiAgICAgICAgICBxdWV1ZUxvYWRDYWxsYmFjaygpO1xuICAgICAgICB9KTtcbiAgICAgIH0pLmNhbGwodGhpcywgb2JqZWN0c1tpXSk7XG4gICAgfVxuICB9LFxuICAvKipcbiAgICogYXBwbHkgb3B0aW9ucyBmb3IgZ3JvdXAgb2YgZmlsdGVyZWQgb2JqZWN0c1xuICAgKiBAcGFyYW0gZmlsdGVyXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqL1xuICBhcHBseU9wdGlvbnM6IGZ1bmN0aW9uKGZpbHRlcixvcHRpb25zKXtcbiAgICB0aGlzLl9vYmplY3RzLmZvckVhY2goZnVuY3Rpb24oX29iail7XG4gICAgICBmb3IodmFyIHByb3AgaW4gZmlsdGVyKXtcbiAgICAgICAgaWYoX29ialtwcm9wXSAhPT0gIGZpbHRlcltwcm9wXSlyZXR1cm47XG4gICAgICB9XG4gICAgICBfb2JqLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgfSlcbiAgfSxcbiAgLyoqXG4gICAqIENyZWF0ZSBPYmplY3QgYnkgdHlwZSBhbmQgb3B0aW9uc1xuICAgKiBAcGFyYW0gdHlwZVxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIGNyZWF0ZU9iamVjdDogZnVuY3Rpb24gKHR5cGUsIG9wdGlvbnMsY2FsbGJhY2spIHtcbiAgICBpZih0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIil7XG4gICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lKHR5cGUpO1xuICAgICAgdHlwZSA9IG51bGw7XG4gICAgfWVsc2V7XG4gICAgICBvcHRpb25zID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lKG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy50eXBlID0gdHlwZTtcbiAgICB9XG5cbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIG9wdGlvbnMuYXBwbGljYXRpb24gPSB0aGlzLmFwcGxpY2F0aW9uO1xuICAgIHZhciBfYWN0aXZlID0gb3B0aW9ucy5hY3RpdmU7XG4gICAgdmFyIF9wb3NpdGlvbiA9IG9wdGlvbnMucG9zaXRpb247XG4gICAgZGVsZXRlIG9wdGlvbnMuYWN0aXZlO1xuICAgIGRlbGV0ZSBvcHRpb25zLnBvc2l0aW9uO1xuXG5cbiAgICBmdW5jdGlvbiBfYWRkKGVsKSB7XG4gICAgICBpZihlbC5jYW52YXMpcmV0dXJuO1xuICAgICAgaWYoX3Bvc2l0aW9uID09IFwiY2VudGVyXCIpIHtcbiAgICAgICAgX3NlbGYuZml0T2JqZWN0KGVsKTtcbiAgICAgIH1cbiAgICAgIF9zZWxmLmFkZChlbCk7XG5cbiAgICAgIGlmKF9hY3RpdmUpe1xuICAgICAgICBfc2VsZi5zZXRBY3RpdmVPYmplY3QoZWwpO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZWwpO1xuICAgIH1cblxuICAgIHZhciBlbCA9IGZhYnJpYy51dGlsLmNyZWF0ZU9iamVjdChvcHRpb25zLF9hZGQgKTtcbiAgICBlbCAmJiBfYWRkKGVsKTtcbiAgICByZXR1cm4gZWw7XG4gIH0sXG4gIG9uTG9hZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5wcm9jZXNzaW5nID1mYWxzZTtcbiAgICB0aGlzLmxvYWRlZCA9IHRydWU7XG4gICAgdGhpcy5maXJlKFwibG9hZGluZzplbmRcIix7dHlwZTogXCJzbGlkZVwiLCB0YXJnZXQ6IHRoaXN9KTtcbiAgICB0aGlzLnJlbmRlckFsbCgpO1xuICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwodGhpcyk7XG4gIH0sXG4gIGxvYWQ6IGZ1bmN0aW9uIChvcHRpb25zLGNhbGxiYWNrKSB7XG4gICAgdGhpcy5vcmlnaW5hbFdpZHRoID0gMDtcbiAgICB0aGlzLm9yaWdpbmFsSGVpZ2h0ID0gMDtcbiAgICBpZiAoIW9wdGlvbnMpcmV0dXJuO1xuXG4gICAgaWYoIXRoaXMudmlydHVhbCl7XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgaWYob3B0aW9ucy53aWR0aCl7XG4gICAgICBvcHRpb25zLm9yaWdpbmFsV2lkdGggPSBvcHRpb25zLndpZHRoO1xuICAgICAgb3B0aW9ucy5vcmlnaW5hbEhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0O1xuICAgIH1cblxuICAgIHRoaXMucHJvY2Vzc2luZyA9IHRydWU7XG4gICAgdGhpcy5maXJlKFwibG9hZGluZzpiZWdpblwiLHt0eXBlOiBcInNsaWRlXCIsIHRhcmdldDogdGhpc30pO1xuXG4gICAgdGhpcy5zZXQob3B0aW9ucyx0aGlzLm9uTG9hZC5iaW5kKHRoaXMsY2FsbGJhY2spKTtcblxuXG4gICAgLy90b2RvXG4gICAgaWYodGhpcy5wbHVnaW5zKXtcbiAgICAgIHRoaXMucGx1Z2lucy5wcmVsb2FkZXJzLmZvckVhY2goZnVuY3Rpb24ocHJlbG9hZGVyKXtcbiAgICAgICAgcHJlbG9hZGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub25SZXNpemUoKTtcbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG5cbiAgfSxcbiAgc2V0T2JqZWN0czogZnVuY3Rpb24ob2JqZWN0cyxjYWxsYmFjayl7XG5cbiAgICB0aGlzLmNyZWF0ZU9iamVjdHMob2JqZWN0cyxmdW5jdGlvbigpe1xuICAgICAgZm9yKHZhciBpIGluIHRoaXMuX29iamVjdHMpe1xuICAgICAgICB0aGlzLl9vYmplY3RzW2ldLnNldENvb3JkcygpO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfSxcbiAgb25SZXNpemU6IGZ1bmN0aW9uKCl7XG4gICAgdmFyIF9zY2FsZSA9IE1hdGgubWluKDEsODAwIC90aGlzLndpZHRoICk7XG4gICAgLy8gdGhpcy5zZXRab29tKF9zY2FsZSk7XG4gICAgdGhpcy5zZXREaW1lbnNpb25zKHt3aWR0aDogdGhpcy53aWR0aCxoZWlnaHQ6IHRoaXMuaGVpZ2h0fSk7XG4gIH0sXG4gIGdldENlbnRlcjogZnVuY3Rpb24gKGVsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogKHRoaXMub3JpZ2luYWxIZWlnaHQgIHx8IHRoaXMuZ2V0SGVpZ2h0KCkpIC8gMixcbiAgICAgIGxlZnQ6ICh0aGlzLm9yaWdpbmFsV2lkdGggfHwgdGhpcy5nZXRXaWR0aCgpKSAvIDJcbiAgICB9O1xuICB9LFxuICBmaXRPYmplY3Q6IGZ1bmN0aW9uIChlbCkge1xuICAgIHZhciBfcmVjdCwgbWF4U2l6ZSwgb2Zmc2V0cztcblxuICAgIGlmKGVsLm1vdmVtZW50TGltaXRzICYmIGVsLm1vdmVtZW50TGltaXRzLmNvbnN0cnVjdG9yICE9PSBGdW5jdGlvbil7XG4gICAgICB2YXIgbGltID0gZWwubW92ZW1lbnRMaW1pdHM7XG4gICAgICBfcmVjdCA9IHtcbiAgICAgICAgbGVmdDogICBsaW0ubGVmdCAqIGxpbS5zY2FsZVgsXG4gICAgICAgIHdpZHRoOiAgbGltLndpZHRoICogbGltLnNjYWxlWCAsXG4gICAgICAgIHRvcDogICAgbGltLnRvcCAqIGxpbS5zY2FsZVksXG4gICAgICAgIGhlaWdodDogbGltLmhlaWdodCAqIGxpbS5zY2FsZVlcbiAgICAgIH07XG4gICAgICAvL21heFNpemUgPSBfcmVjdDtcbiAgICAgLy8gb2Zmc2V0cyA9IGxpbTtcbiAgICB9ZWxzZXtcbiAgICAgIHZhciBfem9vbSA9IHRoaXMuZ2V0Wm9vbSgpO1xuICAgICAgdmFyIF93ID0gdGhpcy5vcmlnaW5hbFdpZHRoIHx8IHRoaXMud2lkdGggLyBfem9vbTtcbiAgICAgIHZhciBfaCA9IHRoaXMub3JpZ2luYWxIZWlnaHQgfHwgdGhpcy5oZWlnaHQgLyBfem9vbTtcbiAgICAgIF9yZWN0ID0ge1xuICAgICAgICB3aWR0aDogdGhpcy5vZmZzZXRzID8gKF93IC0gdGhpcy5vZmZzZXRzLmxlZnQgLSB0aGlzLm9mZnNldHMucmlnaHQpIDogX3csXG4gICAgICAgIGhlaWdodDogdGhpcy5vZmZzZXRzID8oX2ggLSB0aGlzLm9mZnNldHMudG9wIC0gdGhpcy5vZmZzZXRzLmJvdHRvbSkgOiBfaFxuICAgICAgfTtcbiAgICAgLyogb2Zmc2V0cyA9IHtcbiAgICAgICAgbGVmdDogdGhpcy5vZmZzZXRzICYmIHRoaXMub2Zmc2V0cy50b3AgfHwwICxcbiAgICAgICAgdG9wOiAgdGhpcy5vZmZzZXRzICYmICB0aGlzLm9mZnNldHMubGVmdCB8fDBcbiAgICAgIH0qL1xuICAgIH1cbiAgICBtYXhTaXplID0ge1xuICAgICAgd2lkdGg6IF9yZWN0LndpZHRoICogdGhpcy5maXRJbmRleCxcbiAgICAgIGhlaWdodDogX3JlY3QuaGVpZ2h0ICogdGhpcy5maXRJbmRleFxuICAgIH07XG4gICAgdmFyIHNpemUgPSBmYWJyaWMudXRpbC5nZXRQcm9wb3J0aW9ucyhlbCwgbWF4U2l6ZSwgJ2ZpdCcpO1xuXG4gICAgaWYoZWwucmVzaXphYmxlKXtcbiAgICAgIGVsLnNldE9wdGlvbnMoe1xuICAgICAgICB3aWR0aDogZWwud2lkdGggKiBzaXplLnNjYWxlLFxuICAgICAgICBoZWlnaHQ6IGVsLmhlaWdodCAqIHNpemUuc2NhbGVcbiAgICAgIH0pO1xuICAgICAgZWwudXBkYXRlRWxlbWVudCgpO1xuICAgIH1lbHNle1xuICAgICAgZWwuc2V0T3B0aW9ucyh7XG4gICAgICAgIHNjYWxlWDogc2l6ZS5zY2FsZSxcbiAgICAgICAgc2NhbGVZOiBzaXplLnNjYWxlXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5jZW50ZXJPYmplY3QoZWwpO1xuICAgIGVsLnNldENvb3JkcygpO1xuICB9LFxuICBzZXRPcmlnaW5hbFNpemU6IGZ1bmN0aW9uICh3LCBoKSB7XG4gICAgdGhpcy5vcmlnaW5hbFdpZHRoID0gaCA/IHcgOiAody5uYXR1cmFsV2lkdGggfHwgdy53aWR0aCk7XG4gICAgdGhpcy5vcmlnaW5hbEhlaWdodCA9IGggPyBoIDogKHcubmF0dXJhbEhlaWdodCB8fCB3LmhlaWdodCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUsRXh0Q2FudmFzTWl4aW4pO1xuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuQ2FudmFzLnByb3RvdHlwZSxFeHRDYW52YXNNaXhpbik7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2NvcmUvc3RhdGljLWNhbnZhcy5leHQuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZmFicmljLkltYWdlTWl4aW4gPSB7XG4gIHNldEVsZW1lbnRGcm9tTWVudSA6IGZ1bmN0aW9uKGRhdGEpe1xuICAgIHRoaXMuc2V0RWxlbWVudChkYXRhLmltYWdlKVxuICB9LFxuICBpbml0UHJvcG9ydGluYWxTaXplIDogdHJ1ZSxcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT2JqZWN0IHdpdGggd2lkdGgvaGVpZ2h0IHByb3BlcnRpZXNcbiAgICovXG4gIF9zZXRXaWR0aEhlaWdodDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBfc2l6ZSA9IHRoaXMuZ2V0T3JpZ2luYWxTaXplKCk7XG4gICAgaWYoJ3dpZHRoJyBpbiBvcHRpb25zKXtcbiAgICAgIHRoaXMud2lkdGggPSBvcHRpb25zLndpZHRoO1xuICAgIH1lbHNle1xuICAgICAgaWYoIV9zaXplLndpZHRoKXtcbiAgICAgICAgdGhpcy53aWR0aCA9IDA7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgaWYodGhpcy5pbml0UHJvcG9ydGluYWxTaXplICYmICdoZWlnaHQnIGluIG9wdGlvbnMpe1xuICAgICAgICAgIHRoaXMud2lkdGggPSAob3B0aW9ucy5oZWlnaHQgIC8gX3NpemUuaGVpZ2h0ICkgKiBfc2l6ZS53aWR0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLndpZHRoID0gX3NpemUud2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZignaGVpZ2h0JyBpbiBvcHRpb25zKXtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQ7XG4gICAgfWVsc2V7XG4gICAgICBpZighX3NpemUuaGVpZ2h0KXtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgICAgfWVsc2V7XG4gICAgICAgIGlmKHRoaXMuaW5pdFByb3BvcnRpbmFsU2l6ZSAmJiAnd2lkdGgnIGluIG9wdGlvbnMpe1xuICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gKG9wdGlvbnMud2lkdGggIC8gX3NpemUud2lkdGggKSAqIF9zaXplLmhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmhlaWdodCA9IF9zaXplLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZmFicmljLkFwcGxpY2F0aW9uLnByb3RvdHlwZS5nZXRMaWJyYXJ5RWxlbWVudHMgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgcmV0dXJuIFtdO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9taXhpbnMvcHJvcG9ydGlhbmFsU2l6ZU1peGluLmpzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIE1hZ2ljIFdhbmQgKEZ1enp5IFNlbGVjdGlvbiBUb29sKSBmb3IgSmF2YXNjcmlwdFxuLy9cbi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxNCwgUnlhc25veSBQYXVsIChyeWFzbm95cGF1bEBnbWFpbC5jb20pXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxudmFyIE1hZ2ljV2FuZCA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBsaWIgPSB7fTtcbiAgLy92YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgLy92YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2FudmFzRWxlbWVudCgpe1xuICAgIGlmKHR5cGVvZiBDYW52YXMgIT09IFwidW5kZWZpbmVkXCIpe1xuICAgICAgcmV0dXJuIG5ldyBDYW52YXM7XG4gICAgfVxuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gU2VsZWN0aW9uTWFzayh3LGgsZGF0YSl7XG4gICAgaWYoYXJndW1lbnRzLmxlbmd0aCA9PSAxKXtcbiAgICAgIGZvcih2YXIgaSBpbiBhcmd1bWVudHNbMF0gKXtcbiAgICAgICAgdGhpc1tpXSA9IGFyZ3VtZW50c1swXVtpXTtcbiAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuZGF0YSA9IG5ldyBVaW50OEFycmF5KGRhdGEgfHwgdyAqIGgpO1xuICAgICAgdGhpcy53aWR0aCAgPSB3O1xuICAgICAgdGhpcy5oZWlnaHQgPSBoO1xuICAgICAgdGhpcy5jb3VudCAgPSAwO1xuICAgICAgdGhpcy5ib3VuZHMgPSB7XG4gICAgICAgbWluWDogSW5maW5pdHksXG4gICAgICAgbWluWTogSW5maW5pdHksXG4gICAgICAgbWF4WTogLTEsXG4gICAgICAgbWF4WDogLTFcbiAgICAgIH07XG4gICAgICAvLyB0aGlzLmJvdW5kcyA9IHtcbiAgICAgIC8vICAgbWluWDogMCxcbiAgICAgIC8vICAgbWluWTogMCxcbiAgICAgIC8vICAgbWF4WTogaCxcbiAgICAgIC8vICAgbWF4WDogd1xuICAgICAgLy8gfTtcbiAgICB9XG4gIH1cbiAgbGliLlNlbGVjdGlvbk1hc2sgPSBTZWxlY3Rpb25NYXNrO1xuXG5cbiAgU2VsZWN0aW9uTWFzay5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbigpe1xuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgIGNhbnZhcy53aWR0aCA9IHRoaXMud2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB0aGlzLnJlbmRlcihjdHgse1xuICAgICAgZmlsbCA6IFwiI2ZmZlwiLFxuICAgICAgb3V0ZXJGaWxsIDogXCIjMDAwXCJcbiAgICB9KTtcbiAgICBjdHguZGVidWcoKTtcbiAgfTtcblxuICBTZWxlY3Rpb25NYXNrLnByb3RvdHlwZS5tYWtlQ2FjaGUgPSBmdW5jdGlvbihvcHRpb25zICl7XG4gICAgdGhpcy5jYWNoZSA9IGNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgICB0aGlzLmNhY2hlLndpZHRoID0gdGhpcy5ib3VuZHMubWF4WC0gdGhpcy5ib3VuZHMubWluWCArIDE7XG4gICAgdGhpcy5jYWNoZS5oZWlnaHQgPSB0aGlzLmJvdW5kcy5tYXhZLSB0aGlzLmJvdW5kcy5taW5ZICsgMTtcbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhY2hlLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAgIHRoaXMucmVuZGVyKHRoaXMuY29udGV4dCx7XG4gICAgICBmaWxsIDogXCIjZmZmXCIsXG4gICAgICBvdXRlckZpbGwgOiBcIiMwMDBcIixcbiAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgIGxlZnQgOi10aGlzLmJvdW5kcy5taW5YLFxuICAgICAgdG9wIDotdGhpcy5ib3VuZHMubWluWVxuICAgIH0pO1xuXG4gIH07XG5cbiAgU2VsZWN0aW9uTWFzay5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG1hc2spIHtcbiAgICB2YXIgaW5kZXgsIHgsIHk7XG4gICAgZm9yICh4ID0gbWFzay5ib3VuZHMubWluWDsgeCA8PSBtYXNrLmJvdW5kcy5tYXhYOyB4KyspIHtcbiAgICAgIGZvciAoeSA9IG1hc2suYm91bmRzLm1pblk7IHkgPD0gbWFzay5ib3VuZHMubWF4WTsgeSsrKSB7XG4gICAgICAgIGluZGV4ID0gbWFzay53aWR0aCAqIHkgKyB4O1xuICAgICAgICBpZiAoIG1hc2suZGF0YVtpbmRleF0gJiYgIXRoaXMuZGF0YVtpbmRleF0pe1xuICAgICAgICAgIHRoaXMuZGF0YVtpbmRleF0gPSAxO1xuICAgICAgICAgIHRoaXMuY291bnQrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYm91bmRzLm1pblggPSBNYXRoLm1pbihtYXNrLmJvdW5kcy5taW5YLCB0aGlzLmJvdW5kcy5taW5YKTtcbiAgICB0aGlzLmJvdW5kcy5tYXhYID0gTWF0aC5tYXgobWFzay5ib3VuZHMubWF4WCwgdGhpcy5ib3VuZHMubWF4WCk7XG4gICAgdGhpcy5ib3VuZHMubWluWSA9IE1hdGgubWluKG1hc2suYm91bmRzLm1pblksIHRoaXMuYm91bmRzLm1pblkpO1xuICAgIHRoaXMuYm91bmRzLm1heFkgPSBNYXRoLm1heChtYXNrLmJvdW5kcy5tYXhZLCB0aGlzLmJvdW5kcy5tYXhZKTtcbiAgfTtcbiAgZnVuY3Rpb24gaGV4VG9SZ2IoaGV4KSB7XG4gICAgLy8gRXhwYW5kIHNob3J0aGFuZCBmb3JtIChlLmcuIFwiMDNGXCIpIHRvIGZ1bGwgZm9ybSAoZS5nLiBcIjAwMzNGRlwiKVxuICAgIHZhciBzaG9ydGhhbmRSZWdleCA9IC9eIz8oW2EtZlxcZF0pKFthLWZcXGRdKShbYS1mXFxkXSkkL2k7XG4gICAgaGV4ID0gaGV4LnJlcGxhY2Uoc2hvcnRoYW5kUmVnZXgsIGZ1bmN0aW9uKG0sIHIsIGcsIGIpIHtcbiAgICAgIHJldHVybiByICsgciArIGcgKyBnICsgYiArIGI7XG4gICAgfSk7XG5cbiAgICB2YXIgcmVzdWx0ID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleCk7XG4gICAgcmV0dXJuIHJlc3VsdCA/IHtcbiAgICAgIHI6IHBhcnNlSW50KHJlc3VsdFsxXSwgMTYpLFxuICAgICAgZzogcGFyc2VJbnQocmVzdWx0WzJdLCAxNiksXG4gICAgICBiOiBwYXJzZUludChyZXN1bHRbM10sIDE2KVxuICAgIH0gOiBudWxsO1xuICB9XG5cbiAgU2VsZWN0aW9uTWFzay5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oY3R4LG9wdGlvbnMgKXtcbiAgICBpZighdGhpcy5jb3VudClyZXR1cm47XG5cbiAgICBvcHRpb25zICAgICAgICAgICAgID0gb3B0aW9ucyAgICAgICAgICAgICB8fCB7fTtcbiAgICBvcHRpb25zLmxlZnQgICAgICAgID0gb3B0aW9ucy5sZWZ0ICAgICAgICB8fCAwIDtcbiAgICBvcHRpb25zLnRvcCAgICAgICAgID0gb3B0aW9ucy50b3AgICAgICAgICB8fCAwIDtcbiAgICBvcHRpb25zLmZpbGwgICAgICAgID0gb3B0aW9ucy5maWxsICAgICAgICB8fCBmYWxzZSA7Ly8gWzAsMCwwLDBdO1xuICAgIG9wdGlvbnMuaW50ZXJzZWN0aW9uQ29sb3IgPSBvcHRpb25zLmludGVyc2VjdGlvbkNvbG9yIHx8ZmFsc2UgOy8vICBbMCwwLDAsMF07XG5cbiAgICBvcHRpb25zLm91dGVyRmlsbCAgICAgICAgPSBvcHRpb25zLm91dGVyRmlsbCAgICAgICAgfHwgZmFsc2UgOy8vIFswLDAsMCwwXTtcbiAgICBvcHRpb25zLm91dGVySW50ZXJzZWN0aW9uQ29sb3IgPSBvcHRpb25zLm91dGVySW50ZXJzZWN0aW9uQ29sb3IgfHxmYWxzZSA7Ly8gIFswLDAsMCwwXTtcblxuICAgIC8vaWYodGhpcy5jYWNoZSAmJiBvcHRpb25zLmNhY2hlICE9PSBmYWxzZSl7XG4gICAgLy9cbiAgICAvLyAgdmFyIF9jdHggPSB0aGlzLmNvbnRleHQ7XG4gICAgLy8gIF9jdHguc2F2ZSgpO1xuICAgIC8vICBfY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbj1cInNvdXJjZS1pblwiO1xuICAgIC8vICBfY3R4LmZpbGxTdHlsZT0gb3B0aW9ucy5maWxsO1xuICAgIC8vICBfY3R4LmZpbGxSZWN0KDAsMCx0aGlzLmNhY2hlLndpZHRoLHRoaXMuY2FjaGUuaGVpZ2h0KTtcbiAgICAvLyAgX2N0eC5yZXN0b3JlKCk7XG4gICAgLy9cbiAgICAvLyAgY3R4LnNhdmUoKTtcbiAgICAvLyAgY3R4Lmdsb2JhbEFscGhhID0gb3B0aW9ucy5vcGFjaXR5O1xuICAgIC8vICBjdHguZHJhd0ltYWdlKHRoaXMuY2FjaGUsdGhpcy5ib3VuZHMubWluWCx0aGlzLmJvdW5kcy5taW5ZKVxuICAgIC8vICBjdHgucmVzdG9yZSgpO1xuICAgIC8vICByZXR1cm47XG4gICAgLy99XG5cbiAgICAvL3RvZG8gZG8gbm90IHVzZSBmYWJyaWMgaGVyZSFcbiAgICBmdW5jdGlvbiBjb252ZXJ0Q29sb3IoY29sb3Ipe1xuICAgICAgaWYoY29sb3IuY29uc3RydWN0b3IgID09IFN0cmluZyApe1xuICAgICAgICBpZihjb2xvclswXSA9PSBcIiNcIil7XG4gICAgICAgICAgdmFyIF9yZ2IgPSBoZXhUb1JnYihjb2xvcik7XG4gICAgICAgICAgcmV0dXJuIFtfcmdiLnIsX3JnYi5nLF9yZ2IuYiwyNTVdO1xuICAgICAgICB9XG4gICAgICAgIGNvbG9yID0gbmV3IGZhYnJpYy5Db2xvcihjb2xvcikuX3NvdXJjZTtcbiAgICAgICAgY29sb3JbM10gKj0gMjU1O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cblxuICAgIHZhciBfdyA9IHRoaXMuYm91bmRzLm1heFggLSB0aGlzLmJvdW5kcy5taW5YICsgMTtcbiAgICB2YXIgX2ggPSB0aGlzLmJvdW5kcy5tYXhZIC0gdGhpcy5ib3VuZHMubWluWSArIDE7XG5cbiAgICAvL3ZhciBpbWdEYXRhID0gY3R4LmdldEltYWdlRGF0YShvcHRpb25zLmxlZnQsb3B0aW9ucy50b3AsX3csX2gpO1xuICAgIHZhciBpbWdEYXRhID0gY3R4LmdldEltYWdlRGF0YSh0aGlzLmJvdW5kcy5taW5YLHRoaXMuYm91bmRzLm1pblksX3csX2gpO1xuXG4gICAgdmFyIGNvbG9yICA9IGNvbnZlcnRDb2xvcihvcHRpb25zLmZpbGwpO1xuICAgIHZhciBjb2xvcjIgPSBjb252ZXJ0Q29sb3Iob3B0aW9ucy5pbnRlcnNlY3Rpb25Db2xvcik7XG4gICAgdmFyIGNvbG9yMyA9IGNvbnZlcnRDb2xvcihvcHRpb25zLm91dGVyRmlsbCk7XG4gICAgdmFyIGNvbG9yNCA9IGNvbnZlcnRDb2xvcihvcHRpb25zLm91dGVySW50ZXJzZWN0aW9uQ29sb3IpO1xuXG4gICAgZm9yKHZhciB4ID0gdGhpcy5ib3VuZHMubWluWCA7IHggPD0gdGhpcy5ib3VuZHMubWF4WDt4KysgKXtcbiAgICAgIGZvcih2YXIgeSA9IHRoaXMuYm91bmRzLm1pblkgOyB5IDw9IHRoaXMuYm91bmRzLm1heFk7IHkrKyApe1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLndpZHRoICogeSArIHg7XG4gICAgICAgIHZhciBpbmRleF9zbWFsbCA9IF93ICogKHkgLSAodGhpcy5ib3VuZHMubWluWSkpICsgeCAtICh0aGlzLmJvdW5kcy5taW5YKTtcblxuICAgICAgICBpZih0aGlzLmRhdGFbaW5kZXhdICl7XG4gICAgICAgICAgdmFyIF9jb2xvciA9IGltZ0RhdGEuZGF0YVtpbmRleF9zbWFsbCAqIDQgKyAzXT8gY29sb3IyIDogY29sb3IgO1xuICAgICAgICAgIGlmKCFfY29sb3IpY29udGludWU7XG5cbiAgICAgICAgICBpbWdEYXRhLmRhdGFbaW5kZXhfc21hbGwgKiA0IF0gICAgPSBfY29sb3JbMF07XG4gICAgICAgICAgaW1nRGF0YS5kYXRhW2luZGV4X3NtYWxsICogNCArIDFdID0gX2NvbG9yWzFdO1xuICAgICAgICAgIGltZ0RhdGEuZGF0YVtpbmRleF9zbWFsbCAqIDQgKyAyXSA9IF9jb2xvclsyXTtcbiAgICAgICAgICBpbWdEYXRhLmRhdGFbaW5kZXhfc21hbGwgKiA0ICsgM10gPSBfY29sb3JbM107XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIHZhciBfY29sb3IgPSBpbWdEYXRhLmRhdGFbaW5kZXhfc21hbGwgKiA0ICsgM10/IGNvbG9yNCA6IGNvbG9yMyA7XG4gICAgICAgICAgaWYoIV9jb2xvciljb250aW51ZTtcblxuICAgICAgICAgIGltZ0RhdGEuZGF0YVtpbmRleF9zbWFsbCAqIDQgXSAgICA9IF9jb2xvclswXTtcbiAgICAgICAgICBpbWdEYXRhLmRhdGFbaW5kZXhfc21hbGwgKiA0ICsgMV0gPSBfY29sb3JbMV07XG4gICAgICAgICAgaW1nRGF0YS5kYXRhW2luZGV4X3NtYWxsICogNCArIDJdID0gX2NvbG9yWzJdO1xuICAgICAgICAgIGltZ0RhdGEuZGF0YVtpbmRleF9zbWFsbCAqIDQgKyAzXSA9IF9jb2xvclszXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGN0eC5wdXRJbWFnZURhdGEoaW1nRGF0YSwgb3B0aW9ucy5sZWZ0ICAsIG9wdGlvbnMudG9wICApO1xuICAgIGN0eC5wdXRJbWFnZURhdGEoaW1nRGF0YSwgdGhpcy5ib3VuZHMubWluWCx0aGlzLmJvdW5kcy5taW5ZICApO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIGdldCBhcnJheSB3aXRoIGJlZ2luIGFuZCBlbmQgaW5kaWNlcyBvZiBmaWxsZWQgMSBpbnRlcnZhbHNcbiAgICogQHBhcmFtIGN0eFxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAqL1xuICBTZWxlY3Rpb25NYXNrLnByb3RvdHlwZS5nZXRJbnRlcnZhbHNBcnJheSA9IGZ1bmN0aW9uIChjdHgsIG9wdGlvbnMpIHtcbiAgICB2YXIgX25ld0RhdGEgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgX3ZhbCA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKF92YWwgIT0gYXJyYXlbaV0pIHtcbiAgICAgICAgX25ld0RhdGEucHVzaChpKTtcbiAgICAgICAgX3ZhbCA9IGFycmF5W2ldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX25ld0RhdGE7XG4gIH07XG5cbiAgU2VsZWN0aW9uTWFzay5wcm90b3R5cGUucmVuZGVyQm9yZGVyID0gZnVuY3Rpb24gKGN0eCwgb3B0aW9ucykge1xuXG4gICAgb3B0aW9ucyAgICAgICAgICAgICA9IG9wdGlvbnMgICAgICAgICAgICAgfHwge307XG4gICAgb3B0aW9ucy5sZWZ0ICAgICAgICA9IG9wdGlvbnMubGVmdCAgICAgICAgfHwgMCA7XG4gICAgb3B0aW9ucy50b3AgICAgICAgICA9IG9wdGlvbnMudG9wICAgICAgICAgfHwgMCA7XG4gICAgb3B0aW9ucy5oYXRjaE9mZnNldCA9IG9wdGlvbnMuaGF0Y2hPZmZzZXQgfHwgMCA7XG4gICAgb3B0aW9ucy5oYXRjaExlbmd0aCA9IG9wdGlvbnMuaGF0Y2hMZW5ndGggfHwgNCA7XG4gICAgb3B0aW9ucy5vcGFjaXR5ID0gb3B0aW9ucy5vcGFjaXR5IHx8IDEgO1xuXG4gICAgdmFyIGltZ0RhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsMCx0aGlzLndpZHRoLHRoaXMuaGVpZ2h0KTtcblxuICAgIGlmKCF0aGlzLmNhY2hlSW5kKXtcbiAgICAgIHRoaXMuY2FjaGVJbmQgPSBNYWdpY1dhbmQuZ2V0Qm9yZGVySW5kaWNlcyh0aGlzKTtcbiAgICB9XG5cbiAgICB2YXIgeCwgeSwgaSwgaiwgayxcbiAgICAgIHcgPSBpbWdEYXRhLndpZHRoLFxuICAgICAgaCA9IGltZ0RhdGEuaGVpZ2h0O1xuICAgIHZhciByZXMgPSBpbWdEYXRhLmRhdGE7XG5cbiAgICB2YXIgbGVuID0gdGhpcy5jYWNoZUluZC5sZW5ndGg7XG4gICAgZm9yIChqID0gMDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICBpID0gdGhpcy5jYWNoZUluZFtqXTtcbiAgICAgIHggPSBpICUgdzsgLy8gY2FsYyB4IGJ5IGluZGV4XG4gICAgICB5ID0gKGkgLSB4KSAvIHc7IC8vIGNhbGMgeSBieSBpbmRleFxuICAgICAgayA9ICh5ICogdyArIHgpICogNDtcblxuICAgICAgaWYgKCh4ICsgeSArIG9wdGlvbnMuaGF0Y2hPZmZzZXQpICUgKG9wdGlvbnMuaGF0Y2hMZW5ndGggKiAyKSA8IG9wdGlvbnMuaGF0Y2hMZW5ndGgpIHsgLy8gZGV0ZWN0IGhhdGNoIGNvbG9yXG5cbiAgICAgICAgcmVzW2tdID0gMDtcbiAgICAgICAgcmVzW2sgKyAxXSA9IDA7XG4gICAgICAgIHJlc1trICsgMl0gPSAwO1xuICAgICAgICByZXNbayArIDNdID0gMjU1OyAvLyBibGFjaywgY2hhbmdlIG9ubHkgYWxwaGFcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc1trXSA9IDI1NTsgLy8gd2hpdGVcbiAgICAgICAgcmVzW2sgKyAxXSA9IDI1NTtcbiAgICAgICAgcmVzW2sgKyAyXSA9IDI1NTtcbiAgICAgICAgcmVzW2sgKyAzXSA9IDI1NTtcbiAgICAgIH1cbiAgICB9XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZ2xvYmFsQWxwaGEgPSBvcHRpb25zLm9wYWNpdHk7XG4gICAgY3R4LnB1dEltYWdlRGF0YShpbWdEYXRhLCBvcHRpb25zLmxlZnQgfHwgMCAsIG9wdGlvbnMudG9wIHx8IDAgKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9O1xuXG5cbiAgbGliLmNyZWF0ZU1hc2sgPSBmdW5jdGlvbiAodywgaCxkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBTZWxlY3Rpb25NYXNrKHcsaCxkYXRhKTtcbiAgfTtcblxuICBsaWIuZGlmZmVyZW5jZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KFxuICAgICAgYlswXSAhPT0gZmFsc2UgPyBNYXRoLmFicyhiWzBdIC0gYVswXSk6IDAsXG4gICAgICBiWzFdICE9PSBmYWxzZSA/IE1hdGguYWJzKGJbMV0gLSBhWzFdKTogMCxcbiAgICAgIGJbMl0gIT09IGZhbHNlID8gTWF0aC5hYnMoYlsyXSAtIGFbMl0pOiAwLFxuICAgICAgYlszXSAhPT0gZmFsc2UgPyBNYXRoLmFicyhiWzNdIC0gYVszXSk6IDApO1xuICB9O1xuXG4gIGxpYi5hY2NlcHRhYmxlID0gZnVuY3Rpb24gKHgsIHksIGltYWdlLCB2aXNpdGVkLCBzYW1wbGVDb2xvciwgY29sb3JUaHJlc2hvbGQpIHtcbi8vIGNoZWNrIHdoZXRoZXIgdGhlIHBvaW50IGhhcyBiZWVuIHZpc2l0ZWRcbiAgICBpZiAodmlzaXRlZFt5ICogaW1hZ2Uud2lkdGggKyB4XSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgaSA9ICh5ICogaW1hZ2Uud2lkdGggKyB4KSAqIGxpYi5ieXRlcyxcbiAgICAgIGNvbG9yMiA9IFtpbWFnZS5kYXRhW2ldLCBpbWFnZS5kYXRhW2kgKyAxXSwgaW1hZ2UuZGF0YVtpICsgMl0sIGltYWdlLmRhdGFbaSArIDNdXTtcblxuXG4gICAgaWYgKHNhbXBsZUNvbG9yWzBdICE9PSBmYWxzZSAmJiBNYXRoLmFicyhzYW1wbGVDb2xvclswXSAtIGNvbG9yMlswXSkgPiBjb2xvclRocmVzaG9sZClyZXR1cm4gZmFsc2U7XG4gICAgaWYgKHNhbXBsZUNvbG9yWzFdICE9PSBmYWxzZSAmJiBNYXRoLmFicyhzYW1wbGVDb2xvclsxXSAtIGNvbG9yMlsxXSkgPiBjb2xvclRocmVzaG9sZClyZXR1cm4gZmFsc2U7XG4gICAgaWYgKHNhbXBsZUNvbG9yWzJdICE9PSBmYWxzZSAmJiBNYXRoLmFicyhzYW1wbGVDb2xvclsyXSAtIGNvbG9yMlsyXSkgPmNvbG9yVGhyZXNob2xkKXJldHVybiBmYWxzZTtcbiAgICBpZiAoc2FtcGxlQ29sb3JbM10gIT09IGZhbHNlICYmIE1hdGguYWJzKHNhbXBsZUNvbG9yWzNdIC0gY29sb3IyWzNdKSA+IGNvbG9yVGhyZXNob2xkKXJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBsaWIuc2VsZWN0QWxsID0gZnVuY3Rpb24gKGltYWdlLCBweCwgcHksIGNvbG9yVGhyZXNob2xkKSB7XG4gICAgdmFyIGkgPSAocHkgKiBpbWFnZS53aWR0aCArIHB4KSAqIGxpYi5ieXRlcyxcbiAgICAgIGRhdGEgPSBpbWFnZS5kYXRhLFxuICAgICAgc2FtcGxlQ29sb3IgPSBbZGF0YVtpXSwgZGF0YVtpICsgMV0sIGRhdGFbaSArIDJdLCBkYXRhW2kgKyAzXV07IC8vIHN0YXJ0IHBvaW50IGNvbG9yIChzYW1wbGUpXG4gICAgcmV0dXJuIGxpYi5zZWxlY3RBbGxCeUNvbG9yKGltYWdlLCBzYW1wbGVDb2xvciwgY29sb3JUaHJlc2hvbGQpXG4gIH07XG5cblxuICAvKipcbiAgICogQ29udmVydHMgYW4gUkdCIGNvbG9yIHZhbHVlIHRvIEhTTC4gQ29udmVyc2lvbiBmb3JtdWxhXG4gICAqIGFkYXB0ZWQgZnJvbSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTTF9jb2xvcl9zcGFjZS5cbiAgICogQXNzdW1lcyByLCBnLCBhbmQgYiBhcmUgY29udGFpbmVkIGluIHRoZSBzZXQgWzAsIDI1NV0gYW5kXG4gICAqIHJldHVybnMgaCwgcywgYW5kIGwgaW4gdGhlIHNldCBbMCwgMV0uXG4gICAqXG4gICAqIEBwYXJhbSAgIE51bWJlciAgciAgICAgICBUaGUgcmVkIGNvbG9yIHZhbHVlXG4gICAqIEBwYXJhbSAgIE51bWJlciAgZyAgICAgICBUaGUgZ3JlZW4gY29sb3IgdmFsdWVcbiAgICogQHBhcmFtICAgTnVtYmVyICBiICAgICAgIFRoZSBibHVlIGNvbG9yIHZhbHVlXG4gICAqIEByZXR1cm4gIEFycmF5ICAgICAgICAgICBUaGUgSFNMIHJlcHJlc2VudGF0aW9uXG4gICAqL1xuICBsaWIucmdiVG9Ic2wgPSBmdW5jdGlvbihyLCBnLCBiKXtcbiAgICByIC89IDI1NSwgZyAvPSAyNTUsIGIgLz0gMjU1O1xuICAgIHZhciBtYXggPSBNYXRoLm1heChyLCBnLCBiKSwgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgdmFyIGgsIHMsIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICBpZihtYXggPT0gbWluKXtcbiAgICAgIGggPSBzID0gMDsgLy8gYWNocm9tYXRpY1xuICAgIH1lbHNle1xuICAgICAgdmFyIGQgPSBtYXggLSBtaW47XG4gICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICBzd2l0Y2gobWF4KXtcbiAgICAgICAgY2FzZSByOiBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7IGJyZWFrO1xuICAgICAgICBjYXNlIGc6IGggPSAoYiAtIHIpIC8gZCArIDI7IGJyZWFrO1xuICAgICAgICBjYXNlIGI6IGggPSAociAtIGcpIC8gZCArIDQ7IGJyZWFrO1xuICAgICAgfVxuICAgICAgaCAvPSA2O1xuICAgIH1cblxuICAgIHJldHVybiBbaCwgcywgbF07XG4gIH1cblxuICBsaWIuc2VsZWN0Q29sb3JlZCA9IGZ1bmN0aW9uIChpbWFnZSwgb3B0aW9ucykge1xuXG4gICAgdmFyIG1hc2sgPSBuZXcgU2VsZWN0aW9uTWFzayhpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0KTtcblxuICAgIG1hc2suYm91bmRzID0ge1xuICAgICAgbWluWDogaW1hZ2Uud2lkdGgsXG4gICAgICBtaW5ZOiBpbWFnZS5oZWlnaHQsXG4gICAgICBtYXhZOiAtMSxcbiAgICAgIG1heFg6IC0xXG4gICAgfTtcblxuICAgIHZhciB4LCB5O1xuICAgIGZvciAoeSA9IDA7IHkgPCBpbWFnZS5oZWlnaHQ7IHkrKykge1xuICAgICAgZm9yICh4ID0gMDsgeCA8IGltYWdlLndpZHRoOyB4KyspIHtcbiAgICAgICAgdmFyIGluZGV4ID0gKHkgKiBpbWFnZS53aWR0aCArIHgpO1xuICAgICAgICB2YXIgaSA9IGluZGV4ICogbGliLmJ5dGVzO1xuICAgICAgICAvL2lmICghaW1hZ2UuZGF0YVtpICsgM10pIGNvbnRpbnVlO1xuXG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYU1pbiAmJiBpbWFnZS5kYXRhW2kgKyAzXSA8IG9wdGlvbnMuYU1pbiljb250aW51ZTtcblxuICAgICAgICB2YXIgaHNsID0gcmdiVG9Ic2woaW1hZ2UuZGF0YVtpXSwgaW1hZ2UuZGF0YVtpICsgMV0sIGltYWdlLmRhdGFbaSArIDJdKTtcblxuXG4gICAgICAgIGlmIChvcHRpb25zLnNNaW4gJiYgaHNsWzFdIDwgb3B0aW9ucy5zTWluKWNvbnRpbnVlO1xuICAgICAgICBpZiAob3B0aW9ucy5zTWF4ICYmIGhzbFsxXSA+IG9wdGlvbnMuc01heCljb250aW51ZTtcbiAgICAgICAgaWYgKG9wdGlvbnMuYk1pbiAmJiBoc2xbMl0gPCBvcHRpb25zLmJNaW4pY29udGludWU7XG4gICAgICAgIGlmIChvcHRpb25zLmJNYXggJiYgaHNsWzJdID4gb3B0aW9ucy5iTWF4KWNvbnRpbnVlO1xuXG5cbiAgICAgICAgbWFzay5kYXRhW2luZGV4XSA9IDE7XG4gICAgICAgIG1hc2suY291bnQrKztcbiAgICAgICAgbWFzay5ib3VuZHMubWluWCA9IE1hdGgubWluKG1hc2suYm91bmRzLm1pblgsIHgpO1xuICAgICAgICBtYXNrLmJvdW5kcy5tYXhYID0gTWF0aC5tYXgobWFzay5ib3VuZHMubWF4WCwgeCk7XG4gICAgICAgIG1hc2suYm91bmRzLm1pblkgPSBNYXRoLm1pbihtYXNrLmJvdW5kcy5taW5ZLCB5KTtcbiAgICAgICAgbWFzay5ib3VuZHMubWF4WSA9IE1hdGgubWF4KG1hc2suYm91bmRzLm1heFksIHkpO1xuXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXNrO1xuICB9O1xuXG5cblxuXG4gIGxpYi5zZWxlY3RBbGxCeUNvbG9yID0gZnVuY3Rpb24gKGN0eCwgc2FtcGxlQ29sb3IsIGNvbG9yVGhyZXNob2xkKSB7XG4gICAgdmFyIGltYWdlID0gX2dldEltYWdlRGF0YShjdHgpO1xuXG4gICAgdmFyIG1hc2sgPSBuZXcgU2VsZWN0aW9uTWFzayhpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0KTtcblxuICAgIG1hc2suYm91bmRzID0ge1xuICAgICAgbWluWDogSW5maW5pdHksXG4gICAgICBtaW5ZOiBJbmZpbml0eSxcbiAgICAgIG1heFk6IC0xLFxuICAgICAgbWF4WDogLTFcbiAgICB9O1xuXG5cbiAgICB2YXIgdmlzaXRlZCA9IG5ldyBVaW50OEFycmF5KCBpbWFnZS53aWR0aCAqIGltYWdlLmhlaWdodCk7XG4gICAgdmFyIHgsIHk7XG4gICAgZm9yICh5ID0gMDsgeSA8IGltYWdlLmhlaWdodDsgeSsrKSB7XG4gICAgICBmb3IgKHggPSAwOyB4IDwgaW1hZ2Uud2lkdGg7IHgrKykge1xuICAgICAgICBpZihsaWIuYWNjZXB0YWJsZSh4LCB5LCBpbWFnZSwgbWFzay5kYXRhLCBzYW1wbGVDb2xvciwgY29sb3JUaHJlc2hvbGQpKXtcbiAgICAgICAgICBNYWdpY1dhbmQuZmxvb2RGaWxsKGltYWdlLCB4LCB5LCBjb2xvclRocmVzaG9sZCwge1xuICAgICAgICAgICAgc2FtcGxlQ29sb3I6ICAgIHNhbXBsZUNvbG9yLFxuICAgICAgICAgICAgYWN0aXZlTWFzayA6ICAgIG1hc2ssXG4gICAgICAgICAgICB2aXNpdGVkUG9pbnRzIDogdmlzaXRlZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXNrO1xuICB9O1xuXG5cblxuICBsaWIuZHJhd0ltYWdlID0gZnVuY3Rpb24gKGN0eCxjYW52YXMsIG1hc2sgLGxlZnQsIHRvcCkge1xuXG4gICAgdmFyIGN0eDIgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuXG4gICAgdmFyIGltZ0RhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIG1hc2sud2lkdGgsIG1hc2suaGVpZ2h0KTtcbiAgICB2YXIgaW1nRGF0YU9yaWdpbmFsID0gY3R4Mi5nZXRJbWFnZURhdGEobGVmdCwgdG9wLCBtYXNrLndpZHRoLCBtYXNrLmhlaWdodCk7XG5cblxuICAgIHZhciBiID0gbWFzay5ib3VuZHM7XG4gICAgZm9yICh2YXIgeCA9IGIubWluWDsgeCA8PSBiLm1heFg7IHgrKylmb3IgKHZhciB5ID0gYi5taW5ZOyB5IDw9IGIubWF4WTsgeSsrKSB7XG4gICAgICB2YXIgaSA9ICh5ICogbWFzay53aWR0aCArIHgpOy8vICogYnl0ZXM7IC8vIHBvaW50IGluZGV4IGluIHRoZSBpbWFnZSBkYXRhXG4gICAgICBpZiAobWFzay5kYXRhW2ldKSB7XG4gICAgICAgIGltZ0RhdGEuZGF0YVtpICogNF0gICAgID0gaW1nRGF0YU9yaWdpbmFsLmRhdGFbaSAqIDRdO1xuICAgICAgICBpbWdEYXRhLmRhdGFbaSAqIDQgKyAxXSA9IGltZ0RhdGFPcmlnaW5hbC5kYXRhW2kgKiA0ICsgMV07XG4gICAgICAgIGltZ0RhdGEuZGF0YVtpICogNCArIDJdID0gaW1nRGF0YU9yaWdpbmFsLmRhdGFbaSAqIDQgKyAyXTtcbiAgICAgICAgaW1nRGF0YS5kYXRhW2kgKiA0ICsgM10gPSBpbWdEYXRhT3JpZ2luYWwuZGF0YVtpICogNCArIDNdO1xuICAgICAgfVxuICAgIH1cbiAgICBjdHgucHV0SW1hZ2VEYXRhKGltZ0RhdGEsMCwgMCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gX2dldEltYWdlRGF0YShjdHgpe1xuICAgIGlmKGN0eC5jb25zdHJ1Y3Rvci5uYW1lID09IFwiSW1hZ2VEYXRhXCIpe1xuICAgICAgcmV0dXJuIGN0eDtcbiAgICB9ZWxzZXtcbiAgICAgIHJldHVybiBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIGN0eC5jYW52YXMud2lkdGgsIGN0eC5jYW52YXMuaGVpZ2h0KTtcbiAgICB9XG4gIH1cblxuICBsaWIuZmlsbE1hc2sgPSBmdW5jdGlvbiAoY3R4LG1hc2ssIGNvbG9yKSB7XG4gICAgdmFyIGltZ0RhdGEgPSBfZ2V0SW1hZ2VEYXRhKGN0eCk7XG4gICAgdmFyIGIgPSBtYXNrLmJvdW5kcztcbiAgICB2YXIgdyA9IGltZ0RhdGEud2lkdGgsXG4gICAgICBoID0gaW1nRGF0YS5oZWlnaHQ7XG5cbiAgICBmb3IgKHZhciB4ID0gYi5taW5YOyB4IDw9IGIubWF4WDsgeCsrKWZvciAodmFyIHkgPSBiLm1pblk7IHkgPD0gYi5tYXhZOyB5KyspIHtcbiAgICAgIHZhciBpID0gKHkgKiB3ICsgeCk7Ly8gKiBieXRlczsgLy8gcG9pbnQgaW5kZXggaW4gdGhlIGltYWdlIGRhdGFcbiAgICAgIGlmIChtYXNrLmRhdGFbaV0pIHtcbiAgICAgICAgaW1nRGF0YS5kYXRhW2kgKiA0XSAgICAgPSBjb2xvclswXTtcbiAgICAgICAgaW1nRGF0YS5kYXRhW2kgKiA0ICsgMV0gPSBjb2xvclsxXTtcbiAgICAgICAgaW1nRGF0YS5kYXRhW2kgKiA0ICsgMl0gPSBjb2xvclsyXTtcbiAgICAgICAgaW1nRGF0YS5kYXRhW2kgKiA0ICsgM10gPSBjb2xvclszXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYoY3R4LmNvbnN0cnVjdG9yLm5hbWUgIT0gXCJJbWFnZURhdGFcIikge1xuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB3LCBoKTtcbiAgICAgIGN0eC5wdXRJbWFnZURhdGEoaW1nRGF0YSwgMCwgMCk7XG4gICAgfVxuICB9O1xuXG4gIGxpYi5zZWxlY3RCYWNrZ3JvdW5kID0gZnVuY3Rpb24gKGN0eCwgc2FtcGxlQ29sb3IsIGNvbG9yVGhyZXNob2xkKSB7XG4gICAgdmFyIGltYWdlID0gX2dldEltYWdlRGF0YShjdHgpO1xuXG4gICAgY29sb3JUaHJlc2hvbGQgPSBjb2xvclRocmVzaG9sZCB8fCAxNTtcblxuICAgIHZhciBtYXNrID0gbmV3IFNlbGVjdGlvbk1hc2soaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCk7XG4gICAgbWFzay5ib3VuZHMgPSB7XG4gICAgICBtaW5YOiBJbmZpbml0eSxcbiAgICAgIG1pblk6IEluZmluaXR5LFxuICAgICAgbWF4WTogLTEsXG4gICAgICBtYXhYOiAtMVxuICAgIH07XG5cbiAgICB2YXIgZGF0YSA9IGltYWdlLmRhdGE7XG5cbiAgICBzYW1wbGVDb2xvciA9IHNhbXBsZUNvbG9yIHx8W2RhdGFbMF0sIGRhdGFbMV0sIGRhdGFbMl0sIGRhdGFbM11dOyAvLyBzdGFydCBwb2ludCBjb2xvciAoc2FtcGxlKVxuXG4gICAgdmFyIGNvbG9yID0gc2FtcGxlQ29sb3I7XG5cbiAgICBmdW5jdGlvbiBhZGQoeCwgeSkge1xuICAgICAgaWYgKCFsaWIuYWNjZXB0YWJsZSh4LCB5LCBpbWFnZSwgbWFzay5kYXRhLCBzYW1wbGVDb2xvciwgY29sb3JUaHJlc2hvbGQpKXJldHVybjtcbiAgICAgIGlmICghc2FtcGxlQ29sb3IpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gKHkgKiBpbWFnZS53aWR0aCArIHgpICogNDtcbiAgICAgICAgY29sb3IgPSBbZGF0YVtpbmRleF0sIGRhdGFbaW5kZXggKyAxXSwgZGF0YVtpbmRleCArIDJdLCBkYXRhW2luZGV4ICsgM11dO1xuICAgICAgfVxuICAgICAgdmFyIG1hc2syID0gTWFnaWNXYW5kLmZsb29kRmlsbChpbWFnZSwgeCwgeSwgY29sb3JUaHJlc2hvbGQsIG51bGwsIGNvbG9yKTtcbiAgICAgIG1hc2sgPSBNYWdpY1dhbmQuYWRkKG1hc2ssIG1hc2syKTtcbiAgICB9XG5cbiAgICB2YXIgeCwgeTtcblxuICAgIGZvciAoeCA9IDA7IHggPCBpbWFnZS53aWR0aDsgeCsrKSB7XG4gICAgICBhZGQoeCwgMCk7XG4gICAgfVxuICAgIGZvciAoeCA9IDA7IHggPCBpbWFnZS53aWR0aDsgeCsrKSB7XG4gICAgICBhZGQoeCwgaW1hZ2UuaGVpZ2h0IC0gMSk7XG4gICAgfVxuICAgIGZvciAoeSA9IDA7IHkgPCBpbWFnZS5oZWlnaHQ7IHkrKykge1xuICAgICAgYWRkKGltYWdlLndpZHRoIC0gMSwgeSk7XG4gICAgfVxuICAgIGZvciAoeSA9IDA7IHkgPCBpbWFnZS5oZWlnaHQ7IHkrKykge1xuICAgICAgYWRkKDAsIHkpO1xuICAgIH1cbiAgICByZXR1cm4gbWFzaztcblxuICB9O1xuXG4gIGxpYi5leHRyYWN0Q29sb3JzID0gZnVuY3Rpb24obWl4ZWRUeXBlLHRocmVzaG9sZCkge1xuICAgIHRocmVzaG9sZD0gdGhyZXNob2xkIHx8IDYwO1xuICAgIHZhciBpbWdEYXRhID0gbGliLmdldEltYWdlRGF0YShtaXhlZFR5cGUpO1xuICAgIHZhciBfY29sb3JzID0gW107XG4gICAgdmFyIGMxO1xuICAgIGZvcih2YXIgeCA9IDE7IHggPGltZ0RhdGEud2lkdGg7eCs9Myl7XG4gICAgICBmb3IodmFyIHkgPSAxOyB5IDxpbWdEYXRhLmhlaWdodDt5Kz0zKSB7XG4gICAgICAgIHZhciBpaWkgPSAoeCArIHkgKiBpbWdEYXRhLndpZHRoKSAqIDQ7XG4gICAgICAgIHZhciBpaUEgPSAoeCAtIDEgKyB5ICogaW1nRGF0YS53aWR0aCkgKiA0O1xuICAgICAgICB2YXIgaWlCID0gKHggKyAxICsgeSAqIGltZ0RhdGEud2lkdGgpICogNDtcbiAgICAgICAgdmFyIGlpQyA9ICh4IC0gMSArICh5ICsgMSkgKiBpbWdEYXRhLndpZHRoKSAqIDQ7XG4gICAgICAgIHZhciBpaUQgPSAoeCArIDEgKyAoeSArIDEpICogaW1nRGF0YS53aWR0aCkgKiA0O1xuICAgICAgICBpZihpbWdEYXRhLmRhdGFbaWlpICsgM10gPCAyNTUpY29udGludWU7XG5cbiAgICAgICAgYzEgPSBbIGltZ0RhdGEuZGF0YVtpaWldLCBpbWdEYXRhLmRhdGFbaWlpICsgMV0sIGltZ0RhdGEuZGF0YVtpaWkgKyAyXV07XG4gICAgICAgIHZhciBjQSA9IFsgaW1nRGF0YS5kYXRhW2lpQV0sIGltZ0RhdGEuZGF0YVtpaUEgKyAxXSwgaW1nRGF0YS5kYXRhW2lpQSArIDJdXTtcbiAgICAgICAgdmFyIGNCID0gWyBpbWdEYXRhLmRhdGFbaWlCXSwgaW1nRGF0YS5kYXRhW2lpQiArIDFdLCBpbWdEYXRhLmRhdGFbaWlCICsgMl1dO1xuICAgICAgICB2YXIgY0MgPSBbIGltZ0RhdGEuZGF0YVtpaUNdLCBpbWdEYXRhLmRhdGFbaWlDICsgMV0sIGltZ0RhdGEuZGF0YVtpaUMgKyAyXV07XG4gICAgICAgIHZhciBjRCA9IFsgaW1nRGF0YS5kYXRhW2lpRF0sIGltZ0RhdGEuZGF0YVtpaUQgKyAxXSwgaW1nRGF0YS5kYXRhW2lpRCArIDJdXTtcblxuICAgICAgICBpZihcbiAgICAgICAgICBjMVswXSAhPSBjQVswXSB8fCBjQVswXSAhPSBjQlswXSB8fCBjQlswXSAhPSBjQ1swXSB8fCBjQ1swXSAhPSBjRFswXSB8fFxuICAgICAgICAgIGMxWzFdICE9IGNBWzFdIHx8IGNBWzFdICE9IGNCWzFdIHx8IGNCWzFdICE9IGNDWzFdIHx8IGNDWzFdICE9IGNEWzFdIHx8XG4gICAgICAgICAgYzFbMl0gIT0gY0FbMl0gfHwgY0FbMl0gIT0gY0JbMl0gfHwgY0JbMl0gIT0gY0NbMl0gfHwgY0NbMl0gIT0gY0RbMl1cbiAgICAgICAgKXtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc05ld0NvbG9yID0gdHJ1ZTtcblxuICAgICAgICBmb3IodmFyIGkgaW4gX2NvbG9ycyl7XG4gICAgICAgICAgaWYoTWFnaWNXYW5kLmRpZmZlcmVuY2UoX2NvbG9yc1tpXSwgYzEpIDwgdGhyZXNob2xkKXtcbiAgICAgICAgICAgIGlzTmV3Q29sb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihpc05ld0NvbG9yKXtcbiAgICAgICAgICBfY29sb3JzLnB1c2goYzEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfY29sb3JzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBpbWFnZVxuICAgKiBjYW52YXMgLSDRh9C10YDQvdC+INCx0LvQvtC1INC40LfQvtCx0YDQsNC20LXQvdC40LUuXG4gICAqXG4gICAqIG1hc2stINC/0YDQtdC00YvQtNGD0YnQsNGPINC80LDRgdC60LAuINC90LAg0L3QtdC1INCx0YPQtNC10YIg0L3QsNC60LvQsNC00YvQstCw0YLRjCDQvdC+0LLQsNGPXG4gICAqIG1vZGUgLSDRgdC/0L7RgdC+0LEg0L3QsNC70L7QttC10L3QuNGPLlxuICAgKi9cbiAgbGliLm1hc2tTZWxlY3Rpb24gPSBmdW5jdGlvbiAoIGNhbnZhcywgbGVmdCwgdG9wLCBtYXNrICxtb2RlKSB7XG4gICAgbGVmdCA9IGxlZnQgfHwgMDtcbiAgICB0b3AgPSB0b3AgfHwgMDtcbiAgICBpZihjYW52YXMuY29uc3RydWN0b3IubmFtZSA9PSBcIkhUTUxJbWFnZUVsZW1lbnRcIil7XG5cbiAgICAgIHZhciBfX2NhbnZhcyA9IGNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgICAgIF9fY2FudmFzLndpZHRoID0gY2FudmFzLndpZHRoO1xuICAgICAgX19jYW52YXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICAgIHZhciBfX2N0eCA9IF9fY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBfX2N0eC5kcmF3SW1hZ2UoY2FudmFzLCAwLCAwKTtcbiAgICAgIGNhbnZhcyA9IF9fY2FudmFzO1xuICAgIH1cblxuXG4gICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLFxuICAgICAgaW1nRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KSxcbiAgICAgIG1hc2sgPSBtYXNrIHx8IE1hZ2ljV2FuZC5jcmVhdGVNYXNrKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cbiAgICB2YXIgX3gxID0gTWF0aC5tYXgoMCwgLSBsZWZ0KSxcbiAgICAgIF95MSA9IE1hdGgubWF4KDAsIC0gdG9wKSxcbiAgICAgIF94MiA9IE1hdGgubWluKG1hc2sud2lkdGggLSBsZWZ0LGNhbnZhcy53aWR0aCk7XG4gICAgX3kyID0gTWF0aC5taW4obWFzay5oZWlnaHQgLSB0b3AsY2FudmFzLmhlaWdodCk7XG5cbiAgICBmb3IgKHZhciB4ID0gX3gxOyB4IDwgX3gyOyB4KyspIHtcbiAgICAgIGZvciAodmFyIHkgPSBfeTE7IHkgPCBfeTI7IHkrKykge1xuICAgICAgICB2YXIgaW5kZXggPSAoY2FudmFzLndpZHRoICogeSArIHgpICogNDtcblxuICAgICAgICBpZiAoaW1nRGF0YS5kYXRhW2luZGV4XSA+IDIwKSB7XG4gICAgICAgICAgdmFyIGluZGV4MiA9IG1hc2sud2lkdGggKiAoeSArIHRvcCkgKyB4ICsgbGVmdDtcbiAgICAgICAgICBtYXNrLmRhdGFbaW5kZXgyXSA9IDE7XG4gICAgICAgICAgbWFzay5jb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXNrO1xuICB9LFxuICBsaWIuc2VsZWN0UmVjdGFuZ2xlID0gZnVuY3Rpb24gKGltYWdlLCB4MSwgeTEsIHgyLCB5Mikge1xuXG4gICAgICB2YXIgbWFzayA9IG5ldyBTZWxlY3Rpb25NYXNrKGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQpO1xuICAgICAgdmFyIG1pblggPSBNYXRoLm1pbih4MSwgeDIpO1xuICAgICAgdmFyIG1heFggPSBNYXRoLm1heCh4MSwgeDIpO1xuICAgICAgdmFyIG1pblkgPSBNYXRoLm1pbih5MSwgeTIpO1xuICAgICAgdmFyIG1heFkgPSBNYXRoLm1heCh5MSwgeTIpO1xuXG4gICAgICB2YXIgdyA9IGltYWdlLndpZHRoLCBoID0gaW1hZ2UuaGVpZ2h0O1xuXG4gICAgICB2YXIgZGF0YSA9IGltYWdlLmRhdGE7XG4gICAgICBmb3IgKHZhciB5ID0gbWluWTsgeSA8PSBtYXhZOyB5KyspIHtcbiAgICAgICAgZm9yICh2YXIgeCA9IG1pblg7IHggPD0gbWF4WDsgeCsrKSB7XG4gICAgICAgICAgaWYgKGRhdGFbKHkgKiB3ICsgeCkgKiA0ICsgM10pIHtcbiAgICAgICAgICAgIG1hc2suZGF0YVt5ICogdyArIHhdID0gMTtcbiAgICAgICAgICAgIG1hc2suY291bnQrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWFzay5ib3VuZHMgPSB7XG4gICAgICAgIG1pblg6IG1pblgsXG4gICAgICAgIG1pblk6IG1pblksXG4gICAgICAgIG1heFg6IG1heFgsXG4gICAgICAgIG1heFk6IG1heFlcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBtYXNrO1xuICAgIH07XG5cbiAgbGliLmJ5dGVzID0gNDtcblxuXG5cblxuXG5cbiAgbGliLl9fZmxvb2RGaWxsID0gZnVuY3Rpb24gKGUscG9zdE1lc3NhZ2UpIHtcblxuICAgIGRhdGEgPSBlLmRhdGE7XG4gICAgdmFyIGltYWdlID0gZGF0YVswXSwgcHggPSBkYXRhWzFdLCBweSA9IGRhdGFbMl0sIGNvbG9yVGhyZXNob2xkID0gZGF0YVszXSwgb3B0aW9ucyA9IGRhdGFbNF07XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAvKntcbiAgICAgdmlzaXRlZFBvaW50c0FycmF5LFxuICAgICBzYW1wbGVDb2xvcixcbiAgICAgcmVzdWx0TWFza1xuICAgICB9Ki9cblxuICAgIHZhciBjLCB4LCBuZXdZLCBlbCwgeHIsIHhsLCBkeSwgZHlsLCBkeXIsIGNoZWNrWSxcbiAgICAgIGRhdGEgPSBpbWFnZS5kYXRhLCB3ID0gaW1hZ2Uud2lkdGgsIGggPSBpbWFnZS5oZWlnaHQsIGJ5dGVzID0gbGliLmJ5dGVzLFxuICAgICAgaSA9IHB5ICogdyArIHB4OyAvLyBzdGFydCBwb2ludCBpbmRleCBpbiB0aGUgbWFzayBkYXRhXG4gICAgaSA9IGkgKiBieXRlczsgLy8gc3RhcnQgcG9pbnQgaW5kZXggaW4gdGhlIGltYWdlIGRhdGFcblxuICAgIHZhciB2aXNpdGVkICAgICA9IG9wdGlvbnMudmlzaXRlZFBvaW50cyB8fCBuZXcgVWludDhBcnJheSggdyAqIGgpLCAvLyBtYXNrIG9mIHZpc2l0ZWQgcG9pbnRzXG4gICAgICBzYW1wbGVDb2xvciA9IG9wdGlvbnMuc2FtcGxlQ29sb3IgICB8fCBbZGF0YVtpXSwgZGF0YVtpICsgMV0sIGRhdGFbaSArIDJdLCBkYXRhW2kgKyAzXV0sIC8vIHN0YXJ0IHBvaW50IGNvbG9yIChzYW1wbGUpXG4gICAgICByZXN1bHQgICAgICA9IG9wdGlvbnMuYWN0aXZlTWFzaztcblxuICAgIGZ1bmN0aW9uIGFjY2VwdGFibGUoeCwgeSkge1xuLy8gY2hlY2sgd2hldGhlciB0aGUgcG9pbnQgaGFzIGJlZW4gdmlzaXRlZFxuICAgICAgaWYgKHZpc2l0ZWRbeSAqIGltYWdlLndpZHRoICsgeF0gPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGkgPSAoeSAqIGltYWdlLndpZHRoICsgeCkgKiBsaWIuYnl0ZXMsXG4gICAgICAgIGNvbG9yMiA9IFtpbWFnZS5kYXRhW2ldLCBpbWFnZS5kYXRhW2kgKyAxXSwgaW1hZ2UuZGF0YVtpICsgMl0sIGltYWdlLmRhdGFbaSArIDNdXTtcbiAgICAgIGlmIChzYW1wbGVDb2xvclswXSAhPT0gZmFsc2UgJiYgTWF0aC5hYnMoc2FtcGxlQ29sb3JbMF0gLSBjb2xvcjJbMF0pID4gY29sb3JUaHJlc2hvbGQpcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKHNhbXBsZUNvbG9yWzFdICE9PSBmYWxzZSAmJiBNYXRoLmFicyhzYW1wbGVDb2xvclsxXSAtIGNvbG9yMlsxXSkgPiBjb2xvclRocmVzaG9sZClyZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoc2FtcGxlQ29sb3JbMl0gIT09IGZhbHNlICYmIE1hdGguYWJzKHNhbXBsZUNvbG9yWzJdIC0gY29sb3IyWzJdKSA+IGNvbG9yVGhyZXNob2xkKXJldHVybiBmYWxzZTtcbiAgICAgIGlmIChzYW1wbGVDb2xvclszXSAhPT0gZmFsc2UgJiYgTWF0aC5hYnMoc2FtcGxlQ29sb3JbM10gLSBjb2xvcjJbM10pID4gY29sb3JUaHJlc2hvbGQpcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuXG5cbiAgICBpZiAodmlzaXRlZFtpXSA9PT0gMSkgcmV0dXJuIG51bGw7XG5cblxuICAgIHZhciBmaXJzdCA9IHRydWU7XG4gICAgdmFyIHN0YWNrID0gW3t5OiBweSwgbGVmdDogcHggLSAxLCByaWdodDogcHggKyAxLCBkaXI6IDF9XTsgLy8gZmlyc3Qgc2Nhbm5pbmcgbGluZVxuXG4gICAgdmFyIG1vZGUgPSAnc3RyaWN0JztcbiAgICB2YXIgX2NpO1xuICAgIGRvIHtcbiAgICAgIGVsID0gc3RhY2suc2hpZnQoKTsgLy8gZ2V0IGxpbmUgZm9yIHNjYW5uaW5nXG5cbiAgICAgIGNoZWNrWSA9IGZhbHNlO1xuICAgICAgZm9yICh4ID0gZWwubGVmdCArIDE7IHggPCBlbC5yaWdodDsgeCsrKSB7XG4gICAgICAgIGR5ID0gZWwueSAqIHc7XG5cbiAgICAgICAgaWYobW9kZSA9PSAnZ3JhZGllbnQnICYmICFmaXJzdCkge1xuICAgICAgICAgIF9jaSA9IChkeSArIHggKyAoZWwuZGlyID09IC0xID8gdzogLSB3KSkqNDtcbiAgICAgICAgICBzYW1wbGVDb2xvciA9IFtkYXRhW19jaV0sZGF0YVtfY2krMV0sZGF0YVtfY2krMl0sZGF0YVtfY2krM11dO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYWNjZXB0YWJsZSh4LCBlbC55LCBpbWFnZSwgdmlzaXRlZCwgc2FtcGxlQ29sb3IsIGNvbG9yVGhyZXNob2xkKSljb250aW51ZTtcblxuICAgICAgICBmaXJzdCA9IGZhbHNlO1xuXG4gICAgICAgIGNoZWNrWSA9IHRydWU7IC8vIGlmIHRoZSBjb2xvciBvZiB0aGUgbmV3IHBvaW50KHgseSkgaXMgc2ltaWxhciB0byB0aGUgc2FtcGxlIGNvbG9yIG5lZWQgdG8gY2hlY2sgbWlubWF4IGZvciBZXG5cbiAgICAgICAgcmVzdWx0LmNvdW50Kys7XG5cbiAgICAgICAgcmVzdWx0LmRhdGFbZHkgKyB4XSA9IDE7IC8vIG1hcmsgYSBuZXcgcG9pbnQgaW4gbWFza1xuICAgICAgICB2aXNpdGVkW2R5ICsgeF0gPSAxOyAvLyBtYXJrIGEgbmV3IHBvaW50IGFzIHZpc2l0ZWRcblxuICAgICAgICB4bCA9IHggLSAxO1xuICAgICAgICAvLyB3YWxrIHRvIGxlZnQgc2lkZSBzdGFydGluZyB3aXRoIHRoZSBsZWZ0IG5laWdoYm9yXG4gICAgICAgIHdoaWxlICh4bCA+IC0xKSB7XG4gICAgICAgICAgZHlsID0gZHkgKyB4bDtcblxuICAgICAgICAgIGlmKG1vZGUgPT0gJ2dyYWRpZW50Jykge1xuICAgICAgICAgICAgX2NpID0gKGR5bCArIDEpKjQ7XG4gICAgICAgICAgICBzYW1wbGVDb2xvciA9IFtkYXRhW19jaV0sIGRhdGFbX2NpICsgMV0sIGRhdGFbX2NpICsgMl0sIGRhdGFbX2NpICsgM11dO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWFjY2VwdGFibGUoeGwsIGVsLnksIGltYWdlLCB2aXNpdGVkLCBzYW1wbGVDb2xvciwgY29sb3JUaHJlc2hvbGQpKSBicmVhaztcblxuICAgICAgICAgIHJlc3VsdC5jb3VudCsrO1xuICAgICAgICAgIHJlc3VsdC5kYXRhW2R5bF0gPSAxO1xuICAgICAgICAgIHZpc2l0ZWRbZHlsXSA9IDE7XG5cbiAgICAgICAgICB4bC0tO1xuICAgICAgICB9XG4gICAgICAgIHhyID0geCArIDE7XG4gICAgICAgIC8vIHdhbGsgdG8gcmlnaHQgc2lkZSBzdGFydGluZyB3aXRoIHRoZSByaWdodCBuZWlnaGJvclxuICAgICAgICB3aGlsZSAoeHIgPCB3KSB7XG4gICAgICAgICAgZHlyID0gZHkgKyB4cjtcblxuICAgICAgICAgIGlmKG1vZGUgPT0gJ2dyYWRpZW50Jykge1xuICAgICAgICAgICAgX2NpID0gKGR5ciAtIDEpKjQ7XG4gICAgICAgICAgICBzYW1wbGVDb2xvciA9IFtkYXRhW19jaV0sIGRhdGFbX2NpICsgMV0sIGRhdGFbX2NpICsgMl0sIGRhdGFbX2NpICsgM11dO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWFjY2VwdGFibGUoeHIsIGVsLnksIGltYWdlLCB2aXNpdGVkLCBzYW1wbGVDb2xvciwgY29sb3JUaHJlc2hvbGQpKXtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlc3VsdC5jb3VudCsrO1xuICAgICAgICAgIHJlc3VsdC5kYXRhW2R5cl0gPSAxO1xuICAgICAgICAgIHZpc2l0ZWRbZHlyXSA9IDE7XG4gICAgICAgICAgeHIrKztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIG1pbm1heCBmb3IgWFxuICAgICAgICBpZiAoeGwgPCByZXN1bHQuYm91bmRzLm1pblgpIHJlc3VsdC5ib3VuZHMubWluWCA9IHhsICsgMTtcbiAgICAgICAgaWYgKHhyID4gcmVzdWx0LmJvdW5kcy5tYXhYKSByZXN1bHQuYm91bmRzLm1heFggPSB4ciAtIDE7XG5cbiAgICAgICAgbmV3WSA9IGVsLnkgLSBlbC5kaXI7XG4gICAgICAgIGlmIChuZXdZID49IDAgJiYgbmV3WSA8IGgpIHtcbiAgICAgICAgICBpZiAoeGwgPCB4cikgc3RhY2sucHVzaCh7eTogbmV3WSwgbGVmdDogeGwsIHJpZ2h0OiB4ciwgZGlyOiAtZWwuZGlyfSk7IC8vIGZyb20gXCJuZXcgbGVmdFwiIHRvIFwibmV3IHJpZ2h0XCJcbiAgICAgICAgICAvLyBhZGQgdHdvIHNjYW5uaW5nIGxpbmVzIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gKHkgLSBkaXIpIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgIC8vIGlmICh4bCA8PSBlbC5sZWZ0KSBzdGFjay5wdXNoKHt5OiBuZXdZLCBsZWZ0OiB4bCwgcmlnaHQ6IGVsLmxlZnQsIGRpcjogLWVsLmRpcn0pOyAvLyBmcm9tIFwibmV3IGxlZnRcIiB0byBcImN1cnJlbnQgbGVmdFwiXG4gICAgICAgICAgLy8gaWYgKGVsLnJpZ2h0IDw9IHhyKSBzdGFjay5wdXNoKHt5OiBuZXdZLCBsZWZ0OiBlbC5yaWdodCwgcmlnaHQ6IHhyLCBkaXI6IC1lbC5kaXJ9KTsgLy8gZnJvbSBcImN1cnJlbnQgcmlnaHRcIiB0byBcIm5ldyByaWdodFwiXG4gICAgICAgIH1cbiAgICAgICAgbmV3WSA9IGVsLnkgKyBlbC5kaXI7XG4gICAgICAgIGlmIChuZXdZID49IDAgJiYgbmV3WSA8IGgpIHsgLy8gYWRkIHRoZSBzY2FubmluZyBsaW5lIGluIHRoZSBkaXJlY3Rpb24gKHkgKyBkaXIpIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgIGlmICh4bCA8IHhyKSBzdGFjay5wdXNoKHt5OiBuZXdZLCBsZWZ0OiB4bCwgcmlnaHQ6IHhyLCBkaXI6IGVsLmRpcn0pOyAvLyBmcm9tIFwibmV3IGxlZnRcIiB0byBcIm5ldyByaWdodFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGNoZWNrIG1pbm1heCBmb3IgWSBpZiBuZWNlc3NhcnlcbiAgICAgIGlmIChjaGVja1kpIHtcbiAgICAgICAgaWYgKGVsLnkgPCByZXN1bHQuYm91bmRzLm1pblkpIHJlc3VsdC5ib3VuZHMubWluWSA9IGVsLnk7XG4gICAgICAgIGlmIChlbC55ID4gcmVzdWx0LmJvdW5kcy5tYXhZKSByZXN1bHQuYm91bmRzLm1heFkgPSBlbC55O1xuICAgICAgfVxuICAgIH0gd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApO1xuXG4gICAgcG9zdE1lc3NhZ2UgJiYgcG9zdE1lc3NhZ2UocmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGxpYi5leHRlbmRNYXNrID0gZnVuY3Rpb24gKG1hc2ssIHZhbHVlKSB7XG5cbiAgICB2YXIgbWFzazIgPSBuZXcgU2VsZWN0aW9uTWFzayhtYXNrLndpZHRoICsgMiwgbWFzay5oZWlnaHQgKyAyKTtcbiAgICBpZih2YWx1ZSl7XG4gICAgICBtYXNrMi5kYXRhLmZpbGwodmFsdWUpO1xuICAgIH1cblxuICAgIGZvcih2YXIgeSA9IDA7eSA8IG1hc2suaGVpZ2h0IDsgeSsrKXtcbiAgICAgIGZvcih2YXIgeCA9IDA7eCA8IG1hc2sud2lkdGggOyB4Kyspe1xuICAgICAgICBtYXNrMi5kYXRhWyAoeSArIDEpICogbWFzazIud2lkdGggKyB4ICsgMSBdID0gbWFzay5kYXRhW3kgKiBtYXNrLndpZHRoICsgeCBdO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXNrMi5jb3VudCAgPSBtYXNrLmNvdW50O1xuXG4gICAgaWYoIXZhbHVlKSB7XG4gICAgICBtYXNrMi5ib3VuZHMgPSB7XG4gICAgICAgIG1pblg6IG1hc2suYm91bmRzLm1pblggKyAxLFxuICAgICAgICBtYXhYOiBtYXNrLmJvdW5kcy5tYXhYICsgMSxcbiAgICAgICAgbWF4WTogbWFzay5ib3VuZHMubWF4WSArIDEsXG4gICAgICAgIG1pblk6IG1hc2suYm91bmRzLm1pblkgKyAxXG4gICAgICB9O1xuICAgIH1lbHNle1xuICAgICAgbWFzazIuYm91bmRzID0gbWFzay5ib3VuZHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hc2syO1xuICB9O1xuXG4gIC8qKiBDcmVhdGUgYSBiaW5hcnkgbWFzayBvbiB0aGUgaW1hZ2UgYnkgY29sb3IgdGhyZXNob2xkXG4gICAqIEFsZ29yaXRobTogU2NhbmxpbmUgZmxvb2QgZmlsbCAoaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GbG9vZF9maWxsKVxuICAgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2U6IHtVaW50OEFycmF5fSBkYXRhLCB7aW50fSB3aWR0aCwge2ludH0gaGVpZ2h0LCB7aW50fSBieXRlc1xuICAgKiBAcGFyYW0ge2ludH0geCBvZiBzdGFydCBwaXhlbFxuICAgKiBAcGFyYW0ge2ludH0geSBvZiBzdGFydCBwaXhlbFxuICAgKiBAcGFyYW0ge2ludH0gY29sb3IgdGhyZXNob2xkXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gbWFzayBvZiB2aXNpdGVkIHBvaW50cyAob3B0aW9uYWwpXG4gICAqIEByZXR1cm4ge09iamVjdH0gbWFzazoge1VpbnQ4QXJyYXl9IGRhdGEsIHtpbnR9IHdpZHRoLCB7aW50fSBoZWlnaHQsIHtPYmplY3R9IGJvdW5kc1xuICAgKi9cbiAgbGliLmZsb29kRmlsbCA9IGZ1bmN0aW9uIChpbWFnZSwgcHgsIHB5LCBjb2xvclRocmVzaG9sZCwgb3B0aW9ucyxjb2xvcixjYWxsYmFjaykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMuYWN0aXZlTWFzayA9IG9wdGlvbnMuYWN0aXZlTWFzayAgfHwgbmV3IFNlbGVjdGlvbk1hc2soaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCk7XG5cbiAgICByZXR1cm4gbGliLl9fZmxvb2RGaWxsKHtkYXRhOiBbaW1hZ2UsIHB4LCBweSwgY29sb3JUaHJlc2hvbGQsIG9wdGlvbnMsIGNvbG9yXX0sY2FsbGJhY2spO1xuXG4gICAgLypcbiAgICB2YXIgd29ya2VyID0gXy53b3JrZXIobGliLl9fZmxvb2RGaWxsKTtcbiAgICB3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24oZSl7XG4gICAgICB2YXIgbWFzayA9IG5ldyBTZWxlY3Rpb25NYXNrKGUuZGF0YSk7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhtYXNrKTtcbiAgICB9O1xuICAgIHdvcmtlci5wb3N0TWVzc2FnZShbaW1hZ2UsIHB4LCBweSwgY29sb3JUaHJlc2hvbGQsIG9wdGlvbnNdKTtcbiovXG5cbiAgfTtcblxuICBsaWIuc3Vic3RyYWN0ID0gZnVuY3Rpb24gKG1hc2ssIG1hc2syKSB7XG4gICAgdmFyIG1pblgsIG1heFgsIG1pblksIG1heFk7XG5cbiAgICB2YXIgcmVzdWx0ID0gbmV3IFNlbGVjdGlvbk1hc2sobWFzay53aWR0aCwgbWFzay5oZWlnaHQpO1xuICAgIHZhciBib3VuZHMgPSBtYXNrMi5ib3VuZHM7XG5cbiAgICB2YXIgbWluWCA9IGZhbHNlLCBtaW5ZID0gbWFzay5oZWlnaHQsIG1heFggPSBmYWxzZSwgbWF4WSA9IC0xO1xuXG4gICAgZm9yICh2YXIgeCA9IGJvdW5kcy5taW5YOyB4IDw9IGJvdW5kcy5tYXhYOyB4KyspIHtcbiAgICAgIGZvciAodmFyIHkgPSBib3VuZHMubWluWTsgeSA8PSBib3VuZHMubWF4WTsgeSsrKSB7XG4gICAgICAgIHZhciBpbmRleCA9IG1hc2sud2lkdGggKiB5ICsgeDtcblxuICAgICAgICBpZiAoIW1hc2suZGF0YVtpbmRleF0gJiYgbWFzazIuZGF0YVtpbmRleF0pIHtcbiAgICAgICAgICByZXN1bHQuZGF0YVtpbmRleF0gPSAxO1xuICAgICAgICAgIHJlc3VsdC5jb3VudCsrO1xuICAgICAgICAgIGlmIChyZXN1bHQuYm91bmRzLm1pblkgPiB5KXJlc3VsdC5ib3VuZHMubWluWSA9IHk7XG4gICAgICAgICAgaWYgKHJlc3VsdC5ib3VuZHMubWF4WSA8IHkpcmVzdWx0LmJvdW5kcy5tYXhZID0geTtcbiAgICAgICAgICBpZiAocmVzdWx0LmJvdW5kcy5taW5YID4geClyZXN1bHQuYm91bmRzLm1pblggPSB4O1xuICAgICAgICAgIGlmIChyZXN1bHQuYm91bmRzLm1heFggPCB4KXJlc3VsdC5ib3VuZHMubWF4WCA9IHg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgbGliLmdldEltYWdlRGF0YSAgPSBmdW5jdGlvbihtaXhlZFR5cGUpe1xuICAgIHZhciBjYW52YXM7XG4gICAgaWYgKG1peGVkVHlwZS5jb25zdHJ1Y3Rvci5uYW1lID09IFwiSW1hZ2VcIiB8fCBtaXhlZFR5cGUuY29uc3RydWN0b3IubmFtZSA9PSBcIkhUTUxJbWFnZUVsZW1lbnRcIikge1xuICAgICAgdmFyIF9jYW52YXMgPSBjcmVhdGVDYW52YXNFbGVtZW50KCk7XG4gICAgICBfY2FudmFzLndpZHRoID0gbWl4ZWRUeXBlLndpZHRoO1xuICAgICAgX2NhbnZhcy5oZWlnaHQgPSBtaXhlZFR5cGUuaGVpZ2h0O1xuICAgICAgdmFyIGN0eCA9IF9jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgY3R4LmRyYXdJbWFnZShtaXhlZFR5cGUsIDAsIDApO1xuICAgICAgY2FudmFzID0gX2NhbnZhcztcbiAgICB9ZWxzZXtcbiAgICAgIGNhbnZhcyA9IG1peGVkVHlwZTtcbiAgICB9XG4gICAgaWYgKGNhbnZhcy5jb25zdHJ1Y3Rvci5uYW1lID09IFwiSFRNTENhbnZhc0VsZW1lbnRcIiB8fCBjYW52YXMuY29uc3RydWN0b3IubmFtZSA9PSBcIkNhbnZhc1wiKSB7XG4gICAgICB2YXIgaW1nRGF0YSA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikuZ2V0SW1hZ2VEYXRhKDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgfWVsc2V7XG4gICAgICBpbWdEYXRhID0gbWl4ZWRUeXBlO1xuICAgIH1cbiAgICByZXR1cm4gaW1nRGF0YTtcbiAgfTtcblxuICBsaWIuZ2V0Q29sb3JlZFBpeGVscyA9IGZ1bmN0aW9uIChtaXhlZFR5cGUpIHtcbiAgICB2YXIgaW1nRGF0YSA9IGxpYi5nZXRJbWFnZURhdGEobWl4ZWRUeXBlKTtcbiAgICB2YXIgZGF0YSA9IGltZ0RhdGEuZGF0YTtcbiAgICB2YXIgcGl4ZWxzID0gMDtcbiAgICBmb3IgKHZhciBpID0gMzsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgIGlmIChkYXRhW2ldKSB7XG4gICAgICAgIHBpeGVscys9IGRhdGFbaV0gLyAyNTU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwaXhlbHM7XG4gIH07XG5cbiAgbGliLmludmVydE1hc2sgPSBmdW5jdGlvbiAobWFzaykge1xuICAgIHZhciByZXN1bHQgPSBuZXcgU2VsZWN0aW9uTWFzayhtYXNrLndpZHRoLCBtYXNrLmhlaWdodCk7XG4gICAgcmVzdWx0LmJvdW5kcyA9IHtcbiAgICAgIG1pblg6IEluZmluaXR5LFxuICAgICAgbWluWTogSW5maW5pdHksXG4gICAgICBtYXhZOiAtMSxcbiAgICAgIG1heFg6IC0xXG4gICAgfTtcblxuXG4gICAgZm9yICh2YXIgeCA9IDA7IHggPCBtYXNrLndpZHRoOyB4KyspIHtcbiAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgbWFzay5oZWlnaHQ7IHkrKykge1xuICAgICAgICB2YXIgaW5kZXggPSBtYXNrLndpZHRoICogeSArIHg7XG4gICAgICAgIGlmICghbWFzay5kYXRhW2luZGV4XSkge1xuICAgICAgICAgIHJlc3VsdC5kYXRhW2luZGV4XSA9IDE7XG4gICAgICAgICAgcmVzdWx0LmNvdW50Kys7XG4gICAgICAgICAgaWYgKHJlc3VsdC5ib3VuZHMubWluWSA+IHkpcmVzdWx0LmJvdW5kcy5taW5ZID0geTtcbiAgICAgICAgICBpZiAocmVzdWx0LmJvdW5kcy5tYXhZIDwgeSlyZXN1bHQuYm91bmRzLm1heFkgPSB5O1xuICAgICAgICAgIGlmIChyZXN1bHQuYm91bmRzLm1pblggPiB4KXJlc3VsdC5ib3VuZHMubWluWCA9IHg7XG4gICAgICAgICAgaWYgKHJlc3VsdC5ib3VuZHMubWF4WCA8IHgpcmVzdWx0LmJvdW5kcy5tYXhYID0geDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGxpYi5leGNsdWRlID0gZnVuY3Rpb24gKG1hc2ssIG1hc2syKSB7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBTZWxlY3Rpb25NYXNrKG1hc2sud2lkdGgsIG1hc2suaGVpZ2h0KTtcbiAgICB2YXIgYm91bmRzID0ge1xuICAgICAgbWluWDogTWF0aC5taW4obWFzay5ib3VuZHMubWluWCwgbWFzazIuYm91bmRzLm1pblgpLFxuICAgICAgbWF4WDogTWF0aC5tYXgobWFzay5ib3VuZHMubWF4WCwgbWFzazIuYm91bmRzLm1heFgpLFxuICAgICAgbWluWTogTWF0aC5taW4obWFzay5ib3VuZHMubWluWSwgbWFzazIuYm91bmRzLm1pblkpLFxuICAgICAgbWF4WTogTWF0aC5tYXgobWFzay5ib3VuZHMubWF4WSwgbWFzazIuYm91bmRzLm1heFkpXG4gICAgfTtcblxuICAgIHZhciBtaW5YID0gZmFsc2UsIG1pblkgPSBtYXNrLmhlaWdodCwgbWF4WCA9IGZhbHNlLCBtYXhZID0gLTE7XG5cbiAgICBmb3IgKHZhciB4ID0gYm91bmRzLm1pblg7IHggPD0gYm91bmRzLm1heFg7IHgrKykge1xuICAgICAgZm9yICh2YXIgeSA9IGJvdW5kcy5taW5ZOyB5IDw9IGJvdW5kcy5tYXhZOyB5KyspIHtcbiAgICAgICAgdmFyIGluZGV4ID0gbWFzazIud2lkdGggKiB5ICsgeDtcblxuICAgICAgICBpZiAobWFzay5kYXRhW2luZGV4XSBeIG1hc2syLmRhdGFbaW5kZXhdKSB7XG4gICAgICAgICAgcmVzdWx0LmRhdGFbaW5kZXhdID0gMTtcbiAgICAgICAgICByZXN1bHQuY291bnQrKztcbiAgICAgICAgICBtYXhYID0geDtcbiAgICAgICAgICBpZiAobWluWSA+IHkpbWluWSA9IHk7XG4gICAgICAgICAgaWYgKG1heFkgPCB5KW1heFkgPSB5O1xuICAgICAgICAgIGlmIChtaW5YID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWluWCA9IHg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVzdWx0LmJvdW5kcyA9IHtcbiAgICAgIG1pblg6IG1pblgsXG4gICAgICBtYXhYOiBtYXhYLFxuICAgICAgbWluWTogbWluWSxcbiAgICAgIG1heFk6IG1heFlcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGxpYi5pbnRlcnNlY3QgPSBmdW5jdGlvbiAobWFzaywgbWFzazIpIHtcbiAgICB2YXIgbWluWCwgbWF4WCwgbWluWSwgbWF4WTtcblxuICAgIHZhciByZXN1bHQgPSBuZXcgU2VsZWN0aW9uTWFzayhtYXNrLndpZHRoLCBtYXNrLmhlaWdodCk7XG4gICAgdmFyIGJvdW5kcyA9IHtcbiAgICAgIG1pblg6IE1hdGgubWF4KG1hc2suYm91bmRzLm1pblgsIG1hc2syLmJvdW5kcy5taW5YKSxcbiAgICAgIG1heFg6IE1hdGgubWluKG1hc2suYm91bmRzLm1heFgsIG1hc2syLmJvdW5kcy5tYXhYKSxcbiAgICAgIG1pblk6IE1hdGgubWF4KG1hc2suYm91bmRzLm1pblksIG1hc2syLmJvdW5kcy5taW5ZKSxcbiAgICAgIG1heFk6IE1hdGgubWluKG1hc2suYm91bmRzLm1heFksIG1hc2syLmJvdW5kcy5tYXhZKVxuICAgIH07XG5cbiAgICB2YXIgbWluWCA9IGZhbHNlLCBtaW5ZID0gbWFzay5oZWlnaHQsIG1heFggPSBmYWxzZSwgbWF4WSA9IC0xO1xuXG4gICAgZm9yICh2YXIgeCA9IGJvdW5kcy5taW5YOyB4IDw9IGJvdW5kcy5tYXhYOyB4KyspIHtcbiAgICAgIGZvciAodmFyIHkgPSBib3VuZHMubWluWTsgeSA8PSBib3VuZHMubWF4WTsgeSsrKSB7XG4gICAgICAgIHZhciBpbmRleCA9IG1hc2syLndpZHRoICogeSArIHg7XG5cbiAgICAgICAgaWYgKG1hc2suZGF0YVtpbmRleF0gJiYgbWFzazIuZGF0YVtpbmRleF0pIHtcbiAgICAgICAgICByZXN1bHQuZGF0YVtpbmRleF0gPSAxO1xuICAgICAgICAgIHJlc3VsdC5jb3VudCsrO1xuICAgICAgICAgIG1heFggPSB4O1xuICAgICAgICAgIGlmIChtaW5ZID4geSltaW5ZID0geTtcbiAgICAgICAgICBpZiAobWF4WSA8IHkpbWF4WSA9IHk7XG4gICAgICAgICAgaWYgKG1pblggPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtaW5YID0geDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXN1bHQuYm91bmRzID0ge1xuICAgICAgbWluWDogbWluWCxcbiAgICAgIG1heFg6IG1heFgsXG4gICAgICBtaW5ZOiBtaW5ZLFxuICAgICAgbWF4WTogbWF4WVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgbGliLmFkZCA9IGZ1bmN0aW9uIChtYXNrLCBtYXNrMikge1xuICAgIHZhciByZXN1bHQgPSBuZXcgU2VsZWN0aW9uTWFzayhtYXNrLndpZHRoLCBtYXNrLmhlaWdodCk7XG5cbiAgICByZXN1bHQuYm91bmRzID0ge1xuICAgICAgbWluWDogTWF0aC5taW4obWFzay5ib3VuZHMubWluWCwgbWFzazIuYm91bmRzLm1pblgpLFxuICAgICAgbWF4WDogTWF0aC5tYXgobWFzay5ib3VuZHMubWF4WCwgbWFzazIuYm91bmRzLm1heFgpLFxuICAgICAgbWluWTogTWF0aC5taW4obWFzay5ib3VuZHMubWluWSwgbWFzazIuYm91bmRzLm1pblkpLFxuICAgICAgbWF4WTogTWF0aC5tYXgobWFzay5ib3VuZHMubWF4WSwgbWFzazIuYm91bmRzLm1heFkpXG4gICAgfTtcblxuICAgIGZvciAodmFyIHggPSByZXN1bHQuYm91bmRzLm1pblg7IHggPD0gcmVzdWx0LmJvdW5kcy5tYXhYOyB4KyspIHtcbiAgICAgIGZvciAodmFyIHkgPSByZXN1bHQuYm91bmRzLm1pblk7IHkgPD0gcmVzdWx0LmJvdW5kcy5tYXhZOyB5KyspIHtcbiAgICAgICAgdmFyIGluZGV4ID0gbWFzazIud2lkdGggKiB5ICsgeDtcblxuICAgICAgICBpZiAobWFzay5kYXRhW2luZGV4XSB8fCBtYXNrMi5kYXRhW2luZGV4XSkge1xuICAgICAgICAgIHJlc3VsdC5kYXRhW2luZGV4XSA9IDE7XG4gICAgICAgICAgcmVzdWx0LmNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8qKiBBcHBseSB0aGUgZ2F1c3MtYmx1ciBmaWx0ZXIgdG8gYmluYXJ5IG1hc2tcbiAgICogQWxnb3JpdGhtczogaHR0cDovL2Jsb2cuaXZhbmsubmV0L2Zhc3Rlc3QtZ2F1c3NpYW4tYmx1ci5odG1sXG4gICAqIGh0dHA6Ly93d3cubGlicm93LmNvbS9hcnRpY2xlcy9hcnRpY2xlLTlcbiAgICogaHR0cDovL2VseW54c2RrLmZyZWUuZnIvZXh0LWRvY3MvQmx1ci9GYXN0X2JveF9ibHVyLnBkZlxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFzazoge1VpbnQ4QXJyYXl9IGRhdGEsIHtpbnR9IHdpZHRoLCB7aW50fSBoZWlnaHQsIHtPYmplY3R9IGJvdW5kc1xuICAgKiBAcGFyYW0ge2ludH0gYmx1ciByYWRpdXNcbiAgICogQHJldHVybiB7T2JqZWN0fSBtYXNrOiB7VWludDhBcnJheX0gZGF0YSwge2ludH0gd2lkdGgsIHtpbnR9IGhlaWdodCwge09iamVjdH0gYm91bmRzXG4gICAqL1xuICBsaWIuZ2F1c3NCbHVyID0gZnVuY3Rpb24gKG1hc2ssIHJhZGl1cykge1xuXG4gICAgdmFyIGksIGssIGsxLCB4LCB5LCB2YWwsIHN0YXJ0LCBlbmQsXG4gICAgICBuID0gcmFkaXVzICogMiArIDEsIC8vIHNpemUgb2YgdGhlIHBhdHRlcm4gZm9yIHJhZGl1cy1uZWlnaGJvcnMgKGZyb20gLXIgdG8gK3Igd2l0aCB0aGUgY2VudGVyIHBvaW50KVxuICAgICAgczIgPSByYWRpdXMgKiByYWRpdXMsXG4gICAgICB3ZyA9IG5ldyBGbG9hdDMyQXJyYXkobiksIC8vIHdlaWdodHNcbiAgICAgIHRvdGFsID0gMCwgLy8gc3VtIG9mIHdlaWdodHModXNlZCBmb3Igbm9ybWFsaXphdGlvbilcbiAgICAgIHcgPSBtYXNrLndpZHRoLFxuICAgICAgaCA9IG1hc2suaGVpZ2h0LFxuICAgICAgZGF0YSA9IG1hc2suZGF0YSxcbiAgICAgIG1pblggPSBtYXNrLmJvdW5kcy5taW5YLFxuICAgICAgbWF4WCA9IG1hc2suYm91bmRzLm1heFgsXG4gICAgICBtaW5ZID0gbWFzay5ib3VuZHMubWluWSxcbiAgICAgIG1heFkgPSBtYXNrLmJvdW5kcy5tYXhZLFxuICAgICAgY291bnQgPSAwO1xuXG4gICAgLy8gY2FsYyBnYXVzcyB3ZWlnaHRzXG4gICAgZm9yIChpID0gMDsgaSA8IHJhZGl1czsgaSsrKSB7XG4gICAgICB2YXIgZHNxID0gKHJhZGl1cyAtIGkpICogKHJhZGl1cyAtIGkpO1xuICAgICAgdmFyIHd3ID0gTWF0aC5leHAoLWRzcSAvICgyLjAgKiBzMikpIC8gKDIgKiBNYXRoLlBJICogczIpO1xuICAgICAgd2dbcmFkaXVzICsgaV0gPSB3Z1tyYWRpdXMgLSBpXSA9IHd3O1xuICAgICAgdG90YWwgKz0gMiAqIHd3O1xuICAgIH1cbiAgICAvLyBub3JtYWxpemF0aW9uIHdlaWdodHNcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICB3Z1tpXSAvPSB0b3RhbDtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkodyAqIGgpLCAvLyByZXN1bHQgbWFza1xuICAgICAgZW5kWCA9IHJhZGl1cyArIHcsXG4gICAgICBlbmRZID0gcmFkaXVzICsgaDtcblxuICAgIC8vd2FsayB0aHJvdWdoIGFsbCBzb3VyY2UgcG9pbnRzIGZvciBibHVyXG4gICAgZm9yICh5ID0gbWluWTsgeSA8IG1heFkgKyAxOyB5KyspXG4gICAgICBmb3IgKHggPSBtaW5YOyB4IDwgbWF4WCArIDE7IHgrKykge1xuICAgICAgICB2YWwgPSAwO1xuICAgICAgICBrID0geSAqIHcgKyB4OyAvLyBpbmRleCBvZiB0aGUgcG9pbnRcbiAgICAgICAgc3RhcnQgPSByYWRpdXMgLSB4ID4gMCA/IHJhZGl1cyAtIHggOiAwO1xuICAgICAgICBlbmQgPSBlbmRYIC0geCA8IG4gPyBlbmRYIC0geCA6IG47IC8vIE1hdGgubWluKCgoKHcgLSAxKSAtIHgpICsgcmFkaXVzKSArIDEsIG4pO1xuICAgICAgICBrMSA9IGsgLSByYWRpdXM7XG4gICAgICAgIC8vIHdhbGsgdGhyb3VnaCB4LW5laWdoYm9yc1xuICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICAgICAgdmFsICs9IGRhdGFbazEgKyBpXSAqIHdnW2ldO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0ID0gcmFkaXVzIC0geSA+IDAgPyByYWRpdXMgLSB5IDogMDtcbiAgICAgICAgZW5kID0gZW5kWSAtIHkgPCBuID8gZW5kWSAtIHkgOiBuOyAvLyBNYXRoLm1pbigoKChoIC0gMSkgLSB5KSArIHJhZGl1cykgKyAxLCBuKTtcbiAgICAgICAgazEgPSBrIC0gcmFkaXVzICogdztcbiAgICAgICAgLy8gd2FsayB0aHJvdWdoIHktbmVpZ2hib3JzXG4gICAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgICB2YWwgKz0gZGF0YVtrMSArIGkgKiB3XSAqIHdnW2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwgPiAwLjUpIHtcbiAgICAgICAgICByZXN1bHRba10gPSAxO1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0W2tdID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvdW50OiBjb3VudCxcbiAgICAgIGRhdGE6IHJlc3VsdCxcbiAgICAgIHdpZHRoOiB3LFxuICAgICAgaGVpZ2h0OiBoLFxuICAgICAgYm91bmRzOiB7XG4gICAgICAgIG1pblg6IG1pblgsXG4gICAgICAgIG1pblk6IG1pblksXG4gICAgICAgIG1heFg6IG1heFgsXG4gICAgICAgIG1heFk6IG1heFlcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8qKiBDcmVhdGUgYSBib3JkZXIgaW5kZXggYXJyYXkgb2YgYm91bmRhcnkgcG9pbnRzIG9mIHRoZSBtYXNrIHdpdGggcmFkaXVzLW5laWdoYm9yc1xuICAgKiBAcGFyYW0ge09iamVjdH0gbWFzazoge1VpbnQ4QXJyYXl9IGRhdGEsIHtpbnR9IHdpZHRoLCB7aW50fSBoZWlnaHQsIHtPYmplY3R9IGJvdW5kc1xuICAgKiBAcGFyYW0ge2ludH0gcmFkaXVzOiBibHVyIHJhZGl1c1xuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHZpc2l0ZWQ6IG1hc2sgb2YgdmlzaXRlZCBwb2ludHMgKG9wdGlvbmFsKVxuICAgKiBAcmV0dXJuIHtBcnJheX0gYm9yZGVyIGluZGV4IGFycmF5IG9mIGJvdW5kYXJ5IHBvaW50cyB3aXRoIHJhZGl1cy1uZWlnaGJvcnMgKG9ubHkgcG9pbnRzIG5lZWQgZm9yIGJsdXIpXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVCb3JkZXJGb3JCbHVyKG1hc2ssIHJhZGl1cywgdmlzaXRlZCkge1xuXG4gICAgdmFyIHgsIGksIGosIHksIGssIGsxLCBrMixcbiAgICAgIHcgPSBtYXNrLndpZHRoLFxuICAgICAgaCA9IG1hc2suaGVpZ2h0LFxuICAgICAgZGF0YSA9IG1hc2suZGF0YSxcbiAgICAgIHZpc2l0ZWREYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSksXG4gICAgICBtaW5YID0gbWFzay5ib3VuZHMubWluWCxcbiAgICAgIG1heFggPSBtYXNrLmJvdW5kcy5tYXhYLFxuICAgICAgbWluWSA9IG1hc2suYm91bmRzLm1pblksXG4gICAgICBtYXhZID0gbWFzay5ib3VuZHMubWF4WSxcbiAgICAgIGxlbiA9IHcgKiBoLFxuICAgICAgdGVtcCA9IG5ldyBVaW50OEFycmF5KGxlbiksIC8vIGF1eGlsaWFyeSBhcnJheSB0byBjaGVjayB1bmlxdWVuZXNzXG4gICAgICBib3JkZXIgPSBbXSwgLy8gb25seSBib3JkZXIgcG9pbnRzXG4gICAgICB4MCA9IE1hdGgubWF4KG1pblgsIDEpLFxuICAgICAgeDEgPSBNYXRoLm1pbihtYXhYLCB3IC0gMiksXG4gICAgICB5MCA9IE1hdGgubWF4KG1pblksIDEpLFxuICAgICAgeTEgPSBNYXRoLm1pbihtYXhZLCBoIC0gMik7XG5cbiAgICBpZiAodmlzaXRlZCAmJiB2aXNpdGVkLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIGNvcHkgdmlzaXRlZCBwb2ludHMgKG9ubHkgXCJibGFja1wiKVxuICAgICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrKSB7XG4gICAgICAgIGlmICh2aXNpdGVkW2tdID09PSAxKSB2aXNpdGVkRGF0YVtrXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gd2FsayB0aHJvdWdoIGlubmVyIHZhbHVlcyBleGNlcHQgcG9pbnRzIG9uIHRoZSBib3VuZGFyeSBvZiB0aGUgaW1hZ2VcbiAgICBmb3IgKHkgPSB5MDsgeSA8IHkxICsgMTsgeSsrKVxuICAgICAgZm9yICh4ID0geDA7IHggPCB4MSArIDE7IHgrKykge1xuICAgICAgICBrID0geSAqIHcgKyB4O1xuICAgICAgICBpZiAoZGF0YVtrXSA9PT0gMCkgY29udGludWU7IC8vIFwid2hpdGVcIiBwb2ludCBpc24ndCB0aGUgYm9yZGVyXG4gICAgICAgIGsxID0gayArIHc7IC8vIHkgKyAxXG4gICAgICAgIGsyID0gayAtIHc7IC8vIHkgLSAxXG4gICAgICAgIC8vIGNoZWNrIGlmIGFueSBuZWlnaGJvciB3aXRoIGEgXCJ3aGl0ZVwiIGNvbG9yXG4gICAgICAgIGlmICh2aXNpdGVkRGF0YVtrICsgMV0gPT09IDAgfHwgdmlzaXRlZERhdGFbayAtIDFdID09PSAwIHx8XG4gICAgICAgICAgdmlzaXRlZERhdGFbazFdID09PSAwIHx8IHZpc2l0ZWREYXRhW2sxICsgMV0gPT09IDAgfHwgdmlzaXRlZERhdGFbazEgLSAxXSA9PT0gMCB8fFxuICAgICAgICAgIHZpc2l0ZWREYXRhW2syXSA9PT0gMCB8fCB2aXNpdGVkRGF0YVtrMiArIDFdID09PSAwIHx8IHZpc2l0ZWREYXRhW2syIC0gMV0gPT09IDApIHtcbiAgICAgICAgICAvL2lmICh2aXNpdGVkRGF0YVtrICsgMV0gKyB2aXNpdGVkRGF0YVtrIC0gMV0gK1xuICAgICAgICAgIC8vICAgIHZpc2l0ZWREYXRhW2sxXSArIHZpc2l0ZWREYXRhW2sxICsgMV0gKyB2aXNpdGVkRGF0YVtrMSAtIDFdICtcbiAgICAgICAgICAvLyAgICB2aXNpdGVkRGF0YVtrMl0gKyB2aXNpdGVkRGF0YVtrMiArIDFdICsgdmlzaXRlZERhdGFbazIgLSAxXSA9PSA4KSBjb250aW51ZTtcbiAgICAgICAgICBib3JkZXIucHVzaChrKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgLy8gd2FsayB0aHJvdWdoIHBvaW50cyBvbiB0aGUgYm91bmRhcnkgb2YgdGhlIGltYWdlIGlmIG5lY2Vzc2FyeVxuICAgIC8vIGlmIHRoZSBcImJsYWNrXCIgcG9pbnQgaXMgYWRqYWNlbnQgdG8gdGhlIGJvdW5kYXJ5IG9mIHRoZSBpbWFnZSwgaXQgaXMgYSBib3JkZXIgcG9pbnRcbiAgICBpZiAobWluWCA9PSAwKVxuICAgICAgZm9yICh5ID0gbWluWTsgeSA8IG1heFkgKyAxOyB5KyspXG4gICAgICAgIGlmIChkYXRhW3kgKiB3XSA9PT0gMSlcbiAgICAgICAgICBib3JkZXIucHVzaCh5ICogdyk7XG5cbiAgICBpZiAobWF4WCA9PSB3IC0gMSlcbiAgICAgIGZvciAoeSA9IG1pblk7IHkgPCBtYXhZICsgMTsgeSsrKVxuICAgICAgICBpZiAoZGF0YVt5ICogdyArIG1heFhdID09PSAxKVxuICAgICAgICAgIGJvcmRlci5wdXNoKHkgKiB3ICsgbWF4WCk7XG5cbiAgICBpZiAobWluWSA9PSAwKVxuICAgICAgZm9yICh4ID0gbWluWDsgeCA8IG1heFggKyAxOyB4KyspXG4gICAgICAgIGlmIChkYXRhW3hdID09PSAxKVxuICAgICAgICAgIGJvcmRlci5wdXNoKHgpO1xuXG4gICAgaWYgKG1heFkgPT0gaCAtIDEpXG4gICAgICBmb3IgKHggPSBtaW5YOyB4IDwgbWF4WCArIDE7IHgrKylcbiAgICAgICAgaWYgKGRhdGFbbWF4WSAqIHcgKyB4XSA9PT0gMSlcbiAgICAgICAgICBib3JkZXIucHVzaChtYXhZICogdyArIHgpO1xuXG4gICAgdmFyIHJlc3VsdCA9IFtdLCAvLyBib3JkZXIgcG9pbnRzIHdpdGggcmFkaXVzLW5laWdoYm9yc1xuICAgICAgc3RhcnQsIGVuZCxcbiAgICAgIGVuZFggPSByYWRpdXMgKyB3LFxuICAgICAgZW5kWSA9IHJhZGl1cyArIGgsXG4gICAgICBuID0gcmFkaXVzICogMiArIDE7IC8vIHNpemUgb2YgdGhlIHBhdHRlcm4gZm9yIHJhZGl1cy1uZWlnaGJvcnMgKGZyb20gLXIgdG8gK3Igd2l0aCB0aGUgY2VudGVyIHBvaW50KVxuXG4gICAgbGVuID0gYm9yZGVyLmxlbmd0aDtcbiAgICAvLyB3YWxrIHRocm91Z2ggcmFkaXVzLW5laWdoYm9ycyBvZiBib3JkZXIgcG9pbnRzIGFuZCBhZGQgdGhlbSB0byB0aGUgcmVzdWx0IGFycmF5XG4gICAgZm9yIChqID0gMDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICBrID0gYm9yZGVyW2pdOyAvLyBpbmRleCBvZiB0aGUgYm9yZGVyIHBvaW50XG4gICAgICB0ZW1wW2tdID0gMTsgLy8gbWFyayBib3JkZXIgcG9pbnRcbiAgICAgIHJlc3VsdC5wdXNoKGspOyAvLyBzYXZlIHRoZSBib3JkZXIgcG9pbnRcbiAgICAgIHggPSBrICUgdzsgLy8gY2FsYyB4IGJ5IGluZGV4XG4gICAgICB5ID0gKGsgLSB4KSAvIHc7IC8vIGNhbGMgeSBieSBpbmRleFxuICAgICAgc3RhcnQgPSByYWRpdXMgLSB4ID4gMCA/IHJhZGl1cyAtIHggOiAwO1xuICAgICAgZW5kID0gZW5kWCAtIHggPCBuID8gZW5kWCAtIHggOiBuOyAvLyBNYXRoLm1pbigoKCh3IC0gMSkgLSB4KSArIHJhZGl1cykgKyAxLCBuKTtcbiAgICAgIGsxID0gayAtIHJhZGl1cztcbiAgICAgIC8vIHdhbGsgdGhyb3VnaCB4LW5laWdoYm9yc1xuICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICBrMiA9IGsxICsgaTtcbiAgICAgICAgaWYgKHRlbXBbazJdID09PSAwKSB7IC8vIGNoZWNrIHRoZSB1bmlxdWVuZXNzXG4gICAgICAgICAgdGVtcFtrMl0gPSAxO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGsyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhcnQgPSByYWRpdXMgLSB5ID4gMCA/IHJhZGl1cyAtIHkgOiAwO1xuICAgICAgZW5kID0gZW5kWSAtIHkgPCBuID8gZW5kWSAtIHkgOiBuOyAvLyBNYXRoLm1pbigoKChoIC0gMSkgLSB5KSArIHJhZGl1cykgKyAxLCBuKTtcbiAgICAgIGsxID0gayAtIHJhZGl1cyAqIHc7XG4gICAgICAvLyB3YWxrIHRocm91Z2ggeS1uZWlnaGJvcnNcbiAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgazIgPSBrMSArIGkgKiB3O1xuICAgICAgICBpZiAodGVtcFtrMl0gPT09IDApIHsgLy8gY2hlY2sgdGhlIHVuaXF1ZW5lc3NcbiAgICAgICAgICB0ZW1wW2syXSA9IDE7XG4gICAgICAgICAgcmVzdWx0LnB1c2goazIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvKiogQXBwbHkgdGhlIGdhdXNzLWJsdXIgZmlsdGVyIE9OTFkgdG8gYm9yZGVyIHBvaW50cyB3aXRoIHJhZGl1cy1uZWlnaGJvcnNcbiAgICogQWxnb3JpdGhtczogaHR0cDovL2Jsb2cuaXZhbmsubmV0L2Zhc3Rlc3QtZ2F1c3NpYW4tYmx1ci5odG1sXG4gICAqIGh0dHA6Ly93d3cubGlicm93LmNvbS9hcnRpY2xlcy9hcnRpY2xlLTlcbiAgICogaHR0cDovL2VseW54c2RrLmZyZWUuZnIvZXh0LWRvY3MvQmx1ci9GYXN0X2JveF9ibHVyLnBkZlxuICAgKiBAcGFyYW0gIHtPYmplY3R9ICAgICBtYXNrOiAgICAge1VpbnQ4QXJyYXl9IGRhdGEsIHtpbnR9IHdpZHRoLCB7aW50fSBoZWlnaHQsIHtPYmplY3R9IGJvdW5kc1xuICAgKiBAcGFyYW0gIHtpbnR9ICAgICAgICByYWRpdXM6ICAgYmx1ciByYWRpdXNcbiAgICogQHBhcmFtICB7VWludDhBcnJheX0gdmlzaXRlZDogIG1hc2sgb2YgdmlzaXRlZCBwb2ludHMgKG9wdGlvbmFsKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9ICAgICBtYXNrOiAgICAge1VpbnQ4QXJyYXl9IGRhdGEsIHtpbnR9IHdpZHRoLCB7aW50fSBoZWlnaHQsIHtPYmplY3R9IGJvdW5kc1xuICAgKi9cbiAgbGliLmdhdXNzQmx1ck9ubHlCb3JkZXIgPSBmdW5jdGlvbiAobWFzaywgcmFkaXVzLCB2aXNpdGVkKSB7XG5cbiAgICB2YXIgYm9yZGVyID0gY3JlYXRlQm9yZGVyRm9yQmx1cihtYXNrLCByYWRpdXMsIHZpc2l0ZWQpLCAvLyBnZXQgYm9yZGVyIHBvaW50cyB3aXRoIHJhZGl1cy1uZWlnaGJvcnNcbiAgICAgIHd3LCBkc3EsIGksIGosIGssIGsxLCB4LCB5LCB2YWwsIHN0YXJ0LCBlbmQsXG4gICAgICBuID0gcmFkaXVzICogMiArIDEsIC8vIHNpemUgb2YgdGhlIHBhdHRlcm4gZm9yIHJhZGl1cy1uZWlnaGJvcnMgKGZyb20gLXIgdG8gK3Igd2l0aCBjZW50ZXIgcG9pbnQpXG4gICAgICBzMiA9IDIgKiByYWRpdXMgKiByYWRpdXMsXG4gICAgICB3ZyA9IG5ldyBGbG9hdDMyQXJyYXkobiksIC8vIHdlaWdodHNcbiAgICAgIHRvdGFsID0gMCwgLy8gc3VtIG9mIHdlaWdodHModXNlZCBmb3Igbm9ybWFsaXphdGlvbilcbiAgICAgIHcgPSBtYXNrLndpZHRoLFxuICAgICAgaCA9IG1hc2suaGVpZ2h0LFxuICAgICAgZGF0YSA9IG1hc2suZGF0YSxcbiAgICAgIG1pblggPSBtYXNrLmJvdW5kcy5taW5YLFxuICAgICAgbWF4WCA9IG1hc2suYm91bmRzLm1heFgsXG4gICAgICBtaW5ZID0gbWFzay5ib3VuZHMubWluWSxcbiAgICAgIG1heFkgPSBtYXNrLmJvdW5kcy5tYXhZLFxuICAgICAgbGVuID0gYm9yZGVyLmxlbmd0aDtcblxuICAgIC8vIGNhbGMgZ2F1c3Mgd2VpZ2h0c1xuICAgIGZvciAoaSA9IDA7IGkgPCByYWRpdXM7IGkrKykge1xuICAgICAgZHNxID0gKHJhZGl1cyAtIGkpICogKHJhZGl1cyAtIGkpO1xuICAgICAgd3cgPSBNYXRoLmV4cCgtZHNxIC8gczIpIC8gTWF0aC5QSTtcbiAgICAgIHdnW3JhZGl1cyArIGldID0gd2dbcmFkaXVzIC0gaV0gPSB3dztcbiAgICAgIHRvdGFsICs9IDIgKiB3dztcbiAgICB9XG4gICAgLy8gbm9ybWFsaXphdGlvbiB3ZWlnaHRzXG4gICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgd2dbaV0gLz0gdG90YWw7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IG5ldyBTZWxlY3Rpb25NYXNrKHcsaCxkYXRhKSwgLy8gY29weSB0aGUgc291cmNlIG1hc2tcbiAgICAgIGVuZFggPSByYWRpdXMgKyB3LFxuICAgICAgZW5kWSA9IHJhZGl1cyArIGg7XG5cbiAgICAvL3dhbGsgdGhyb3VnaCBhbGwgYm9yZGVyIHBvaW50cyBmb3IgYmx1clxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgayA9IGJvcmRlcltpXTsgLy8gaW5kZXggb2YgdGhlIGJvcmRlciBwb2ludFxuICAgICAgdmFsID0gMDtcbiAgICAgIHggPSBrICUgdzsgLy8gY2FsYyB4IGJ5IGluZGV4XG4gICAgICB5ID0gKGsgLSB4KSAvIHc7IC8vIGNhbGMgeSBieSBpbmRleFxuICAgICAgc3RhcnQgPSByYWRpdXMgLSB4ID4gMCA/IHJhZGl1cyAtIHggOiAwO1xuICAgICAgZW5kID0gZW5kWCAtIHggPCBuID8gZW5kWCAtIHggOiBuOyAvLyBNYXRoLm1pbigoKCh3IC0gMSkgLSB4KSArIHJhZGl1cykgKyAxLCBuKTtcbiAgICAgIGsxID0gayAtIHJhZGl1cztcbiAgICAgIC8vIHdhbGsgdGhyb3VnaCB4LW5laWdoYm9yc1xuICAgICAgZm9yIChqID0gc3RhcnQ7IGogPCBlbmQ7IGorKykge1xuICAgICAgICB2YWwgKz0gZGF0YVtrMSArIGpdICogd2dbal07XG4gICAgICB9XG4gICAgICBpZiAodmFsID4gMC41KSB7XG4gICAgICAgIHJlc3VsdC5kYXRhW2tdID0gMTtcbiAgICAgICAgcmVzdWx0LmNvdW50Kys7XG4gICAgICAgIC8vIGNoZWNrIG1pbm1heFxuICAgICAgICBpZiAoeCA8IG1pblgpIG1pblggPSB4O1xuICAgICAgICBpZiAoeCA+IG1heFgpIG1heFggPSB4O1xuICAgICAgICBpZiAoeSA8IG1pblkpIG1pblkgPSB5O1xuICAgICAgICBpZiAoeSA+IG1heFkpIG1heFkgPSB5O1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gcmFkaXVzIC0geSA+IDAgPyByYWRpdXMgLSB5IDogMDtcbiAgICAgIGVuZCA9IGVuZFkgLSB5IDwgbiA/IGVuZFkgLSB5IDogbjsgLy8gTWF0aC5taW4oKCgoaCAtIDEpIC0geSkgKyByYWRpdXMpICsgMSwgbik7XG4gICAgICBrMSA9IGsgLSByYWRpdXMgKiB3O1xuICAgICAgLy8gd2FsayB0aHJvdWdoIHktbmVpZ2hib3JzXG4gICAgICBmb3IgKGogPSBzdGFydDsgaiA8IGVuZDsgaisrKSB7XG4gICAgICAgIHZhbCArPSBkYXRhW2sxICsgaiAqIHddICogd2dbal07XG4gICAgICB9XG4gICAgICBpZiAodmFsID4gMC41KSB7XG4gICAgICAgIHJlc3VsdC5kYXRhW2tdID0gMTtcbiAgICAgICAgcmVzdWx0LmNvdW50Kys7XG4gICAgICAgIC8vIGNoZWNrIG1pbm1heFxuICAgICAgICBpZiAoeCA8IG1pblgpIG1pblggPSB4O1xuICAgICAgICBpZiAoeCA+IG1heFgpIG1heFggPSB4O1xuICAgICAgICBpZiAoeSA8IG1pblkpIG1pblkgPSB5O1xuICAgICAgICBpZiAoeSA+IG1heFkpIG1heFkgPSB5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmRhdGFba10gPSAwO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQuYm91bmRzID0ge1xuICAgICAgbWluWDogbWluWCxcbiAgICAgIG1pblk6IG1pblksXG4gICAgICBtYXhYOiBtYXhYLFxuICAgICAgbWF4WTogbWF4WVxuICAgIH07XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8qKiBDcmVhdGUgYSBib3JkZXIgbWFzayAob25seSBib3VuZGFyeSBwb2ludHMpXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXNrOiB7VWludDhBcnJheX0gZGF0YSwge2ludH0gd2lkdGgsIHtpbnR9IGhlaWdodCwge09iamVjdH0gYm91bmRzXG4gICAqIEByZXR1cm4ge09iamVjdH0gYm9yZGVyIG1hc2s6IHtVaW50OEFycmF5fSBkYXRhLCB7aW50fSB3aWR0aCwge2ludH0gaGVpZ2h0LCB7T2JqZWN0fSBvZmZzZXRcbiAgICovXG4gIGxpYi5jcmVhdGVCb3JkZXJNYXNrID0gZnVuY3Rpb24gKG1hc2spIHtcblxuICAgIHZhciB4LCB5LCBrLCBrMSwgazIsXG4gICAgICB3ID0gbWFzay53aWR0aCxcbiAgICAgIGggPSBtYXNrLmhlaWdodCxcbiAgICAgIGRhdGEgPSBtYXNrLmRhdGEsXG4gICAgICBtaW5YID0gbWFzay5ib3VuZHMubWluWCxcbiAgICAgIG1heFggPSBtYXNrLmJvdW5kcy5tYXhYLFxuICAgICAgbWluWSA9IG1hc2suYm91bmRzLm1pblksXG4gICAgICBtYXhZID0gbWFzay5ib3VuZHMubWF4WSxcbiAgICAgIHJ3ID0gbWF4WCAtIG1pblggKyAxLCAvLyBib3VuZHMgc2l6ZVxuICAgICAgcmggPSBtYXhZIC0gbWluWSArIDEsXG4gICAgICByZXN1bHQgPSBuZXcgVWludDhBcnJheShydyAqIHJoKSwgLy8gcmVkdWNlZCBtYXNrIChib3VuZHMgc2l6ZSlcbiAgICAgIHgwID0gTWF0aC5tYXgobWluWCwgMSksXG4gICAgICB4MSA9IE1hdGgubWluKG1heFgsIHcgLSAyKSxcbiAgICAgIHkwID0gTWF0aC5tYXgobWluWSwgMSksXG4gICAgICB5MSA9IE1hdGgubWluKG1heFksIGggLSAyKSxcbiAgICAgIGNvdW50ID0gMDtcblxuICAgIC8vIHdhbGsgdGhyb3VnaCBpbm5lciB2YWx1ZXMgZXhjZXB0IHBvaW50cyBvbiB0aGUgYm91bmRhcnkgb2YgdGhlIGltYWdlXG4gICAgZm9yICh5ID0geTA7IHkgPCB5MSArIDE7IHkrKylcbiAgICAgIGZvciAoeCA9IHgwOyB4IDwgeDEgKyAxOyB4KyspIHtcbiAgICAgICAgayA9IHkgKiB3ICsgeDtcbiAgICAgICAgaWYgKGRhdGFba10gPT09IDApIGNvbnRpbnVlOyAvLyBcIndoaXRlXCIgcG9pbnQgaXNuJ3QgdGhlIGJvcmRlclxuICAgICAgICBrMSA9IGsgKyB3OyAvLyB5ICsgMVxuICAgICAgICBrMiA9IGsgLSB3OyAvLyB5IC0gMVxuICAgICAgICAvLyBjaGVjayBpZiBhbnkgbmVpZ2hib3Igd2l0aCBhIFwid2hpdGVcIiBjb2xvclxuICAgICAgICBpZiAoZGF0YVtrICsgMV0gPT09IDAgfHwgZGF0YVtrIC0gMV0gPT09IDAgfHxcbiAgICAgICAgICBkYXRhW2sxXSA9PT0gMCB8fCBkYXRhW2sxICsgMV0gPT09IDAgfHwgZGF0YVtrMSAtIDFdID09PSAwIHx8XG4gICAgICAgICAgZGF0YVtrMl0gPT09IDAgfHwgZGF0YVtrMiArIDFdID09PSAwIHx8IGRhdGFbazIgLSAxXSA9PT0gMCkge1xuICAgICAgICAgIC8vaWYgKGRhdGFbayArIDFdICsgZGF0YVtrIC0gMV0gK1xuICAgICAgICAgIC8vICAgIGRhdGFbazFdICsgZGF0YVtrMSArIDFdICsgZGF0YVtrMSAtIDFdICtcbiAgICAgICAgICAvLyAgICBkYXRhW2syXSArIGRhdGFbazIgKyAxXSArIGRhdGFbazIgLSAxXSA9PSA4KSBjb250aW51ZTtcbiAgICAgICAgICByZXN1bHRbKHkgLSBtaW5ZKSAqIHJ3ICsgKHggLSBtaW5YKV0gPSAxO1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIC8vIHdhbGsgdGhyb3VnaCBwb2ludHMgb24gdGhlIGJvdW5kYXJ5IG9mIHRoZSBpbWFnZSBpZiBuZWNlc3NhcnlcbiAgICAvLyBpZiB0aGUgXCJibGFja1wiIHBvaW50IGlzIGFkamFjZW50IHRvIHRoZSBib3VuZGFyeSBvZiB0aGUgaW1hZ2UsIGl0IGlzIGEgYm9yZGVyIHBvaW50XG4gICAgaWYgKG1pblggPT0gMClcbiAgICAgIGZvciAoeSA9IG1pblk7IHkgPCBtYXhZICsgMTsgeSsrKVxuICAgICAgICBpZiAoZGF0YVt5ICogd10gPT09IDEpIHtcbiAgICAgICAgICByZXN1bHRbKHkgLSBtaW5ZKSAqIHJ3XSA9IDE7XG4gICAgICAgICAgY291bnQrKztcbiAgICAgICAgfVxuXG4gICAgaWYgKG1heFggPT0gdyAtIDEpXG4gICAgICBmb3IgKHkgPSBtaW5ZOyB5IDwgbWF4WSArIDE7IHkrKylcbiAgICAgICAgaWYgKGRhdGFbeSAqIHcgKyBtYXhYXSA9PT0gMSkge1xuICAgICAgICAgIHJlc3VsdFsoeSAtIG1pblkpICogcncgKyAobWF4WCAtIG1pblgpXSA9IDE7XG4gICAgICAgICAgY291bnQrKztcbiAgICAgICAgfVxuXG4gICAgaWYgKG1pblkgPT0gMClcbiAgICAgIGZvciAoeCA9IG1pblg7IHggPCBtYXhYICsgMTsgeCsrKVxuICAgICAgICBpZiAoZGF0YVt4XSA9PT0gMSkge1xuICAgICAgICAgIHJlc3VsdFt4IC0gbWluWF0gPSAxO1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cblxuICAgIGlmIChtYXhZID09IGggLSAxKVxuICAgICAgZm9yICh4ID0gbWluWDsgeCA8IG1heFggKyAxOyB4KyspXG4gICAgICAgIGlmIChkYXRhW21heFkgKiB3ICsgeF0gPT09IDEpIHtcbiAgICAgICAgICByZXN1bHRbKG1heFkgLSBtaW5ZKSAqIHJ3ICsgKHggLSBtaW5YKV0gPSAxO1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBjb3VudDogY291bnQsXG4gICAgICBkYXRhOiByZXN1bHQsXG4gICAgICB3aWR0aDogcncsXG4gICAgICBoZWlnaHQ6IHJoLFxuICAgICAgb2Zmc2V0OiB7eDogbWluWCwgeTogbWluWX1cbiAgICB9O1xuICB9O1xuXG4gIC8qKiBDcmVhdGUgYSBib3JkZXIgaW5kZXggYXJyYXkgb2YgYm91bmRhcnkgcG9pbnRzIG9mIHRoZSBtYXNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXNrOiB7VWludDhBcnJheX0gZGF0YSwge2ludH0gd2lkdGgsIHtpbnR9IGhlaWdodFxuICAgKiBAcmV0dXJuIHtBcnJheX0gYm9yZGVyIGluZGV4IGFycmF5IGJvdW5kYXJ5IHBvaW50cyBvZiB0aGUgbWFza1xuICAgKi9cbiAgbGliLmdldEJvcmRlckluZGljZXMgPSBmdW5jdGlvbiAobWFzaykge1xuXG4gICAgdmFyIHgsIHksIGssIGsxLCBrMixcbiAgICAgIHcgPSBtYXNrLndpZHRoLFxuICAgICAgaCA9IG1hc2suaGVpZ2h0LFxuICAgICAgZGF0YSA9IG1hc2suZGF0YSxcbiAgICAgIGJvcmRlciA9IFtdLCAvLyBvbmx5IGJvcmRlciBwb2ludHNcbiAgICAgIHgxID0gdyAtIDEsXG4gICAgICB5MSA9IGggLSAxO1xuXG4gICAgLy8gd2FsayB0aHJvdWdoIGlubmVyIHZhbHVlcyBleGNlcHQgcG9pbnRzIG9uIHRoZSBib3VuZGFyeSBvZiB0aGUgaW1hZ2VcbiAgICBmb3IgKHkgPSAxOyB5IDwgeTE7IHkrKylcbiAgICAgIGZvciAoeCA9IDE7IHggPCB4MTsgeCsrKSB7XG4gICAgICAgIGsgPSB5ICogdyArIHg7XG4gICAgICAgIGlmIChkYXRhW2tdID09PSAwKSBjb250aW51ZTsgLy8gXCJ3aGl0ZVwiIHBvaW50IGlzbid0IHRoZSBib3JkZXJcbiAgICAgICAgazEgPSBrICsgdzsgLy8geSArIDFcbiAgICAgICAgazIgPSBrIC0gdzsgLy8geSAtIDFcbiAgICAgICAgLy8gY2hlY2sgaWYgYW55IG5laWdoYm9yIHdpdGggYSBcIndoaXRlXCIgY29sb3JcbiAgICAgICAgaWYgKGRhdGFbayArIDFdID09PSAwIHx8IGRhdGFbayAtIDFdID09PSAwIHx8XG4gICAgICAgICAgZGF0YVtrMV0gPT09IDAgfHwgZGF0YVtrMSArIDFdID09PSAwIHx8IGRhdGFbazEgLSAxXSA9PT0gMCB8fFxuICAgICAgICAgIGRhdGFbazJdID09PSAwIHx8IGRhdGFbazIgKyAxXSA9PT0gMCB8fCBkYXRhW2syIC0gMV0gPT09IDApIHtcbiAgICAgICAgICAvL2lmIChkYXRhW2sgKyAxXSArIGRhdGFbayAtIDFdICtcbiAgICAgICAgICAvLyAgICBkYXRhW2sxXSArIGRhdGFbazEgKyAxXSArIGRhdGFbazEgLSAxXSArXG4gICAgICAgICAgLy8gICAgZGF0YVtrMl0gKyBkYXRhW2syICsgMV0gKyBkYXRhW2syIC0gMV0gPT0gOCkgY29udGludWU7XG4gICAgICAgICAgYm9yZGVyLnB1c2goayk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIC8vIHdhbGsgdGhyb3VnaCBwb2ludHMgb24gdGhlIGJvdW5kYXJ5IG9mIHRoZSBpbWFnZSBpZiBuZWNlc3NhcnlcbiAgICAvLyBpZiB0aGUgXCJibGFja1wiIHBvaW50IGlzIGFkamFjZW50IHRvIHRoZSBib3VuZGFyeSBvZiB0aGUgaW1hZ2UsIGl0IGlzIGEgYm9yZGVyIHBvaW50XG4gICAgZm9yICh5ID0gMDsgeSA8IGg7IHkrKylcbiAgICAgIGlmIChkYXRhW3kgKiB3XSA9PT0gMSlcbiAgICAgICAgYm9yZGVyLnB1c2goeSAqIHcpO1xuXG4gICAgZm9yICh4ID0gMDsgeCA8IHc7IHgrKylcbiAgICAgIGlmIChkYXRhW3hdID09PSAxKVxuICAgICAgICBib3JkZXIucHVzaCh4KTtcblxuICAgIGsgPSB3IC0gMTtcbiAgICBmb3IgKHkgPSAwOyB5IDwgaDsgeSsrKVxuICAgICAgaWYgKGRhdGFbeSAqIHcgKyBrXSA9PT0gMSlcbiAgICAgICAgYm9yZGVyLnB1c2goeSAqIHcgKyBrKTtcblxuICAgIGsgPSAoaCAtIDEpICogdztcbiAgICBmb3IgKHggPSAwOyB4IDwgdzsgeCsrKVxuICAgICAgaWYgKGRhdGFbayArIHhdID09PSAxKVxuICAgICAgICBib3JkZXIucHVzaChrICsgeCk7XG5cbiAgICByZXR1cm4gYm9yZGVyO1xuICB9O1xuXG4gIC8qKiBDcmVhdGUgYSBjb21wcmVzc2VkIG1hc2sgd2l0aCBhIFwid2hpdGVcIiBib3JkZXIgKDFweCBib3JkZXIgd2l0aCB6ZXJvIHZhbHVlcykgZm9yIHRoZSBjb250b3VyIHRyYWNpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hc2s6IHtVaW50OEFycmF5fSBkYXRhLCB7aW50fSB3aWR0aCwge2ludH0gaGVpZ2h0LCB7T2JqZWN0fSBib3VuZHNcbiAgICogQHJldHVybiB7T2JqZWN0fSBib3JkZXIgbWFzazoge1VpbnQ4QXJyYXl9IGRhdGEsIHtpbnR9IHdpZHRoLCB7aW50fSBoZWlnaHQsIHtPYmplY3R9IG9mZnNldFxuICAgKi9cbiAgZnVuY3Rpb24gcHJlcGFyZU1hc2sobWFzaykge1xuICAgIHZhciB4LCB5LFxuICAgICAgdyA9IG1hc2sud2lkdGgsXG4gICAgICBkYXRhID0gbWFzay5kYXRhLFxuICAgICAgbWluWCA9IG1hc2suYm91bmRzLm1pblgsXG4gICAgICBtYXhYID0gbWFzay5ib3VuZHMubWF4WCxcbiAgICAgIG1pblkgPSBtYXNrLmJvdW5kcy5taW5ZLFxuICAgICAgbWF4WSA9IG1hc2suYm91bmRzLm1heFksXG4gICAgICBydyA9IG1heFggLSBtaW5YICsgMywgLy8gYm91bmRzIHNpemUgKzEgcHggb24gZWFjaCBzaWRlIChhIFwid2hpdGVcIiBib3JkZXIpXG4gICAgICByaCA9IG1heFkgLSBtaW5ZICsgMyxcbiAgICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHJ3ICogcmgpOyAvLyByZWR1Y2VkIG1hc2sgKGJvdW5kcyBzaXplKVxuXG4gICAgLy8gd2FsayB0aHJvdWdoIGlubmVyIHZhbHVlcyBhbmQgY29weSBvbmx5IFwiYmxhY2tcIiBwb2ludHMgdG8gdGhlIHJlc3VsdCBtYXNrXG4gICAgZm9yICh5ID0gbWluWTsgeSA8IG1heFkgKyAxOyB5KyspXG4gICAgICBmb3IgKHggPSBtaW5YOyB4IDwgbWF4WCArIDE7IHgrKykge1xuICAgICAgICBpZiAoZGF0YVt5ICogdyArIHhdID09PSAxKVxuICAgICAgICAgIHJlc3VsdFsoeSAtIG1pblkgKyAxKSAqIHJ3ICsgKHggLSBtaW5YICsgMSldID0gMTtcbiAgICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiByZXN1bHQsXG4gICAgICB3aWR0aDogcncsXG4gICAgICBoZWlnaHQ6IHJoLFxuICAgICAgb2Zmc2V0OiB7eDogbWluWCAtIDEsIHk6IG1pblkgLSAxfVxuICAgIH07XG4gIH07XG5cbiAgLyoqIENyZWF0ZSBhIGNvbnRvdXIgYXJyYXkgZm9yIHRoZSBiaW5hcnkgbWFza1xuICAgKiBBbGdvcml0aG06IGh0dHA6Ly93d3cuc2NpZW5jZWRpcmVjdC5jb20vc2NpZW5jZS9hcnRpY2xlL3BpaS9TMTA3NzMxNDIwMzAwMTQwMVxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFzazoge1VpbnQ4QXJyYXl9IGRhdGEsIHtpbnR9IHdpZHRoLCB7aW50fSBoZWlnaHQsIHtPYmplY3R9IGJvdW5kc1xuICAgKiBAcmV0dXJuIHtBcnJheX0gY29udG91cnM6IHtBcnJheX0gcG9pbnRzLCB7Ym9vbH0gaW5uZXIsIHtpbnR9IGxhYmVsXG4gICAqL1xuICBsaWIudHJhY2VDb250b3VycyA9IGZ1bmN0aW9uIChtYXNrKSB7XG4gICAgdmFyIG0gPSBwcmVwYXJlTWFzayhtYXNrKSxcbiAgICAgIGNvbnRvdXJzID0gW10sXG4gICAgICBsYWJlbCA9IDAsXG4gICAgICB3ID0gbS53aWR0aCxcbiAgICAgIHcyID0gdyAqIDIsXG4gICAgICBoID0gbS5oZWlnaHQsXG4gICAgICBzcmMgPSBtLmRhdGEsXG4gICAgICBkeCA9IG0ub2Zmc2V0LngsXG4gICAgICBkeSA9IG0ub2Zmc2V0LnksXG4gICAgICBib3VuZHMsX3AsXG4gICAgICBkZXN0ID0gbmV3IFVpbnQ4QXJyYXkoc3JjKSwgLy8gbGFiZWwgbWF0cml4XG4gICAgICBpLCBqLCB4LCB5LCBrLCBrMSwgYywgaW5uZXIsIGRpciwgZmlyc3QsIHNlY29uZCwgY3VycmVudCwgcHJldmlvdXMsIG5leHQsIGQ7XG5cbiAgICAvLyBhbGwgW2R4LGR5XSBwYWlycyAoYXJyYXkgaW5kZXggaXMgdGhlIGRpcmVjdGlvbilcbiAgICAvLyA1IDYgN1xuICAgIC8vIDQgWCAwXG4gICAgLy8gMyAyIDFcbiAgICB2YXIgZGlyZWN0aW9ucyA9IFtbMSwgMF0sIFsxLCAxXSwgWzAsIDFdLCBbLTEsIDFdLCBbLTEsIDBdLCBbLTEsIC0xXSwgWzAsIC0xXSwgWzEsIC0xXV07XG5cbiAgICBmb3IgKHkgPSAxOyB5IDwgaCAtIDE7IHkrKylcbiAgICAgIGZvciAoeCA9IDE7IHggPCB3IC0gMTsgeCsrKSB7XG4gICAgICAgIGsgPSB5ICogdyArIHg7XG4gICAgICAgIGlmIChzcmNba10gPT09IDEpIHtcbiAgICAgICAgICBmb3IgKGkgPSAtdzsgaSA8IHcyOyBpICs9IHcyKSB7IC8vIGsgLSB3OiBvdXRlciB0cmFjaW5nICh5IC0gMSksIGsgKyB3OiBpbm5lciB0cmFjaW5nICh5ICsgMSlcbiAgICAgICAgICAgIGlmIChzcmNbayArIGldID09PSAwICYmIGRlc3RbayArIGldID09PSAwKSB7IC8vIG5lZWQgY29udG91ciB0cmFjaW5nXG4gICAgICAgICAgICAgIGlubmVyID0gaSA9PT0gdzsgLy8gaXMgaW5uZXIgY29udG91ciB0cmFjaW5nID9cbiAgICAgICAgICAgICAgbGFiZWwrKzsgLy8gbGFiZWwgZm9yIHRoZSBuZXh0IGNvbnRvdXJcblxuICAgICAgICAgICAgICBjID0gW107XG4gICAgICAgICAgICAgIGJvdW5kcyA9IHtcbiAgICAgICAgICAgICAgICBtaW5YIDogdyxcbiAgICAgICAgICAgICAgICBtaW5ZIDogaCxcbiAgICAgICAgICAgICAgICBtYXhYIDogLTEsXG4gICAgICAgICAgICAgICAgbWF4WSA6IC0xLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBkaXIgPSBpbm5lciA/IDIgOiA2OyAvLyBzdGFydCBkaXJlY3Rpb25cbiAgICAgICAgICAgICAgY3VycmVudCA9IHByZXZpb3VzID0gZmlyc3QgPSB7eDogeCwgeTogeX07XG4gICAgICAgICAgICAgIHNlY29uZCA9IG51bGw7XG4gICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgZGVzdFtjdXJyZW50LnkgKiB3ICsgY3VycmVudC54XSA9IGxhYmVsOyAvLyBtYXJrIGxhYmVsIGZvciB0aGUgY3VycmVudCBwb2ludFxuICAgICAgICAgICAgICAgIC8vIGJ5cGFzcyBhbGwgdGhlIG5laWdoYm9ycyBhcm91bmQgdGhlIGN1cnJlbnQgcG9pbnQgaW4gYSBjbG9ja3dpc2VcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgODsgaisrKSB7XG4gICAgICAgICAgICAgICAgICBkaXIgPSAoZGlyICsgMSkgJSA4O1xuXG4gICAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIG5leHQgcG9pbnQgYnkgbmV3IGRpcmVjdGlvblxuICAgICAgICAgICAgICAgICAgZCA9IGRpcmVjdGlvbnNbZGlyXTsgLy8gaW5kZXggYXMgZGlyZWN0aW9uXG4gICAgICAgICAgICAgICAgICBuZXh0ID0ge3g6IGN1cnJlbnQueCArIGRbMF0sIHk6IGN1cnJlbnQueSArIGRbMV19O1xuXG4gICAgICAgICAgICAgICAgICBrMSA9IG5leHQueSAqIHcgKyBuZXh0Lng7XG4gICAgICAgICAgICAgICAgICBpZiAoc3JjW2sxXSA9PT0gMSkgLy8gYmxhY2sgYm91bmRhcnkgcGl4ZWxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdFtrMV0gPSBsYWJlbDsgLy8gbWFyayBhIGxhYmVsXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZGVzdFtrMV0gPSAtMTsgLy8gbWFyayBhIHdoaXRlIGJvdW5kYXJ5IHBpeGVsXG4gICAgICAgICAgICAgICAgICBuZXh0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgPT09IG51bGwpIGJyZWFrOyAvLyBubyBuZWlnaGJvdXJzIChvbmUtcG9pbnQgY29udG91cilcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbmV4dDtcbiAgICAgICAgICAgICAgICBpZiAoc2Vjb25kKSB7XG4gICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXMueCA9PT0gZmlyc3QueCAmJiBwcmV2aW91cy55ID09PSBmaXJzdC55ICYmIGN1cnJlbnQueCA9PT0gc2Vjb25kLnggJiYgY3VycmVudC55ID09PSBzZWNvbmQueSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gY3JlYXRpbmcgdGhlIGNvbnRvdXIgY29tcGxldGVkIHdoZW4gcmV0dXJuZWQgdG8gb3JpZ2luYWwgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc2Vjb25kID0gbmV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3AgPSB7eDogcHJldmlvdXMueCArIGR4LCB5OiBwcmV2aW91cy55ICsgZHl9O1xuICAgICAgICAgICAgICAgIGlmKGJvdW5kcy5taW5YID4gX3AueClib3VuZHMubWluWCA9IF9wLng7XG4gICAgICAgICAgICAgICAgaWYoYm91bmRzLm1heFggPCBfcC54KWJvdW5kcy5tYXhYID0gX3AueDtcbiAgICAgICAgICAgICAgICBpZihib3VuZHMubWluWSA+IF9wLnkpYm91bmRzLm1pblkgPSBfcC55O1xuICAgICAgICAgICAgICAgIGlmKGJvdW5kcy5tYXhZIDwgX3AueSlib3VuZHMubWF4WSA9IF9wLnk7XG4gICAgICAgICAgICAgICAgYy5wdXNoKF9wKTtcbiAgICAgICAgICAgICAgICBwcmV2aW91cyA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgZGlyID0gKGRpciArIDQpICUgODsgLy8gbmV4dCBkaXIgKHN5bW1ldHJpY2FsbHkgdG8gdGhlIGN1cnJlbnQgZGlyZWN0aW9uKVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKG5leHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIF9wID0ge3g6IGZpcnN0LnggKyBkeCwgeTogZmlyc3QueSArIGR5fTtcbiAgICAgICAgICAgICAgICBpZihib3VuZHMubWluWCA+ICBfcC54KWJvdW5kcy5taW5YID0gIF9wLng7XG4gICAgICAgICAgICAgICAgaWYoYm91bmRzLm1heFggPCAgX3AueClib3VuZHMubWF4WCA9ICBfcC54O1xuICAgICAgICAgICAgICAgIGlmKGJvdW5kcy5taW5ZID4gIF9wLnkpYm91bmRzLm1pblkgPSAgX3AueTtcbiAgICAgICAgICAgICAgICBpZihib3VuZHMubWF4WSA8ICBfcC55KWJvdW5kcy5tYXhZID0gIF9wLnk7XG4gICAgICAgICAgICAgICAgYy5wdXNoKF9wKTsgLy8gY2xvc2UgdGhlIGNvbnRvdXJcbiAgICAgICAgICAgICAgICBjb250b3Vycy5wdXNoKHtpbm5lcjogaW5uZXIsIGxhYmVsOiBsYWJlbCwgcG9pbnRzOiBjLGJvdW5kcyA6IGJvdW5kc30pOyAvLyBhZGQgY29udG91ciB0byB0aGUgbGlzdFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICByZXR1cm4gY29udG91cnM7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmdiVG9Ic2wociwgZywgYil7XG4gICAgciAvPSAyNTUsIGcgLz0gMjU1LCBiIC89IDI1NTtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYiksIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIHZhciBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgaWYobWF4ID09IG1pbil7XG4gICAgICBoID0gcyA9IDA7IC8vIGFjaHJvbWF0aWNcbiAgICB9ZWxzZXtcbiAgICAgIHZhciBkID0gbWF4IC0gbWluO1xuICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgICAgc3dpdGNoKG1heCl7XG4gICAgICAgIGNhc2UgcjogaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApOyBicmVhaztcbiAgICAgICAgY2FzZSBnOiBoID0gKGIgLSByKSAvIGQgKyAyOyBicmVhaztcbiAgICAgICAgY2FzZSBiOiBoID0gKHIgLSBnKSAvIGQgKyA0OyBicmVhaztcbiAgICAgIH1cbiAgICAgIGggLz0gNjtcbiAgICB9XG5cbiAgICByZXR1cm4gW2ggKiAyNTUsIHMqIDI1NSwgbCogMjU1XTtcbiAgfVxuXG4gIGxpYi5zaW1wbGlmeUNvbnRvdXIgPSBmdW5jdGlvbiAoYywgc2ltcGxpZnlUb2xlcmFudCwgc2ltcGxpZnlDb3VudCkge1xuICAgIHZhclxuICAgICAgaSwgaiwgaywgYywgcG9pbnRzLCBsZW4sIHJlc1BvaW50cywgbHN0LCBzdGFjaywgaWRzLFxuICAgICAgbWF4ZCwgbWF4aSwgZGlzdCwgcjEsIHIyLCByMTIsIGR4LCBkeSwgcGksIHBmLCBwbDtcblxuICAgIHBvaW50cyA9IGMucG9pbnRzO1xuICAgIGxlbiA9IGMucG9pbnRzLmxlbmd0aDtcblxuICAgIGlmIChsZW4gPCBzaW1wbGlmeUNvdW50KSB7IC8vIGNvbnRvdXIgaXNuJ3Qgc2ltcGxpZmllZFxuICAgICAgcmVzUG9pbnRzID0gW107XG4gICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgcmVzUG9pbnRzLnB1c2goe3g6IHBvaW50c1trXS54LCB5OiBwb2ludHNba10ueX0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYm91bmRzOiBjLmJvdW5kcywgaW5uZXI6IGMuaW5uZXIsIGxhYmVsOiBjLmxhYmVsLCBwb2ludHM6IHJlc1BvaW50cywgaW5pdGlhbENvdW50OiBsZW59O1xuICAgIH1cblxuICAgIGxzdCA9IFswLCBsZW4gLSAxXTsgLy8gYWx3YXlzIGFkZCBmaXJzdCBhbmQgbGFzdCBwb2ludHNcbiAgICBzdGFjayA9IFt7Zmlyc3Q6IDAsIGxhc3Q6IGxlbiAtIDF9XTsgLy8gZmlyc3QgcHJvY2Vzc2VkIGVkZ2VcblxuICAgIGRvIHtcbiAgICAgIGlkcyA9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICBpZiAoaWRzLmxhc3QgPD0gaWRzLmZpcnN0ICsgMSkgLy8gbm8gaW50ZXJtZWRpYXRlIHBvaW50c1xuICAgICAge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbWF4ZCA9IC0xLjA7IC8vIG1heCBkaXN0YW5jZSBmcm9tIHBvaW50IHRvIGN1cnJlbnQgZWRnZVxuICAgICAgbWF4aSA9IGlkcy5maXJzdDsgLy8gaW5kZXggb2YgbWF4aW1hbGx5IGRpc3RhbnQgcG9pbnRcblxuICAgICAgZm9yIChpID0gaWRzLmZpcnN0ICsgMTsgaSA8IGlkcy5sYXN0OyBpKyspIC8vIGJ5cGFzcyBpbnRlcm1lZGlhdGUgcG9pbnRzIGluIGVkZ2VcbiAgICAgIHtcbiAgICAgICAgLy8gY2FsYyB0aGUgZGlzdGFuY2UgZnJvbSBjdXJyZW50IHBvaW50IHRvIGVkZ2VcbiAgICAgICAgcGkgPSBwb2ludHNbaV07XG4gICAgICAgIHBmID0gcG9pbnRzW2lkcy5maXJzdF07XG4gICAgICAgIHBsID0gcG9pbnRzW2lkcy5sYXN0XTtcbiAgICAgICAgZHggPSBwaS54IC0gcGYueDtcbiAgICAgICAgZHkgPSBwaS55IC0gcGYueTtcbiAgICAgICAgcjEgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgICAgICBkeCA9IHBpLnggLSBwbC54O1xuICAgICAgICBkeSA9IHBpLnkgLSBwbC55O1xuICAgICAgICByMiA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgICAgIGR4ID0gcGYueCAtIHBsLng7XG4gICAgICAgIGR5ID0gcGYueSAtIHBsLnk7XG4gICAgICAgIHIxMiA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgICAgIGlmIChyMSA+PSBNYXRoLnNxcnQocjIgKiByMiArIHIxMiAqIHIxMikpIGRpc3QgPSByMjtcbiAgICAgICAgZWxzZSBpZiAocjIgPj0gTWF0aC5zcXJ0KHIxICogcjEgKyByMTIgKiByMTIpKSBkaXN0ID0gcjE7XG4gICAgICAgIGVsc2UgZGlzdCA9IE1hdGguYWJzKChkeSAqIHBpLnggLSBkeCAqIHBpLnkgKyBwZi54ICogcGwueSAtIHBsLnggKiBwZi55KSAvIHIxMik7XG5cbiAgICAgICAgaWYgKGRpc3QgPiBtYXhkKSB7XG4gICAgICAgICAgbWF4aSA9IGk7IC8vIHNhdmUgdGhlIGluZGV4IG9mIG1heGltYWxseSBkaXN0YW50IHBvaW50XG4gICAgICAgICAgbWF4ZCA9IGRpc3Q7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1heGQgPiBzaW1wbGlmeVRvbGVyYW50KSAvLyBpZiB0aGUgbWF4IFwiZGV2aWF0aW9uXCIgaXMgbGFyZ2VyIHRoYW4gYWxsb3dlZCB0aGVuLi4uXG4gICAgICB7XG4gICAgICAgIGxzdC5wdXNoKG1heGkpOyAvLyBhZGQgaW5kZXggdG8gdGhlIHNpbXBsaWZpZWQgbGlzdFxuICAgICAgICBzdGFjay5wdXNoKHtmaXJzdDogaWRzLmZpcnN0LCBsYXN0OiBtYXhpfSk7IC8vIGFkZCB0aGUgbGVmdCBwYXJ0IGZvciBwcm9jZXNzaW5nXG4gICAgICAgIHN0YWNrLnB1c2goe2ZpcnN0OiBtYXhpLCBsYXN0OiBpZHMubGFzdH0pOyAvLyBhZGQgdGhlIHJpZ2h0IHBhcnQgZm9yIHByb2Nlc3NpbmdcbiAgICAgIH1cblxuICAgIH0gd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApO1xuXG4gICAgcmVzUG9pbnRzID0gW107XG4gICAgbGVuID0gbHN0Lmxlbmd0aDtcbiAgICBsc3Quc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEgLSBiO1xuICAgIH0pOyAvLyByZXN0b3JlIGluZGV4IG9yZGVyXG4gICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrKSB7XG4gICAgICByZXNQb2ludHMucHVzaCh7eDogcG9pbnRzW2xzdFtrXV0ueCwgeTogcG9pbnRzW2xzdFtrXV0ueX0pOyAvLyBhZGQgcmVzdWx0IHBvaW50cyB0byB0aGUgY29ycmVjdCBvcmRlclxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgYm91bmRzOiBjLmJvdW5kcyxcbiAgICAgIGlubmVyOiBjLmlubmVyLCBsYWJlbDogYy5sYWJlbCwgcG9pbnRzOiByZXNQb2ludHMsIGluaXRpYWxDb3VudDogYy5wb2ludHMubGVuZ3RoXG4gICAgfTtcbiAgfTtcblxuICAvKiogU2ltcGxpZnkgY29udG91cnNcbiAgICogQWxnb3JpdGhtczogaHR0cDovL3BzaW1wbC5zb3VyY2Vmb3JnZS5uZXQvZG91Z2xhcy1wZXVja2VyLmh0bWxcbiAgICogaHR0cDovL25lZXJjLmlmbW8ucnUvd2lraS9pbmRleC5waHA/dGl0bGU9JUQwJUEzJUQwJUJGJUQxJTgwJUQwJUJFJUQxJTg5JUQwJUI1JUQwJUJEJUQwJUI4JUQwJUI1XyVEMCVCRiVEMCVCRSVEMCVCQiVEMCVCOCVEMCVCMyVEMCVCRSVEMCVCRCVEMCVCMCVEMCVCQiVEMSU4QyVEMCVCRCVEMCVCRSVEMCVCOV8lRDElODYlRDAlQjUlRDAlQkYlRDAlQjhcbiAgICogQHBhcmFtIHtBcnJheX0gY29udG91cnM6IHtBcnJheX0gcG9pbnRzLCB7Ym9vbH0gaW5uZXIsIHtpbnR9IGxhYmVsXG4gICAqIEBwYXJhbSB7ZmxvYXR9IHNpbXBsaWZ5IHRvbGVyYW50XG4gICAqIEBwYXJhbSB7aW50fSBzaW1wbGlmeSBjb3VudDogbWluIG51bWJlciBvZiBwb2ludHMgd2hlbiB0aGUgY29udG91ciBpcyBzaW1wbGlmaWVkXG4gICAqIEByZXR1cm4ge0FycmF5fSBjb250b3Vyczoge0FycmF5fSBwb2ludHMsIHtib29sfSBpbm5lciwge2ludH0gbGFiZWwsIHtpbnR9IGluaXRpYWxDb3VudFxuICAgKi9cbiAgbGliLnNpbXBsaWZ5Q29udG91cnMgPSBmdW5jdGlvbiAoY29udG91cnMsIHNpbXBsaWZ5VG9sZXJhbnQsIHNpbXBsaWZ5Q291bnQpIHtcbiAgICB2YXIgbGVuQ29udG91cnMgPSBjb250b3Vycy5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICAgIC8vIHdhbGsgdGhyb3VnaCBhbGwgY29udG91cnNcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbkNvbnRvdXJzOyBqKyspIHtcblxuICAgICAgcmVzdWx0LnB1c2gobGliLnNpbXBsaWZ5Q29udG91cihjb250b3Vyc1tqXSwgc2ltcGxpZnlUb2xlcmFudCwgc2ltcGxpZnlDb3VudCkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpYjtcbn0pKCk7XG5pZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gTWFnaWNXYW5kO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9wbHVnaW5zL21hZ2ljd2FuZC5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9ICQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCIkXCJcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIlBEOTRiV3dnZG1WeWMybHZiajBpTVM0d0lpQmxibU52WkdsdVp6MGlWVlJHTFRnaUlITjBZVzVrWVd4dmJtVTlJbTV2SWo4K0Nqd2hMUzBnUTNKbFlYUmxaQ0IzYVhSb0lFbHVhM05qWVhCbElDaG9kSFJ3T2k4dmQzZDNMbWx1YTNOallYQmxMbTl5Wnk4cElDMHRQZ284YzNabkNpQWdJQ0I0Yld4dWN6cHBibXR6WTJGd1pUMGlhSFIwY0RvdkwzZDNkeTVwYm10elkyRndaUzV2Y21jdmJtRnRaWE53WVdObGN5OXBibXR6WTJGd1pTSUtJQ0FnSUhodGJHNXpPbkprWmowaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1UazVPUzh3TWk4eU1pMXlaR1l0YzNsdWRHRjRMVzV6SXlJS0lDQWdJSGh0Ykc1elBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF3TDNOMlp5SUtJQ0FnSUhodGJHNXpPbk52Wkdsd2IyUnBQU0pvZEhSd09pOHZjMjlrYVhCdlpHa3VjMjkxY21ObFptOXlaMlV1Ym1WMEwwUlVSQzl6YjJScGNHOWthUzB3TG1SMFpDSUtJQ0FnSUhodGJHNXpPbU5qUFNKb2RIUndPaTh2WTNKbFlYUnBkbVZqYjIxdGIyNXpMbTl5Wnk5dWN5TWlDaUFnSUNCNGJXeHVjenA0YkdsdWF6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNVGs1T1M5NGJHbHVheUlLSUNBZ0lIaHRiRzV6T21SalBTSm9kSFJ3T2k4dmNIVnliQzV2Y21jdlpHTXZaV3hsYldWdWRITXZNUzR4THlJS0lDQWdJSGh0Ykc1ek9uTjJaejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpQ2lBZ0lDQjRiV3h1Y3pwdWN6RTlJbWgwZEhBNkx5OXpiM3BwTG1KaGFXVnliM1ZuWlM1bWNpSUtJQ0FnSUdsa1BTSnpkbWMwT0RnNElnb2dJQ0FnYzI5a2FYQnZaR2s2Wkc5amJtRnRaVDBpZDJGeWJtbHVaMTlpZFhSMGIyNHVjM1puSWdvZ0lDQWdkbWxsZDBKdmVEMGlNQ0F3SURRd01DQTBNREFpQ2lBZ0lDQjJaWEp6YVc5dVBTSXhMakVpQ2lBZ0lDQnBibXR6WTJGd1pUcDJaWEp6YVc5dVBTSXdMalE0TGpBZ2NqazJOVFFpQ2lBZ1Bnb2dJRHhrWldaekNpQWdJQ0FnSUdsa1BTSmtaV1p6TkRnNU1DSUtJQ0FnSUQ0S0lDQWdJRHhzYVc1bFlYSkhjbUZrYVdWdWRBb2dJQ0FnSUNBZ0lHbGtQU0pzYVc1bFlYSkhjbUZrYVdWdWREZzBNVEVpQ2lBZ0lDQWdJQ0FnZVRJOUlqTTJOeTQ0T0NJS0lDQWdJQ0FnSUNCbmNtRmthV1Z1ZEZWdWFYUnpQU0oxYzJWeVUzQmhZMlZQYmxWelpTSUtJQ0FnSUNBZ0lDQjVNVDBpTWpnM0xqUTVJZ29nSUNBZ0lDQWdJSGd5UFNJek1UVXVORGNpQ2lBZ0lDQWdJQ0FnZURFOUlqSTBNUzQwTVNJS0lDQWdJQ0FnSUNCcGJtdHpZMkZ3WlRwamIyeHNaV04wUFNKaGJIZGhlWE1pQ2lBZ0lDQWdJRDRLSUNBZ0lDQWdQSE4wYjNBS0lDQWdJQ0FnSUNBZ0lHbGtQU0p6ZEc5d05ERTFPQ0lLSUNBZ0lDQWdJQ0FnSUhOMGVXeGxQU0p6ZEc5d0xXTnZiRzl5T2lObVptWm1abVlpQ2lBZ0lDQWdJQ0FnSUNCdlptWnpaWFE5SWpBaUNpQWdJQ0FnSUM4K0NpQWdJQ0FnSUR4emRHOXdDaUFnSUNBZ0lDQWdJQ0JwWkQwaWMzUnZjRFF4TmpBaUNpQWdJQ0FnSUNBZ0lDQnpkSGxzWlQwaWMzUnZjQzFqYjJ4dmNqb2pabVptWm1abU8zTjBiM0F0YjNCaFkybDBlVG93SWdvZ0lDQWdJQ0FnSUNBZ2IyWm1jMlYwUFNJeElnb2dJQ0FnSUNBdlBnb2dJQ0FnUEM5c2FXNWxZWEpIY21Ga2FXVnVkQW9nSUNBZ1Bnb2dJQ0FnUEdacGJIUmxjZ29nSUNBZ0lDQWdJR2xrUFNKbWFXeDBaWEkyTVRJMklnb2dJQ0FnSUNBZ0lHTnZiRzl5TFdsdWRHVnljRzlzWVhScGIyNHRabWxzZEdWeWN6MGljMUpIUWlJS0lDQWdJQ0FnSUNCcGJtdHpZMkZ3WlRwamIyeHNaV04wUFNKaGJIZGhlWE1pQ2lBZ0lDQWdJRDRLSUNBZ0lDQWdQR1psUjJGMWMzTnBZVzVDYkhWeUNpQWdJQ0FnSUNBZ0lDQnBaRDBpWm1WSFlYVnpjMmxoYmtKc2RYSTJNVEk0SWdvZ0lDQWdJQ0FnSUNBZ2MzUmtSR1YyYVdGMGFXOXVQU0l3TGpVek1ETTFOekV6SWdvZ0lDQWdJQ0FnSUNBZ2FXNXJjMk5oY0dVNlkyOXNiR1ZqZEQwaVlXeDNZWGx6SWdvZ0lDQWdJQ0F2UGdvZ0lDQWdQQzltYVd4MFpYSUtJQ0FnSUQ0S0lDQWdJRHhzYVc1bFlYSkhjbUZrYVdWdWRBb2dJQ0FnSUNBZ0lHbGtQU0pzYVc1bFlYSkhjbUZrYVdWdWREZzBNVE1pQ2lBZ0lDQWdJQ0FnZVRJOUlqTTVNUzQwTlNJS0lDQWdJQ0FnSUNCbmNtRmthV1Z1ZEZWdWFYUnpQU0oxYzJWeVUzQmhZMlZQYmxWelpTSUtJQ0FnSUNBZ0lDQjVNVDBpTXpBd0xqZzJJZ29nSUNBZ0lDQWdJSGd5UFNJek5ESWlDaUFnSUNBZ0lDQWdlREU5SWpJM05TNDJNU0lLSUNBZ0lDQWdJQ0JwYm10elkyRndaVHBqYjJ4c1pXTjBQU0poYkhkaGVYTWlDaUFnSUNBZ0lENEtJQ0FnSUNBZ1BITjBiM0FLSUNBZ0lDQWdJQ0FnSUdsa1BTSnpkRzl3TnpJd01TSUtJQ0FnSUNBZ0lDQWdJSE4wZVd4bFBTSnpkRzl3TFdOdmJHOXlPaU0xTlRBd01EQWlDaUFnSUNBZ0lDQWdJQ0J2Wm1aelpYUTlJakFpQ2lBZ0lDQWdJQzgrQ2lBZ0lDQWdJRHh6ZEc5d0NpQWdJQ0FnSUNBZ0lDQnBaRDBpYzNSdmNEY3lNRE1pQ2lBZ0lDQWdJQ0FnSUNCemRIbHNaVDBpYzNSdmNDMWpiMnh2Y2pvalptWXdNREF3SWdvZ0lDQWdJQ0FnSUNBZ2IyWm1jMlYwUFNJeElnb2dJQ0FnSUNBdlBnb2dJQ0FnUEM5c2FXNWxZWEpIY21Ga2FXVnVkQW9nSUNBZ1Bnb2dJQ0FnUEhKaFpHbGhiRWR5WVdScFpXNTBDaUFnSUNBZ0lDQWdhV1E5SW5KaFpHbGhiRWR5WVdScFpXNTBPRFF4TlNJS0lDQWdJQ0FnSUNCbmNtRmthV1Z1ZEZWdWFYUnpQU0oxYzJWeVUzQmhZMlZQYmxWelpTSUtJQ0FnSUNBZ0lDQmplRDBpTXpFeUxqYzRJZ29nSUNBZ0lDQWdJR041UFNJek9EWXVOVGNpQ2lBZ0lDQWdJQ0FnY2owaU5UTXVNRE0ySWdvZ0lDQWdJQ0FnSUdkeVlXUnBaVzUwVkhKaGJuTm1iM0p0UFNKdFlYUnlhWGdvTFM0MU9UTXlOeUF0TGpVNU16STNJQzQzTVRVd05TQXRMamN4TlRBMUlESTBNeTR5TnlBNE5Ea3VNRE1wSWdvZ0lDQWdJQ0FnSUdsdWEzTmpZWEJsT21OdmJHeGxZM1E5SW1Gc2QyRjVjeUlLSUNBZ0lDQWdQZ29nSUNBZ0lDQThjM1J2Y0FvZ0lDQWdJQ0FnSUNBZ2FXUTlJbk4wYjNBM01URXpMVGNpQ2lBZ0lDQWdJQ0FnSUNCemRIbHNaVDBpYzNSdmNDMWpiMnh2Y2pvalptWm1abVptTzNOMGIzQXRiM0JoWTJsMGVUb3VOREE0TVRZaUNpQWdJQ0FnSUNBZ0lDQnZabVp6WlhROUlqQWlDaUFnSUNBZ0lDOCtDaUFnSUNBZ0lEeHpkRzl3Q2lBZ0lDQWdJQ0FnSUNCcFpEMGljM1J2Y0RjeE1UVXROeUlLSUNBZ0lDQWdJQ0FnSUhOMGVXeGxQU0p6ZEc5d0xXTnZiRzl5T2lObVptWm1abVk3YzNSdmNDMXZjR0ZqYVhSNU9qQWlDaUFnSUNBZ0lDQWdJQ0J2Wm1aelpYUTlJakVpQ2lBZ0lDQWdJQzgrQ2lBZ0lDQThMM0poWkdsaGJFZHlZV1JwWlc1MENpQWdJQ0ErQ2lBZ0lDQThiR2x1WldGeVIzSmhaR2xsYm5RS0lDQWdJQ0FnSUNCcFpEMGliR2x1WldGeVIzSmhaR2xsYm5ReE1EUTBPU0lLSUNBZ0lDQWdJQ0I1TWowaU16TTRMamd5SWdvZ0lDQWdJQ0FnSUdkeVlXUnBaVzUwVlc1cGRITTlJblZ6WlhKVGNHRmpaVTl1VlhObElnb2dJQ0FnSUNBZ0lIa3hQU0l5T0RZdU5qY2lDaUFnSUNBZ0lDQWdaM0poWkdsbGJuUlVjbUZ1YzJadmNtMDlJbTFoZEhKcGVDZ3VPVFUxTXpRZ01DQXdJQzQ1TlRVek5DQXhNell1TVRJZ01UUXVNRFUxS1NJS0lDQWdJQ0FnSUNCNE1qMGlNekF3TGpJM0lnb2dJQ0FnSUNBZ0lIZ3hQU0l5TlRVdU16SWlDaUFnSUNBZ0lDQWdhVzVyYzJOaGNHVTZZMjlzYkdWamREMGlZV3gzWVhseklnb2dJQ0FnSUNBK0NpQWdJQ0FnSUR4emRHOXdDaUFnSUNBZ0lDQWdJQ0JwWkQwaWMzUnZjRFF4TlRBaUNpQWdJQ0FnSUNBZ0lDQnpkSGxzWlQwaWMzUnZjQzFqYjJ4dmNqb2pabVptWm1abUlnb2dJQ0FnSUNBZ0lDQWdiMlptYzJWMFBTSXdJZ29nSUNBZ0lDQXZQZ29nSUNBZ0lDQThjM1J2Y0FvZ0lDQWdJQ0FnSUNBZ2FXUTlJbk4wYjNBME1UVXlJZ29nSUNBZ0lDQWdJQ0FnYzNSNWJHVTlJbk4wYjNBdFkyOXNiM0k2STJabVptWm1aanR6ZEc5d0xXOXdZV05wZEhrNk1DSUtJQ0FnSUNBZ0lDQWdJRzltWm5ObGREMGlNU0lLSUNBZ0lDQWdMejRLSUNBZ0lEd3ZiR2x1WldGeVIzSmhaR2xsYm5RS0lDQWdJRDRLSUNBZ0lEeG1hV3gwWlhJS0lDQWdJQ0FnSUNCcFpEMGlabWxzZEdWeU1URTBNamdpQ2lBZ0lDQWdJQ0FnWTI5c2IzSXRhVzUwWlhKd2IyeGhkR2x2YmkxbWFXeDBaWEp6UFNKelVrZENJZ29nSUNBZ0lDQWdJR2x1YTNOallYQmxPbU52Ykd4bFkzUTlJbUZzZDJGNWN5SUtJQ0FnSUNBZ1Bnb2dJQ0FnSUNBOFptVkhZWFZ6YzJsaGJrSnNkWElLSUNBZ0lDQWdJQ0FnSUdsa1BTSm1aVWRoZFhOemFXRnVRbXgxY2pFeE5ETXdJZ29nSUNBZ0lDQWdJQ0FnYzNSa1JHVjJhV0YwYVc5dVBTSXhMakkwTXpRMk56Z2lDaUFnSUNBZ0lDQWdJQ0JwYm10elkyRndaVHBqYjJ4c1pXTjBQU0poYkhkaGVYTWlDaUFnSUNBZ0lDOCtDaUFnSUNBOEwyWnBiSFJsY2dvZ0lDQWdQZ29nSUR3dlpHVm1jd29nSUQ0S0lDQThjMjlrYVhCdlpHazZibUZ0WldSMmFXVjNDaUFnSUNBZ0lHbGtQU0ppWVhObElnb2dJQ0FnSUNCaWIzSmtaWEpqYjJ4dmNqMGlJelkyTmpZMk5pSUtJQ0FnSUNBZ2FXNXJjMk5oY0dVNmNHRm5aWE5vWVdSdmR6MGlNaUlLSUNBZ0lDQWdhVzVyYzJOaGNHVTZkMmx1Wkc5M0xYazlJaTA0SWdvZ0lDQWdJQ0J3WVdkbFkyOXNiM0k5SWlObVptWm1abVlpQ2lBZ0lDQWdJR2x1YTNOallYQmxPbmRwYm1SdmR5MW9aV2xuYUhROUlqazRPQ0lLSUNBZ0lDQWdhVzVyYzJOaGNHVTZkMmx1Wkc5M0xXMWhlR2x0YVhwbFpEMGlNU0lLSUNBZ0lDQWdhVzVyYzJOaGNHVTZlbTl2YlQwaU1DNDNNRGN4TURZM09DSUtJQ0FnSUNBZ2FXNXJjMk5oY0dVNmQybHVaRzkzTFhnOUlpMDRJZ29nSUNBZ0lDQnphRzkzWjNKcFpEMGlabUZzYzJVaUNpQWdJQ0FnSUdKdmNtUmxjbTl3WVdOcGRIazlJakV1TUNJS0lDQWdJQ0FnYVc1cmMyTmhjR1U2WTNWeWNtVnVkQzFzWVhsbGNqMGliR0Y1WlhJeElnb2dJQ0FnSUNCcGJtdHpZMkZ3WlRwamVEMGlNekEwTGpnNU5EQTVJZ29nSUNBZ0lDQnBibXR6WTJGd1pUcGplVDBpTXpReExqVXlNVGcySWdvZ0lDQWdJQ0JwYm10elkyRndaVHAzYVc1a2IzY3RkMmxrZEdnOUlqRTJPREFpQ2lBZ0lDQWdJR2x1YTNOallYQmxPbkJoWjJWdmNHRmphWFI1UFNJd0xqQWlDaUFnSUNBZ0lHbHVhM05qWVhCbE9tUnZZM1Z0Wlc1MExYVnVhWFJ6UFNKd2VDSUtJQ0F2UGdvZ0lEeG5DaUFnSUNBZ0lHbGtQU0pzWVhsbGNqRWlDaUFnSUNBZ0lHbHVhM05qWVhCbE9teGhZbVZzUFNKTVlYbGxjaUF4SWdvZ0lDQWdJQ0JwYm10elkyRndaVHBuY205MWNHMXZaR1U5SW14aGVXVnlJZ29nSUNBZ0lDQjBjbUZ1YzJadmNtMDlJblJ5WVc1emJHRjBaU2d3SUMwMk5USXVNellwSWdvZ0lDQWdQZ29nSUNBZ1BHY0tJQ0FnSUNBZ0lDQnBaRDBpWnpFeE5ETXlJZ29nSUNBZ0lDQWdJR2x1YTNOallYQmxPbVY0Y0c5eWRDMTVaSEJwUFNJNU1DSUtJQ0FnSUNBZ0lDQnBibXR6WTJGd1pUcGxlSEJ2Y25RdGVHUndhVDBpT1RBaUNpQWdJQ0FnSUNBZ2RISmhibk5tYjNKdFBTSnRZWFJ5YVhnb01pNDVNRFV4SURBZ01DQXlMamt3TlRFZ0xURXdNREV1T1NBdE56Z3VPVFl4S1NJS0lDQWdJQ0FnUGdvZ0lDQWdJQ0E4Y0dGMGFBb2dJQ0FnSUNBZ0lDQWdhV1E5SW5CaGRHZzNNamMySWdvZ0lDQWdJQ0FnSUNBZ2MyOWthWEJ2WkdrNmNuZzlJalV6TGpBek5UY3hNeUlLSUNBZ0lDQWdJQ0FnSUhOdlpHbHdiMlJwT25KNVBTSTFNeTR3TXpVM01UTWlDaUFnSUNBZ0lDQWdJQ0J6ZEhsc1pUMGlabWxzYkRvak9UazVPVGs1SWdvZ0lDQWdJQ0FnSUNBZ2MyOWthWEJ2WkdrNmRIbHdaVDBpWVhKaklnb2dJQ0FnSUNBZ0lDQWdaRDBpYlRNMU5pNDNPU0F6TkRZdU1URmpNQ0F5T1M0eU9URXRNak11TnpRMUlEVXpMakF6TmkwMU15NHdNellnTlRNdU1ETTJjeTAxTXk0d016WXRNak11TnpRMUxUVXpMakF6TmkwMU15NHdNellnTWpNdU56UTFMVFV6TGpBek5pQTFNeTR3TXpZdE5UTXVNRE0ySURVekxqQXpOaUF5TXk0M05EVWdOVE11TURNMklEVXpMakF6Tm5vaUNpQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJadmNtMDlJbTFoZEhKcGVDZ3VPVGN6TlRRZ01DQXdJQzQ1TnpNMU5DQXhNakF1TURrZ0xURXlMall5T0NraUNpQWdJQ0FnSUNBZ0lDQnpiMlJwY0c5a2FUcGplVDBpTXpRMkxqRXhNakU0SWdvZ0lDQWdJQ0FnSUNBZ2MyOWthWEJ2WkdrNlkzZzlJak13TXk0M05TSUtJQ0FnSUNBZ0x6NEtJQ0FnSUNBZ1BIQmhkR2dLSUNBZ0lDQWdJQ0FnSUdsa1BTSndZWFJvTnpJM09DSUtJQ0FnSUNBZ0lDQWdJSE52Wkdsd2IyUnBPbko0UFNJMU15NHdNelUzTVRNaUNpQWdJQ0FnSUNBZ0lDQnpiMlJwY0c5a2FUcHllVDBpTlRNdU1ETTFOekV6SWdvZ0lDQWdJQ0FnSUNBZ2MzUjViR1U5SW1acGJHdzZkWEpzS0NOc2FXNWxZWEpIY21Ga2FXVnVkRGcwTVRFcElnb2dJQ0FnSUNBZ0lDQWdjMjlrYVhCdlpHazZkSGx3WlQwaVlYSmpJZ29nSUNBZ0lDQWdJQ0FnWkQwaWJUTTFOaTQzT1NBek5EWXVNVEZqTUNBeU9TNHlPVEV0TWpNdU56UTFJRFV6TGpBek5pMDFNeTR3TXpZZ05UTXVNRE0yY3kwMU15NHdNell0TWpNdU56UTFMVFV6TGpBek5pMDFNeTR3TXpZZ01qTXVOelExTFRVekxqQXpOaUExTXk0d016WXROVE11TURNMklEVXpMakF6TmlBeU15NDNORFVnTlRNdU1ETTJJRFV6TGpBek5ub2lDaUFnSUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTA5SW0xaGRISnBlQ2d1T1RVNU5qQWdNQ0F3SUM0NU5UazJNQ0F4TWpRdU16TWdMVGN1T0RBeE5Da2lDaUFnSUNBZ0lDQWdJQ0J6YjJScGNHOWthVHBqZVQwaU16UTJMakV4TWpFNElnb2dJQ0FnSUNBZ0lDQWdjMjlrYVhCdlpHazZZM2c5SWpNd015NDNOU0lLSUNBZ0lDQWdMejRLSUNBZ0lDQWdQSEJoZEdnS0lDQWdJQ0FnSUNBZ0lHbGtQU0p3WVhSb056STRNQ0lLSUNBZ0lDQWdJQ0FnSUhOdlpHbHdiMlJwT25KNFBTSTFNeTR3TXpVM01UTWlDaUFnSUNBZ0lDQWdJQ0J6YjJScGNHOWthVHB5ZVQwaU5UTXVNRE0xTnpFeklnb2dJQ0FnSUNBZ0lDQWdjM1I1YkdVOUltWnBiSFJsY2pwMWNtd29JMlpwYkhSbGNqWXhNallwTzJacGJHdzZJMlZqWldObFl5SUtJQ0FnSUNBZ0lDQWdJSE52Wkdsd2IyUnBPblI1Y0dVOUltRnlZeUlLSUNBZ0lDQWdJQ0FnSUdROUltMHpOVFl1TnprZ016UTJMakV4WXpBZ01qa3VNamt4TFRJekxqYzBOU0ExTXk0d016WXROVE11TURNMklEVXpMakF6Tm5NdE5UTXVNRE0yTFRJekxqYzBOUzAxTXk0d016WXROVE11TURNMklESXpMamMwTlMwMU15NHdNellnTlRNdU1ETTJMVFV6TGpBek5pQTFNeTR3TXpZZ01qTXVOelExSURVekxqQXpOaUExTXk0d016WjZJZ29nSUNBZ0lDQWdJQ0FnZEhKaGJuTm1iM0p0UFNKdFlYUnlhWGdvTGpnM016VTFJREFnTUNBdU9EY3pOVFVnTVRVd0xqUTNJREl4TGprNE1Ta2lDaUFnSUNBZ0lDQWdJQ0J6YjJScGNHOWthVHBqZVQwaU16UTJMakV4TWpFNElnb2dJQ0FnSUNBZ0lDQWdjMjlrYVhCdlpHazZZM2c5SWpNd015NDNOU0lLSUNBZ0lDQWdMejRLSUNBZ0lDQWdQSEJoZEdnS0lDQWdJQ0FnSUNBZ0lHbGtQU0p3WVhSb056STRNaUlLSUNBZ0lDQWdJQ0FnSUhOdlpHbHdiMlJwT25KNFBTSTFNeTR3TXpVM01UTWlDaUFnSUNBZ0lDQWdJQ0J6YjJScGNHOWthVHB5ZVQwaU5UTXVNRE0xTnpFeklnb2dJQ0FnSUNBZ0lDQWdjM1I1YkdVOUltWnBiSFJsY2pwMWNtd29JMlpwYkhSbGNqWXhNallwTzJacGJHdzZJems1T1RrNU9TSUtJQ0FnSUNBZ0lDQWdJSE52Wkdsd2IyUnBPblI1Y0dVOUltRnlZeUlLSUNBZ0lDQWdJQ0FnSUdROUltMHpOVFl1TnprZ016UTJMakV4WXpBZ01qa3VNamt4TFRJekxqYzBOU0ExTXk0d016WXROVE11TURNMklEVXpMakF6Tm5NdE5UTXVNRE0yTFRJekxqYzBOUzAxTXk0d016WXROVE11TURNMklESXpMamMwTlMwMU15NHdNellnTlRNdU1ETTJMVFV6TGpBek5pQTFNeTR3TXpZZ01qTXVOelExSURVekxqQXpOaUExTXk0d016WjZJZ29nSUNBZ0lDQWdJQ0FnZEhKaGJuTm1iM0p0UFNKdFlYUnlhWGdvTGpnek9ETTRJREFnTUNBdU9ETTRNemdnTVRZeExqRTFJRE0wTGpFMU1pa2lDaUFnSUNBZ0lDQWdJQ0J6YjJScGNHOWthVHBqZVQwaU16UTJMakV4TWpFNElnb2dJQ0FnSUNBZ0lDQWdjMjlrYVhCdlpHazZZM2c5SWpNd015NDNOU0lLSUNBZ0lDQWdMejRLSUNBZ0lDQWdQSEJoZEdnS0lDQWdJQ0FnSUNBZ0lHbGtQU0p3WVhSb056STROQ0lLSUNBZ0lDQWdJQ0FnSUhOdlpHbHdiMlJwT25KNFBTSTFNeTR3TXpVM01UTWlDaUFnSUNBZ0lDQWdJQ0J6YjJScGNHOWthVHB5ZVQwaU5UTXVNRE0xTnpFeklnb2dJQ0FnSUNBZ0lDQWdjM1I1YkdVOUltWnBiR3c2ZFhKc0tDTnNhVzVsWVhKSGNtRmthV1Z1ZERnME1UTXBJZ29nSUNBZ0lDQWdJQ0FnYzI5a2FYQnZaR2s2ZEhsd1pUMGlZWEpqSWdvZ0lDQWdJQ0FnSUNBZ1pEMGliVE0xTmk0M09TQXpORFl1TVRGak1DQXlPUzR5T1RFdE1qTXVOelExSURVekxqQXpOaTAxTXk0d016WWdOVE11TURNMmN5MDFNeTR3TXpZdE1qTXVOelExTFRVekxqQXpOaTAxTXk0d016WWdNak11TnpRMUxUVXpMakF6TmlBMU15NHdNell0TlRNdU1ETTJJRFV6TGpBek5pQXlNeTQzTkRVZ05UTXVNRE0ySURVekxqQXpObm9pQ2lBZ0lDQWdJQ0FnSUNCMGNtRnVjMlp2Y20wOUltMWhkSEpwZUNndU9EQTFPRGNnTUNBd0lDNDRNRFU0TnlBeE56RXVNRE1nTkRVdU5EQTFLU0lLSUNBZ0lDQWdJQ0FnSUhOdlpHbHdiMlJwT21ONVBTSXpORFl1TVRFeU1UZ2lDaUFnSUNBZ0lDQWdJQ0J6YjJScGNHOWthVHBqZUQwaU16QXpMamMxSWdvZ0lDQWdJQ0F2UGdvZ0lDQWdJQ0E4Y0dGMGFBb2dJQ0FnSUNBZ0lDQWdhV1E5SW5CaGRHZzNNamcySWdvZ0lDQWdJQ0FnSUNBZ2MyOWthWEJ2WkdrNmNuZzlJalV6TGpBek5UY3hNeUlLSUNBZ0lDQWdJQ0FnSUhOdlpHbHdiMlJwT25KNVBTSTFNeTR3TXpVM01UTWlDaUFnSUNBZ0lDQWdJQ0J6ZEhsc1pUMGlabWxzYkRwMWNtd29JM0poWkdsaGJFZHlZV1JwWlc1ME9EUXhOU2tpQ2lBZ0lDQWdJQ0FnSUNCemIyUnBjRzlrYVRwMGVYQmxQU0poY21NaUNpQWdJQ0FnSUNBZ0lDQmtQU0p0TXpVMkxqYzVJRE0wTmk0eE1XTXdJREk1TGpJNU1TMHlNeTQzTkRVZ05UTXVNRE0yTFRVekxqQXpOaUExTXk0d016WnpMVFV6TGpBek5pMHlNeTQzTkRVdE5UTXVNRE0yTFRVekxqQXpOaUF5TXk0M05EVXROVE11TURNMklEVXpMakF6TmkwMU15NHdNellnTlRNdU1ETTJJREl6TGpjME5TQTFNeTR3TXpZZ05UTXVNRE0yZWlJS0lDQWdJQ0FnSUNBZ0lIUnlZVzV6Wm05eWJUMGliV0YwY21sNEtDNDNOVGd5TlNBd0lEQWdMamMxT0RJMUlERTROaTQzTlNBMk15NDVNRFlwSWdvZ0lDQWdJQ0FnSUNBZ2MyOWthWEJ2WkdrNlkzazlJak0wTmk0eE1USXhPQ0lLSUNBZ0lDQWdJQ0FnSUhOdlpHbHdiMlJwT21ONFBTSXpNRE11TnpVaUNpQWdJQ0FnSUM4K0NpQWdJQ0FnSUR4d1lYUm9DaUFnSUNBZ0lDQWdJQ0JwWkQwaWNHRjBhRGN5T0RnaUNpQWdJQ0FnSUNBZ0lDQnpkSGxzWlQwaWIzQmhZMmwwZVRvdU16RTNOekU3Wm1sc2JEcDFjbXdvSTJ4cGJtVmhja2R5WVdScFpXNTBNVEEwTkRrcElnb2dJQ0FnSUNBZ0lDQWdhVzVyYzJOaGNHVTZZMjl1Ym1WamRHOXlMV04xY25aaGRIVnlaVDBpTUNJS0lDQWdJQ0FnSUNBZ0lHUTlJbTAwTVRRdU9DQXlPRFF1TVRWakxURXpMak16TVNBd0xqTXdNRFk1TFRJMkxqRTROaUEzTGpNMU9DMHpNeTR6TXpZZ01Ua3VOelF5TFRjdU5qa3dNeUF4TXk0ek1pMDJMamN4TXprZ01qa3VNalkySURFdU1UVTBOU0EwTVM0ek16RWdNQzQ0TlRNd05pMHlOaTQxTXpJZ01qRXVNVE15TFRRMkxqVXhOU0EwTmk0ek1qUXRORFV1TURVMElEZ3VNalU0T1NBd0xqUTNPVEEzSURFMkxqQTFOQ0F6TGpJd01ERWdNakl1T0RVNUlEY3VOVGt3T0MwekxqSTFOemd0Tnk0ME5EazRMVGd1T0RFM01TMHhNeTQ1TlRNdE1UWXVNemswTFRFNExqTXlOeTAyTGpRNE5qY3RNeTQzTkRVeExURXpMall5TlMwMUxqUXpPVE10TWpBdU5qQTRMVFV1TWpneE9Ib2lDaUFnSUNBZ0lDOCtDaUFnSUNBZ0lEeHdZWFJvQ2lBZ0lDQWdJQ0FnSUNCcFpEMGljbVZqZERjek56QWlDaUFnSUNBZ0lDQWdJQ0JrUFNKdE5EQXlMamc0SURNd01DNHdPUzB4TVM0MU9ERWdNVEV1TlRneElERXpMakk1TlNBeE15NHlPVFV0TVRNdU1qazFJREV6TGpJNE1TQXhNUzQxT0RFZ01URXVOVGd4SURFekxqSTRNUzB4TXk0eU9UVWdNVE11TWprMUlERXpMakk1TlNBeE1TNDFPREV0TVRFdU5UZ3hMVEV6TGpJNE1TMHhNeTR5T0RFZ01UTXVNamd4TFRFekxqSTVOUzB4TVM0MU9ERXRNVEV1TlRneExURXpMakk1TlNBeE15NHlPREV0TVRNdU1qZ3hMVEV6TGpJNE1Yb2lDaUFnSUNBZ0lDQWdJQ0J6ZEhsc1pUMGlabWxzZEdWeU9uVnliQ2dqWm1sc2RHVnlNVEUwTWpncE8yWnBiR3c2SXpGaE1XRXhZU0lLSUNBZ0lDQWdJQ0FnSUdsdWEzTmpZWEJsT21OdmJtNWxZM1J2Y2kxamRYSjJZWFIxY21VOUlqQWlDaUFnSUNBZ0lDOCtDaUFnSUNBZ0lEeHdZWFJvQ2lBZ0lDQWdJQ0FnSUNCcFpEMGljR0YwYURFd05EVTNJZ29nSUNBZ0lDQWdJQ0FnYzNSNWJHVTlJbVpwYkd3NkkyWm1abVptWmlJS0lDQWdJQ0FnSUNBZ0lHbHVhM05qWVhCbE9tTnZibTVsWTNSdmNpMWpkWEoyWVhSMWNtVTlJakFpQ2lBZ0lDQWdJQ0FnSUNCa1BTSnROREF6TGpRMUlETXdNUzR4TlMweE1TNHdPRGNnTVRFdU1EZzNJREV5TGpjeU9DQXhNaTQzTWpndE1USXVOekk0SURFeUxqY3hOQ0F4TVM0d09EY2dNVEV1TURnM0lERXlMamN4TkMweE1pNDNNamdnTVRJdU56STRJREV5TGpjeU9DQXhNUzR3T0RjdE1URXVNRGczTFRFeUxqY3hOQzB4TWk0M01UUWdNVEl1TnpFMExURXlMamN5T0MweE1TNHdPRGN0TVRFdU1EZzNMVEV5TGpjeU9DQXhNaTQzTVRRdE1USXVOekUwTFRFeUxqY3hOSG9pQ2lBZ0lDQWdJQzgrQ2lBZ0lDQThMMmNLSUNBZ0lENEtJQ0E4TDJjS0lDQStDaUFnUEcxbGRHRmtZWFJoQ2lBZ0lDQStDaUFnSUNBOGNtUm1PbEpFUmdvZ0lDQWdJQ0ErQ2lBZ0lDQWdJRHhqWXpwWGIzSnJDaUFnSUNBZ0lDQWdQZ29nSUNBZ0lDQWdJRHhrWXpwbWIzSnRZWFFLSUNBZ0lDQWdJQ0FnSUQ1cGJXRm5aUzl6ZG1jcmVHMXNQQzlrWXpwbWIzSnRZWFFLSUNBZ0lDQWdJQ0ErQ2lBZ0lDQWdJQ0FnUEdSak9uUjVjR1VLSUNBZ0lDQWdJQ0FnSUNBZ2NtUm1PbkpsYzI5MWNtTmxQU0pvZEhSd09pOHZjSFZ5YkM1dmNtY3ZaR012WkdOdGFYUjVjR1V2VTNScGJHeEpiV0ZuWlNJS0lDQWdJQ0FnSUNBdlBnb2dJQ0FnSUNBZ0lEeGpZenBzYVdObGJuTmxDaUFnSUNBZ0lDQWdJQ0FnSUhKa1pqcHlaWE52ZFhKalpUMGlhSFIwY0RvdkwyTnlaV0YwYVhabFkyOXRiVzl1Y3k1dmNtY3ZiR2xqWlc1elpYTXZjSFZpYkdsalpHOXRZV2x1THlJS0lDQWdJQ0FnSUNBdlBnb2dJQ0FnSUNBZ0lEeGtZenB3ZFdKc2FYTm9aWElLSUNBZ0lDQWdJQ0FnSUQ0S0lDQWdJQ0FnSUNBZ0lEeGpZenBCWjJWdWRBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUhKa1pqcGhZbTkxZEQwaWFIUjBjRG92TDI5d1pXNWpiR2x3WVhKMExtOXlaeThpQ2lBZ0lDQWdJQ0FnSUNBZ0lENEtJQ0FnSUNBZ0lDQWdJQ0FnUEdSak9uUnBkR3hsQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdQazl3Wlc1amJHbHdZWEowUEM5a1l6cDBhWFJzWlFvZ0lDQWdJQ0FnSUNBZ0lDQStDaUFnSUNBZ0lDQWdJQ0E4TDJOak9rRm5aVzUwQ2lBZ0lDQWdJQ0FnSUNBK0NpQWdJQ0FnSUNBZ1BDOWtZenB3ZFdKc2FYTm9aWElLSUNBZ0lDQWdJQ0ErQ2lBZ0lDQWdJQ0FnUEdSak9uUnBkR3hsQ2lBZ0lDQWdJQ0FnSUNBK1pYSnliM0lnWW5WMGRHOXVQQzlrWXpwMGFYUnNaUW9nSUNBZ0lDQWdJRDRLSUNBZ0lDQWdJQ0E4WkdNNlpHRjBaUW9nSUNBZ0lDQWdJQ0FnUGpJd01URXRNREl0TWpSVU1UYzZORFU2TkRVOEwyUmpPbVJoZEdVS0lDQWdJQ0FnSUNBK0NpQWdJQ0FnSUNBZ1BHUmpPbVJsYzJOeWFYQjBhVzl1Q2lBZ0lDQWdJQ0FnTHo0S0lDQWdJQ0FnSUNBOFpHTTZjMjkxY21ObENpQWdJQ0FnSUNBZ0lDQSthSFIwY0hNNkx5OXZjR1Z1WTJ4cGNHRnlkQzV2Y21jdlpHVjBZV2xzTHpFeU1qUXlOUzlsY25KdmNpMWlkWFIwYjI0dFlua3RjbWxqWVhKa2IyMWhhV0U4TDJSak9uTnZkWEpqWlFvZ0lDQWdJQ0FnSUQ0S0lDQWdJQ0FnSUNBOFpHTTZZM0psWVhSdmNnb2dJQ0FnSUNBZ0lDQWdQZ29nSUNBZ0lDQWdJQ0FnUEdOak9rRm5aVzUwQ2lBZ0lDQWdJQ0FnSUNBZ0lENEtJQ0FnSUNBZ0lDQWdJQ0FnUEdSak9uUnBkR3hsQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdQbkpwWTJGeVpHOXRZV2xoUEM5a1l6cDBhWFJzWlFvZ0lDQWdJQ0FnSUNBZ0lDQStDaUFnSUNBZ0lDQWdJQ0E4TDJOak9rRm5aVzUwQ2lBZ0lDQWdJQ0FnSUNBK0NpQWdJQ0FnSUNBZ1BDOWtZenBqY21WaGRHOXlDaUFnSUNBZ0lDQWdQZ29nSUNBZ0lDQWdJRHhrWXpwemRXSnFaV04wQ2lBZ0lDQWdJQ0FnSUNBK0NpQWdJQ0FnSUNBZ0lDQThjbVJtT2tKaFp3b2dJQ0FnSUNBZ0lDQWdJQ0ErQ2lBZ0lDQWdJQ0FnSUNBZ0lEeHlaR1k2YkdrS0lDQWdJQ0FnSUNBZ0lDQWdJQ0ErWW5WMGRHOXVQQzl5WkdZNmJHa0tJQ0FnSUNBZ0lDQWdJQ0FnUGdvZ0lDQWdJQ0FnSUNBZ0lDQThjbVJtT214cENpQWdJQ0FnSUNBZ0lDQWdJQ0FnUG1OaGJtTmxiRHd2Y21SbU9teHBDaUFnSUNBZ0lDQWdJQ0FnSUQ0S0lDQWdJQ0FnSUNBZ0lDQWdQSEprWmpwc2FRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUQ1amFYSmpiR1U4TDNKa1pqcHNhUW9nSUNBZ0lDQWdJQ0FnSUNBK0NpQWdJQ0FnSUNBZ0lDQWdJRHh5WkdZNmJHa0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1pHVnNaWFJsUEM5eVpHWTZiR2tLSUNBZ0lDQWdJQ0FnSUNBZ1Bnb2dJQ0FnSUNBZ0lDQWdJQ0E4Y21SbU9teHBDaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BuSmxaRHd2Y21SbU9teHBDaUFnSUNBZ0lDQWdJQ0FnSUQ0S0lDQWdJQ0FnSUNBZ0lDQWdQSEprWmpwc2FRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUQ1eWIzVnVaRHd2Y21SbU9teHBDaUFnSUNBZ0lDQWdJQ0FnSUQ0S0lDQWdJQ0FnSUNBZ0lEd3ZjbVJtT2tKaFp3b2dJQ0FnSUNBZ0lDQWdQZ29nSUNBZ0lDQWdJRHd2WkdNNmMzVmlhbVZqZEFvZ0lDQWdJQ0FnSUQ0S0lDQWdJQ0FnUEM5all6cFhiM0pyQ2lBZ0lDQWdJRDRLSUNBZ0lDQWdQR05qT2t4cFkyVnVjMlVLSUNBZ0lDQWdJQ0FnSUhKa1pqcGhZbTkxZEQwaWFIUjBjRG92TDJOeVpXRjBhWFpsWTI5dGJXOXVjeTV2Y21jdmJHbGpaVzV6WlhNdmNIVmliR2xqWkc5dFlXbHVMeUlLSUNBZ0lDQWdJQ0ErQ2lBZ0lDQWdJQ0FnUEdOak9uQmxjbTFwZEhNS0lDQWdJQ0FnSUNBZ0lDQWdjbVJtT25KbGMyOTFjbU5sUFNKb2RIUndPaTh2WTNKbFlYUnBkbVZqYjIxdGIyNXpMbTl5Wnk5dWN5TlNaWEJ5YjJSMVkzUnBiMjRpQ2lBZ0lDQWdJQ0FnTHo0S0lDQWdJQ0FnSUNBOFkyTTZjR1Z5YldsMGN3b2dJQ0FnSUNBZ0lDQWdJQ0J5WkdZNmNtVnpiM1Z5WTJVOUltaDBkSEE2THk5amNtVmhkR2wyWldOdmJXMXZibk11YjNKbkwyNXpJMFJwYzNSeWFXSjFkR2x2YmlJS0lDQWdJQ0FnSUNBdlBnb2dJQ0FnSUNBZ0lEeGpZenB3WlhKdGFYUnpDaUFnSUNBZ0lDQWdJQ0FnSUhKa1pqcHlaWE52ZFhKalpUMGlhSFIwY0RvdkwyTnlaV0YwYVhabFkyOXRiVzl1Y3k1dmNtY3Zibk1qUkdWeWFYWmhkR2wyWlZkdmNtdHpJZ29nSUNBZ0lDQWdJQzgrQ2lBZ0lDQWdJRHd2WTJNNlRHbGpaVzV6WlFvZ0lDQWdJQ0ErQ2lBZ0lDQThMM0prWmpwU1JFWUtJQ0FnSUQ0S0lDQThMMjFsZEdGa1lYUmhDaUFnUGdvOEwzTjJad28rQ2c9PVwiXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vfi9iYXNlNjQtbG9hZGVyIS4vbWVkaWEvZXJyb3ItYnV0dG9uLnN2Z1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9jb3JlL2Jhc2UuanMnKTtcbnJlcXVpcmUoJy4vY29yZS9vYnNlcnZlLmpzJyk7XG5yZXF1aXJlKCcuL2NvcmUvYXBwbGljYXRpb24uanMnKTtcbnJlcXVpcmUoJy4vY29yZS9zdGF0aWMtY2FudmFzLmV4dC5qcycpO1xucmVxdWlyZSgnLi9jb3JlL3NsaWRlLmpzJyk7XG5yZXF1aXJlKCcuL2NvcmUvYXBwbGljYXRpb24uc2xpZGVzLmpzJyk7XG5yZXF1aXJlKCcuL2NvcmUvYXBwbGljYXRpb24ucHJvdG90eXBlcy5qcycpO1xucmVxdWlyZSgnLi9jb3JlL29iamVjdC5leHQuanMnKTtcbnJlcXVpcmUoJy4vY29yZS90ZXh0LmV4dC5qcycpO1xucmVxdWlyZSgnLi9jb3JlL2dyb3VwLmV4dC5qcycpO1xucmVxdWlyZSgnLi9jb3JlL2ltYWdlLmV4dC5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2NhbnZhcy5ldmVudHMuanMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9pbWFnZS5maWx0ZXJzLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZm9udHMuanMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9nYWxsZXJ5LmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZGVidWcuanMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9mcm9tVVJMLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvdXBsb2FkLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvbG9hZGVyLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvcmVuZGVyLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvdGh1bWIuanMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9oaXN0b3J5LmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvem9vbS5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2ludGVyYWN0aXZlTW9kZS5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2JvcmRlckltYWdlLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvdG9vbGJhci5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3NhdmVBcy5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2xpYnJhcnkuanMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9zbGlkZS5kcmF3aW5nLXRvb2xzLmpzJyk7XG5yZXF1aXJlKCcuL2JydXNoZXMvQmFzZUJydXNoLmpzJyk7XG5yZXF1aXJlKCcuL2JydXNoZXMvUGVuY2lsQnJ1c2guanMnKTtcbnJlcXVpcmUoJy4vYnJ1c2hlcy9SZWN0YW5nbGVCcnVzaC5qcycpO1xucmVxdWlyZSgnLi9icnVzaGVzL1BvbHlnb25CcnVzaC5qcycpO1xucmVxdWlyZSgnLi9icnVzaGVzL1BhaW50UGVuQnJ1c2guanMnKTtcbnJlcXVpcmUoJy4vYnJ1c2hlcy9QYWludEJ1Y2tldEJydXNoLmpzJyk7XG5yZXF1aXJlKCcuL2JydXNoZXMvUG9pbnRzQnJ1c2guanMnKTtcbnJlcXVpcmUoJy4vc2hhcGVzL2NsaXBhcnQuanMnKTtcbnJlcXVpcmUoJy4vc2hhcGVzL2ltYWdlLnBob3Rvc2hvcC10b29scy5qcycpO1xucmVxdWlyZSgnLi9zaGFwZXMvaW1hZ2UucmVtb3ZlLXdoaXRlLmpzJyk7XG5yZXF1aXJlKCcuL3NoYXBlcy90ZXh0Ym94Lmxpc3QuanMnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL21vZHVsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxudmFyIHBhdGggPSByZXF1aXJlKFwiLi9wYXRoXCIpO1xudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xudmFyIG9iamVjdCA9IHJlcXVpcmUoXCIuL29iamVjdFwiKTtcblxuZnVuY3Rpb24gaXNTZXJ2ZXIoKSB7XG4gIHJldHVybiAhICh0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCk7XG59XG5cblxuaWYgKGlzU2VydmVyKCkpIHtcbiAgdmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbn1cblxuXG5mdW5jdGlvbiBfbG9hZF9qc29uICh2YWx1ZSwgY2FsbGJhY2tfc3VjY2VzcywgY2FsbGJhY2tfZXJyb3Ipe1xuXG4gIHZhciBvdXRwdXQgPSBudWxsO1xuICB2YXIgZXJyb3JzID0gW107XG5cbiAgaWYgKHZhbHVlLmNvbnN0cnVjdG9yID09IFN0cmluZykge1xuXG4gICAgdmFyIGZpbGVuYW1lLCByZWdleF9kYXRhLCBpbml0X3Byb3BlcnR5O1xuICAgIHJlZ2V4X2RhdGEgPSAvXihbXiNdKikjPyguKikkLy5leGVjKHZhbHVlKTtcblxuICAgIGZpbGVuYW1lID0gcmVnZXhfZGF0YVsxXTtcbiAgICBpbml0X3Byb3BlcnR5ID0gcmVnZXhfZGF0YVsyXTtcbiAgICB1dGlscy5nZXRJbmxpbmVKc29uKGZpbGVuYW1lLCBcImpzb25cIiwgX2xvYWRKc29uX2RhdGEsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgaWYgKGNhbGxiYWNrX2Vycm9yKSB7XG4gICAgICAgIGNhbGxiYWNrX2Vycm9yKGVycm9yKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcImZpbGU6IFxcXCJcIiArIGZpbGVuYW1lICsgXCJcXFwiLiBcIiArIGVycm9yLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgX2xvYWRKc29uX2RhdGEodmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2xvYWRKc29uX2RhdGEoZGF0YSkge1xuICAgIC8qXG4gICAgINC30LDQvNC10L3QsCDQt9Cw0L/QuNGB0LXQuSBcInVybCguL3BhdGgvdG8vZmlsZSkgINC90LAgXCIuLi8uLi9wYXRoL3RvL2ZpbGVcIlxuICAgICB1cmwg0L3QsNGH0LjQvdCw0Y7RidC40LXRgdGPINGBIC4vINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDRgNC+0LTQuNGC0LXQu9GM0LrQvtCz0L4ganNvbiDRhNCw0LnQu9CwXG5cbiAgICAgdXJsINGBIFwiL1wiINC00L7QsdCw0LLQu9GP0LXRgtGB0Y8gQVBQX1NUQVRJQ19QQVRIXG4gICAgICovXG4gICAgdXRpbHMucmVjb3Vyc2l2ZShkYXRhLFxuICAgICAgZnVuY3Rpb24gKHByb3BlcnR5LCB2YWx1ZSwgcGFyZW50KSB7XG4gICAgICAgIGlmICgvXnVybFxcKC4qXFwpJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICB2YXIgcmVnZXhfZGF0YSA9IC9edXJsXFwoKFxcLj9cXC8pPyguKilcXCkkLy5leGVjKHZhbHVlKTtcbiAgICAgICAgICB2YXIgdXJsID0gcmVnZXhfZGF0YVsyXTtcblxuICAgICAgICAgIGlmIChyZWdleF9kYXRhWzFdID09IFwiL1wiKSB7XG4gICAgICAgICAgICB1cmwgPSB3aW5kb3cuQVBQX1NUQVRJQ19QQVRIICsgdXJsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVnZXhfZGF0YVsxXSA9PSBcIi4vXCIpIHtcbiAgICAgICAgICAgIHVybCA9IHBhdGguZ2V0UGFyZW50RGlyZWN0b3J5VXJsKGZpbGVuYW1lKSArIHVybDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJlbnRbcHJvcGVydHldID0gcGF0aC5yZXNvbHZlKHVybCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuXG5cbiAgICB2YXIgbG9hZGVyID0gdXRpbC5xdWV1ZUxvYWQoMSwgZnVuY3Rpb24gZmluYWxpemUoKSB7XG5cbiAgICAgIGlmIChpbml0X3Byb3BlcnR5KSB7XG4gICAgICAgIHZhciBwcm9wX2FyciA9IGluaXRfcHJvcGVydHkuc3BsaXQoXCIvXCIpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BfYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZGF0YSA9IGRhdGFbcHJvcF9hcnJbaV1dO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChjYWxsYmFja19lcnJvcikgY2FsbGJhY2tfZXJyb3IoZXJyb3JzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjYWxsYmFja19zdWNjZXNzKSBjYWxsYmFja19zdWNjZXNzKGRhdGEpO1xuICAgICAgICBvdXRwdXQgPSBkYXRhO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIGNvbW1lbnRzXG4gICAgICovXG4gICAgdXRpbHMucmVjb3Vyc2l2ZShkYXRhLCBmdW5jdGlvbiAocHJvcGVydHksIHZhbHVlLCBwYXJlbnQpIHtcbiAgICAgIC8qXG4gICAgICAgcmVtb3ZlIGNvbW1lbnRzIGxpa2VcbiAgICAgICBbXCJAY29tbWVudCgpXCJdXG4gICAgICAgXCJAY29tbWVudFwiOiB7fVxuICAgICAgICovXG4gICAgICBpZiAoL15cXC9cXC8uKiQvLnRlc3QodmFsdWUpIHx8IC9eQGNvbW1lbnRcXCguKlxcKSQvLnRlc3QodmFsdWUpIHx8IHByb3BlcnR5ID09IFwiQGNvbW1lbnRcIikge1xuICAgICAgICBpZiAocGFyZW50LmNvbnN0cnVjdG9yID09IEFycmF5KSB7XG4gICAgICAgICAgcGFyZW50LnNwbGljZShwcm9wZXJ0eSwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHBhcmVudFtwcm9wZXJ0eV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoL15AZXh0ZW5kLiokLy50ZXN0KHByb3BlcnR5KSkge1xuXG4gICAgICAgIGxvYWRlci50b3RhbCsrO1xuICAgICAgICBfbG9hZF9qc29uKHZhbHVlLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHZhciBleHRfZGF0YSA9IG9iamVjdC5kZWVwRXh0ZW5kKGRhdGEsIHBhcmVudCk7XG4gICAgICAgICAgb2JqZWN0LmRlZXBFeHRlbmQocGFyZW50LCBleHRfZGF0YSk7XG4gICAgICAgICAgZGVsZXRlIHBhcmVudFtcIkBleHRlbmRcIl07XG4gICAgICAgICAgbG9hZGVyKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChkYXRhLCBlcnJvcikge1xuICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yKTtcbiAgICAgICAgICBsb2FkZXIoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKC9eQGV4dGVuZFxcKC4qXFwpJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIF9yZWdfZGF0YSA9IC9eQGV4dGVuZFxcKChcXC5cXC8pPyguKilcXCkkLy5leGVjKHZhbHVlKTtcbiAgICAgICAgdmFyIHVybCA9IF9yZWdfZGF0YVsyXTtcbiAgICAgICAgaWYgKF9yZWdfZGF0YVsxXSkge1xuICAgICAgICAgIHVybCA9IHBhdGguZ2V0UGFyZW50RGlyZWN0b3J5VXJsKGZpbGVuYW1lKSArIHVybDtcbiAgICAgICAgfVxuICAgICAgICBsb2FkZXIudG90YWwrKztcbiAgICAgICAgX2xvYWRfanNvbih1cmwsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgcGFyZW50W3Byb3BlcnR5XSA9IGRhdGE7XG4gICAgICAgICAgbG9hZGVyKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChkYXRhLCBlcnJvcikge1xuICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yKTtcbiAgICAgICAgICBsb2FkZXIoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKC9eQG1peGluXFwoLipcXCkkLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICB2YXIgX3JlZ19kYXRhID0gL15AbWl4aW5cXCgoXFwuXFwvKT8oLiopXFwpJC8uZXhlYyh2YWx1ZSk7XG4gICAgICAgIHZhciB1cmwgPSBfcmVnX2RhdGFbMl07XG4gICAgICAgIGlmIChfcmVnX2RhdGFbMV0pIHtcbiAgICAgICAgICB1cmwgPSBwYXRoLmdldFBhcmVudERpcmVjdG9yeVVybChmaWxlbmFtZSkgKyB1cmw7XG4gICAgICAgIH1cbiAgICAgICAgbG9hZGVyLnRvdGFsKys7XG4gICAgICAgIF9sb2FkX2pzb24odXJsLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGlmIChwYXJlbnQuY29uc3RydWN0b3IgPT0gQXJyYXkpIHtcbiAgICAgICAgICAgIHBhcmVudC5zcGxpY2UocHJvcGVydHksIDEpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgIHBhcmVudC5wdXNoKGRhdGFbaV0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSBwYXJlbnRbcHJvcGVydHldO1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgIHBhcmVudFtpXSA9IGRhdGFbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGxvYWRlcigpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZGF0YSwgZXJyb3IpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcik7XG4gICAgICAgICAgbG9hZGVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICgvXkBsb2FkXFwoKC4qKVxcKSQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBfcmVnX2RhdGEgPSAvXkBsb2FkXFwoKFxcLj9cXC8pPyguKilcXCkkLy5leGVjKHZhbHVlKTtcbiAgICAgICAgdmFyIHVybCA9IF9yZWdfZGF0YVsyXTtcbiAgICAgICAgaWYgKF9yZWdfZGF0YVsxXSA9PSBcIi9cIikge1xuICAgICAgICAgIHVybCA9IHdpbmRvdy5BUFBfU1RBVElDX1BBVEggKyB1cmw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9yZWdfZGF0YVsxXSA9PSBcIi4vXCIpIHtcbiAgICAgICAgICB1cmwgPSBwYXRoLmdldFBhcmVudERpcmVjdG9yeVVybChmaWxlbmFtZSkgKyB1cmw7XG4gICAgICAgIH1cblxuICAgICAgICBsb2FkZXIudG90YWwrKztcbiAgICAgICAgdXRpbHMuZ2V0SW5saW5lSnNvbih1cmwsIFwiaHRtbFwiLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHBhcmVudFtwcm9wZXJ0eV0gPSBkYXRhO1xuICAgICAgICAgIGxvYWRlcigpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZGF0YSwgZXJyb3IpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcik7XG4gICAgICAgICAgbG9hZGVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgfSk7XG4gICAgbG9hZGVyKCk7XG5cbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbnZhciB1dGlscyA9IHtcbiAgQ0FDSEVEX0pTT04gOiB7fSxcbiAgbG9hZEpzb25TeW5jOiBmdW5jdGlvbihzcmMpe1xuICAgIHZhciBkYXRhO1xuICAgIF9sb2FkX2pzb24oc3JjLGZ1bmN0aW9uKF9kYXRhKXtcbiAgICAgIGRhdGEgPSBfZGF0YTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfSxcblxuICAvKipcbiAgINC/0L7Qt9Cy0L7Qu9GP0LXRgiDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0LrQvtC90YHRgtGA0YPQutGG0LjQuCDQstC40LTQsFxuICAg0YDQsNGB0YjQuNGA0LjRgtGMINC00LDQvdC90YvQtSDQuNC3INGE0LDQudC70LAgdGVtcGxhdGUuanNvblxuICAgXCJAZXh0ZW5kXCIgOiBcInVybChkYXRhL3RlbXBsYXRlLmpzb24pXCIsXG4gICBcIkBleHRlbmRcIiA6IFwidXJsKGRhdGEvdGVtcGxhdGUuanNvbiNzZXR0aW5ncy9zdGFnZXMpXCIsXG5cbiAgIC8v0LfQsNC80LXQvdC40YLRjCDRgdGC0YDQvtC60YMg0L3QsNC00LDQvdC90YvQtSDQuNC3INGE0LDQudC70LBcbiAgIFwic3RhZ2VzXCI6ICAgICAgIFwidXJsKGRhdGEvdGVtcGxhdGUuanNvbiNzZXR0aW5ncy9zdGFnZXMpXCIsXG5cbiAgICogQHBhcmFtIGZpbGVuYW1lXG4gICAqIEBwYXJhbSBjYWxsYmFja19zdWNjZXNzXG4gICAqIEBwYXJhbSBjYWxsYmFja19lcnJvclxuICAgKi9cbiAgbG9hZEpzb246IGZ1bmN0aW9uICh2YWx1ZSxyZXNvbHZlX2NiLGZhaWxfY2IpIHtcbiAgICAgIHJldHVybiBfbG9hZF9qc29uKHZhbHVlLGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICByZXNvbHZlX2NiICYmIHJlc29sdmVfY2IoZGF0YSk7XG4gICAgICB9LGZ1bmN0aW9uKGVycil7XG4gICAgICAgIGZhaWxfY2IgJiYgZmFpbF9jYihlcnIpO1xuICAgICAgfSk7XG4gIH0sXG5cbiAgcmVtb3ZlQ29tbWVudHM6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvXlxccyooXFwvXFwvLip8KD86XFwvXFwqW1xcc1xcU10qPylcXCpcXC9cXHMqKSQvZ20sXCJcIik7XG4gICAgcmV0dXJuIHN0cjtcbiAgfSxcbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3RcbiAgICogQHBhcmFtIGNyaXRlcmlhIC0g0LLRi9C/0L7Qu9C90Y/RgtGMINGE0YPQvdC60YbQuNGOINGB0L4g0LLRgdC10LzQuCDQvtCx0YrQtdC60YLQsNC80LhcbiAgICovXG4gIHJlY291cnNpdmU6IGZ1bmN0aW9uIChvYmplY3QsIGNyaXRlcmlhKSB7XG4gICAgdmFyIHJlYWRlZCA9IFtdO1xuICAgIGlmICghb2JqZWN0KSByZXR1cm47XG4gICAgcmV0dXJuIChmdW5jdGlvbiBzdWJfcmVjb3Vyc2l2ZShvYmplY3QpIHtcbiAgICAgIGlmIChyZWFkZWQuaW5kZXhPZihvYmplY3QpICE9IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlYWRlZC5wdXNoKG9iamVjdCk7XG5cblxuICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGZvciAodmFyIHByb3AgPSBvYmplY3QubGVuZ3RoOyBwcm9wLS07KSB7XG4gICAgICAgICAgaWYgKG9iamVjdFtwcm9wXSAmJiAob2JqZWN0W3Byb3BdLmNvbnN0cnVjdG9yID09IE9iamVjdCB8fCBvYmplY3RbcHJvcF0uY29uc3RydWN0b3IgPT0gQXJyYXkpKSB7XG4gICAgICAgICAgICBzdWJfcmVjb3Vyc2l2ZShvYmplY3RbcHJvcF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYnJlYWtfID0gY3JpdGVyaWEocHJvcCwgb2JqZWN0W3Byb3BdLCBvYmplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBvYmplY3QpIHtcbiAgICAgICAgICBpZiAob2JqZWN0W3Byb3BdICYmIChvYmplY3RbcHJvcF0uY29uc3RydWN0b3IgPT0gT2JqZWN0IHx8IG9iamVjdFtwcm9wXS5jb25zdHJ1Y3RvciA9PSBBcnJheSkpIHtcbiAgICAgICAgICAgIHN1Yl9yZWNvdXJzaXZlKG9iamVjdFtwcm9wXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBicmVha18gPSBjcml0ZXJpYShwcm9wLCBvYmplY3RbcHJvcF0sIG9iamVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkob2JqZWN0KTtcbiAgfSxcblxuICBwYXJzZUNTVjogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgcm93cyA9IGRhdGEuc3BsaXQoL1xcbi8pO1xuICAgIHZhciBjb2x1bW5zID0gcm93c1swXS5zcGxpdCgnLCcpO1xuICAgIHJvd3Muc3BsaWNlKDAsIDEpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgb3V0cHV0X3Jvd19kYXRhID0ge307XG4gICAgICB2YXIgcm93X2RhdGEgPSBbXTtcblxuXG4gICAgICB2YXIgX3F1b3RlID0gZmFsc2UsIGxhc3QgPSAtMTtcbiAgICAgIHZhciBqID0gLTE7XG4gICAgICB2YXIgc3RyID0gcm93c1tpXTtcbiAgICAgIHdoaWxlICgrK2ogPCBzdHIubGVuZ3RoKSB7XG4gICAgICAgIGlmICghX3F1b3RlKSB7XG4gICAgICAgICAgaWYgKHN0cltqXSA9PSAnXFwnJyB8fCBzdHJbal0gPT0gJ1xcXCInKSB7XG4gICAgICAgICAgICBfcXVvdGUgPSBzdHJbal07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdHJbal0gPT0gXCIsXCIpIHtcbiAgICAgICAgICAgIHZhciBfdmFsID0gc3RyLnN1YnN0cmluZyhsYXN0LCBqKTtcbiAgICAgICAgICAgIGlmIChfdmFsWzBdID09ICdcXFwiJyAmJiBfdmFsW192YWwubGVuZ3RoIC0gMV0gPT0gJ1xcXCInKSB7XG4gICAgICAgICAgICAgIF92YWwgPSBfdmFsLnN1YnN0cmluZygxLCBfdmFsLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcm93X2RhdGEucHVzaChfdmFsKTtcbiAgICAgICAgICAgIGxhc3QgPSBqICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHN0cltqXSA9PSBfcXVvdGUpIHtcbiAgICAgICAgICAgIF9xdW90ZSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqIGluIHJvd19kYXRhKSB7XG4gICAgICAgIG91dHB1dF9yb3dfZGF0YVtjb2x1bW5zW2pdXSA9IHJvd19kYXRhW2pdO1xuICAgICAgfVxuICAgICAgcm93c1tpXSA9IG91dHB1dF9yb3dfZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHJvd3M7XG4gIH0sXG4gIHBhcnNlRGF0YTogZnVuY3Rpb24gKGRhdGEsIGRhdGFUeXBlKSB7XG4gICAgdmFyIF9wYXJzZWQ7XG4gICAgaWYgKGRhdGFUeXBlID09IFwiY3N2XCIpIHtcbiAgICAgIF9wYXJzZWQgPSB1dGlscy5wYXJzZUNTVihkYXRhKTtcbiAgICB9IGVsc2UgaWYgKGRhdGFUeXBlID09IFwianNvblwiKSB7XG4gICAgICBfcGFyc2VkID0gZGF0YS50cmltKCk7XG4gICAgICAvL2lmIChkYXRhWzBdICE9IFwie1wiICYmIGRhdGFbMF0gIT0gXCJbXCIpIHtcbiAgICAgIC8vICByZXR1cm4gZmFsc2U7XG4gICAgICAvL31cblxuICAgICAgX3BhcnNlZCA9IHV0aWxzLnJlbW92ZUNvbW1lbnRzKF9wYXJzZWQpO1xuICAgICAgLy9kYXRhICA9IGRhdGEucmVwbGFjZSgvXFxuL2csXCJcIilcblxuICAgICAgdHJ5e1xuICAgICAgICB2YXIgX3BhcnNlZCA9IEpTT04ucGFyc2UoX3BhcnNlZCk7Ly89IEpTT04ucGFyc2UoZGF0YS5yZXBsYWNlKC9cXC9cXCpbXFxzXFxTXSo/XFwqXFwvfFxcL1xcLy4qL2csXCJcIikpO1xuICAgICAgfWNhdGNoKGUpe1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXR1czogXCJlcnJvclwiLFxuICAgICAgICAgIG1lc3NhZ2U6IGUudG9TdHJpbmcoKSxcbiAgICAgICAgICBkYXRhOiAgZGF0YVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgLy92YXIgc2NyaXB0ID0gJChcIjxzY3JpcHQgdHlwZT0ndGV4dC9qc29uJyBpZD0nXCIgKyB1cmwgKyBcIic+XCIgKyBKU09OLnN0cmluZ2lmeShkYXRhKSArIFwiPC9zY3JpcHQ+XCIpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgIGRhdGE6IF9wYXJzZWRcbiAgICB9O1xuICB9LFxuICBsb2FkOiBmdW5jdGlvbiAodXJsLCBkYXRhVHlwZSwgY2FsbGJhY2tfc3VjY2VzcywgY2FsbGJhY2tfZXJyb3IpIHtcbiAgICAvL3RvZG9cbiAgICBpZiAoaXNTZXJ2ZXIoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGRhdGEgPSBmcy5yZWFkRmlsZVN5bmModXJsLCAndXRmOCcpO1xuICAgICAgICBkYXRhID0gZGF0YS5yZXBsYWNlKC9eXFx1RkVGRi8sICcnKTtcbiAgICAgICAgdmFyIF9wYXJzZWQgPSB1dGlscy5wYXJzZURhdGEoZGF0YSwgZGF0YVR5cGUpO1xuICAgICAgICBpZihfcGFyc2VkLnN0YXR1cyA9PSBcImVycm9yXCIpe1xuICAgICAgICAgIGNhbGxiYWNrX2Vycm9yKHtcbiAgICAgICAgICAgIHN0YXR1czogICBcImVycm9yXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiAgX3BhcnNlZC5tZXNzYWdlLFxuICAgICAgICAgICAgZGF0YTogICAgIF9wYXJzZWQuZGF0YVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFja19zdWNjZXNzKF9wYXJzZWQuZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG5cbiAgICAgICAgaWYgKGUuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnRmlsZSBub3QgZm91bmQhJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFja19lcnJvcihkYXRhKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuXG4gICAgICB2YXIgaHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgaHR0cFJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaHR0cFJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIGlmIChodHRwUmVxdWVzdC5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBodHRwUmVxdWVzdC5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICB2YXIgX3BhcnNlZCA9IHV0aWxzLnBhcnNlRGF0YShkYXRhLCBkYXRhVHlwZSk7XG4gICAgICAgICAgICBpZihfcGFyc2VkLnN0YXR1cyA9PSBcImVycm9yXCIpe1xuICAgICAgICAgICAgICBjYWxsYmFja19lcnJvcih7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiBodHRwUmVxdWVzdC5zdGF0dXMsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogIF9wYXJzZWQubWVzc2FnZSxcbiAgICAgICAgICAgICAgICByZXNwb25zZTogaHR0cFJlcXVlc3QucmVzcG9uc2VUZXh0XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFja19zdWNjZXNzKF9wYXJzZWQuZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrX2Vycm9yKHVybCwgaHR0cFJlcXVlc3QpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaHR0cFJlcXVlc3Qub3BlbignR0VUJywgdXJsKTtcbiAgICAgIGh0dHBSZXF1ZXN0LnNlbmQoKTtcbiAgICB9XG4gIH0sXG4gIC8qKlxuICAgKiDQn9C+0LfQstC+0LvRj9C10YLQt9Cw0LPRgNGD0LbQsNGC0YwganNvbiDRhNCw0LnQu9GLICwg0YHQvtC00LXRgNC20LDRidC40LUg0YHRgdGL0LvQutC4INC90LAg0LTRgNGD0LPQuNC1IGpzb24g0YTQsNC50LvRiy5cbiAgICog0LLQvNC10YHRgtC+INGB0YHRi9C70L7QuiDRgtC40L/QsFxuICAgKiAgXCJwcm9wZXJ0eVwiIDogXCJ1cmwoY2h1bmsuanNvbilcIlxuICAgKiAg0LHRg9C00LXRgiDQt9Cw0LPRgNGD0LbQtdC90L4g0YHQvtC00LXRgNC20LjQvNC+0LUg0YTQsNC50LvQsFxuICAgKiAgXCJwcm9wZXJ0eVwiIDogey4uLn1cbiAgICpcbiAgICogINC10YHQu9C4INGD0LrQsNC30LDRgtGMINGP0LrQvtGA0YxcbiAgICogIFwicHJvcGVydHlcIiA6IFwidXJsKGNodW5rLmpzb24jc2V0dGluZ3MvY2h1bmsvMC90ZXh0KVwiXG4gICAqXG4gICAqINGC0L4g0LHRg9C00LXRgiDQt9Cw0LPRgNGD0LbQtdC90L4g0YHQvtC00LXRgNC20LjQvNC+0LUg0L/QvtC70Y8gc2V0dGluZ3MuY2h1bmtbMF0udGV4dCDQuNC3INGE0LDQudC70LAgY2h1bmsuanNvblxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0gZmlsZW5hbWUgINC/0YPRgtGMINC6INC+0YHQvdC+0LLQvdC+0LzRgyBqc29uINGE0LDQudC70YNcbiAgICogQHBhcmFtIGNhbGxiYWNrICDQsdGD0LTQtdGCINCy0YvQt9Cy0LDQvSDQv9C+0YHQu9C1INC+0LrQvtC90YfQsNC90LjRjyDQt9Cw0LPRgNGD0LfQutC4INCy0YHQtdGFINGE0LDQudC70L7QslxuICAgKi9cbiAgZ2V0SW5saW5lSnNvbjogZnVuY3Rpb24gKHVybCwgZGF0YVR5cGUsIGNhbGxiYWNrX3N1Y2Nlc3MsIGNhbGxiYWNrX2Vycm9yKSB7XG5cbiAgICBpZiAoZGF0YVR5cGUuY29uc3RydWN0b3IgIT0gU3RyaW5nKSB7XG4gICAgICBjYWxsYmFja19lcnJvciA9IGNhbGxiYWNrX3N1Y2Nlc3M7XG4gICAgICBjYWxsYmFja19zdWNjZXNzID0gZGF0YVR5cGU7XG4gICAgICBkYXRhVHlwZSA9IFwianNvblwiO1xuICAgIH1cblxuXG4gICAgaWYgKHR5cGVvZiB1dGlscy5DQUNIRURfSlNPTiAhPT0gXCJ1bmRlZmluZWRcIiAmJiB1dGlscy5DQUNIRURfSlNPTiAmJiB1dGlscy5DQUNIRURfSlNPTlt1cmxdKSB7XG4gICAgICBjYWxsYmFja19zdWNjZXNzKHV0aWxzLkNBQ0hFRF9KU09OW3VybF0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mICQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdmFyIGlubGluZSA9ICQoXCJzY3JpcHRbaWQ9J1wiICsgdXJsICsgXCInXVwiKTtcbiAgICAgICAgaWYgKGlubGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIF9kYXRhID1cbiAgICAgICAgICAgIGlubGluZVswXS5pbm5lclRleHQgfHwgLy9hbGxcbiAgICAgICAgICAgIGlubGluZVswXS50ZXh0Q29udGVudCB8fCAvL2ZpcmVmb3hcbiAgICAgICAgICAgIGlubGluZVswXS50ZXh0OyAvL2llOFxuICAgICAgICAgIGlmIChkYXRhVHlwZSA9PSBcImpzb25cIikge1xuXG4gICAgICAgICAgICB2YXIgX2RhdGEgPSB1dGlscy5yZW1vdmVDb21tZW50cyhfZGF0YSk7XG4gICAgICAgICAgICBjYWxsYmFja19zdWNjZXNzKEpTT04ucGFyc2UoX2RhdGEpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2tfc3VjY2VzcyhfZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB1dGlscy5sb2FkKHVybCwgZGF0YVR5cGUsIGNhbGxiYWNrX3N1Y2Nlc3MsIGNhbGxiYWNrX2Vycm9yKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB1dGlscztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdXRpbC9kYXRhLmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgbG9hZFNjcmlwdDogZnVuY3Rpb24gKHJlcXVpcmVtZW50LCBoZWxwZXIsIGVycm9yKSB7XG4gICAgdmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgIHNjcmlwdC5vbmVycm9yID0gZXJyb3I7XG4gICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJykge1xuICAgICAgICBoZWxwZXIoc2NyaXB0LCBfX3NyYyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgaGVscGVyLCB0cnVlKTtcbiAgICBzY3JpcHQuc3JjID0gcmVxdWlyZW1lbnQ7XG4gICAgaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICB9LFxuICBzY3JpcHRVUkw6IGZ1bmN0aW9uICgpIHtcblxuICAgIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG4gICAgfVxuICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICAgIGZvciAodmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7IGktLTspIHtcbiAgICAgIGlmIChzY3JpcHRzW2ldLnNyYykge1xuICAgICAgICByZXR1cm4gc2NyaXB0c1tpXS5zcmM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdXRpbC9sb2FkZXIuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxudmFyIGRlZXBEaWZmTWFwcGVyID0ge1xuICBWQUxVRV9DUkVBVEVEOiAnY3JlYXRlZCcsXG4gIFZBTFVFX1VQREFURUQ6ICd1cGRhdGVkJyxcbiAgVkFMVUVfREVMRVRFRDogJ2RlbGV0ZWQnLFxuICBWQUxVRV9VTkNIQU5HRUQ6ICd1bmNoYW5nZWQnLFxuICBtYXA6IGZ1bmN0aW9uKG9iajEsIG9iajIpIHtcbiAgICBpZiAodGhpcy5pc0Z1bmN0aW9uKG9iajEpIHx8IHRoaXMuaXNGdW5jdGlvbihvYmoyKSkge1xuICAgICAgdGhyb3cgJ0ludmFsaWQgYXJndW1lbnQuIEZ1bmN0aW9uIGdpdmVuLCBvYmplY3QgZXhwZWN0ZWQuJztcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNWYWx1ZShvYmoxKSB8fCB0aGlzLmlzVmFsdWUob2JqMikpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdfbWFwX3R5cGUnOiB0aGlzLmNvbXBhcmVWYWx1ZXMob2JqMSwgb2JqMiksXG4gICAgICAgICdfbWFwX2RhdGEnOiAob2JqMiA9PT0gdW5kZWZpbmVkKSA/IG9iajEgOiBvYmoyXG4gICAgICB9O1xuICAgIH1cblxuXG4gICAgaWYoXy5pc0FycmF5KG9iajIpKXtcbiAgICAgIHZhciBfYXJyYXkgPSB0cnVlO1xuICAgICAgdmFyIGRpZmYgPSBbXTtcbiAgICB9ZWxzZXtcbiAgICAgIHZhciBkaWZmID0ge307XG4gICAgfVxuXG5cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqMSkge1xuICAgICAgaWYgKHRoaXMuaXNGdW5jdGlvbihvYmoxW2tleV0pKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUyID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKCd1bmRlZmluZWQnICE9IHR5cGVvZihvYmoyW2tleV0pKSB7XG4gICAgICAgIHZhbHVlMiA9IG9iajJba2V5XTtcbiAgICAgIH1cblxuICAgICAgZGlmZltrZXldID0gdGhpcy5tYXAob2JqMVtrZXldLCB2YWx1ZTIpO1xuICAgIH1cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqMikge1xuICAgICAgaWYgKHRoaXMuaXNGdW5jdGlvbihvYmoyW2tleV0pIHx8ICgndW5kZWZpbmVkJyAhPSB0eXBlb2YoZGlmZltrZXldKSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBfdmFsID0gdGhpcy5tYXAodW5kZWZpbmVkLCBvYmoyW2tleV0pO1xuICAgICAgaWYoX2FycmF5KXtcbiAgICAgICAgZGlmZi5wdXNoKF92YWwpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIGRpZmZba2V5XSA9IF92YWxcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgJ19tYXBfdHlwZSc6ICcnLFxuICAgICAgJ19tYXBfZGF0YSc6IGRpZmZcbiAgICB9O1xuXG4gIH0sXG4gIGNvbXBhcmVWYWx1ZXM6IGZ1bmN0aW9uKHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgaWYgKHZhbHVlMSA9PT0gdmFsdWUyKSB7XG4gICAgICByZXR1cm4gdGhpcy5WQUxVRV9VTkNIQU5HRUQ7XG4gICAgfVxuICAgIGlmICgndW5kZWZpbmVkJyA9PSB0eXBlb2YodmFsdWUxKSkge1xuICAgICAgcmV0dXJuIHRoaXMuVkFMVUVfQ1JFQVRFRDtcbiAgICB9XG4gICAgaWYgKCd1bmRlZmluZWQnID09IHR5cGVvZih2YWx1ZTIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5WQUxVRV9ERUxFVEVEO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLlZBTFVFX1VQREFURUQ7XG4gIH0sXG4gIGlzRnVuY3Rpb246IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB7fS50b1N0cmluZy5hcHBseShvYmopID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICB9LFxuICBpc0FycmF5OiBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4ge30udG9TdHJpbmcuYXBwbHkob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfSxcbiAgaXNPYmplY3Q6IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB7fS50b1N0cmluZy5hcHBseShvYmopID09PSAnW29iamVjdCBPYmplY3RdJztcbiAgfSxcbiAgaXNWYWx1ZTogZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuICF0aGlzLmlzT2JqZWN0KG9iaikgJiYgIXRoaXMuaXNBcnJheShvYmopO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGlmZmVyZW5jZU1hcDogZGVlcERpZmZNYXBwZXIubWFwLmJpbmQoZGVlcERpZmZNYXBwZXIpLFxuICBzeW50YXhIaWdobGlnaHQ6IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgaWYgKHR5cGVvZiBqc29uICE9ICdzdHJpbmcnKSB7XG4gICAgICBqc29uID0gSlNPTi5zdHJpbmdpZnkoanNvbiwgbnVsbCwgMik7XG4gICAgfVxuICAgIGpzb24gPSBqc29uLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKTtcblxuICAgIGpzb24gPSBqc29uLnJlcGxhY2UoLyhcIihcXFxcdVthLXpBLVowLTldezR9fFxcXFxbXnVdfFteXFxcXFwiXSkqXCIoXFxzKjopP3xcXGIodHJ1ZXxmYWxzZXxudWxsKVxcYnwtP1xcZCsoPzpcXC5cXGQqKT8oPzpbZUVdWytcXC1dP1xcZCspPykvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICB2YXIgY2xzID0gJ251bWJlcic7XG4gICAgICBpZiAoL15cIi8udGVzdChtYXRjaCkpIHtcbiAgICAgICAgaWYgKC86JC8udGVzdChtYXRjaCkpIHtcbiAgICAgICAgICBjbHMgPSAna2V5JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbHMgPSAnc3RyaW5nJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgvdHJ1ZXxmYWxzZS8udGVzdChtYXRjaCkpIHtcbiAgICAgICAgY2xzID0gJ2Jvb2xlYW4nO1xuICAgICAgfSBlbHNlIGlmICgvbnVsbC8udGVzdChtYXRjaCkpIHtcbiAgICAgICAgY2xzID0gJ251bGwnO1xuICAgICAgfVxuICAgICAgcmV0dXJuICc8c3BhbiBjbGFzcz1cIicgKyBjbHMgKyAnXCI+JyArIG1hdGNoICsgJzwvc3Bhbj4nO1xuICAgIH0pO1xuICAgIHJldHVybiBqc29uID0ganNvbi5yZXBsYWNlKC9bXixcXG5dW15cXG5dKi9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHJldHVybiAnPHNwYW4+JyArIG1hdGNoICsgJzwvc3Bhbj4nO1xuICAgIH0pO1xuICB9LFxuICBkaWZmZXJlbmNlSGlnaGxpZ2h0OiBmdW5jdGlvbiAgKGpzb24sb3V0cHV0KXtcblxuICAgIGlmKG91dHB1dCl7XG4gICAgICBvdXRwdXQuZW1wdHkoKTtcbiAgICB9ZWxzZXtcbiAgICAgIG91dHB1dCA9ICQoXCI8cHJlPlwiKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHByaW50T2JqZWN0KGpzb24sbGV2ZWwsb3V0cHV0LGNvbW1hLG9iamVjdEluZGV4KXtcbiAgICAgIHZhciBfZWwgPSAkKFwiPHA+XCIpO1xuXG4gICAgICBfZWwuYXBwZW5kKCQoXCI8c3Bhbj5cIikuYWRkQ2xhc3MoXCJvYmplY3Qta2V5XCIpLmFwcGVuZChcbiAgICAgICAgJChcIjxzcGFuPlwiKS50ZXh0KG5ldyBBcnJheShsZXZlbCkuam9pbignICcpIClcbiAgICAgICkpO1xuICAgICAgaWYob2JqZWN0SW5kZXgpe1xuICAgICAgICBfZWwuYXBwZW5kKFxuICAgICAgICAgICQoXCI8c3Bhbj5cIikudGV4dCgnXCInKS5hZGRDbGFzcyhcImludmlzaWJsZVwiKSxcbiAgICAgICAgICAkKFwiPHNwYW4+XCIpLmFkZENsYXNzKFwia2V5XCIpLnRleHQob2JqZWN0SW5kZXgpLFxuICAgICAgICAgICQoXCI8c3Bhbj5cIikudGV4dCgnXCInKS5hZGRDbGFzcyhcImludmlzaWJsZVwiKSxcbiAgICAgICAgICAkKFwiPHNwYW4+XCIpLnRleHQoJzogJylcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYoanNvbiAmJiBqc29uLl9tYXBfdHlwZSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgX2VsLmFkZENsYXNzKGpzb24uX21hcF90eXBlKTtcblxuICAgICAgICBpZihfLmlzQXJyYXkoanNvbi5fbWFwX2RhdGEpKXtcbiAgICAgICAgICBfZWwuYXBwZW5kKCQoXCI8c3Bhbj5cIikudGV4dChcIltcIikpO1xuICAgICAgICAgIHZhciBfbGFzdF9rZXkgPSBqc29uLl9tYXBfZGF0YS5sZW5ndGggLSAxO1xuICAgICAgICAgIGZvcih2YXIgaSBpbiBqc29uLl9tYXBfZGF0YSl7XG4gICAgICAgICAgICBwcmludE9iamVjdChqc29uLl9tYXBfZGF0YVtpXSxsZXZlbCArIDEsX2VsLGkgIT0gX2xhc3Rfa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX2VsLmFwcGVuZCgkKFwiPHA+XCIpLnRleHQobmV3IEFycmF5KGxldmVsICkuam9pbignICcpICsgXCJdXCIgKyAoY29tbWEgPyBcIixcIiA6IFwiXCIpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZihfLmlzT2JqZWN0KGpzb24uX21hcF9kYXRhKSl7XG4gICAgICAgICAgX2VsLmFwcGVuZCgkKFwiPHNwYW4+XCIpLnRleHQoXCJ7XCIpKTtcbiAgICAgICAgICB2YXIgX2xhc3Rfa2V5ID0gT2JqZWN0LmtleXMoanNvbi5fbWFwX2RhdGEpLnBvcCgpO1xuICAgICAgICAgIGZvcih2YXIgaSBpbiBqc29uLl9tYXBfZGF0YSl7XG4gICAgICAgICAgICBwcmludE9iamVjdChqc29uLl9tYXBfZGF0YVtpXSxsZXZlbCArIDEsX2VsLGkgIT0gX2xhc3Rfa2V5LGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfZWwuYXBwZW5kKCQoXCI8cD5cIikudGV4dChuZXcgQXJyYXkobGV2ZWwgKS5qb2luKCcgJykgKyBcIn1cIiArIChjb21tYSA/IFwiLFwiIDogXCJcIikpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuXG4gICAgICAgICAgaWYoXy5pc051bGwoanNvbi5fbWFwX2RhdGEpKXtcbiAgICAgICAgICAgIF9lbC5hcHBlbmQoXG4gICAgICAgICAgICAgICQoXCI8c3Bhbj5cIikudGV4dChKU09OLnN0cmluZ2lmeShqc29uLl9tYXBfZGF0YSwgbnVsbCwgMikpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKGpzb24uX21hcF9kYXRhLmNvbnN0cnVjdG9yID09PSBTdHJpbmcgKXtcbiAgICAgICAgICAgIF9lbC5hcHBlbmQoXG4gICAgICAgICAgICAgICQoXCI8c3Bhbj5cIikudGV4dCgnXCInKSxcbiAgICAgICAgICAgICAgJChcIjxzcGFuPlwiKS5hZGRDbGFzcygnc3RyaW5nJykudGV4dChqc29uLl9tYXBfZGF0YSksXG4gICAgICAgICAgICAgICQoXCI8c3Bhbj5cIikudGV4dCgnXCInKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZihqc29uLl9tYXBfZGF0YS5jb25zdHJ1Y3RvciA9PT0gTnVtYmVyIHx8IGpzb24uX21hcF9kYXRhLmNvbnN0cnVjdG9yID09PSBCb29sZWFuKXtcbiAgICAgICAgICAgIF9lbC5hcHBlbmQoXG4gICAgICAgICAgICAgICQoXCI8c3Bhbj5cIikuYWRkQ2xhc3MoJ251bWJlcicpLnRleHQoanNvbi5fbWFwX2RhdGEpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgX2VsLmFwcGVuZChcbiAgICAgICAgICAgICAgJChcIjxzcGFuPlwiKS50ZXh0KEpTT04uc3RyaW5naWZ5KGpzb24uX21hcF9kYXRhLCBudWxsLCAyKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGNvbW1hKXtcbiAgICAgICAgICAgIF9lbC5hcHBlbmQoXG4gICAgICAgICAgICAgICQoXCI8c3Bhbj5cIikudGV4dChcIixcIilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG5cbiAgICAgICAgfVxuICAgICAgfWVsc2V7XG4gICAgICAgIF9lbC5hcHBlbmQoXG4gICAgICAgICAgJChcIjxzcGFuPlwiKS50ZXh0KEpTT04uc3RyaW5naWZ5KGpzb24sIG51bGwsIDIpKVxuICAgICAgICApXG5cbiAgICAgICAgaWYoY29tbWEpe1xuICAgICAgICAgIF9lbC5hcHBlbmQoXG4gICAgICAgICAgICAkKFwiPHNwYW4+XCIpLnRleHQoXCIsXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIG91dHB1dC5hcHBlbmQoX2VsKTtcblxuICAgIH1cbiAgICBwcmludE9iamVjdChqc29uLDEsb3V0cHV0KTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG59O1xuXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3V0aWwvc3ludGF4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cdHRocm93IG5ldyBFcnJvcihcImRlZmluZSBjYW5ub3QgYmUgdXNlZCBpbmRpcmVjdFwiKTtcclxufTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vYW1kLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyogZ2xvYmFscyBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIlBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSFpwWlhkQ2IzZzlJakFnTUNBeU1pQXlNaUkrUEdjZ2RISmhibk5tYjNKdFBTSnRZWFJ5YVhnb0xqQXpPVFkxSURBZ01DQXVNRE01TmpVZ01TNHhOak1nTVM0eE5qTXBJaUJtYVd4c1BTSWpOR1EwWkRSa0lqNDhjR0YwYUNCa1BTSnRNalV3TGpJZ09ERXVOakZqT1RjdU5ETWdNQ0F4TnprdU56VWdORE11TkRNZ01UYzVMamMxSURrMExqZ3pJREFnTVRJdU5EUTVMVFF1T1RNMElESTBMalEwT1MweE15NDJORFVnTXpVdU5EWTFiRE0xTGpRd01pQXhNQzQwTURSak9DNDJNVE10TVRRdU1qSTNJREV6TGpVek15MHlPUzQyTWprZ01UTXVOVE16TFRRMUxqZzJPU0F3TFRjeUxqazJOUzA1TkM0ME5pMHhNekF1TVRJdE1qRTFMakEwTFRFek1DNHhNaTB4TWpBdU5UY2dNQzB5TVRVdU1EUWdOVGN1TVRZdE1qRTFMakEwSURFek1DNHhNaUF3SURJMkxqa3hPQ0F4TWk0NU16WWdOVEV1TmpReklETTFMakU1SURjeUxqRTNMVFl1T1RVeElEUXVOVEF5TFRFekxqYzFOaUF4TUM0MU1ESXRNVGd1T0RNMklERTRMams0TkMweE1DNDBOVE1nTVRjdU5EUTVMVEV3TGpZMklETTVMakE1TFM0Mk5EVWdOalF1TXpVZ09TNDBNek1nTWpNdU56a3hJRGN1TVRJMUlETXlMalU0TWlBMUxqWTVNeUF6TlM0eU5DMHpMak0xTkNBMkxqTXlNaTB4T0M0eE15QTVMalV4TkMwek1pNHpPRFVnTVRJdU5UazJMVE11TkRnMkxqYzFPQzAzTGpBMElERXVOVE14TFRFd0xqVTRNaUF5TGpNM01TMDVMalE0TkNBeUxqSTBMVEUxTGpNMU15QXhNUzQzTWpVdE1UTXVNVE1nTWpFdU1qTWdNUzQ1TURJZ09DNHhNVEVnT1M0eE5qUWdNVE11TlRrMklERTNMakUySURFekxqVTVOaUF4TGpNMElEQWdNaTQzTURrdExqRTJJRFF1TURZNExTNDBOamNnTXk0ek1pMHVOemt4SURZdU5qVTJMVEV1TlRFNElEa3VPVE15TFRJdU1qSTNJREl4TGpFeExUUXVOVFkwSURRMUxqQXlMVGt1TnpReUlEVTJMakE0TFRNd0xqUTRNaUE0TGpRNE5pMHhOUzQ1TURJZ055NHhPVFV0TXpZdU5URTJMVFF1TURNdE5qUXVPRFV0TlM0M01qVXRNVFF1TkRNMUxUWXVNemcxTFRJMUxqVTJOQzB4TGprME55MHpNeTR4SURRdU9UWTFMVGd1TkRVeElERTJMakUwTFRFeUxqSXdOeUF5TWk0eE9TMHhNeTQwTmpjZ016VXVOekExSURFNUxqa3dNaUE0TWk0NE5TQXpNaTR6TlRRZ01UTTFMalU1SURNekxqZzJPV3d0TVRBdU5UQTBMVE0xTGpjMFl5MDROeTQ0TnkwMUxqYzFPQzB4TlRndU5UWXRORFl1TkRVdE1UVTRMalUyTFRrMExqQTNMakF3TURFdE5URXVOQ0E0TWk0ek1pMDVOQzQ0TXlBeE56a3VOelV0T1RRdU9ETWlMejQ4Y0dGMGFDQmtQU0p0TkRnM0xqVTNJREkyT1M0Mk0yd3RNakl5TGpBMUxUWTFMakkzWXkweExqRXhOUzB1TXpNNExUSXVNalEwTFM0ME9ESXRNeTR6TnpNdExqUTRNaTB6TGpFeE15QXdMVFl1TVRVNElERXVNakkzTFRndU5ETTBJRE11TlMwekxqQTVOaUF6TGpBNExUUXVNalU0SURjdU5qRXpMVE11TURJZ01URXVOemc1YkRZMUxqSTNJREl5TWk0eFl6RXVNelFnTkM0Mk1UTWdOUzR6TlRJZ055NDVPRElnTVRBdU1UUXpJRGd1TlM0ME5UTXVNRFEzTGpnNU1TNHdOalFnTVM0ek1qSXVNRFkwSURRdU16QTVJREFnT0M0ek1EY3RNaTR6TXpnZ01UQXVORE01TFRZdU1UWXliRFUwTGpBNExUazRMakEwSURrNExqQXpMVFUwTGpBNVl6UXVNakkxTFRJdU16SXlJRFl1TmpJNUxUWXVPVFV4SURZdU1TMHhNUzQzTWpjdExqVXhOQzAwTGpjNE55MHpMamczTkMwNExqZ3dOUzA0TGpVd01pMHhNQzR4TnpZaUx6NDhMMmMrUEM5emRtYytDZz09XCJcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9+L2Jhc2U2NC1sb2FkZXIhLi9tZWRpYS9sYXNzby5zdmdcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCJQRDk0Yld3Z2RtVnljMmx2YmowaU1TNHdJaUJsYm1OdlpHbHVaejBpZFhSbUxUZ2lQejQ4YzNabklIZHBaSFJvUFNjeE9EaHdlQ2NnYUdWcFoyaDBQU2N4T0Rod2VDY2dlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklpQjJhV1YzUW05NFBTSXdJREFnTVRBd0lERXdNQ0lnY0hKbGMyVnlkbVZCYzNCbFkzUlNZWFJwYnowaWVFMXBaRmxOYVdRaUlHTnNZWE56UFNKMWFXd3RjM0JwYmlJK1BISmxZM1FnZUQwaU1DSWdlVDBpTUNJZ2QybGtkR2c5SWpFd01DSWdhR1ZwWjJoMFBTSXhNREFpSUdacGJHdzlJbTV2Ym1VaUlHTnNZWE56UFNKaWF5SStQQzl5WldOMFBqeG5JSFJ5WVc1elptOXliVDBpZEhKaGJuTnNZWFJsS0RVd0lEVXdLU0krUEdjZ2RISmhibk5tYjNKdFBTSnliM1JoZEdVb01Da2dkSEpoYm5Oc1lYUmxLRE0wSURBcElqNDhZMmx5WTJ4bElHTjRQU0l3SWlCamVUMGlNQ0lnY2owaU9DSWdabWxzYkQwaUkyTm1abVprWmlJK1BHRnVhVzFoZEdVZ1lYUjBjbWxpZFhSbFRtRnRaVDBpYjNCaFkybDBlU0lnWm5KdmJUMGlNU0lnZEc4OUlqQXVNU0lnWW1WbmFXNDlJakJ6SWlCa2RYSTlJakZ6SWlCeVpYQmxZWFJEYjNWdWREMGlhVzVrWldacGJtbDBaU0krUEM5aGJtbHRZWFJsUGp4aGJtbHRZWFJsVkhKaGJuTm1iM0p0SUdGMGRISnBZblYwWlU1aGJXVTlJblJ5WVc1elptOXliU0lnZEhsd1pUMGljMk5oYkdVaUlHWnliMjA5SWpFdU5TSWdkRzg5SWpFaUlHSmxaMmx1UFNJd2N5SWdaSFZ5UFNJeGN5SWdjbVZ3WldGMFEyOTFiblE5SW1sdVpHVm1hVzVwZEdVaVBqd3ZZVzVwYldGMFpWUnlZVzV6Wm05eWJUNDhMMk5wY21Oc1pUNDhMMmMrUEdjZ2RISmhibk5tYjNKdFBTSnliM1JoZEdVb05EVXBJSFJ5WVc1emJHRjBaU2d6TkNBd0tTSStQR05wY21Oc1pTQmplRDBpTUNJZ1kzazlJakFpSUhJOUlqZ2lJR1pwYkd3OUlpTmpabVptWkdZaVBqeGhibWx0WVhSbElHRjBkSEpwWW5WMFpVNWhiV1U5SW05d1lXTnBkSGtpSUdaeWIyMDlJakVpSUhSdlBTSXdMakVpSUdKbFoybHVQU0l3TGpFeWN5SWdaSFZ5UFNJeGN5SWdjbVZ3WldGMFEyOTFiblE5SW1sdVpHVm1hVzVwZEdVaVBqd3ZZVzVwYldGMFpUNDhZVzVwYldGMFpWUnlZVzV6Wm05eWJTQmhkSFJ5YVdKMWRHVk9ZVzFsUFNKMGNtRnVjMlp2Y20waUlIUjVjR1U5SW5OallXeGxJaUJtY205dFBTSXhMalVpSUhSdlBTSXhJaUJpWldkcGJqMGlNQzR4TW5NaUlHUjFjajBpTVhNaUlISmxjR1ZoZEVOdmRXNTBQU0pwYm1SbFptbHVhWFJsSWo0OEwyRnVhVzFoZEdWVWNtRnVjMlp2Y20wK1BDOWphWEpqYkdVK1BDOW5QanhuSUhSeVlXNXpabTl5YlQwaWNtOTBZWFJsS0Rrd0tTQjBjbUZ1YzJ4aGRHVW9NelFnTUNraVBqeGphWEpqYkdVZ1kzZzlJakFpSUdONVBTSXdJaUJ5UFNJNElpQm1hV3hzUFNJalkyWm1abVJtSWo0OFlXNXBiV0YwWlNCaGRIUnlhV0oxZEdWT1lXMWxQU0p2Y0dGamFYUjVJaUJtY205dFBTSXhJaUIwYnowaU1DNHhJaUJpWldkcGJqMGlNQzR5TlhNaUlHUjFjajBpTVhNaUlISmxjR1ZoZEVOdmRXNTBQU0pwYm1SbFptbHVhWFJsSWo0OEwyRnVhVzFoZEdVK1BHRnVhVzFoZEdWVWNtRnVjMlp2Y20wZ1lYUjBjbWxpZFhSbFRtRnRaVDBpZEhKaGJuTm1iM0p0SWlCMGVYQmxQU0p6WTJGc1pTSWdabkp2YlQwaU1TNDFJaUIwYnowaU1TSWdZbVZuYVc0OUlqQXVNalZ6SWlCa2RYSTlJakZ6SWlCeVpYQmxZWFJEYjNWdWREMGlhVzVrWldacGJtbDBaU0krUEM5aGJtbHRZWFJsVkhKaGJuTm1iM0p0UGp3dlkybHlZMnhsUGp3dlp6NDhaeUIwY21GdWMyWnZjbTA5SW5KdmRHRjBaU2d4TXpVcElIUnlZVzV6YkdGMFpTZ3pOQ0F3S1NJK1BHTnBjbU5zWlNCamVEMGlNQ0lnWTNrOUlqQWlJSEk5SWpnaUlHWnBiR3c5SWlOalptWm1aR1lpUGp4aGJtbHRZWFJsSUdGMGRISnBZblYwWlU1aGJXVTlJbTl3WVdOcGRIa2lJR1p5YjIwOUlqRWlJSFJ2UFNJd0xqRWlJR0psWjJsdVBTSXdMak0zY3lJZ1pIVnlQU0l4Y3lJZ2NtVndaV0YwUTI5MWJuUTlJbWx1WkdWbWFXNXBkR1VpUGp3dllXNXBiV0YwWlQ0OFlXNXBiV0YwWlZSeVlXNXpabTl5YlNCaGRIUnlhV0oxZEdWT1lXMWxQU0owY21GdWMyWnZjbTBpSUhSNWNHVTlJbk5qWVd4bElpQm1jbTl0UFNJeExqVWlJSFJ2UFNJeElpQmlaV2RwYmowaU1DNHpOM01pSUdSMWNqMGlNWE1pSUhKbGNHVmhkRU52ZFc1MFBTSnBibVJsWm1sdWFYUmxJajQ4TDJGdWFXMWhkR1ZVY21GdWMyWnZjbTArUEM5amFYSmpiR1UrUEM5blBqeG5JSFJ5WVc1elptOXliVDBpY205MFlYUmxLREU0TUNrZ2RISmhibk5zWVhSbEtETTBJREFwSWo0OFkybHlZMnhsSUdONFBTSXdJaUJqZVQwaU1DSWdjajBpT0NJZ1ptbHNiRDBpSTJObVptWmtaaUkrUEdGdWFXMWhkR1VnWVhSMGNtbGlkWFJsVG1GdFpUMGliM0JoWTJsMGVTSWdabkp2YlQwaU1TSWdkRzg5SWpBdU1TSWdZbVZuYVc0OUlqQXVOWE1pSUdSMWNqMGlNWE1pSUhKbGNHVmhkRU52ZFc1MFBTSnBibVJsWm1sdWFYUmxJajQ4TDJGdWFXMWhkR1UrUEdGdWFXMWhkR1ZVY21GdWMyWnZjbTBnWVhSMGNtbGlkWFJsVG1GdFpUMGlkSEpoYm5ObWIzSnRJaUIwZVhCbFBTSnpZMkZzWlNJZ1puSnZiVDBpTVM0MUlpQjBiejBpTVNJZ1ltVm5hVzQ5SWpBdU5YTWlJR1IxY2owaU1YTWlJSEpsY0dWaGRFTnZkVzUwUFNKcGJtUmxabWx1YVhSbElqNDhMMkZ1YVcxaGRHVlVjbUZ1YzJadmNtMCtQQzlqYVhKamJHVStQQzluUGp4bklIUnlZVzV6Wm05eWJUMGljbTkwWVhSbEtESXlOU2tnZEhKaGJuTnNZWFJsS0RNMElEQXBJajQ4WTJseVkyeGxJR040UFNJd0lpQmplVDBpTUNJZ2NqMGlPQ0lnWm1sc2JEMGlJMk5tWm1aa1ppSStQR0Z1YVcxaGRHVWdZWFIwY21saWRYUmxUbUZ0WlQwaWIzQmhZMmwwZVNJZ1puSnZiVDBpTVNJZ2RHODlJakF1TVNJZ1ltVm5hVzQ5SWpBdU5qSnpJaUJrZFhJOUlqRnpJaUJ5WlhCbFlYUkRiM1Z1ZEQwaWFXNWtaV1pwYm1sMFpTSStQQzloYm1sdFlYUmxQanhoYm1sdFlYUmxWSEpoYm5ObWIzSnRJR0YwZEhKcFluVjBaVTVoYldVOUluUnlZVzV6Wm05eWJTSWdkSGx3WlQwaWMyTmhiR1VpSUdaeWIyMDlJakV1TlNJZ2RHODlJakVpSUdKbFoybHVQU0l3TGpZeWN5SWdaSFZ5UFNJeGN5SWdjbVZ3WldGMFEyOTFiblE5SW1sdVpHVm1hVzVwZEdVaVBqd3ZZVzVwYldGMFpWUnlZVzV6Wm05eWJUNDhMMk5wY21Oc1pUNDhMMmMrUEdjZ2RISmhibk5tYjNKdFBTSnliM1JoZEdVb01qY3dLU0IwY21GdWMyeGhkR1VvTXpRZ01Da2lQanhqYVhKamJHVWdZM2c5SWpBaUlHTjVQU0l3SWlCeVBTSTRJaUJtYVd4c1BTSWpZMlptWm1SbUlqNDhZVzVwYldGMFpTQmhkSFJ5YVdKMWRHVk9ZVzFsUFNKdmNHRmphWFI1SWlCbWNtOXRQU0l4SWlCMGJ6MGlNQzR4SWlCaVpXZHBiajBpTUM0M05YTWlJR1IxY2owaU1YTWlJSEpsY0dWaGRFTnZkVzUwUFNKcGJtUmxabWx1YVhSbElqNDhMMkZ1YVcxaGRHVStQR0Z1YVcxaGRHVlVjbUZ1YzJadmNtMGdZWFIwY21saWRYUmxUbUZ0WlQwaWRISmhibk5tYjNKdElpQjBlWEJsUFNKelkyRnNaU0lnWm5KdmJUMGlNUzQxSWlCMGJ6MGlNU0lnWW1WbmFXNDlJakF1TnpWeklpQmtkWEk5SWpGeklpQnlaWEJsWVhSRGIzVnVkRDBpYVc1a1pXWnBibWwwWlNJK1BDOWhibWx0WVhSbFZISmhibk5tYjNKdFBqd3ZZMmx5WTJ4bFBqd3ZaejQ4WnlCMGNtRnVjMlp2Y20wOUluSnZkR0YwWlNnek1UVXBJSFJ5WVc1emJHRjBaU2d6TkNBd0tTSStQR05wY21Oc1pTQmplRDBpTUNJZ1kzazlJakFpSUhJOUlqZ2lJR1pwYkd3OUlpTmpabVptWkdZaVBqeGhibWx0WVhSbElHRjBkSEpwWW5WMFpVNWhiV1U5SW05d1lXTnBkSGtpSUdaeWIyMDlJakVpSUhSdlBTSXdMakVpSUdKbFoybHVQU0l3TGpnM2N5SWdaSFZ5UFNJeGN5SWdjbVZ3WldGMFEyOTFiblE5SW1sdVpHVm1hVzVwZEdVaVBqd3ZZVzVwYldGMFpUNDhZVzVwYldGMFpWUnlZVzV6Wm05eWJTQmhkSFJ5YVdKMWRHVk9ZVzFsUFNKMGNtRnVjMlp2Y20waUlIUjVjR1U5SW5OallXeGxJaUJtY205dFBTSXhMalVpSUhSdlBTSXhJaUJpWldkcGJqMGlNQzQ0TjNNaUlHUjFjajBpTVhNaUlISmxjR1ZoZEVOdmRXNTBQU0pwYm1SbFptbHVhWFJsSWo0OEwyRnVhVzFoZEdWVWNtRnVjMlp2Y20wK1BDOWphWEpqYkdVK1BDOW5Qand2Wno0OEwzTjJaejQ9XCJcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9+L2Jhc2U2NC1sb2FkZXIhLi9tZWRpYS9sb2FkZXIuc3ZnXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeU5DSWdhR1ZwWjJoMFBTSXlOQ0lnZG1sbGQwSnZlRDBpTUNBd0lESTBJREkwSWo0OGNHRjBhQ0JrUFNKTk1qRXVNVFF6SURrdU5qWTNZeTB1TnpNekxURXVNemt5TFRFdU9URTBMVE11TURVdE15NDJNVGN0TkM0M05UTXRNaTQ1TnpjdE1pNDVOemd0TlM0ME56Z3RNeTQ1TVRRdE5pNDNPRFV0TXk0NU1UUXRMalF4TkNBd0xTNDNNRGd1TURrMExTNDROaTR5TkRac0xURXVNell4SURFdU16WmpMVEV1T0RrNUxTNHlNell0TXk0ME1pNHhNRFl0TkM0eU9UUXVPVGd6TFM0NE56WXVPRGMxTFRFdU1UWTBJREl1TVRVNUxTNDNPVElnTXk0MU1qTXVORGt5SURFdU9EQTJJREl1TXpBMUlEUXVNRFE1SURVdU9UQTFJRFV1TXpjMUxqQXpPQzR6TWpNdU1UVTNMall6T0M0ME1EVXVPRGcxTGpVNE9DNDFPRGdnTVM0MU16VXVOVGcySURJdU1USXhJREJ6TGpVNE9DMHhMalV6TXk0d01ESXRNaTR4TVRsakxTNDFPRGd0TGpVNE55MHhMalV6TnkwdU5UZzRMVEl1TVRJekxTNHdNREZzTFM0eE55NHlOVFpqTFRJdU1ETXhMUzQzTmpVdE15NHpPVFV0TVM0NE1qZ3ROQzR5TXpJdE1pNDViRE11T0RjNUxUTXVPRGMxWXk0ME9UWWdNaTQzTXlBMkxqUXpNaUE0TGpZM05pQTVMakUzT0NBNUxqRTNPR3d0Tnk0eE1UVWdOeTR4TURkakxTNHlNelF1TVRVekxUSXVOems0TFM0ek1UWXROaTR4TlRZdE15NDJOelV0TXk0ek9UTXRNeTR6T1RNdE15NHhOelV0TlM0eU56RXRNeTR3TWpjdE5TNDBPVGhzTVM0NE5Ua3RNUzQ0TlRaakxTNDBNemt0TGpNMU9TMHVPVEkxTFRFdU1UQXpMVEV1TVRReExURXVOamc1YkMweUxqRXpOQ0F5TGpFek1XTXRMalEwTlM0ME5EWXRMalk0TlNBeExqQTJOQzB1TmpnMUlERXVPRElnTUNBeExqWXpOQ0F4TGpFeU1TQXpMamt4TlNBekxqY3hNeUEyTGpVd05pQXlMamMyTkNBeUxqYzJOQ0ExTGpVNElEUXVNalF6SURjdU5ETXlJRFF1TWpRekxqWTBPQ0F3SURFdU1UZ3RMakU1TlNBeExqVTBOeTB1TlRZeWJEZ3VNRGcyTFRndU1EYzRZeTQ1TVM0NE56UXRMamMzT0NBekxqVXpPQzB1TnpjNElEUXVOalE0SURBZ01TNHhNRFF1T0RrMklERXVPVGs1SURJZ01TNDVPVGtnTVM0eE1EVWdNQ0F5TFM0NE9UWWdNaTB5SURBdE15NHhPRFF0TVM0ME1qVXROaTQ0TVMweUxqZzFOeTA1TGpNMGVtMHRNVFl1TWpBNUxUVXVNemN4WXk0MU1qY3RMalV6SURFdU5EY3hMUzQzT1RFZ01pNDJOVFl0TGpjMk1Xd3RNeTR5TURrZ015NHlNRFpqTFM0eU16WXRMamszT0MwdU1EUTVMVEV1T0RRMUxqVTFNeTB5TGpRME5YcHRPUzR5T1RJZ05DNHdOemxzTFM0d015MHVNREk1WXkweExqSTVNaTB4TGpJNU1pMHpMamd3TXkwMExqTTFOaTB6TGpBNU5pMDFMakEyTXk0M01UVXRMamN4TlNBekxqUTRPQ0F4TGpVeU1TQTFMakEyTWlBekxqQTVOaTQ0TmpJdU9EWXlJREl1TURnNElESXVNalEzSURJdU9UTTNJRE11TkRVNExURXVOekUzTFRFdU1EYzBMVE11TkRreExURXVORFk1TFRRdU9EY3pMVEV1TkRZeWVpSXZQand2YzNablBnPT1cIlxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL34vYmFzZTY0LWxvYWRlciEuL21lZGlhL3BhaW50LWJ1Y2tldC5zdmdcbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCJpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBRUFBQUFCQUNBWUFBQUNxYVhIZUFBQUFCSE5DU1ZRSUNBZ0lmQWhraUFBQUFBbHdTRmx6QUFBTmxBQUFEWlFCRUxEL2ZBQUFBQmwwUlZoMFUyOW1kSGRoY21VQWQzZDNMbWx1YTNOallYQmxMbTl5WjV2dVBCb0FBQVhQU1VSQlZIaWM1ZHQveUY1bEdRZnd6N1U1NTVhYXRwRW9wazZ5TGJhMTZJZWdEQ2swQzBrRDJ3b0pEWnI5SWJVZzB6WWkreU1TUXZ0RmhoRzFhT0kvT2YvUUxMRWdjZ2d6emNwQmMxQ1Qyb3FzWE5ocXN6bmJydjY0N3hmZlBYdWY3WG1lYzU3ejdwMWZ1RG1jYys0ZjEvVzlyM09mKzF6WGRTSXp2Um9RRWZQeHVjejgvR0hYWHcwRVJNUkMvQVJ6TS9PdGsrL05taDZSdWtORVhJZ3R1SGlxK3ljMEFSSHhOa1g1aS9yVk9XRUppSWdyc1JsbjRZbCs5VTVJQWlMaWV2d1lwK0piK0ZpL3VpY2NBUkd4RGhzeFIxbjExK0pRdi9vbmRTWFl1QkVScy9BTnJNWC9jR05tYmp4V3V4T0NnSWlZaTN1eEN2dXdLak1mR2FUdGpDY2dJczdBZzdnTXorT3F6SHhxMFBZem1vQ0lPQmVQWUNtZXhmc3ljOGN3ZlJ5eENFYkU0b2g0YlRzaWpnOFJzUlNQSzhyL0dwY09xenhUVzhEVnVETWkvb3h0K0YwdDIvQk1acjQ0c3RRdElTSXVVOHorRFB4VWVlYjNqdFJaWmg1V2NCcitoWnlpSE1RT1BJRGJjUjJXNCtUZWZzWlZsSVZ1ZjVYbkhzd1pvTTJTV3YvcEkrNzFhZkRsMnVBcDNJd055bTdxUDMySWVSblA0RDU4QVIvRVlzeHVXZm0xZFJLeXloZ0R0aHVhZ0xQeEVnN2czRW5YQTR2d2ZxeFhYajIvblRRanZXVS9ucTcxMXRkMml3WVZ2R2ZjaVVrNWlMVkR0aCtPZ05wb1EyMzBsUUVHbUYxbi9OcHFBZmNwYThiTGZZalpXeTNxKzlYQ3JzUTVmZnFlVTAxOWd0RFZJMWhPWHdMNitnTWk0czFWaWIxNFEyYnVtYkxpVVJBUkoxZGlsbUpaTFV0eG9hbTM0Uzk0WmVIZHBqeFc2eXBCZS9DQnpOdzhnaHhMc0IxYnM4Y2ZjQ3ptZnFRd3Q3N2xaM2tlM280YmNBY2V4azVUVzB2aUwxamVZTHpoTGFBeXR4S1A0VGxja0prSGhtVi9HRVRFNllxRlRMYVllYmd1TTNjMTZIYzBDNmprUEs2d3Q2Wk5LK2l5T0lvRkRQSTVmRWM5M2hJUk1lb3NISzhZaElBSDhYdUZ4YXZISzA3M09DWUJtWGtJWDYybnQ0NVhuTzR4cUVmb0h2d2RLeVBpa2pISzB6a0dJaUF6OStPdWV2clo4WW5UUFlieENkNnRiSXF1aVlnM2pVbWV6akV3QVpuNUFyNVgyOXd5Tm9rNnhyQmU0YThyRHNjYkl1S3NNY2pUT1lZaW9PN0dmb2k1K05SWUpPb1lvOFFGN3F6SG15TGkxRGFGbVE0TVRVQm1ic1hQY0NadWJGMmlqakZxWkdoaWUvenBpSmpSbnVXUkNNak1uK00zT0E4ZmJsV2lqdEVrTmppeEZzem83WEVUQWpiaFQxaFJROUV6RWlNVGtKa0g4YlY2T21PM3gwM0Q0eHZ3VDF4ZXN6Rm1IQm9Sa0NWS2RIYzluWkZyUVJzSkVuZmh2MWdkRVJlMDBGK25hRXhBWmo2UEh5aXhnWnViOWpjbUxPcDdweVduNHh1VmlNMCtMRGdPbktCemNBVytpVDk2eGIwK2VHUm9oRUUzMVVGdW15YWxYNGVQS0I5cmV4d2VWL2lENHRhN2RKd0VYRndIK3dmbWRhVDBSZmdNSGxVKzB5ZEhzUjlUWHM5TGp0cEh5d0k5V2dXNGFVd0t6OFpLNVZ0a2U4OHMveHYzSzlHbWhRUDMyYktBVjAweXVWa3Q5WG1ha2hPd0VidDdsTjZwNUFHKzE0ZzVDbTBURUVwZ001V3NqVkg3T1ErZlVQSi9YcHFrOENFOGlkdXdvaFdaMnlTZ0N2L1JLdXdUUXhMM1RueFJ5U2VZUE1zdjRpRjhIR2UzTG0rTGlpL0dHc1Z4T2lIODdWaldwLzQ4SldIaU8vaHJqOUxQNGJ1NEJ2UGJWcnBWQXFyaTkxZno3QmZlL2lYZW9pUXVyMUhDYmZ0NjZtekZsK3JiWktnTWtpYWwwUThUTlQ2d0JRdVViSkJmNFJkS2J0Rnl2QnVYNEJUbDFUU3JtanNsL1dhemtvUHdVR2J1SEZtUUptZzQreE1MM3IxNFRaODZjNVVjM29tWjNvVFZPTDJyV1I3TEk2RHNyeE83REdDeVNrNVE0b3JwVm5weWFmSXhOQkVZMlpXRFBVZlAxdU9aRGNac0h3MHM0Q1Fsb2ZLZ1k4d3EzcUhFRlEvaC9PbWU5VlllZ2FyWUp4V3pQcUNrdkYydjVoWGk5ZmdRdmwyVkh5amxia1lSVUJXOTFaR0prbjh6OVd2eFhkT3RjRzlwNWIvQmlEaEhjWWE4Ui9FTnpGZDhoVThxaTkvQ2FpM2JNbk5aNHdGYlJPcy9UdFpFcWdXWnVidm4yZzRsUWZMOGJKRHkxalphLzJrcUMzYjNYbE4yZzdDaTdUR2JZRHIrR2p0bEdzYnNpMDRJcVAvMVhGNVB0M2N4NXFEb3lnTFdLUnVuTFVvUzlIR0RyZ2pZbzRUUlZtWGJxMjVEL0I5UExmbzNFTUVaaXdBQUFBQkpSVTVFcmtKZ2dnPT1cIlxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL34vYmFzZTY0LWxvYWRlciEuL21lZGlhL3BvbHlnb24ucG5nXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIEZvbnQgU2VsZWN0b3IgLSBqUXVlcnkgcGx1Z2luIDAuMVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBDaHJpcyBEeWVyXG4gKlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZ1xuICogY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiAqIGRpc2NsYWltZXIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnNcbiAqIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLFxuICogQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PXG4gKiBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuICogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7XG4gKiBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0ZcbiAqIFNVQ0ggREFNQUdFLlxuICpcbiAqL1xuXG5cblxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICB9IGVsc2Uge1xuICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgfVxufShcbiAgICBmdW5jdGlvbiggJCApIHtcblxuICAndXNlIHN0cmljdCc7XG4gIC8vaWYoXyAmJiBfLnN0eWxlU2hlZXRDb250YWlucyAmJiAhXy5zdHlsZVNoZWV0Q29udGFpbnMoJy5mb250U2VsZWN0Jykpe1xuICAvLyAgXy5saW5rQ1NTKF8uc2NyaXB0VVJMKCkgKyBcIi8uLi8uLi9jc3MvanF1ZXJ5LmZvbnRTZWxlY3Rvci5jc3NcIik7XG4gIC8vfVxuXG4gIHZhciBzZXR0aW5ncztcblxuICB2YXIgbWV0aG9kcyA9IHtcbiAgICBpbml0IDogZnVuY3Rpb24ob3B0aW9ucykge1xuXG4gICAgICBzZXR0aW5ncyA9ICQuZXh0ZW5kKCB7XG4gICAgICAgICdoaWRlX2ZhbGxiYWNrcycgOiBmYWxzZSxcbiAgICAgICAgJ3NlbGVjdGVkJyA6IGZ1bmN0aW9uKHN0eWxlKSB7fSxcbiAgICAgICAgJ29wZW5lZCcgOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAnY2xvc2VkJyA6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICdpbml0aWFsJyA6ICcnLFxuICAgICAgICAnZm9udHMnIDogW11cbiAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICB2YXIgcm9vdCA9IHRoaXM7XG4gICAgICB2YXIgJHJvb3QgPSAkKHRoaXMpO1xuICAgICAgcm9vdC5zZWxlY3RlZENhbGxiYWNrID0gc2V0dGluZ3NbJ3NlbGVjdGVkJ107XG4gICAgICByb290Lm9wZW5lZENhbGxiYWNrID0gc2V0dGluZ3NbJ29wZW5lZCddO1xuICAgICAgcm9vdC5jbG9zZWRDYWxsYmFjayA9IHNldHRpbmdzWydjbG9zZWQnXTtcbiAgICAgIHZhciB2aXNpYmxlID0gZmFsc2U7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIHZhciBvcGVuZWRDbGFzcyA9ICdmb250U2VsZWN0T3Blbic7XG5cbiAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGZ1bmN0aW9uKGZvbnQpIHtcbiAgICAgICAgaWYgKHNldHRpbmdzWydoaWRlX2ZhbGxiYWNrcyddKXtcbiAgICAgICAgICB2YXIgaW5kZXggPSBmb250LmluZGV4T2YoJywnKTtcbiAgICAgICAgICBpZihpbmRleCA9PSAtMSApcmV0dXJuIGZvbnQ7XG4gICAgICAgICAgcmV0dXJuIGZvbnQuc3Vic3RyKDAsIGluZGV4KTtcbiAgICAgICAgfWVsc2VcbiAgICAgICAgICByZXR1cm4gZm9udDtcbiAgICAgIH1cblxuXG4gICAgICB2YXIgc2VsZWN0ID0gZnVuY3Rpb24oZm9udCxpbml0aWFsKSB7XG4gICAgICAgIHJvb3QuZmluZCgnc3BhbicpLmh0bWwoZGlzcGxheU5hbWUoZm9udCkucmVwbGFjZSgvW1wiJ117MX0vZ2ksXCJcIikpO1xuICAgICAgICByb290LmNzcygnZm9udC1mYW1pbHknLCBmb250KTtcbiAgICAgICAgc2VsZWN0ZWQgPSBmb250O1xuXG4gICAgICAgIGlmKCFpbml0aWFsKXJvb3Quc2VsZWN0ZWRDYWxsYmFjayhzZWxlY3RlZCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3NpdGlvblVsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBsZWZ0LCB0b3A7XG4gICAgICAgIGxlZnQgPSAkKHJvb3QpLm9mZnNldCgpLmxlZnQ7XG4gICAgICAgIHRvcCA9ICQocm9vdCkub2Zmc2V0KCkudG9wICsgJChyb290KS5vdXRlckhlaWdodCgpO1xuXG4gICAgICAgICQodWwpLmNzcyh7XG4gICAgICAgICAgJ3Bvc2l0aW9uJzogJ2Fic29sdXRlJyxcbiAgICAgICAgICAnbGVmdCc6IGxlZnQgKyAncHgnLFxuICAgICAgICAgICd0b3AnOiB0b3AgKyAncHgnLFxuICAgICAgICAgICd3aWR0aCc6ICQocm9vdCkub3V0ZXJXaWR0aCgpICsgJ3B4J1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsb3NlVWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdWwuc2xpZGVVcCgnZmFzdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHJvb3QucmVtb3ZlQ2xhc3Mob3BlbmVkQ2xhc3MpO1xuXG4gICAgICAgIHJvb3QuY2xvc2VkQ2FsbGJhY2soKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9wZW5VaSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB1bC5zbGlkZURvd24oJ2Zhc3QnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHJvb3QuYWRkQ2xhc3Mob3BlbmVkQ2xhc3MpO1xuXG4gICAgICAgIHJvb3Qub3BlbmVkQ2FsbGJhY2soKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2V0dXAgbWFya3VwXG4gICAgICAkcm9vdC5wcmVwZW5kKCc8c3Bhbj4nICsgc2V0dGluZ3NbJ2luaXRpYWwnXS5yZXBsYWNlKC8nL2csJyYjMDM5OycpICsgJzwvc3Bhbj4nKTtcbiAgICAgIHZhciB1bCA9ICQoJzx1bCBjbGFzcz1cImZvbnRTZWxlY3RVbFwiPjwvdWw+JykuYXBwZW5kVG8oJ2JvZHknKTtcbiAgICAgIHVsLmhpZGUoKTtcbiAgICAgIHBvc2l0aW9uVWwoKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXR0aW5nc1snZm9udHMnXS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgaXRlbSA9ICQoJzxsaT4nICsgZGlzcGxheU5hbWUoc2V0dGluZ3NbJ2ZvbnRzJ11baV0pICsgJzwvbGk+JykuYXBwZW5kVG8odWwpO1xuICAgICAgICBpdGVtLmNzcygnZm9udC1mYW1pbHknLCBzZXR0aW5nc1snZm9udHMnXVtpXSk7XG4gICAgICAgIGl0ZW1bMF0uZGF0YSA9IHNldHRpbmdzWydmb250cyddW2ldO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2V0dGluZ3NbJ2luaXRpYWwnXSAhPSAnJylcbiAgICAgICAgc2VsZWN0KHNldHRpbmdzWydpbml0aWFsJ10sdHJ1ZSk7XG5cbiAgICAgIHVsLmZpbmQoJ2xpJykuY2xpY2soZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaWYgKCF2aXNpYmxlKVxuICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBwb3NpdGlvblVsKCk7XG4gICAgICAgIGNsb3NlVWwoKTtcblxuICAgICAgICBzZWxlY3QodGhpcy5kYXRhKTtcbiAgICAgIH0pO1xuXG4gICAgICAkcm9vdC5jbGljayhmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIGlmICh2aXNpYmxlKVxuICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBwb3NpdGlvblVsKCk7XG4gICAgICAgIG9wZW5VaSgpO1xuICAgICAgfSk7XG5cbiAgICAgICQoJ2h0bWwnKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHZpc2libGUpXG4gICAgICAgIHtcbiAgICAgICAgICBjbG9zZVVsKCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBzZWxlY3RlZCA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICB9LFxuICAgIHNlbGVjdCA6IGZ1bmN0aW9uKGZvbnQpIHtcbiAgICAgIHRoaXMuZmluZCgnc3BhbicpLmh0bWwoZm9udC5zdWJzdHIoMCwgZm9udC5pbmRleE9mKCcsJykpLnJlcGxhY2UoL1tcIiddezF9L2dpLFwiXCIpKTtcbiAgICAgIHRoaXMuY3NzKCdmb250LWZhbWlseScsIGZvbnQpO1xuICAgICAgdmFyIHNlbGVjdGVkID0gZmFsc2U7XG4gICAgICBzZWxlY3RlZCA9IGZvbnQ7XG4gICAgfVxuICB9O1xuICAkLmZvbnRTZWxlY3RvciA9IHtcblxuICB9O1xuXG4gICQuZm4uZm9udFNlbGVjdG9yID0gZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgaWYgKCBtZXRob2RzW21ldGhvZF0gKSB7XG4gICAgICByZXR1cm4gbWV0aG9kc1sgbWV0aG9kIF0uYXBwbHkoIHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKSk7XG4gICAgfSBlbHNlIGlmICggdHlwZW9mIG1ldGhvZCA9PT0gJ29iamVjdCcgfHwgISBtZXRob2QgKSB7XG4gICAgICByZXR1cm4gbWV0aG9kcy5pbml0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJC5lcnJvciggJ01ldGhvZCAnICsgIG1ldGhvZCArICcgZG9lcyBub3QgZXhpc3Qgb24galF1ZXJ5LmZvbnRTZWxlY3RvcicgKTtcbiAgICB9XG4gIH1cbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL3BsdWdpbnMvJC5mb250U2VsZWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qXG4gKiBqUXVlcnkgTWluaUNvbG9yczogQSB0aW55IGNvbG9yIHBpY2tlciBidWlsdCBvbiBqUXVlcnlcbiAqXG4gKiBDb3B5cmlnaHQ6IENvcnkgTGFWaXNrYSBmb3IgQSBCZWF1dGlmdWwgU2l0ZSwgTExDOiBodHRwOi8vd3d3LmFiZWF1dGlmdWxzaXRlLm5ldC9cbiAqXG4gKiBDb250cmlidXRlOiBodHRwczovL2dpdGh1Yi5jb20vY2xhdmlza2EvanF1ZXJ5LW1pbmljb2xvcnNcbiAqXG4gKiBAbGljZW5zZTogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICpcbiAqL1xuXG5cblxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICB9IGVsc2Uge1xuICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgfVxufShcbiAgZnVuY3Rpb24gKCQpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcbiAgICAvL2lmKF8gJiYgXy5zdHlsZVNoZWV0Q29udGFpbnMgJiYgIV8uc3R5bGVTaGVldENvbnRhaW5zKCcubWluaWNvbG9ycycpKXtcbiAgICAvLyAgXy5saW5rQ1NTKF8uc2NyaXB0VVJMKCkgKyBcIi8uLi8uLi9jc3MvanF1ZXJ5Lm1pbmljb2xvcnMuY3NzXCIpO1xuICAgIC8vfVxuXG4gICAgLy8gRGVmYXVsdHNcbiAgICAkLm1pbmljb2xvcnMgPSB7XG4gICAgICBkZWZhdWx0czoge1xuICAgICAgICBhbmltYXRpb25TcGVlZDogNTAsXG4gICAgICAgIGFuaW1hdGlvbkVhc2luZzogJ3N3aW5nJyxcbiAgICAgICAgY2hhbmdlOiBudWxsLFxuICAgICAgICBjaGFuZ2VEZWxheTogMCxcbiAgICAgICAgY29udHJvbDogJ2h1ZScsXG4gICAgICAgIGRhdGFVcmlzOiB0cnVlLFxuICAgICAgICBkZWZhdWx0VmFsdWU6ICcnLFxuICAgICAgICBmb3JtYXQ6ICdoZXgnLFxuICAgICAgICBoaWRlOiBudWxsLFxuICAgICAgICBoaWRlU3BlZWQ6IDEwMCxcbiAgICAgICAgaW5saW5lOiBmYWxzZSxcbiAgICAgICAga2V5d29yZHM6ICcnLFxuICAgICAgICBsZXR0ZXJDYXNlOiAnbG93ZXJjYXNlJyxcbiAgICAgICAgb3BhY2l0eTogZmFsc2UsXG4gICAgICAgIHBvc2l0aW9uOiAnYm90dG9tIGxlZnQnLFxuICAgICAgICBzaG93OiBudWxsLFxuICAgICAgICBzaG93U3BlZWQ6IDEwMCxcbiAgICAgICAgdGhlbWU6ICdkZWZhdWx0JyxcbiAgICAgICAgc3dhdGNoZXM6IFtdXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFB1YmxpYyBtZXRob2RzXG4gICAgJC5leHRlbmQoJC5mbiwge1xuICAgICAgbWluaWNvbG9yczogZnVuY3Rpb24obWV0aG9kLCBkYXRhKSB7XG5cbiAgICAgICAgc3dpdGNoKG1ldGhvZCkge1xuXG4gICAgICAgICAgLy8gRGVzdHJveSB0aGUgY29udHJvbFxuICAgICAgICAgIGNhc2UgJ2Rlc3Ryb3knOlxuICAgICAgICAgICAgJCh0aGlzKS5lYWNoKCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZGVzdHJveSgkKHRoaXMpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuICQodGhpcyk7XG5cbiAgICAgICAgICAvLyBIaWRlIHRoZSBjb2xvciBwaWNrZXJcbiAgICAgICAgICBjYXNlICdoaWRlJzpcbiAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgIHJldHVybiAkKHRoaXMpO1xuXG4gICAgICAgICAgLy8gR2V0L3NldCBvcGFjaXR5XG4gICAgICAgICAgY2FzZSAnb3BhY2l0eSc6XG4gICAgICAgICAgICAvLyBHZXR0ZXJcbiAgICAgICAgICAgIGlmKCBkYXRhID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICAgIC8vIEdldHRlclxuICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5hdHRyKCdkYXRhLW9wYWNpdHknKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFNldHRlclxuICAgICAgICAgICAgICAkKHRoaXMpLmVhY2goIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUZyb21JbnB1dCgkKHRoaXMpLmF0dHIoJ2RhdGEtb3BhY2l0eScsIGRhdGEpKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJCh0aGlzKTtcblxuICAgICAgICAgIC8vIEdldCBhbiBSR0IoQSkgb2JqZWN0IGJhc2VkIG9uIHRoZSBjdXJyZW50IGNvbG9yL29wYWNpdHlcbiAgICAgICAgICBjYXNlICdyZ2JPYmplY3QnOlxuICAgICAgICAgICAgcmV0dXJuIHJnYk9iamVjdCgkKHRoaXMpLCBtZXRob2QgPT09ICdyZ2JhT2JqZWN0Jyk7XG5cbiAgICAgICAgICAvLyBHZXQgYW4gUkdCKEEpIHN0cmluZyBiYXNlZCBvbiB0aGUgY3VycmVudCBjb2xvci9vcGFjaXR5XG4gICAgICAgICAgY2FzZSAncmdiU3RyaW5nJzpcbiAgICAgICAgICBjYXNlICdyZ2JhU3RyaW5nJzpcbiAgICAgICAgICAgIHJldHVybiByZ2JTdHJpbmcoJCh0aGlzKSwgbWV0aG9kID09PSAncmdiYVN0cmluZycpO1xuXG4gICAgICAgICAgLy8gR2V0L3NldCBzZXR0aW5ncyBvbiB0aGUgZmx5XG4gICAgICAgICAgY2FzZSAnc2V0dGluZ3MnOlxuICAgICAgICAgICAgaWYoIGRhdGEgPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgcmV0dXJuICQodGhpcykuZGF0YSgnbWluaWNvbG9ycy1zZXR0aW5ncycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gU2V0dGVyXG4gICAgICAgICAgICAgICQodGhpcykuZWFjaCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNldHRpbmdzID0gJCh0aGlzKS5kYXRhKCdtaW5pY29sb3JzLXNldHRpbmdzJykgfHwge307XG4gICAgICAgICAgICAgICAgZGVzdHJveSgkKHRoaXMpKTtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLm1pbmljb2xvcnMoJC5leHRlbmQodHJ1ZSwgc2V0dGluZ3MsIGRhdGEpKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJCh0aGlzKTtcblxuICAgICAgICAgIC8vIFNob3cgdGhlIGNvbG9yIHBpY2tlclxuICAgICAgICAgIGNhc2UgJ3Nob3cnOlxuICAgICAgICAgICAgc2hvdyggJCh0aGlzKS5lcSgwKSApO1xuICAgICAgICAgICAgcmV0dXJuICQodGhpcyk7XG5cbiAgICAgICAgICAvLyBHZXQvc2V0IHRoZSBoZXggY29sb3IgdmFsdWVcbiAgICAgICAgICBjYXNlICd2YWx1ZSc6XG4gICAgICAgICAgICBpZiggZGF0YSA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgICAvLyBHZXR0ZXJcbiAgICAgICAgICAgICAgcmV0dXJuICQodGhpcykudmFsKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBTZXR0ZXJcbiAgICAgICAgICAgICAgJCh0aGlzKS5lYWNoKCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiggdHlwZW9mKGRhdGEpID09PSAnb2JqZWN0JyApIHtcbiAgICAgICAgICAgICAgICAgIGlmKCBkYXRhLm9wYWNpdHkgKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignZGF0YS1vcGFjaXR5Jywga2VlcFdpdGhpbihkYXRhLm9wYWNpdHksIDAsIDEpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmKCBkYXRhLmNvbG9yICkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnZhbChkYXRhLmNvbG9yKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS52YWwoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVwZGF0ZUZyb21JbnB1dCgkKHRoaXMpKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJCh0aGlzKTtcblxuICAgICAgICAgIC8vIEluaXRpYWxpemVzIHRoZSBjb250cm9sXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmKCBtZXRob2QgIT09ICdjcmVhdGUnICkgZGF0YSA9IG1ldGhvZDtcbiAgICAgICAgICAgICQodGhpcykuZWFjaCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGluaXQoJCh0aGlzKSwgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAkKHRoaXMpO1xuXG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGlucHV0VGV4dCwgZ2xvYmFsU2V0dGluZ3MsIGdsb2JhbFRhcmdldCAsIGdsb2JhbElucHV0IDtcbiAgICAvLyBJbml0aWFsaXplIGlucHV0IGVsZW1lbnRzXG4gICAgZnVuY3Rpb24gaW5pdChpbnB1dCwgc2V0dGluZ3MpIHtcblxuICAgICAgdmFyIG1pbmljb2xvcnMgPSAkKCc8ZGl2IGNsYXNzPVwibWluaWNvbG9yc1wiIC8+JyksXG4gICAgICAgIGRlZmF1bHRzID0gJC5taW5pY29sb3JzLmRlZmF1bHRzLFxuICAgICAgICBzaXplLFxuICAgICAgICBzd2F0Y2hlcyxcbiAgICAgICAgdGV4dFBhbmVsLFxuICAgICAgICBzd2F0Y2gsXG4gICAgICAgIHBhbmVsLFxuICAgICAgICBnbG9iYWxUYXJnZXQgPSBpbnB1dCxcbiAgICAgICAgaTtcblxuICAgICAgLy8gRG8gbm90aGluZyBpZiBhbHJlYWR5IGluaXRpYWxpemVkXG4gICAgICBpZiggaW5wdXQuZGF0YSgnbWluaWNvbG9ycy1pbml0aWFsaXplZCcpICkgcmV0dXJuO1xuXG4gICAgICAvLyBIYW5kbGUgc2V0dGluZ3NcbiAgICAgIGdsb2JhbFNldHRpbmdzID0gc2V0dGluZ3MgPSAkLmV4dGVuZCh0cnVlLCB7fSwgZGVmYXVsdHMsIHNldHRpbmdzKTtcblxuICAgICAgLy8gVGhlIHdyYXBwZXJcbiAgICAgIG1pbmljb2xvcnNcbiAgICAgICAgLmFkZENsYXNzKCdtaW5pY29sb3JzLXRoZW1lLScgKyBzZXR0aW5ncy50aGVtZSlcbiAgICAgICAgLnRvZ2dsZUNsYXNzKCdtaW5pY29sb3JzLXdpdGgtb3BhY2l0eScsIHNldHRpbmdzLm9wYWNpdHkpXG4gICAgICAgIC50b2dnbGVDbGFzcygnbWluaWNvbG9ycy1uby1kYXRhLXVyaXMnLCBzZXR0aW5ncy5kYXRhVXJpcyAhPT0gdHJ1ZSk7XG5cbiAgICAgIC8vIEN1c3RvbSBwb3NpdGlvbmluZ1xuICAgICAgaWYoIHNldHRpbmdzLnBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICQuZWFjaChzZXR0aW5ncy5wb3NpdGlvbi5zcGxpdCgnICcpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBtaW5pY29sb3JzLmFkZENsYXNzKCdtaW5pY29sb3JzLXBvc2l0aW9uLScgKyB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIElucHV0IHNpemVcbiAgICAgIGlmKCBzZXR0aW5ncy5mb3JtYXQgPT09ICdyZ2InICkge1xuICAgICAgICBzaXplID0gc2V0dGluZ3Mub3BhY2l0eSA/ICcyNScgOiAnMjAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9IHNldHRpbmdzLmtleXdvcmRzID8gJzExJyA6ICc3JztcbiAgICAgIH1cbiAgICAgICBnbG9iYWxJbnB1dCA9IGlucHV0O1xuICAgICAgLy8gVGhlIGlucHV0XG4gICAgICBpbnB1dFxuICAgICAgICAuYWRkQ2xhc3MoJ21pbmljb2xvcnMtaW5wdXQnKVxuICAgICAgICAuZGF0YSgnbWluaWNvbG9ycy1pbml0aWFsaXplZCcsIGZhbHNlKVxuICAgICAgICAuZGF0YSgnbWluaWNvbG9ycy1zZXR0aW5ncycsIHNldHRpbmdzKVxuICAgICAgICAucHJvcCgnc2l6ZScsIHNpemUpXG4gICAgICAgIC53cmFwKG1pbmljb2xvcnMpXG4gICAgICAgIC5hZnRlcihcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJtaW5pY29sb3JzLXBhbmVsIG1pbmljb2xvcnMtc2xpZGVyLScgKyBzZXR0aW5ncy5jb250cm9sICsgJ1wiPicgK1xuICAgICAgICAnPGRpdiBjbGFzcz1cIm1pbmljb2xvcnMtc2xpZGVyIG1pbmljb2xvcnMtc3ByaXRlXCI+JyArXG4gICAgICAgICc8ZGl2IGNsYXNzPVwibWluaWNvbG9ycy1waWNrZXJcIj48L2Rpdj4nICtcbiAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAnPGRpdiBjbGFzcz1cIm1pbmljb2xvcnMtb3BhY2l0eS1zbGlkZXIgbWluaWNvbG9ycy1zcHJpdGVcIj4nICtcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJtaW5pY29sb3JzLXBpY2tlclwiPjwvZGl2PicgK1xuICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICc8ZGl2IGNsYXNzPVwibWluaWNvbG9ycy1ncmlkIG1pbmljb2xvcnMtc3ByaXRlXCI+JyArXG4gICAgICAgICc8ZGl2IGNsYXNzPVwibWluaWNvbG9ycy1ncmlkLWlubmVyXCI+PC9kaXY+JyArXG4gICAgICAgICc8ZGl2IGNsYXNzPVwibWluaWNvbG9ycy1waWNrZXJcIj48ZGl2PjwvZGl2PjwvZGl2PicgK1xuICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICc8L2Rpdj4nXG4gICAgICApO1xuXG4gICAgICAvLyBUaGUgc3dhdGNoXG4gICAgICBpZiggIXNldHRpbmdzLmlubGluZSApIHtcbiAgICAgICAgaW5wdXQuYWZ0ZXIoJzxzcGFuIGNsYXNzPVwibWluaWNvbG9ycy1zd2F0Y2ggbWluaWNvbG9ycy1zcHJpdGUgbWluaWNvbG9ycy1pbnB1dC1zd2F0Y2hcIj48c3BhbiBjbGFzcz1cIm1pbmljb2xvcnMtc3dhdGNoLWNvbG9yXCI+PC9zcGFuPjwvc3Bhbj4nKTtcbiAgICAgICAgaW5wdXQubmV4dCgnLm1pbmljb2xvcnMtaW5wdXQtc3dhdGNoJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmV2ZW50IHRleHQgc2VsZWN0aW9uIGluIElFXG4gICAgICBwYW5lbCA9IGlucHV0LnBhcmVudCgpLmZpbmQoJy5taW5pY29sb3JzLXBhbmVsJyk7XG4gICAgICBwYW5lbC5vbignc2VsZWN0c3RhcnQnLCBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9KS5lbmQoKTtcblxuICAgICAgLy8gU3dhdGNoZXNcbiAgICAgIGlmIChzZXR0aW5ncy5zd2F0Y2hlcyAmJiBzZXR0aW5ncy5zd2F0Y2hlcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgaWYgKHNldHRpbmdzLnN3YXRjaGVzLmxlbmd0aCA+IDcpIHtcbiAgICAgICAgICBzZXR0aW5ncy5zd2F0Y2hlcy5sZW5ndGggPSA3O1xuICAgICAgICB9XG4gICAgICAgIHBhbmVsLmFkZENsYXNzKCdtaW5pY29sb3JzLXdpdGgtc3dhdGNoZXMnKTtcbiAgICAgICAgc3dhdGNoZXMgPSAkKCc8dWwgY2xhc3M9XCJtaW5pY29sb3JzLXN3YXRjaGVzXCI+PC91bD4nKVxuICAgICAgICAgIC5hcHBlbmRUbyhwYW5lbCk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IHNldHRpbmdzLnN3YXRjaGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgc3dhdGNoID0gc2V0dGluZ3Muc3dhdGNoZXNbaV07XG4gICAgICAgICAgc3dhdGNoID0gaXNSZ2Ioc3dhdGNoKSA/IHBhcnNlUmdiKHN3YXRjaCwgdHJ1ZSkgOiBoZXgycmdiKHBhcnNlSGV4KHN3YXRjaCwgdHJ1ZSkpO1xuICAgICAgICAgICQoJzxsaSBjbGFzcz1cIm1pbmljb2xvcnMtc3dhdGNoIG1pbmljb2xvcnMtc3ByaXRlXCI+PHNwYW4gY2xhc3M9XCJtaW5pY29sb3JzLXN3YXRjaC1jb2xvclwiPjwvc3Bhbj48L2xpPicpXG4gICAgICAgICAgICAuYXBwZW5kVG8oc3dhdGNoZXMpXG4gICAgICAgICAgICAuZGF0YSgnc3dhdGNoLWNvbG9yJywgc2V0dGluZ3Muc3dhdGNoZXNbaV0pXG4gICAgICAgICAgICAuZmluZCgnLm1pbmljb2xvcnMtc3dhdGNoLWNvbG9yJylcbiAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHJnYjJoZXgoc3dhdGNoKSxcbiAgICAgICAgICAgICAgb3BhY2l0eTogc3dhdGNoLmFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIHNldHRpbmdzLnN3YXRjaGVzW2ldID0gc3dhdGNoO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuXG4gICAgICAvLyBTd2F0Y2hlc1xuICAgICAgaWYgKHNldHRpbmdzLnRleHQpIHtcbiAgICAgICAgcGFuZWwuYWRkQ2xhc3MoJ21pbmljb2xvcnMtd2l0aC10ZXh0Jyk7XG4gICAgICAgIHRleHRQYW5lbCA9ICQoJzxkaXYgY2xhc3M9XCJtaW5pY29sb3JzLXRleHRcIj48L2Rpdj4nKVxuICAgICAgICAgIC5hcHBlbmRUbyhwYW5lbCk7XG4gICAgICAgIGlucHV0VGV4dCA9ICQoJzxpbnB1dCB0eXBlPVwidGV4dFwiPicpXG4gICAgICAgICAgLmFwcGVuZFRvKHRleHRQYW5lbCk7XG5cbiAgICAgICAgJChpbnB1dFRleHQpLmNoYW5nZShmdW5jdGlvbigpe1xuICAgICAgICAgIGlucHV0LnZhbChpbnB1dFRleHQudmFsKCkpO1xuICAgICAgICAgIHVwZGF0ZUZyb21JbnB1dChpbnB1dCwgdHJ1ZSk7XG4gICAgICAgIH0pXG5cbiAgICAgIH1cblxuICAgICAgLy8gSW5saW5lIGNvbnRyb2xzXG4gICAgICBpZiggc2V0dGluZ3MuaW5saW5lICkgaW5wdXQucGFyZW50KCkuYWRkQ2xhc3MoJ21pbmljb2xvcnMtaW5saW5lJyk7XG5cbiAgICAgIHVwZGF0ZUZyb21JbnB1dChpbnB1dCwgZmFsc2UpO1xuXG4gICAgICBpbnB1dC5kYXRhKCdtaW5pY29sb3JzLWluaXRpYWxpemVkJywgdHJ1ZSk7XG5cbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBpbnB1dCBiYWNrIHRvIGl0cyBvcmlnaW5hbCBzdGF0ZVxuICAgIGZ1bmN0aW9uIGRlc3Ryb3koaW5wdXQpIHtcblxuICAgICAgdmFyIG1pbmljb2xvcnMgPSBpbnB1dC5wYXJlbnQoKTtcblxuICAgICAgLy8gUmV2ZXJ0IHRoZSBpbnB1dCBlbGVtZW50XG4gICAgICBpbnB1dFxuICAgICAgICAucmVtb3ZlRGF0YSgnbWluaWNvbG9ycy1pbml0aWFsaXplZCcpXG4gICAgICAgIC5yZW1vdmVEYXRhKCdtaW5pY29sb3JzLXNldHRpbmdzJylcbiAgICAgICAgLnJlbW92ZVByb3AoJ3NpemUnKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ21pbmljb2xvcnMtaW5wdXQnKTtcblxuICAgICAgLy8gUmVtb3ZlIHRoZSB3cmFwIGFuZCBkZXN0cm95IHdoYXRldmVyIHJlbWFpbnNcbiAgICAgIG1pbmljb2xvcnMuYmVmb3JlKGlucHV0KS5yZW1vdmUoKTtcblxuICAgIH1cblxuICAgIC8vIFNob3dzIHRoZSBzcGVjaWZpZWQgZHJvcGRvd24gcGFuZWxcbiAgICBmdW5jdGlvbiBzaG93KGlucHV0KSB7XG5cbiAgICAgIHZhciBtaW5pY29sb3JzID0gaW5wdXQucGFyZW50KCksXG4gICAgICAgIHBhbmVsID0gbWluaWNvbG9ycy5maW5kKCcubWluaWNvbG9ycy1wYW5lbCcpLFxuICAgICAgICBzZXR0aW5ncyA9IGlucHV0LmRhdGEoJ21pbmljb2xvcnMtc2V0dGluZ3MnKTtcblxuICAgICAgLy8gRG8gbm90aGluZyBpZiB1bmluaXRpYWxpemVkLCBkaXNhYmxlZCwgaW5saW5lLCBvciBhbHJlYWR5IG9wZW5cbiAgICAgIGlmKCAhaW5wdXQuZGF0YSgnbWluaWNvbG9ycy1pbml0aWFsaXplZCcpIHx8XG4gICAgICAgIGlucHV0LnByb3AoJ2Rpc2FibGVkJykgfHxcbiAgICAgICAgbWluaWNvbG9ycy5oYXNDbGFzcygnbWluaWNvbG9ycy1pbmxpbmUnKSB8fFxuICAgICAgICBtaW5pY29sb3JzLmhhc0NsYXNzKCdtaW5pY29sb3JzLWZvY3VzJylcbiAgICAgICkgcmV0dXJuO1xuXG4gICAgICBoaWRlKCk7XG5cbiAgICAgIG1pbmljb2xvcnMuYWRkQ2xhc3MoJ21pbmljb2xvcnMtZm9jdXMnKTtcbiAgICAgIHBhbmVsXG4gICAgICAgIC5zdG9wKHRydWUsIHRydWUpXG4gICAgICAgIC5mYWRlSW4oc2V0dGluZ3Muc2hvd1NwZWVkLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiggc2V0dGluZ3Muc2hvdyApIHNldHRpbmdzLnNob3cuY2FsbChpbnB1dC5nZXQoMCkpO1xuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIC8vIEhpZGVzIGFsbCBkcm9wZG93biBwYW5lbHNcbiAgICBmdW5jdGlvbiBoaWRlKCkge1xuXG4gICAgICAkKCcubWluaWNvbG9ycy1mb2N1cycpLmVhY2goIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBtaW5pY29sb3JzID0gJCh0aGlzKSxcbiAgICAgICAgICBpbnB1dCA9IG1pbmljb2xvcnMuZmluZCgnLm1pbmljb2xvcnMtaW5wdXQnKSxcbiAgICAgICAgICBwYW5lbCA9IG1pbmljb2xvcnMuZmluZCgnLm1pbmljb2xvcnMtcGFuZWwnKSxcbiAgICAgICAgICBzZXR0aW5ncyA9IGlucHV0LmRhdGEoJ21pbmljb2xvcnMtc2V0dGluZ3MnKTtcblxuICAgICAgICBwYW5lbC5mYWRlT3V0KHNldHRpbmdzLmhpZGVTcGVlZCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYoIHNldHRpbmdzLmhpZGUgKSBzZXR0aW5ncy5oaWRlLmNhbGwoaW5wdXQuZ2V0KDApKTtcbiAgICAgICAgICBtaW5pY29sb3JzLnJlbW92ZUNsYXNzKCdtaW5pY29sb3JzLWZvY3VzJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBNb3ZlcyB0aGUgc2VsZWN0ZWQgcGlja2VyXG4gICAgZnVuY3Rpb24gbW92ZSh0YXJnZXQsIGV2ZW50LCBhbmltYXRlKSB7XG5cbiAgICAgIHZhciBpbnB1dCA9ICB0YXJnZXQucGFyZW50cygnLm1pbmljb2xvcnMnKS5maW5kKCcubWluaWNvbG9ycy1pbnB1dCcpLFxuICAgICAgICBzZXR0aW5ncyA9IGlucHV0LmRhdGEoJ21pbmljb2xvcnMtc2V0dGluZ3MnKSxcbiAgICAgICAgcGlja2VyID0gdGFyZ2V0LmZpbmQoJ1tjbGFzcyQ9LXBpY2tlcl0nKSxcbiAgICAgICAgb2Zmc2V0WCA9IHRhcmdldC5vZmZzZXQoKS5sZWZ0LFxuICAgICAgICBvZmZzZXRZID0gdGFyZ2V0Lm9mZnNldCgpLnRvcCxcbiAgICAgICAgeCA9IE1hdGgucm91bmQoZXZlbnQucGFnZVggLSBvZmZzZXRYKSxcbiAgICAgICAgeSA9IE1hdGgucm91bmQoZXZlbnQucGFnZVkgLSBvZmZzZXRZKSxcbiAgICAgICAgZHVyYXRpb24gPSBhbmltYXRlID8gc2V0dGluZ3MuYW5pbWF0aW9uU3BlZWQgOiAwLFxuICAgICAgICB3eCwgd3ksIHIsIHBoaTtcblxuICAgICAgLy8gVG91Y2ggc3VwcG9ydFxuICAgICAgaWYoIGV2ZW50Lm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXMgKSB7XG4gICAgICAgIHggPSBldmVudC5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIC0gb2Zmc2V0WDtcbiAgICAgICAgeSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgLSBvZmZzZXRZO1xuICAgICAgfVxuXG4gICAgICAvLyBDb25zdHJhaW4gcGlja2VyIHRvIGl0cyBjb250YWluZXJcbiAgICAgIGlmKCB4IDwgMCApIHggPSAwO1xuICAgICAgaWYoIHkgPCAwICkgeSA9IDA7XG4gICAgICBpZiggeCA+IHRhcmdldC53aWR0aCgpICkgeCA9IHRhcmdldC53aWR0aCgpO1xuICAgICAgaWYoIHkgPiB0YXJnZXQuaGVpZ2h0KCkgKSB5ID0gdGFyZ2V0LmhlaWdodCgpO1xuXG4gICAgICAvLyBDb25zdHJhaW4gY29sb3Igd2hlZWwgdmFsdWVzIHRvIHRoZSB3aGVlbFxuICAgICAgaWYoIHRhcmdldC5wYXJlbnQoKS5pcygnLm1pbmljb2xvcnMtc2xpZGVyLXdoZWVsJykgJiYgcGlja2VyLnBhcmVudCgpLmlzKCcubWluaWNvbG9ycy1ncmlkJykgKSB7XG4gICAgICAgIHd4ID0gNzUgLSB4O1xuICAgICAgICB3eSA9IDc1IC0geTtcbiAgICAgICAgciA9IE1hdGguc3FydCh3eCAqIHd4ICsgd3kgKiB3eSk7XG4gICAgICAgIHBoaSA9IE1hdGguYXRhbjIod3ksIHd4KTtcbiAgICAgICAgaWYoIHBoaSA8IDAgKSBwaGkgKz0gTWF0aC5QSSAqIDI7XG4gICAgICAgIGlmKCByID4gNzUgKSB7XG4gICAgICAgICAgciA9IDc1O1xuICAgICAgICAgIHggPSA3NSAtICg3NSAqIE1hdGguY29zKHBoaSkpO1xuICAgICAgICAgIHkgPSA3NSAtICg3NSAqIE1hdGguc2luKHBoaSkpO1xuICAgICAgICB9XG4gICAgICAgIHggPSBNYXRoLnJvdW5kKHgpO1xuICAgICAgICB5ID0gTWF0aC5yb3VuZCh5KTtcbiAgICAgIH1cblxuICAgICAgLy8gTW92ZSB0aGUgcGlja2VyXG4gICAgICBpZiggdGFyZ2V0LmlzKCcubWluaWNvbG9ycy1ncmlkJykgKSB7XG4gICAgICAgIHBpY2tlclxuICAgICAgICAgIC5zdG9wKHRydWUpXG4gICAgICAgICAgLmFuaW1hdGUoe1xuICAgICAgICAgICAgdG9wOiB5ICsgJ3B4JyxcbiAgICAgICAgICAgIGxlZnQ6IHggKyAncHgnXG4gICAgICAgICAgfSwgZHVyYXRpb24sIHNldHRpbmdzLmFuaW1hdGlvbkVhc2luZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB1cGRhdGVGcm9tQ29udHJvbChpbnB1dCwgdGFyZ2V0KTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBpY2tlclxuICAgICAgICAgIC5zdG9wKHRydWUpXG4gICAgICAgICAgLmFuaW1hdGUoe1xuICAgICAgICAgICAgdG9wOiB5ICsgJ3B4J1xuICAgICAgICAgIH0sIGR1cmF0aW9uLCBzZXR0aW5ncy5hbmltYXRpb25FYXNpbmcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdXBkYXRlRnJvbUNvbnRyb2woaW5wdXQsIHRhcmdldCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICAvLyBTZXRzIHRoZSBpbnB1dCBiYXNlZCBvbiB0aGUgY29sb3IgcGlja2VyIHZhbHVlc1xuICAgIGZ1bmN0aW9uIHVwZGF0ZUZyb21Db250cm9sKGlucHV0LCB0YXJnZXQpIHtcblxuICAgICAgZnVuY3Rpb24gZ2V0Q29vcmRzKHBpY2tlciwgY29udGFpbmVyKSB7XG5cbiAgICAgICAgdmFyIGxlZnQsIHRvcDtcbiAgICAgICAgaWYoICFwaWNrZXIubGVuZ3RoIHx8ICFjb250YWluZXIgKSByZXR1cm4gbnVsbDtcbiAgICAgICAgbGVmdCA9IHBpY2tlci5vZmZzZXQoKS5sZWZ0O1xuICAgICAgICB0b3AgPSBwaWNrZXIub2Zmc2V0KCkudG9wO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogbGVmdCAtIGNvbnRhaW5lci5vZmZzZXQoKS5sZWZ0ICsgKHBpY2tlci5vdXRlcldpZHRoKCkgLyAyKSxcbiAgICAgICAgICB5OiB0b3AgLSBjb250YWluZXIub2Zmc2V0KCkudG9wICsgKHBpY2tlci5vdXRlckhlaWdodCgpIC8gMilcbiAgICAgICAgfTtcblxuICAgICAgfVxuXG4gICAgICB2YXIgaHVlLCBzYXR1cmF0aW9uLCBicmlnaHRuZXNzLCB4LCB5LCByLCBwaGksXG5cbiAgICAgICAgaGV4ID0gaW5wdXQudmFsKCksXG4gICAgICAgIG9wYWNpdHkgPSBpbnB1dC5hdHRyKCdkYXRhLW9wYWNpdHknKSxcblxuICAgICAgLy8gSGVscGZ1bCByZWZlcmVuY2VzXG4gICAgICAgIG1pbmljb2xvcnMgPSBpbnB1dC5wYXJlbnQoKSxcbiAgICAgICAgc2V0dGluZ3MgPSBpbnB1dC5kYXRhKCdtaW5pY29sb3JzLXNldHRpbmdzJyksXG4gICAgICAgIHN3YXRjaCA9IG1pbmljb2xvcnMuZmluZCgnLm1pbmljb2xvcnMtaW5wdXQtc3dhdGNoJyksXG5cbiAgICAgIC8vIFBhbmVsIG9iamVjdHNcbiAgICAgICAgZ3JpZCA9IG1pbmljb2xvcnMuZmluZCgnLm1pbmljb2xvcnMtZ3JpZCcpLFxuICAgICAgICBzbGlkZXIgPSBtaW5pY29sb3JzLmZpbmQoJy5taW5pY29sb3JzLXNsaWRlcicpLFxuICAgICAgICBvcGFjaXR5U2xpZGVyID0gbWluaWNvbG9ycy5maW5kKCcubWluaWNvbG9ycy1vcGFjaXR5LXNsaWRlcicpLFxuXG4gICAgICAvLyBQaWNrZXIgb2JqZWN0c1xuICAgICAgICBncmlkUGlja2VyID0gZ3JpZC5maW5kKCdbY2xhc3MkPS1waWNrZXJdJyksXG4gICAgICAgIHNsaWRlclBpY2tlciA9IHNsaWRlci5maW5kKCdbY2xhc3MkPS1waWNrZXJdJyksXG4gICAgICAgIG9wYWNpdHlQaWNrZXIgPSBvcGFjaXR5U2xpZGVyLmZpbmQoJ1tjbGFzcyQ9LXBpY2tlcl0nKSxcblxuICAgICAgLy8gUGlja2VyIHBvc2l0aW9uc1xuICAgICAgICBncmlkUG9zID0gZ2V0Q29vcmRzKGdyaWRQaWNrZXIsIGdyaWQpLFxuICAgICAgICBzbGlkZXJQb3MgPSBnZXRDb29yZHMoc2xpZGVyUGlja2VyLCBzbGlkZXIpLFxuICAgICAgICBvcGFjaXR5UG9zID0gZ2V0Q29vcmRzKG9wYWNpdHlQaWNrZXIsIG9wYWNpdHlTbGlkZXIpO1xuXG4gICAgICAvLyBIYW5kbGUgY29sb3JzXG4gICAgICBpZiggdGFyZ2V0LmlzKCcubWluaWNvbG9ycy1ncmlkLCAubWluaWNvbG9ycy1zbGlkZXIsIC5taW5pY29sb3JzLW9wYWNpdHktc2xpZGVyJykgKSB7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIEhTQiB2YWx1ZXNcbiAgICAgICAgc3dpdGNoKHNldHRpbmdzLmNvbnRyb2wpIHtcblxuICAgICAgICAgIGNhc2UgJ3doZWVsJzpcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBodWUsIHNhdHVyYXRpb24sIGFuZCBicmlnaHRuZXNzXG4gICAgICAgICAgICB4ID0gKGdyaWQud2lkdGgoKSAvIDIpIC0gZ3JpZFBvcy54O1xuICAgICAgICAgICAgeSA9IChncmlkLmhlaWdodCgpIC8gMikgLSBncmlkUG9zLnk7XG4gICAgICAgICAgICByID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICAgICAgcGhpID0gTWF0aC5hdGFuMih5LCB4KTtcbiAgICAgICAgICAgIGlmKCBwaGkgPCAwICkgcGhpICs9IE1hdGguUEkgKiAyO1xuICAgICAgICAgICAgaWYoIHIgPiA3NSApIHtcbiAgICAgICAgICAgICAgciA9IDc1O1xuICAgICAgICAgICAgICBncmlkUG9zLnggPSA2OSAtICg3NSAqIE1hdGguY29zKHBoaSkpO1xuICAgICAgICAgICAgICBncmlkUG9zLnkgPSA2OSAtICg3NSAqIE1hdGguc2luKHBoaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2F0dXJhdGlvbiA9IGtlZXBXaXRoaW4ociAvIDAuNzUsIDAsIDEwMCk7XG4gICAgICAgICAgICBodWUgPSBrZWVwV2l0aGluKHBoaSAqIDE4MCAvIE1hdGguUEksIDAsIDM2MCk7XG4gICAgICAgICAgICBicmlnaHRuZXNzID0ga2VlcFdpdGhpbigxMDAgLSBNYXRoLmZsb29yKHNsaWRlclBvcy55ICogKDEwMCAvIHNsaWRlci5oZWlnaHQoKSkpLCAwLCAxMDApO1xuICAgICAgICAgICAgaGV4ID0gaHNiMmhleCh7XG4gICAgICAgICAgICAgIGg6IGh1ZSxcbiAgICAgICAgICAgICAgczogc2F0dXJhdGlvbixcbiAgICAgICAgICAgICAgYjogYnJpZ2h0bmVzc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBVSVxuICAgICAgICAgICAgc2xpZGVyLmNzcygnYmFja2dyb3VuZENvbG9yJywgaHNiMmhleCh7IGg6IGh1ZSwgczogc2F0dXJhdGlvbiwgYjogMTAwIH0pKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnc2F0dXJhdGlvbic6XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgaHVlLCBzYXR1cmF0aW9uLCBhbmQgYnJpZ2h0bmVzc1xuICAgICAgICAgICAgaHVlID0ga2VlcFdpdGhpbihwYXJzZUludChncmlkUG9zLnggKiAoMzYwIC8gZ3JpZC53aWR0aCgpKSwgMTApLCAwLCAzNjApO1xuICAgICAgICAgICAgc2F0dXJhdGlvbiA9IGtlZXBXaXRoaW4oMTAwIC0gTWF0aC5mbG9vcihzbGlkZXJQb3MueSAqICgxMDAgLyBzbGlkZXIuaGVpZ2h0KCkpKSwgMCwgMTAwKTtcbiAgICAgICAgICAgIGJyaWdodG5lc3MgPSBrZWVwV2l0aGluKDEwMCAtIE1hdGguZmxvb3IoZ3JpZFBvcy55ICogKDEwMCAvIGdyaWQuaGVpZ2h0KCkpKSwgMCwgMTAwKTtcbiAgICAgICAgICAgIGhleCA9IGhzYjJoZXgoe1xuICAgICAgICAgICAgICBoOiBodWUsXG4gICAgICAgICAgICAgIHM6IHNhdHVyYXRpb24sXG4gICAgICAgICAgICAgIGI6IGJyaWdodG5lc3NcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgVUlcbiAgICAgICAgICAgIHNsaWRlci5jc3MoJ2JhY2tncm91bmRDb2xvcicsIGhzYjJoZXgoeyBoOiBodWUsIHM6IDEwMCwgYjogYnJpZ2h0bmVzcyB9KSk7XG4gICAgICAgICAgICBtaW5pY29sb3JzLmZpbmQoJy5taW5pY29sb3JzLWdyaWQtaW5uZXInKS5jc3MoJ29wYWNpdHknLCBzYXR1cmF0aW9uIC8gMTAwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnYnJpZ2h0bmVzcyc6XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgaHVlLCBzYXR1cmF0aW9uLCBhbmQgYnJpZ2h0bmVzc1xuICAgICAgICAgICAgaHVlID0ga2VlcFdpdGhpbihwYXJzZUludChncmlkUG9zLnggKiAoMzYwIC8gZ3JpZC53aWR0aCgpKSwgMTApLCAwLCAzNjApO1xuICAgICAgICAgICAgc2F0dXJhdGlvbiA9IGtlZXBXaXRoaW4oMTAwIC0gTWF0aC5mbG9vcihncmlkUG9zLnkgKiAoMTAwIC8gZ3JpZC5oZWlnaHQoKSkpLCAwLCAxMDApO1xuICAgICAgICAgICAgYnJpZ2h0bmVzcyA9IGtlZXBXaXRoaW4oMTAwIC0gTWF0aC5mbG9vcihzbGlkZXJQb3MueSAqICgxMDAgLyBzbGlkZXIuaGVpZ2h0KCkpKSwgMCwgMTAwKTtcbiAgICAgICAgICAgIGhleCA9IGhzYjJoZXgoe1xuICAgICAgICAgICAgICBoOiBodWUsXG4gICAgICAgICAgICAgIHM6IHNhdHVyYXRpb24sXG4gICAgICAgICAgICAgIGI6IGJyaWdodG5lc3NcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgVUlcbiAgICAgICAgICAgIHNsaWRlci5jc3MoJ2JhY2tncm91bmRDb2xvcicsIGhzYjJoZXgoeyBoOiBodWUsIHM6IHNhdHVyYXRpb24sIGI6IDEwMCB9KSk7XG4gICAgICAgICAgICBtaW5pY29sb3JzLmZpbmQoJy5taW5pY29sb3JzLWdyaWQtaW5uZXInKS5jc3MoJ29wYWNpdHknLCAxIC0gKGJyaWdodG5lc3MgLyAxMDApKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBodWUsIHNhdHVyYXRpb24sIGFuZCBicmlnaHRuZXNzXG4gICAgICAgICAgICBodWUgPSBrZWVwV2l0aGluKDM2MCAtIHBhcnNlSW50KHNsaWRlclBvcy55ICogKDM2MCAvIHNsaWRlci5oZWlnaHQoKSksIDEwKSwgMCwgMzYwKTtcbiAgICAgICAgICAgIHNhdHVyYXRpb24gPSBrZWVwV2l0aGluKE1hdGguZmxvb3IoZ3JpZFBvcy54ICogKDEwMCAvIGdyaWQud2lkdGgoKSkpLCAwLCAxMDApO1xuICAgICAgICAgICAgYnJpZ2h0bmVzcyA9IGtlZXBXaXRoaW4oMTAwIC0gTWF0aC5mbG9vcihncmlkUG9zLnkgKiAoMTAwIC8gZ3JpZC5oZWlnaHQoKSkpLCAwLCAxMDApO1xuICAgICAgICAgICAgaGV4ID0gaHNiMmhleCh7XG4gICAgICAgICAgICAgIGg6IGh1ZSxcbiAgICAgICAgICAgICAgczogc2F0dXJhdGlvbixcbiAgICAgICAgICAgICAgYjogYnJpZ2h0bmVzc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBVSVxuICAgICAgICAgICAgZ3JpZC5jc3MoJ2JhY2tncm91bmRDb2xvcicsIGhzYjJoZXgoeyBoOiBodWUsIHM6IDEwMCwgYjogMTAwIH0pKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgb3BhY2l0eVxuICAgICAgICBpZiggc2V0dGluZ3Mub3BhY2l0eSApIHtcbiAgICAgICAgICBvcGFjaXR5ID0gcGFyc2VGbG9hdCgxIC0gKG9wYWNpdHlQb3MueSAvIG9wYWNpdHlTbGlkZXIuaGVpZ2h0KCkpKS50b0ZpeGVkKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wYWNpdHkgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlSW5wdXQoaW5wdXQsIGhleCwgb3BhY2l0eSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gU2V0IHN3YXRjaCBjb2xvclxuICAgICAgICBzd2F0Y2guZmluZCgnc3BhbicpLmNzcyh7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBoZXgsXG4gICAgICAgICAgb3BhY2l0eTogb3BhY2l0eVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBIYW5kbGUgY2hhbmdlIGV2ZW50XG4gICAgICAgIGRvQ2hhbmdlKGlucHV0LCBoZXgsIG9wYWNpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBpbnB1dCBhbmQgZG9lcyB0aGUgYXBwcm9wcmlhdGUgY29udmVyc2lvbnNcbiAgICAvLyB0byByZXNwZWN0IHNldHRpbmdzLCBhbHNvIHVwZGF0ZXMgdGhlIHN3YXRjaFxuICAgIGZ1bmN0aW9uIHVwZGF0ZUlucHV0KGlucHV0LCB2YWx1ZSwgb3BhY2l0eSkge1xuICAgICAgdmFyIHJnYixcblxuICAgICAgLy8gSGVscGZ1bCByZWZlcmVuY2VzXG4gICAgICAgIG1pbmljb2xvcnMgPSBpbnB1dC5wYXJlbnQoKSxcbiAgICAgICAgc2V0dGluZ3MgPSBpbnB1dC5kYXRhKCdtaW5pY29sb3JzLXNldHRpbmdzJyksXG4gICAgICAgIHN3YXRjaCA9IG1pbmljb2xvcnMuZmluZCgnLm1pbmljb2xvcnMtaW5wdXQtc3dhdGNoJyk7XG5cbiAgICAgIGlmKCBzZXR0aW5ncy5vcGFjaXR5ICkgaW5wdXQuYXR0cignZGF0YS1vcGFjaXR5Jywgb3BhY2l0eSk7XG5cbiAgICAgIC8vIFNldCBjb2xvciBzdHJpbmdcbiAgICAgIGlmKCBzZXR0aW5ncy5mb3JtYXQgPT09ICdyZ2InICkge1xuICAgICAgICAvLyBSZXR1cm5zIFJHQihBKSBzdHJpbmdcblxuICAgICAgICAvLyBDaGVja3MgZm9yIGlucHV0IGZvcm1hdCBhbmQgZG9lcyB0aGUgY29udmVyc2lvblxuICAgICAgICBpZiAoIGlzUmdiKHZhbHVlKSApIHtcbiAgICAgICAgICByZ2IgPSBwYXJzZVJnYih2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmdiID0gaGV4MnJnYihwYXJzZUhleCh2YWx1ZSwgdHJ1ZSkpO1xuICAgICAgICB9XG5cblxuICAgICAgICBvcGFjaXR5ID0gaW5wdXQuYXR0cignZGF0YS1vcGFjaXR5JykgPT09ICcnID8gMSA6IGtlZXBXaXRoaW4oIHBhcnNlRmxvYXQoIGlucHV0LmF0dHIoJ2RhdGEtb3BhY2l0eScpICkudG9GaXhlZCgyKSwgMCwgMSApO1xuICAgICAgICBpZiggaXNOYU4oIG9wYWNpdHkgKSB8fCAhc2V0dGluZ3Mub3BhY2l0eSApIG9wYWNpdHkgPSAxO1xuXG4gICAgICAgIGlmKCBpbnB1dC5taW5pY29sb3JzKCdyZ2JPYmplY3QnKS5hIDw9IDEgJiYgcmdiICYmIHNldHRpbmdzLm9wYWNpdHkpIHtcbiAgICAgICAgICAvLyBTZXQgUkdCQSBzdHJpbmcgaWYgYWxwaGFcbiAgICAgICAgICB2YWx1ZSA9ICdyZ2JhKCcgKyByZ2IuciArICcsICcgKyByZ2IuZyArICcsICcgKyByZ2IuYiArICcsICcgKyBwYXJzZUZsb2F0KCBvcGFjaXR5ICkgKyAnKSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2V0IFJHQiBzdHJpbmcgKGFscGhhID0gMSlcbiAgICAgICAgICB2YWx1ZSA9ICdyZ2IoJyArIHJnYi5yICsgJywgJyArIHJnYi5nICsgJywgJyArIHJnYi5iICsgJyknO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm5zIGhleCBjb2xvclxuXG4gICAgICAgIC8vIENoZWNrcyBmb3IgaW5wdXQgZm9ybWF0IGFuZCBkb2VzIHRoZSBjb252ZXJzaW9uXG4gICAgICAgIGlmICggaXNSZ2IodmFsdWUpICkge1xuICAgICAgICAgIHZhbHVlID0gcmdiU3RyaW5nMmhleCh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZSA9IGNvbnZlcnRDYXNlKCB2YWx1ZSwgc2V0dGluZ3MubGV0dGVyQ2FzZSApO1xuICAgICAgfVxuXG5cblxuXG4gICAgICAvLyBVcGRhdGUgdmFsdWUgZnJvbSBwaWNrZXJcbiAgICAgIC8vZ2xvYmFsSW5wdXQudmFsKCB2YWx1ZSApO1xuICAgICAgaW5wdXQudmFsKCB2YWx1ZSApO1xuXG4gICAgICBpZihpbnB1dFRleHQpe1xuICAgICAgICBpbnB1dFRleHQudmFsKHZhbHVlKTtcbiAgICAgIH1cblxuXG4gICAgICAvLyBTZXQgc3dhdGNoIGNvbG9yXG4gICAgICBzd2F0Y2guZmluZCgnc3BhbicpLmNzcyh7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdmFsdWUsXG4gICAgICAgIG9wYWNpdHk6IG9wYWNpdHlcbiAgICAgIH0pO1xuXG4gICAgICAvLyBIYW5kbGUgY2hhbmdlIGV2ZW50XG4gICAgICBkb0NoYW5nZShpbnB1dCwgdmFsdWUsIG9wYWNpdHkpO1xuICAgIH1cblxuICAgIC8vIFNldHMgdGhlIGNvbG9yIHBpY2tlciB2YWx1ZXMgZnJvbSB0aGUgaW5wdXRcbiAgICBmdW5jdGlvbiB1cGRhdGVGcm9tSW5wdXQoaW5wdXQsIHByZXNlcnZlSW5wdXRWYWx1ZSkge1xuICAgICB2YXIgIHNldHRpbmdzID0gZ2xvYmFsU2V0dGluZ3M7XG4gICAgICB2YXIgaGV4LFxuICAgICAgICBoc2IsXG4gICAgICAgIG9wYWNpdHksXG4gICAgICAgIGtleXdvcmRzLFxuICAgICAgICBhbHBoYSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHgsIHksIHIsIHBoaSxcblxuICAgICAgLy8gSGVscGZ1bCByZWZlcmVuY2VzXG4gICAgICAgIG1pbmljb2xvcnMgPSBpbnB1dC5wYXJlbnQoKSxcbiAgICAgIC8vICBzZXR0aW5ncyA9IGlucHV0LmRhdGEoJ21pbmljb2xvcnMtc2V0dGluZ3MnKSxcbiAgICAgICAgc3dhdGNoID0gbWluaWNvbG9ycy5maW5kKCcubWluaWNvbG9ycy1pbnB1dC1zd2F0Y2gnKSxcblxuICAgICAgLy8gUGFuZWwgb2JqZWN0c1xuICAgICAgICBncmlkID0gbWluaWNvbG9ycy5maW5kKCcubWluaWNvbG9ycy1ncmlkJyksXG4gICAgICAgIHNsaWRlciA9IG1pbmljb2xvcnMuZmluZCgnLm1pbmljb2xvcnMtc2xpZGVyJyksXG4gICAgICAgIG9wYWNpdHlTbGlkZXIgPSBtaW5pY29sb3JzLmZpbmQoJy5taW5pY29sb3JzLW9wYWNpdHktc2xpZGVyJyksXG5cbiAgICAgIC8vIFBpY2tlciBvYmplY3RzXG4gICAgICAgIGdyaWRQaWNrZXIgPSBncmlkLmZpbmQoJ1tjbGFzcyQ9LXBpY2tlcl0nKSxcbiAgICAgICAgc2xpZGVyUGlja2VyID0gc2xpZGVyLmZpbmQoJ1tjbGFzcyQ9LXBpY2tlcl0nKSxcbiAgICAgICAgb3BhY2l0eVBpY2tlciA9IG9wYWNpdHlTbGlkZXIuZmluZCgnW2NsYXNzJD0tcGlja2VyXScpO1xuXG4gICAgICAvLyBEZXRlcm1pbmUgaGV4L0hTQiB2YWx1ZXNcbiAgICAgIGlmKCBpc1JnYihpbnB1dC52YWwoKSkgKSB7XG4gICAgICAgIC8vIElmIGlucHV0IHZhbHVlIGlzIGEgcmdiKGEpIHN0cmluZywgY29udmVydCBpdCB0byBoZXggY29sb3IgYW5kIHVwZGF0ZSBvcGFjaXR5XG4gICAgICAgIGhleCA9IHJnYlN0cmluZzJoZXgoaW5wdXQudmFsKCkpO1xuICAgICAgICBhbHBoYSA9IGtlZXBXaXRoaW4ocGFyc2VGbG9hdChnZXRBbHBoYShpbnB1dC52YWwoKSkpLnRvRml4ZWQoMiksIDAsIDEpO1xuICAgICAgICBpZiggYWxwaGEgKSB7XG4gICAgICAgICAgaW5wdXQuYXR0cignZGF0YS1vcGFjaXR5JywgYWxwaGEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoZXggPSBjb252ZXJ0Q2FzZShwYXJzZUhleChpbnB1dC52YWwoKSwgdHJ1ZSksIHNldHRpbmdzLmxldHRlckNhc2UpO1xuICAgICAgfVxuXG4gICAgICBpZiggIWhleCApe1xuICAgICAgICBoZXggPSBjb252ZXJ0Q2FzZShwYXJzZUlucHV0KHNldHRpbmdzLmRlZmF1bHRWYWx1ZSwgdHJ1ZSksIHNldHRpbmdzLmxldHRlckNhc2UpO1xuICAgICAgfVxuICAgICAgaHNiID0gaGV4MmhzYihoZXgpO1xuXG4gICAgICAvLyBHZXQgYXJyYXkgb2YgbG93ZXJjYXNlIGtleXdvcmRzXG4gICAgICBrZXl3b3JkcyA9ICFzZXR0aW5ncy5rZXl3b3JkcyA/IFtdIDogJC5tYXAoc2V0dGluZ3Mua2V5d29yZHMuc3BsaXQoJywnKSwgZnVuY3Rpb24oYSkge1xuICAgICAgICByZXR1cm4gJC50cmltKGEudG9Mb3dlckNhc2UoKSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU2V0IGNvbG9yIHN0cmluZ1xuICAgICAgaWYoIGlucHV0LnZhbCgpICE9PSAnJyAmJiAkLmluQXJyYXkoaW5wdXQudmFsKCkudG9Mb3dlckNhc2UoKSwga2V5d29yZHMpID4gLTEgKSB7XG4gICAgICAgIHZhbHVlID0gY29udmVydENhc2UoaW5wdXQudmFsKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBpc1JnYihpbnB1dC52YWwoKSkgPyBwYXJzZVJnYihpbnB1dC52YWwoKSkgOiBoZXg7XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSBpbnB1dCB2YWx1ZVxuICAgICAgaWYoICFwcmVzZXJ2ZUlucHV0VmFsdWUgKXtcbiAgICAgICAgZ2xvYmFsSW5wdXQudmFsKHZhbHVlKTtcblxuICAgICAgICBpbnB1dFRleHQgJiYgaW5wdXRUZXh0LnZhbCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBnbG9iYWxTZXR0aW5ncyA9IHNldHRpbmdzXG4gICAgICAvLyBEZXRlcm1pbmUgb3BhY2l0eSB2YWx1ZVxuICAgICAgaWYoIHNldHRpbmdzLm9wYWNpdHkgKSB7XG4gICAgICAgIC8vIEdldCBmcm9tIGRhdGEtb3BhY2l0eSBhdHRyaWJ1dGUgYW5kIGtlZXAgd2l0aGluIDAtMSByYW5nZVxuICAgICAgICBvcGFjaXR5ID0gaW5wdXQuYXR0cignZGF0YS1vcGFjaXR5JykgPT09ICcnID8gMSA6IGtlZXBXaXRoaW4ocGFyc2VGbG9hdChpbnB1dC5hdHRyKCdkYXRhLW9wYWNpdHknKSkudG9GaXhlZCgyKSwgMCwgMSk7XG4gICAgICAgIGlmKCBpc05hTihvcGFjaXR5KSApIG9wYWNpdHkgPSAxO1xuICAgICAgICBpbnB1dC5hdHRyKCdkYXRhLW9wYWNpdHknLCBvcGFjaXR5KTtcbiAgICAgICAgc3dhdGNoLmZpbmQoJ3NwYW4nKS5jc3MoJ29wYWNpdHknLCBvcGFjaXR5KTtcblxuICAgICAgICAvLyBTZXQgb3BhY2l0eSBwaWNrZXIgcG9zaXRpb25cbiAgICAgICAgeSA9IGtlZXBXaXRoaW4ob3BhY2l0eVNsaWRlci5oZWlnaHQoKSAtIChvcGFjaXR5U2xpZGVyLmhlaWdodCgpICogb3BhY2l0eSksIDAsIG9wYWNpdHlTbGlkZXIuaGVpZ2h0KCkpO1xuICAgICAgICBvcGFjaXR5UGlja2VyLmNzcygndG9wJywgeSArICdweCcpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgb3BhY2l0eSB0byB6ZXJvIGlmIGlucHV0IHZhbHVlIGlzIHRyYW5zcGFyZW50XG4gICAgICBpZiggaW5wdXQudmFsKCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RyYW5zcGFyZW50JyApIHtcbiAgICAgICAgc3dhdGNoLmZpbmQoJ3NwYW4nKS5jc3MoJ29wYWNpdHknLCAwKTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHN3YXRjaFxuICAgICAgc3dhdGNoLmZpbmQoJ3NwYW4nKS5jc3MoJ2JhY2tncm91bmRDb2xvcicsIGhleCk7XG5cbiAgICAgIC8vIERldGVybWluZSBwaWNrZXIgbG9jYXRpb25zXG4gICAgICBzd2l0Y2goc2V0dGluZ3MuY29udHJvbCkge1xuXG4gICAgICAgIGNhc2UgJ3doZWVsJzpcbiAgICAgICAgICAvLyBTZXQgZ3JpZCBwb3NpdGlvblxuICAgICAgICAgIHIgPSBrZWVwV2l0aGluKE1hdGguY2VpbChoc2IucyAqIDAuNzUpLCAwLCBncmlkLmhlaWdodCgpIC8gMik7XG4gICAgICAgICAgcGhpID0gaHNiLmggKiBNYXRoLlBJIC8gMTgwO1xuICAgICAgICAgIHggPSBrZWVwV2l0aGluKDc1IC0gTWF0aC5jb3MocGhpKSAqIHIsIDAsIGdyaWQud2lkdGgoKSk7XG4gICAgICAgICAgeSA9IGtlZXBXaXRoaW4oNzUgLSBNYXRoLnNpbihwaGkpICogciwgMCwgZ3JpZC5oZWlnaHQoKSk7XG4gICAgICAgICAgZ3JpZFBpY2tlci5jc3Moe1xuICAgICAgICAgICAgdG9wOiB5ICsgJ3B4JyxcbiAgICAgICAgICAgIGxlZnQ6IHggKyAncHgnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBTZXQgc2xpZGVyIHBvc2l0aW9uXG4gICAgICAgICAgeSA9IDE1MCAtIChoc2IuYiAvICgxMDAgLyBncmlkLmhlaWdodCgpKSk7XG4gICAgICAgICAgaWYoIGhleCA9PT0gJycgKSB5ID0gMDtcbiAgICAgICAgICBzbGlkZXJQaWNrZXIuY3NzKCd0b3AnLCB5ICsgJ3B4Jyk7XG5cbiAgICAgICAgICAvLyBVcGRhdGUgcGFuZWwgY29sb3JcbiAgICAgICAgICBzbGlkZXIuY3NzKCdiYWNrZ3JvdW5kQ29sb3InLCBoc2IyaGV4KHsgaDogaHNiLmgsIHM6IGhzYi5zLCBiOiAxMDAgfSkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3NhdHVyYXRpb24nOlxuICAgICAgICAgIC8vIFNldCBncmlkIHBvc2l0aW9uXG4gICAgICAgICAgeCA9IGtlZXBXaXRoaW4oKDUgKiBoc2IuaCkgLyAxMiwgMCwgMTUwKTtcbiAgICAgICAgICB5ID0ga2VlcFdpdGhpbihncmlkLmhlaWdodCgpIC0gTWF0aC5jZWlsKGhzYi5iIC8gKDEwMCAvIGdyaWQuaGVpZ2h0KCkpKSwgMCwgZ3JpZC5oZWlnaHQoKSk7XG4gICAgICAgICAgZ3JpZFBpY2tlci5jc3Moe1xuICAgICAgICAgICAgdG9wOiB5ICsgJ3B4JyxcbiAgICAgICAgICAgIGxlZnQ6IHggKyAncHgnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBTZXQgc2xpZGVyIHBvc2l0aW9uXG4gICAgICAgICAgeSA9IGtlZXBXaXRoaW4oc2xpZGVyLmhlaWdodCgpIC0gKGhzYi5zICogKHNsaWRlci5oZWlnaHQoKSAvIDEwMCkpLCAwLCBzbGlkZXIuaGVpZ2h0KCkpO1xuICAgICAgICAgIHNsaWRlclBpY2tlci5jc3MoJ3RvcCcsIHkgKyAncHgnKTtcblxuICAgICAgICAgIC8vIFVwZGF0ZSBVSVxuICAgICAgICAgIHNsaWRlci5jc3MoJ2JhY2tncm91bmRDb2xvcicsIGhzYjJoZXgoeyBoOiBoc2IuaCwgczogMTAwLCBiOiBoc2IuYiB9KSk7XG4gICAgICAgICAgbWluaWNvbG9ycy5maW5kKCcubWluaWNvbG9ycy1ncmlkLWlubmVyJykuY3NzKCdvcGFjaXR5JywgaHNiLnMgLyAxMDApO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2JyaWdodG5lc3MnOlxuICAgICAgICAgIC8vIFNldCBncmlkIHBvc2l0aW9uXG4gICAgICAgICAgeCA9IGtlZXBXaXRoaW4oKDUgKiBoc2IuaCkgLyAxMiwgMCwgMTUwKTtcbiAgICAgICAgICB5ID0ga2VlcFdpdGhpbihncmlkLmhlaWdodCgpIC0gTWF0aC5jZWlsKGhzYi5zIC8gKDEwMCAvIGdyaWQuaGVpZ2h0KCkpKSwgMCwgZ3JpZC5oZWlnaHQoKSk7XG4gICAgICAgICAgZ3JpZFBpY2tlci5jc3Moe1xuICAgICAgICAgICAgdG9wOiB5ICsgJ3B4JyxcbiAgICAgICAgICAgIGxlZnQ6IHggKyAncHgnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBTZXQgc2xpZGVyIHBvc2l0aW9uXG4gICAgICAgICAgeSA9IGtlZXBXaXRoaW4oc2xpZGVyLmhlaWdodCgpIC0gKGhzYi5iICogKHNsaWRlci5oZWlnaHQoKSAvIDEwMCkpLCAwLCBzbGlkZXIuaGVpZ2h0KCkpO1xuICAgICAgICAgIHNsaWRlclBpY2tlci5jc3MoJ3RvcCcsIHkgKyAncHgnKTtcblxuICAgICAgICAgIC8vIFVwZGF0ZSBVSVxuICAgICAgICAgIHNsaWRlci5jc3MoJ2JhY2tncm91bmRDb2xvcicsIGhzYjJoZXgoeyBoOiBoc2IuaCwgczogaHNiLnMsIGI6IDEwMCB9KSk7XG4gICAgICAgICAgbWluaWNvbG9ycy5maW5kKCcubWluaWNvbG9ycy1ncmlkLWlubmVyJykuY3NzKCdvcGFjaXR5JywgMSAtIChoc2IuYiAvIDEwMCkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gU2V0IGdyaWQgcG9zaXRpb25cbiAgICAgICAgICB4ID0ga2VlcFdpdGhpbihNYXRoLmNlaWwoaHNiLnMgLyAoMTAwIC8gZ3JpZC53aWR0aCgpKSksIDAsIGdyaWQud2lkdGgoKSk7XG4gICAgICAgICAgeSA9IGtlZXBXaXRoaW4oZ3JpZC5oZWlnaHQoKSAtIE1hdGguY2VpbChoc2IuYiAvICgxMDAgLyBncmlkLmhlaWdodCgpKSksIDAsIGdyaWQuaGVpZ2h0KCkpO1xuICAgICAgICAgIGdyaWRQaWNrZXIuY3NzKHtcbiAgICAgICAgICAgIHRvcDogeSArICdweCcsXG4gICAgICAgICAgICBsZWZ0OiB4ICsgJ3B4J1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gU2V0IHNsaWRlciBwb3NpdGlvblxuICAgICAgICAgIHkgPSBrZWVwV2l0aGluKHNsaWRlci5oZWlnaHQoKSAtIChoc2IuaCAvICgzNjAgLyBzbGlkZXIuaGVpZ2h0KCkpKSwgMCwgc2xpZGVyLmhlaWdodCgpKTtcbiAgICAgICAgICBzbGlkZXJQaWNrZXIuY3NzKCd0b3AnLCB5ICsgJ3B4Jyk7XG5cbiAgICAgICAgICAvLyBVcGRhdGUgcGFuZWwgY29sb3JcbiAgICAgICAgICBncmlkLmNzcygnYmFja2dyb3VuZENvbG9yJywgaHNiMmhleCh7IGg6IGhzYi5oLCBzOiAxMDAsIGI6IDEwMCB9KSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgIH1cblxuICAgICAgLy8gRmlyZSBjaGFuZ2UgZXZlbnQsIGJ1dCBvbmx5IGlmIG1pbmljb2xvcnMgaXMgZnVsbHkgaW5pdGlhbGl6ZWRcbiAgICAgIGlmKCBpbnB1dC5kYXRhKCdtaW5pY29sb3JzLWluaXRpYWxpemVkJykgKSB7XG4gICAgICAgIGRvQ2hhbmdlKGlucHV0LCB2YWx1ZSwgb3BhY2l0eSk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICAvLyBSdW5zIHRoZSBjaGFuZ2UgYW5kIGNoYW5nZURlbGF5IGNhbGxiYWNrc1xuICAgIGZ1bmN0aW9uIGRvQ2hhbmdlKGlucHV0LCB2YWx1ZSwgb3BhY2l0eSkge1xuXG4gICAgICB2YXIgc2V0dGluZ3MgPSBpbnB1dC5kYXRhKCdtaW5pY29sb3JzLXNldHRpbmdzJyksXG4gICAgICAgIGxhc3RDaGFuZ2UgPSBpbnB1dC5kYXRhKCdtaW5pY29sb3JzLWxhc3RDaGFuZ2UnKSxcbiAgICAgICAgb2JqLFxuICAgICAgICBzZWwsXG4gICAgICAgIGk7XG5cbiAgICAgIC8vIE9ubHkgcnVuIGlmIGl0IGFjdHVhbGx5IGNoYW5nZWRcbiAgICAgIGlmKCAhbGFzdENoYW5nZSB8fCBsYXN0Q2hhbmdlLnZhbHVlICE9PSB2YWx1ZSB8fCBsYXN0Q2hhbmdlLm9wYWNpdHkgIT09IG9wYWNpdHkgKSB7XG5cbiAgICAgICAgLy8gUmVtZW1iZXIgbGFzdC1jaGFuZ2VkIHZhbHVlXG4gICAgICAgIGlucHV0LmRhdGEoJ21pbmljb2xvcnMtbGFzdENoYW5nZScsIHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgb3BhY2l0eTogb3BhY2l0eVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDaGVjayBhbmQgc2VsZWN0IGFwcGxpY2FibGUgc3dhdGNoXG4gICAgICAgIGlmIChzZXR0aW5ncy5zd2F0Y2hlcyAmJiBzZXR0aW5ncy5zd2F0Y2hlcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICBpZighaXNSZ2IodmFsdWUpKSB7XG4gICAgICAgICAgICBvYmogPSBoZXgycmdiKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmogPSBwYXJzZVJnYih2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbCA9IC0xO1xuICAgICAgICAgIGZvcihpID0gMDsgaSA8IHNldHRpbmdzLnN3YXRjaGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAob2JqLnIgPT09IHNldHRpbmdzLnN3YXRjaGVzW2ldLnIgJiYgb2JqLmcgPT09IHNldHRpbmdzLnN3YXRjaGVzW2ldLmcgJiYgb2JqLmIgPT09IHNldHRpbmdzLnN3YXRjaGVzW2ldLmIgJiYgb2JqLmEgPT09IHNldHRpbmdzLnN3YXRjaGVzW2ldLmEpIHtcbiAgICAgICAgICAgICAgc2VsID0gaTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW5wdXQucGFyZW50KCkuZmluZCgnLm1pbmljb2xvcnMtc3dhdGNoZXMgLm1pbmljb2xvcnMtc3dhdGNoJykucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgaWYgKGkgIT09IC0xKSB7XG4gICAgICAgICAgICBpbnB1dC5wYXJlbnQoKS5maW5kKCcubWluaWNvbG9ycy1zd2F0Y2hlcyAubWluaWNvbG9ycy1zd2F0Y2gnKS5lcShpKS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJlIGNoYW5nZSBldmVudFxuICAgICAgICBpZiggc2V0dGluZ3MuY2hhbmdlICkge1xuICAgICAgICAgIGlmKCBzZXR0aW5ncy5jaGFuZ2VEZWxheSApIHtcbiAgICAgICAgICAgIC8vIENhbGwgYWZ0ZXIgYSBkZWxheVxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGlucHV0LmRhdGEoJ21pbmljb2xvcnMtY2hhbmdlVGltZW91dCcpKTtcbiAgICAgICAgICAgIGlucHV0LmRhdGEoJ21pbmljb2xvcnMtY2hhbmdlVGltZW91dCcsIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBzZXR0aW5ncy5jaGFuZ2UuY2FsbChpbnB1dC5nZXQoMCksIHZhbHVlLCBvcGFjaXR5KTtcbiAgICAgICAgICAgIH0sIHNldHRpbmdzLmNoYW5nZURlbGF5KSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIENhbGwgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIHNldHRpbmdzLmNoYW5nZS5jYWxsKGlucHV0LmdldCgwKSwgdmFsdWUsIG9wYWNpdHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbnB1dC50cmlnZ2VyKCdjaGFuZ2UnKS50cmlnZ2VyKCdpbnB1dCcpO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGVzIGFuIFJHQihBKSBvYmplY3QgYmFzZWQgb24gdGhlIGlucHV0J3MgdmFsdWVcbiAgICBmdW5jdGlvbiByZ2JPYmplY3QoaW5wdXQpIHtcbiAgICAgIHZhciBoZXggPSBwYXJzZUhleCgkKGlucHV0KS52YWwoKSwgdHJ1ZSksXG4gICAgICAgIHJnYiA9IGhleDJyZ2IoaGV4KSxcbiAgICAgICAgb3BhY2l0eSA9ICQoaW5wdXQpLmF0dHIoJ2RhdGEtb3BhY2l0eScpO1xuICAgICAgaWYoICFyZ2IgKSByZXR1cm4gbnVsbDtcbiAgICAgIGlmKCBvcGFjaXR5ICE9PSB1bmRlZmluZWQgKSAkLmV4dGVuZChyZ2IsIHsgYTogcGFyc2VGbG9hdChvcGFjaXR5KSB9KTtcbiAgICAgIHJldHVybiByZ2I7XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGVzIGFuIFJHQihBKSBzdHJpbmcgYmFzZWQgb24gdGhlIGlucHV0J3MgdmFsdWVcbiAgICBmdW5jdGlvbiByZ2JTdHJpbmcoaW5wdXQsIGFscGhhKSB7XG4gICAgICB2YXIgaGV4ID0gcGFyc2VIZXgoJChpbnB1dCkudmFsKCksIHRydWUpLFxuICAgICAgICByZ2IgPSBoZXgycmdiKGhleCksXG4gICAgICAgIG9wYWNpdHkgPSAkKGlucHV0KS5hdHRyKCdkYXRhLW9wYWNpdHknKTtcbiAgICAgIGlmKCAhcmdiICkgcmV0dXJuIG51bGw7XG4gICAgICBpZiggb3BhY2l0eSA9PT0gdW5kZWZpbmVkICkgb3BhY2l0eSA9IDE7XG4gICAgICBpZiggYWxwaGEgKSB7XG4gICAgICAgIHJldHVybiAncmdiYSgnICsgcmdiLnIgKyAnLCAnICsgcmdiLmcgKyAnLCAnICsgcmdiLmIgKyAnLCAnICsgcGFyc2VGbG9hdChvcGFjaXR5KSArICcpJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAncmdiKCcgKyByZ2IuciArICcsICcgKyByZ2IuZyArICcsICcgKyByZ2IuYiArICcpJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0cyB0byB0aGUgbGV0dGVyIGNhc2Ugc3BlY2lmaWVkIGluIHNldHRpbmdzXG4gICAgZnVuY3Rpb24gY29udmVydENhc2Uoc3RyaW5nLCBsZXR0ZXJDYXNlKSB7XG4gICAgICByZXR1cm4gbGV0dGVyQ2FzZSA9PT0gJ3VwcGVyY2FzZScgPyBzdHJpbmcudG9VcHBlckNhc2UoKSA6IHN0cmluZy50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8vIFBhcnNlcyBhIHN0cmluZyBhbmQgcmV0dXJucyBhIHZhbGlkIGhleCBzdHJpbmcgd2hlbiBwb3NzaWJsZVxuICAgIGZ1bmN0aW9uIHBhcnNlSGV4KHN0cmluZywgZXhwYW5kKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXiMvZywgJycpO1xuICAgICAgaWYoICFzdHJpbmcubWF0Y2goL15bQS1GMC05XXszLDZ9L2lnKSApIHJldHVybiAnJztcbiAgICAgIGlmKCBzdHJpbmcubGVuZ3RoICE9PSAzICYmIHN0cmluZy5sZW5ndGggIT09IDYgKSByZXR1cm4gJyc7XG4gICAgICBpZiggc3RyaW5nLmxlbmd0aCA9PT0gMyAmJiBleHBhbmQgKSB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZ1swXSArIHN0cmluZ1swXSArIHN0cmluZ1sxXSArIHN0cmluZ1sxXSArIHN0cmluZ1syXSArIHN0cmluZ1syXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnIycgKyBzdHJpbmc7XG4gICAgfVxuXG4gICAgLy8gUGFyc2VzIGEgc3RyaW5nIGFuZCByZXR1cm5zIGEgdmFsaWQgUkdCKEEpIHN0cmluZyB3aGVuIHBvc3NpYmxlXG4gICAgZnVuY3Rpb24gcGFyc2VSZ2Ioc3RyaW5nLCBvYmopIHtcblxuICAgICAgdmFyIHZhbHVlcyA9IHN0cmluZy5yZXBsYWNlKC9bXlxcZCwuXS9nLCAnJyksXG4gICAgICAgIHJnYmEgPSB2YWx1ZXMuc3BsaXQoJywnKTtcblxuICAgICAgcmdiYVswXSA9IGtlZXBXaXRoaW4ocGFyc2VJbnQocmdiYVswXSwgMTApLCAwLCAyNTUpO1xuICAgICAgcmdiYVsxXSA9IGtlZXBXaXRoaW4ocGFyc2VJbnQocmdiYVsxXSwgMTApLCAwLCAyNTUpO1xuICAgICAgcmdiYVsyXSA9IGtlZXBXaXRoaW4ocGFyc2VJbnQocmdiYVsyXSwgMTApLCAwLCAyNTUpO1xuICAgICAgaWYoIHJnYmFbM10gKSB7XG4gICAgICAgIHJnYmFbM10gPSBrZWVwV2l0aGluKHBhcnNlRmxvYXQocmdiYVszXSwgMTApLCAwLCAxKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIFJHQkEgb2JqZWN0XG4gICAgICBpZiggb2JqICkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHI6IHJnYmFbMF0sXG4gICAgICAgICAgZzogcmdiYVsxXSxcbiAgICAgICAgICBiOiByZ2JhWzJdLFxuICAgICAgICAgIGE6IHJnYmFbM10gPyByZ2JhWzNdIDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gUkdCQSBzdHJpbmdcbiAgICAgIGlmKCB0eXBlb2YocmdiYVszXSkgIT09ICd1bmRlZmluZWQnICYmIHJnYmFbM10gPD0gMSApIHtcbiAgICAgICAgcmV0dXJuICdyZ2JhKCcgKyByZ2JhWzBdICsgJywgJyArIHJnYmFbMV0gKyAnLCAnICsgcmdiYVsyXSArICcsICcgKyByZ2JhWzNdICsgJyknO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdyZ2IoJyArIHJnYmFbMF0gKyAnLCAnICsgcmdiYVsxXSArICcsICcgKyByZ2JhWzJdICsgJyknO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gUGFyc2VzIGEgc3RyaW5nIGFuZCByZXR1cm5zIGEgdmFsaWQgY29sb3Igc3RyaW5nIHdoZW4gcG9zc2libGVcbiAgICBmdW5jdGlvbiBwYXJzZUlucHV0KHN0cmluZywgZXhwYW5kKSB7XG4gICAgICBpZiggaXNSZ2Ioc3RyaW5nKSApIHtcbiAgICAgICAgLy8gUmV0dXJucyBhIHZhbGlkIHJnYihhKSBzdHJpbmdcbiAgICAgICAgcmV0dXJuIHBhcnNlUmdiKHN0cmluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyc2VIZXgoc3RyaW5nLCBleHBhbmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEtlZXBzIHZhbHVlIHdpdGhpbiBtaW4gYW5kIG1heFxuICAgIGZ1bmN0aW9uIGtlZXBXaXRoaW4odmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgICBpZiggdmFsdWUgPCBtaW4gKSB2YWx1ZSA9IG1pbjtcbiAgICAgIGlmKCB2YWx1ZSA+IG1heCApIHZhbHVlID0gbWF4O1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8vIENoZWNrcyBpZiBhIHN0cmluZyBpcyBhIHZhbGlkIFJHQihBKSBzdHJpbmdcbiAgICBmdW5jdGlvbiBpc1JnYihzdHJpbmcpIHtcbiAgICAgIHZhciByZ2IgPSBzdHJpbmcubWF0Y2goL15yZ2JhP1tcXHMrXT9cXChbXFxzK10/KFxcZCspW1xccytdPyxbXFxzK10/KFxcZCspW1xccytdPyxbXFxzK10/KFxcZCspW1xccytdPy9pKTtcbiAgICAgIHJldHVybiAocmdiICYmIHJnYi5sZW5ndGggPT09IDQpID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEZ1bmN0aW9uIHRvIGdldCBhbHBoYSBmcm9tIGEgUkdCKEEpIHN0cmluZ1xuICAgIGZ1bmN0aW9uIGdldEFscGhhKHJnYmEpIHtcbiAgICAgIHJnYmEgPSByZ2JhLm1hdGNoKC9ecmdiYT9bXFxzK10/XFwoW1xccytdPyhcXGQrKVtcXHMrXT8sW1xccytdPyhcXGQrKVtcXHMrXT8sW1xccytdPyhcXGQrKVtcXHMrXT8sW1xccytdPyhcXGQrKFxcLlxcZHsxLDJ9KT98XFwuXFxkezEsMn0pW1xccytdPy9pKTtcbiAgICAgIHJldHVybiAocmdiYSAmJiByZ2JhLmxlbmd0aCA9PT0gNikgPyByZ2JhWzRdIDogJzEnO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnRzIGFuIEhTQiBvYmplY3QgdG8gYW4gUkdCIG9iamVjdFxuICAgIGZ1bmN0aW9uIGhzYjJyZ2IoaHNiKSB7XG4gICAgICB2YXIgcmdiID0ge307XG4gICAgICB2YXIgaCA9IE1hdGgucm91bmQoaHNiLmgpO1xuICAgICAgdmFyIHMgPSBNYXRoLnJvdW5kKGhzYi5zICogMjU1IC8gMTAwKTtcbiAgICAgIHZhciB2ID0gTWF0aC5yb3VuZChoc2IuYiAqIDI1NSAvIDEwMCk7XG4gICAgICBpZihzID09PSAwKSB7XG4gICAgICAgIHJnYi5yID0gcmdiLmcgPSByZ2IuYiA9IHY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdDEgPSB2O1xuICAgICAgICB2YXIgdDIgPSAoMjU1IC0gcykgKiB2IC8gMjU1O1xuICAgICAgICB2YXIgdDMgPSAodDEgLSB0MikgKiAoaCAlIDYwKSAvIDYwO1xuICAgICAgICBpZiggaCA9PT0gMzYwICkgaCA9IDA7XG4gICAgICAgIGlmKCBoIDwgNjAgKSB7IHJnYi5yID0gdDE7IHJnYi5iID0gdDI7IHJnYi5nID0gdDIgKyB0MzsgfVxuICAgICAgICBlbHNlIGlmKCBoIDwgMTIwICkge3JnYi5nID0gdDE7IHJnYi5iID0gdDI7IHJnYi5yID0gdDEgLSB0MzsgfVxuICAgICAgICBlbHNlIGlmKCBoIDwgMTgwICkge3JnYi5nID0gdDE7IHJnYi5yID0gdDI7IHJnYi5iID0gdDIgKyB0MzsgfVxuICAgICAgICBlbHNlIGlmKCBoIDwgMjQwICkge3JnYi5iID0gdDE7IHJnYi5yID0gdDI7IHJnYi5nID0gdDEgLSB0MzsgfVxuICAgICAgICBlbHNlIGlmKCBoIDwgMzAwICkge3JnYi5iID0gdDE7IHJnYi5nID0gdDI7IHJnYi5yID0gdDIgKyB0MzsgfVxuICAgICAgICBlbHNlIGlmKCBoIDwgMzYwICkge3JnYi5yID0gdDE7IHJnYi5nID0gdDI7IHJnYi5iID0gdDEgLSB0MzsgfVxuICAgICAgICBlbHNlIHsgcmdiLnIgPSAwOyByZ2IuZyA9IDA7IHJnYi5iID0gMDsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcjogTWF0aC5yb3VuZChyZ2IuciksXG4gICAgICAgIGc6IE1hdGgucm91bmQocmdiLmcpLFxuICAgICAgICBiOiBNYXRoLnJvdW5kKHJnYi5iKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0cyBhbiBSR0Igc3RyaW5nIHRvIGEgaGV4IHN0cmluZ1xuICAgIGZ1bmN0aW9uIHJnYlN0cmluZzJoZXgocmdiKXtcbiAgICAgIHJnYiA9IHJnYi5tYXRjaCgvXnJnYmE/W1xccytdP1xcKFtcXHMrXT8oXFxkKylbXFxzK10/LFtcXHMrXT8oXFxkKylbXFxzK10/LFtcXHMrXT8oXFxkKylbXFxzK10/L2kpO1xuICAgICAgcmV0dXJuIChyZ2IgJiYgcmdiLmxlbmd0aCA9PT0gNCkgPyAnIycgK1xuICAgICAgKCcwJyArIHBhcnNlSW50KHJnYlsxXSwxMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMikgK1xuICAgICAgKCcwJyArIHBhcnNlSW50KHJnYlsyXSwxMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMikgK1xuICAgICAgKCcwJyArIHBhcnNlSW50KHJnYlszXSwxMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMikgOiAnJztcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0cyBhbiBSR0Igb2JqZWN0IHRvIGEgaGV4IHN0cmluZ1xuICAgIGZ1bmN0aW9uIHJnYjJoZXgocmdiKSB7XG4gICAgICB2YXIgaGV4ID0gW1xuICAgICAgICByZ2Iuci50b1N0cmluZygxNiksXG4gICAgICAgIHJnYi5nLnRvU3RyaW5nKDE2KSxcbiAgICAgICAgcmdiLmIudG9TdHJpbmcoMTYpXG4gICAgICBdO1xuICAgICAgJC5lYWNoKGhleCwgZnVuY3Rpb24obnIsIHZhbCkge1xuICAgICAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkgaGV4W25yXSA9ICcwJyArIHZhbDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICcjJyArIGhleC5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0cyBhbiBIU0Igb2JqZWN0IHRvIGEgaGV4IHN0cmluZ1xuICAgIGZ1bmN0aW9uIGhzYjJoZXgoaHNiKSB7XG4gICAgICByZXR1cm4gcmdiMmhleChoc2IycmdiKGhzYikpO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnRzIGEgaGV4IHN0cmluZyB0byBhbiBIU0Igb2JqZWN0XG4gICAgZnVuY3Rpb24gaGV4MmhzYihoZXgpIHtcbiAgICAgIHZhciBoc2IgPSByZ2IyaHNiKGhleDJyZ2IoaGV4KSk7XG4gICAgICBpZiggaHNiLnMgPT09IDAgKSBoc2IuaCA9IDM2MDtcbiAgICAgIHJldHVybiBoc2I7XG4gICAgfVxuXG4gICAgLy8gQ29udmVydHMgYW4gUkdCIG9iamVjdCB0byBhbiBIU0Igb2JqZWN0XG4gICAgZnVuY3Rpb24gcmdiMmhzYihyZ2IpIHtcbiAgICAgIHZhciBoc2IgPSB7IGg6IDAsIHM6IDAsIGI6IDAgfTtcbiAgICAgIHZhciBtaW4gPSBNYXRoLm1pbihyZ2IuciwgcmdiLmcsIHJnYi5iKTtcbiAgICAgIHZhciBtYXggPSBNYXRoLm1heChyZ2IuciwgcmdiLmcsIHJnYi5iKTtcbiAgICAgIHZhciBkZWx0YSA9IG1heCAtIG1pbjtcbiAgICAgIGhzYi5iID0gbWF4O1xuICAgICAgaHNiLnMgPSBtYXggIT09IDAgPyAyNTUgKiBkZWx0YSAvIG1heCA6IDA7XG4gICAgICBpZiggaHNiLnMgIT09IDAgKSB7XG4gICAgICAgIGlmKCByZ2IuciA9PT0gbWF4ICkge1xuICAgICAgICAgIGhzYi5oID0gKHJnYi5nIC0gcmdiLmIpIC8gZGVsdGE7XG4gICAgICAgIH0gZWxzZSBpZiggcmdiLmcgPT09IG1heCApIHtcbiAgICAgICAgICBoc2IuaCA9IDIgKyAocmdiLmIgLSByZ2IucikgLyBkZWx0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoc2IuaCA9IDQgKyAocmdiLnIgLSByZ2IuZykgLyBkZWx0YTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaHNiLmggPSAtMTtcbiAgICAgIH1cbiAgICAgIGhzYi5oICo9IDYwO1xuICAgICAgaWYoIGhzYi5oIDwgMCApIHtcbiAgICAgICAgaHNiLmggKz0gMzYwO1xuICAgICAgfVxuICAgICAgaHNiLnMgKj0gMTAwLzI1NTtcbiAgICAgIGhzYi5iICo9IDEwMC8yNTU7XG4gICAgICByZXR1cm4gaHNiO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnRzIGEgaGV4IHN0cmluZyB0byBhbiBSR0Igb2JqZWN0XG4gICAgZnVuY3Rpb24gaGV4MnJnYihoZXgpIHtcbiAgICAgIGhleCA9IHBhcnNlSW50KCgoaGV4LmluZGV4T2YoJyMnKSA+IC0xKSA/IGhleC5zdWJzdHJpbmcoMSkgOiBoZXgpLCAxNik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAvKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG4gICAgICAgIHI6IGhleCA+PiAxNixcbiAgICAgICAgZzogKGhleCAmIDB4MDBGRjAwKSA+PiA4LFxuICAgICAgICBiOiAoaGV4ICYgMHgwMDAwRkYpXG4gICAgICAgIC8qIGpzaGludCBpZ25vcmU6ZW5kICovXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBldmVudHNcbiAgICAkKGRvY3VtZW50KVxuICAgICAgLy8gSGlkZSBvbiBjbGlja3Mgb3V0c2lkZSBvZiB0aGUgY29udHJvbFxuICAgICAgLm9uKCdtb3VzZWRvd24ubWluaWNvbG9ycyB0b3VjaHN0YXJ0Lm1pbmljb2xvcnMnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBpZiggISQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCkuYWRkKGV2ZW50LnRhcmdldCkuaGFzQ2xhc3MoJ21pbmljb2xvcnMnKSApIHtcbiAgICAgICAgICBoaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAvLyBTdGFydCBtb3ZpbmdcbiAgICAgIC5vbignbW91c2Vkb3duLm1pbmljb2xvcnMgdG91Y2hzdGFydC5taW5pY29sb3JzJywgJy5taW5pY29sb3JzLWdyaWQsIC5taW5pY29sb3JzLXNsaWRlciwgLm1pbmljb2xvcnMtb3BhY2l0eS1zbGlkZXInLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gJCh0aGlzKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgJChkb2N1bWVudCkuZGF0YSgnbWluaWNvbG9ycy10YXJnZXQnLCB0YXJnZXQpO1xuICAgICAgICBtb3ZlKHRhcmdldCwgZXZlbnQsIHRydWUpO1xuICAgICAgfSlcbiAgICAgIC8vIE1vdmUgcGlja2Vyc1xuICAgICAgLm9uKCdtb3VzZW1vdmUubWluaWNvbG9ycyB0b3VjaG1vdmUubWluaWNvbG9ycycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSAkKGRvY3VtZW50KS5kYXRhKCdtaW5pY29sb3JzLXRhcmdldCcpO1xuICAgICAgICBpZiggdGFyZ2V0ICkgbW92ZSh0YXJnZXQsIGV2ZW50KTtcbiAgICAgIH0pXG4gICAgICAvLyBTdG9wIG1vdmluZ1xuICAgICAgLm9uKCdtb3VzZXVwLm1pbmljb2xvcnMgdG91Y2hlbmQubWluaWNvbG9ycycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAkKHRoaXMpLnJlbW92ZURhdGEoJ21pbmljb2xvcnMtdGFyZ2V0Jyk7XG4gICAgICB9KVxuICAgICAgLy8gU2VsZWN0ZWQgYSBzd2F0Y2hcbiAgICAgIC5vbignY2xpY2subWluaWNvbG9ycycsICcubWluaWNvbG9ycy1zd2F0Y2hlcyBsaScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMpLCBpbnB1dCA9IHRhcmdldC5wYXJlbnRzKCcubWluaWNvbG9ycycpLmZpbmQoJy5taW5pY29sb3JzLWlucHV0JyksIGNvbG9yID0gdGFyZ2V0LmRhdGEoJ3N3YXRjaC1jb2xvcicpO1xuICAgICAgICB1cGRhdGVJbnB1dChpbnB1dCwgY29sb3IsIGdldEFscGhhKGNvbG9yKSk7XG4gICAgICAgIHVwZGF0ZUZyb21JbnB1dChpbnB1dCk7XG4gICAgICB9KVxuICAgICAgLy8gU2hvdyBwYW5lbCB3aGVuIHN3YXRjaCBpcyBjbGlja2VkXG4gICAgICAub24oJ21vdXNlZG93bi5taW5pY29sb3JzIHRvdWNoc3RhcnQubWluaWNvbG9ycycsICcubWluaWNvbG9ycy1pbnB1dC1zd2F0Y2gnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgaW5wdXQgPSAkKHRoaXMpLnBhcmVudCgpLmZpbmQoJy5taW5pY29sb3JzLWlucHV0Jyk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmKCBpbnB1dC5wYXJlbnQoKS5maW5kKCcubWluaWNvbG9ycy1wYW5lbCcpLmNzcyhcImRpc3BsYXlcIikgIT09IFwibm9uZVwiKXtcbiAgICAgICAgICAvL3RvZG9cbiAgICAgICAgICAvL2hpZGUoKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgc2hvdyhpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAvLyBTaG93IG9uIGZvY3VzXG4gICAgICAub24oJ2ZvY3VzLm1pbmljb2xvcnMnLCAnLm1pbmljb2xvcnMtaW5wdXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gJCh0aGlzKTtcbiAgICAgICAgaWYoICFpbnB1dC5kYXRhKCdtaW5pY29sb3JzLWluaXRpYWxpemVkJykgKSByZXR1cm47XG4gICAgICAgIHNob3coaW5wdXQpO1xuICAgICAgfSlcbiAgICAgIC8vIFVwZGF0ZSB2YWx1ZSBvbiBibHVyXG4gICAgICAub24oJ2JsdXIubWluaWNvbG9ycycsICcubWluaWNvbG9ycy1pbnB1dCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaW5wdXQgPSAkKHRoaXMpLFxuICAgICAgICAgIHNldHRpbmdzID0gaW5wdXQuZGF0YSgnbWluaWNvbG9ycy1zZXR0aW5ncycpLFxuICAgICAgICAgIGtleXdvcmRzLFxuICAgICAgICAgIGhleCxcbiAgICAgICAgICByZ2JhLFxuICAgICAgICAgIHN3YXRjaE9wYWNpdHksXG4gICAgICAgICAgdmFsdWU7XG5cbiAgICAgICAgaWYoICFpbnB1dC5kYXRhKCdtaW5pY29sb3JzLWluaXRpYWxpemVkJykgKSByZXR1cm47XG5cbiAgICAgICAgLy8gR2V0IGFycmF5IG9mIGxvd2VyY2FzZSBrZXl3b3Jkc1xuICAgICAgICBrZXl3b3JkcyA9ICFzZXR0aW5ncy5rZXl3b3JkcyA/IFtdIDogJC5tYXAoc2V0dGluZ3Mua2V5d29yZHMuc3BsaXQoJywnKSwgZnVuY3Rpb24oYSkge1xuICAgICAgICAgIHJldHVybiAkLnRyaW0oYS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU2V0IGNvbG9yIHN0cmluZ1xuICAgICAgICBpZiggaW5wdXQudmFsKCkgIT09ICcnICYmICQuaW5BcnJheShpbnB1dC52YWwoKS50b0xvd2VyQ2FzZSgpLCBrZXl3b3JkcykgPiAtMSApIHtcbiAgICAgICAgICB2YWx1ZSA9IGlucHV0LnZhbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEdldCBSR0JBIHZhbHVlcyBmb3IgZWFzeSBjb252ZXJzaW9uXG4gICAgICAgICAgaWYoIGlzUmdiKGlucHV0LnZhbCgpKSApIHtcbiAgICAgICAgICAgIHJnYmEgPSBwYXJzZVJnYihpbnB1dC52YWwoKSwgdHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhleCA9IHBhcnNlSGV4KGlucHV0LnZhbCgpLCB0cnVlKTtcbiAgICAgICAgICAgIHJnYmEgPSBoZXggPyBoZXgycmdiKGhleCkgOiBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIENvbnZlcnQgdG8gZm9ybWF0XG4gICAgICAgICAgaWYoIHJnYmEgPT09IG51bGwgKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHNldHRpbmdzLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYoIHNldHRpbmdzLmZvcm1hdCA9PT0gJ3JnYicgKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHNldHRpbmdzLm9wYWNpdHkgP1xuICAgICAgICAgICAgICBwYXJzZVJnYigncmdiYSgnICsgcmdiYS5yICsgJywnICsgcmdiYS5nICsgJywnICsgcmdiYS5iICsgJywnICsgaW5wdXQuYXR0cignZGF0YS1vcGFjaXR5JykgKyAnKScpIDpcbiAgICAgICAgICAgICAgcGFyc2VSZ2IoJ3JnYignICsgcmdiYS5yICsgJywnICsgcmdiYS5nICsgJywnICsgcmdiYS5iICsgJyknKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSByZ2IyaGV4KHJnYmEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBzd2F0Y2ggb3BhY2l0eVxuICAgICAgICBzd2F0Y2hPcGFjaXR5ID0gc2V0dGluZ3Mub3BhY2l0eSA/IGlucHV0LmF0dHIoJ2RhdGEtb3BhY2l0eScpIDogMTtcbiAgICAgICAgaWYoIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICd0cmFuc3BhcmVudCcgKSBzd2F0Y2hPcGFjaXR5ID0gMDtcbiAgICAgICAgaW5wdXRcbiAgICAgICAgICAuY2xvc2VzdCgnLm1pbmljb2xvcnMnKVxuICAgICAgICAgIC5maW5kKCcubWluaWNvbG9ycy1pbnB1dC1zd2F0Y2ggPiBzcGFuJylcbiAgICAgICAgICAuY3NzKCdvcGFjaXR5Jywgc3dhdGNoT3BhY2l0eSk7XG5cbiAgICAgICAgLy8gU2V0IGlucHV0IHZhbHVlXG4gICAgICAgIGlucHV0LnZhbCh2YWx1ZSk7XG5cbiAgICAgICAgLy8gSXMgaXQgYmxhbms/XG4gICAgICAgIGlmKCBpbnB1dC52YWwoKSA9PT0gJycgKSBpbnB1dC52YWwocGFyc2VJbnB1dChzZXR0aW5ncy5kZWZhdWx0VmFsdWUsIHRydWUpKTtcblxuICAgICAgICAvLyBBZGp1c3QgY2FzZVxuICAgICAgICBpbnB1dC52YWwoIGNvbnZlcnRDYXNlKGlucHV0LnZhbCgpLCBzZXR0aW5ncy5sZXR0ZXJDYXNlKSApO1xuXG4gICAgICB9KVxuICAgICAgLy8gSGFuZGxlIGtleXByZXNzZXNcbiAgICAgIC5vbigna2V5ZG93bi5taW5pY29sb3JzJywgJy5taW5pY29sb3JzLWlucHV0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gJCh0aGlzKTtcbiAgICAgICAgaWYoICFpbnB1dC5kYXRhKCdtaW5pY29sb3JzLWluaXRpYWxpemVkJykgKSByZXR1cm47XG4gICAgICAgIHN3aXRjaChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgICAgY2FzZSA5OiAvLyB0YWJcbiAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTM6IC8vIGVudGVyXG4gICAgICAgICAgY2FzZSAyNzogLy8gZXNjXG4gICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICBpbnB1dC5ibHVyKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC8vIFVwZGF0ZSBvbiBrZXl1cFxuICAgICAgLm9uKCdrZXl1cC5taW5pY29sb3JzJywgJy5taW5pY29sb3JzLWlucHV0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpbnB1dCA9ICQodGhpcyk7XG4gICAgICAgIGlmKCAhaW5wdXQuZGF0YSgnbWluaWNvbG9ycy1pbml0aWFsaXplZCcpICkgcmV0dXJuO1xuICAgICAgICB1cGRhdGVGcm9tSW5wdXQoaW5wdXQsIHRydWUpO1xuICAgICAgfSlcbiAgICAgIC8vIFVwZGF0ZSBvbiBwYXN0ZVxuICAgICAgLm9uKCdwYXN0ZS5taW5pY29sb3JzJywgJy5taW5pY29sb3JzLWlucHV0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpbnB1dCA9ICQodGhpcyk7XG4gICAgICAgIGlmKCAhaW5wdXQuZGF0YSgnbWluaWNvbG9ycy1pbml0aWFsaXplZCcpICkgcmV0dXJuO1xuICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1cGRhdGVGcm9tSW5wdXQoaW5wdXQsIHRydWUpO1xuICAgICAgICB9LCAxKTtcbiAgICAgIH0pO1xuXG4gIH0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL3BsdWdpbnMvJC5taW5pY29sb3JzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiBGaWxlU2F2ZXIuanNcbiAqIEEgc2F2ZUFzKCkgRmlsZVNhdmVyIGltcGxlbWVudGF0aW9uLlxuICogMS4xLjIwMTUwNzE2XG4gKlxuICogQnkgRWxpIEdyZXksIGh0dHA6Ly9lbGlncmV5LmNvbVxuICogTGljZW5zZTogWDExL01JVFxuICogICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VsaWdyZXkvRmlsZVNhdmVyLmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWRcbiAqL1xuXG4vKmdsb2JhbCBzZWxmICovXG4vKmpzbGludCBiaXR3aXNlOiB0cnVlLCBpbmRlbnQ6IDQsIGxheGJyZWFrOiB0cnVlLCBsYXhjb21tYTogdHJ1ZSwgc21hcnR0YWJzOiB0cnVlLCBwbHVzcGx1czogdHJ1ZSAqL1xuXG4vKiEgQHNvdXJjZSBodHRwOi8vcHVybC5lbGlncmV5LmNvbS9naXRodWIvRmlsZVNhdmVyLmpzL2Jsb2IvbWFzdGVyL0ZpbGVTYXZlci5qcyAqL1xuXG5cblxudmFyIGlzTGlrZWx5Tm9kZSA9IHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnO1xuXG5cblxudmFyIHNhdmVBcyA9ICFpc0xpa2VseU5vZGUgJiYgIChmdW5jdGlvbih2aWV3KSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAvLyBJRSA8MTAgaXMgZXhwbGljaXRseSB1bnN1cHBvcnRlZFxuICAgICAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiAvTVNJRSBbMS05XVxcLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhclxuICAgICAgICAgICAgZG9jID0gdmlldy5kb2N1bWVudFxuICAgICAgICAvLyBvbmx5IGdldCBVUkwgd2hlbiBuZWNlc3NhcnkgaW4gY2FzZSBCbG9iLmpzIGhhc24ndCBvdmVycmlkZGVuIGl0IHlldFxuICAgICAgICAgICAgLCBnZXRfVVJMID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXcuVVJMIHx8IHZpZXcud2Via2l0VVJMIHx8IHZpZXc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAsIHNhdmVfbGluayA9IGRvYy5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsIFwiYVwiKVxuICAgICAgICAgICAgLCBjYW5fdXNlX3NhdmVfbGluayA9IFwiZG93bmxvYWRcIiBpbiBzYXZlX2xpbmtcbiAgICAgICAgICAgICwgY2xpY2sgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiKTtcbiAgICAgICAgICAgICAgICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLCB3ZWJraXRfcmVxX2ZzID0gdmlldy53ZWJraXRSZXF1ZXN0RmlsZVN5c3RlbVxuICAgICAgICAgICAgLCByZXFfZnMgPSB2aWV3LnJlcXVlc3RGaWxlU3lzdGVtIHx8IHdlYmtpdF9yZXFfZnMgfHwgdmlldy5tb3pSZXF1ZXN0RmlsZVN5c3RlbVxuICAgICAgICAgICAgLCB0aHJvd19vdXRzaWRlID0gZnVuY3Rpb24oZXgpIHtcbiAgICAgICAgICAgICAgICAodmlldy5zZXRJbW1lZGlhdGUgfHwgdmlldy5zZXRUaW1lb3V0KShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAsIGZvcmNlX3NhdmVhYmxlX3R5cGUgPSBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiXG4gICAgICAgICAgICAsIGZzX21pbl9zaXplID0gMFxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3NTI5NyNjNyBhbmRcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2VsaWdyZXkvRmlsZVNhdmVyLmpzL2NvbW1pdC80ODU5MzBhI2NvbW1pdGNvbW1lbnQtODc2ODA0N1xuICAgICAgICAvLyBmb3IgdGhlIHJlYXNvbmluZyBiZWhpbmQgdGhlIHRpbWVvdXQgYW5kIHJldm9jYXRpb24gZmxvd1xuICAgICAgICAgICAgLCBhcmJpdHJhcnlfcmV2b2tlX3RpbWVvdXQgPSA1MDAgLy8gaW4gbXNcbiAgICAgICAgICAgICwgcmV2b2tlID0gZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICAgICAgICAgIHZhciByZXZva2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZmlsZSA9PT0gXCJzdHJpbmdcIikgeyAvLyBmaWxlIGlzIGFuIG9iamVjdCBVUkxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldF9VUkwoKS5yZXZva2VPYmplY3RVUkwoZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGZpbGUgaXMgYSBGaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAodmlldy5jaHJvbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV2b2tlcigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQocmV2b2tlciwgYXJiaXRyYXJ5X3Jldm9rZV90aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAsIGRpc3BhdGNoID0gZnVuY3Rpb24oZmlsZXNhdmVyLCBldmVudF90eXBlcywgZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudF90eXBlcyA9IFtdLmNvbmNhdChldmVudF90eXBlcyk7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBldmVudF90eXBlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBmaWxlc2F2ZXJbXCJvblwiICsgZXZlbnRfdHlwZXNbaV1dO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbChmaWxlc2F2ZXIsIGV2ZW50IHx8IGZpbGVzYXZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93X291dHNpZGUoZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLCBhdXRvX2JvbSA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgICAgICAgICAgICAgICAvLyBwcmVwZW5kIEJPTSBmb3IgVVRGLTggWE1MIGFuZCB0ZXh0LyogdHlwZXMgKGluY2x1ZGluZyBIVE1MKVxuICAgICAgICAgICAgICAgIGlmICgvXlxccyooPzp0ZXh0XFwvXFxTKnxhcHBsaWNhdGlvblxcL3htbHxcXFMqXFwvXFxTKlxcK3htbClcXHMqOy4qY2hhcnNldFxccyo9XFxzKnV0Zi04L2kudGVzdChibG9iLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQmxvYihbXCJcXHVmZWZmXCIsIGJsb2JdLCB7dHlwZTogYmxvYi50eXBlfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBibG9iO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLCBGaWxlU2F2ZXIgPSBmdW5jdGlvbihibG9iLCBuYW1lLCBub19hdXRvX2JvbSkge1xuICAgICAgICAgICAgICAgIGlmICghbm9fYXV0b19ib20pIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvYiA9IGF1dG9fYm9tKGJsb2IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBGaXJzdCB0cnkgYS5kb3dubG9hZCwgdGhlbiB3ZWIgZmlsZXN5c3RlbSwgdGhlbiBvYmplY3QgVVJMc1xuICAgICAgICAgICAgICAgIHZhclxuICAgICAgICAgICAgICAgICAgICBmaWxlc2F2ZXIgPSB0aGlzXG4gICAgICAgICAgICAgICAgICAgICwgdHlwZSA9IGJsb2IudHlwZVxuICAgICAgICAgICAgICAgICAgICAsIGJsb2JfY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICwgb2JqZWN0X3VybFxuICAgICAgICAgICAgICAgICAgICAsIHRhcmdldF92aWV3XG4gICAgICAgICAgICAgICAgICAgICwgZGlzcGF0Y2hfYWxsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChmaWxlc2F2ZXIsIFwid3JpdGVzdGFydCBwcm9ncmVzcyB3cml0ZSB3cml0ZWVuZFwiLnNwbGl0KFwiIFwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBvbiBhbnkgZmlsZXN5cyBlcnJvcnMgcmV2ZXJ0IHRvIHNhdmluZyB3aXRoIG9iamVjdCBVUkxzXG4gICAgICAgICAgICAgICAgICAgICwgZnNfZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvbid0IGNyZWF0ZSBtb3JlIG9iamVjdCBVUkxzIHRoYW4gbmVlZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmxvYl9jaGFuZ2VkIHx8ICFvYmplY3RfdXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0X3VybCA9IGdldF9VUkwoKS5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0X3ZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfdmlldy5sb2NhdGlvbi5ocmVmID0gb2JqZWN0X3VybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld190YWIgPSB2aWV3Lm9wZW4ob2JqZWN0X3VybCwgXCJfYmxhbmtcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld190YWIgPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzYWZhcmkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9BcHBsZSBkbyBub3QgYWxsb3cgd2luZG93Lm9wZW4sIHNlZSBodHRwOi8vYml0Lmx5LzFrWmZmUklcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5sb2NhdGlvbi5ocmVmID0gb2JqZWN0X3VybFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaF9hbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldm9rZShvYmplY3RfdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAsIGFib3J0YWJsZSA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZXNhdmVyLnJlYWR5U3RhdGUgIT09IGZpbGVzYXZlci5ET05FKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAsIGNyZWF0ZV9pZl9ub3RfZm91bmQgPSB7Y3JlYXRlOiB0cnVlLCBleGNsdXNpdmU6IGZhbHNlfVxuICAgICAgICAgICAgICAgICAgICAsIHNsaWNlXG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5JTklUO1xuICAgICAgICAgICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBuYW1lID0gXCJkb3dubG9hZFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2FuX3VzZV9zYXZlX2xpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0X3VybCA9IGdldF9VUkwoKS5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgICAgICAgICAgICAgIHNhdmVfbGluay5ocmVmID0gb2JqZWN0X3VybDtcbiAgICAgICAgICAgICAgICAgICAgc2F2ZV9saW5rLmRvd25sb2FkID0gbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrKHNhdmVfbGluayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaF9hbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldm9rZShvYmplY3RfdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE9iamVjdCBhbmQgd2ViIGZpbGVzeXN0ZW0gVVJMcyBoYXZlIGEgcHJvYmxlbSBzYXZpbmcgaW4gR29vZ2xlIENocm9tZSB3aGVuXG4gICAgICAgICAgICAgICAgLy8gdmlld2VkIGluIGEgdGFiLCBzbyBJIGZvcmNlIHNhdmUgd2l0aCBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cbiAgICAgICAgICAgICAgICAvLyBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD05MTE1OFxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZTogR29vZ2xlIGVycmFudGx5IGNsb3NlZCA5MTE1OCwgSSBzdWJtaXR0ZWQgaXQgYWdhaW46XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM4OTY0MlxuICAgICAgICAgICAgICAgIGlmICh2aWV3LmNocm9tZSAmJiB0eXBlICYmIHR5cGUgIT09IGZvcmNlX3NhdmVhYmxlX3R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpY2UgPSBibG9iLnNsaWNlIHx8IGJsb2Iud2Via2l0U2xpY2U7XG4gICAgICAgICAgICAgICAgICAgIGJsb2IgPSBzbGljZS5jYWxsKGJsb2IsIDAsIGJsb2Iuc2l6ZSwgZm9yY2Vfc2F2ZWFibGVfdHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGJsb2JfY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFNpbmNlIEkgY2FuJ3QgYmUgc3VyZSB0aGF0IHRoZSBndWVzc2VkIG1lZGlhIHR5cGUgd2lsbCB0cmlnZ2VyIGEgZG93bmxvYWRcbiAgICAgICAgICAgICAgICAvLyBpbiBXZWJLaXQsIEkgYXBwZW5kIC5kb3dubG9hZCB0byB0aGUgZmlsZW5hbWUuXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTY1NDQwXG4gICAgICAgICAgICAgICAgaWYgKHdlYmtpdF9yZXFfZnMgJiYgbmFtZSAhPT0gXCJkb3dubG9hZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgKz0gXCIuZG93bmxvYWRcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IGZvcmNlX3NhdmVhYmxlX3R5cGUgfHwgd2Via2l0X3JlcV9mcykge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRfdmlldyA9IHZpZXc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcmVxX2ZzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZzX2Vycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnNfbWluX3NpemUgKz0gYmxvYi5zaXplO1xuICAgICAgICAgICAgICAgIHJlcV9mcyh2aWV3LlRFTVBPUkFSWSwgZnNfbWluX3NpemUsIGFib3J0YWJsZShmdW5jdGlvbihmcykge1xuICAgICAgICAgICAgICAgICAgICBmcy5yb290LmdldERpcmVjdG9yeShcInNhdmVkXCIsIGNyZWF0ZV9pZl9ub3RfZm91bmQsIGFib3J0YWJsZShmdW5jdGlvbihkaXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzYXZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyLmdldEZpbGUobmFtZSwgY3JlYXRlX2lmX25vdF9mb3VuZCwgYWJvcnRhYmxlKGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5jcmVhdGVXcml0ZXIoYWJvcnRhYmxlKGZ1bmN0aW9uKHdyaXRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVyLm9ud3JpdGVlbmQgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldF92aWV3LmxvY2F0aW9uLmhyZWYgPSBmaWxlLnRvVVJMKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXNhdmVyLnJlYWR5U3RhdGUgPSBmaWxlc2F2ZXIuRE9ORTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChmaWxlc2F2ZXIsIFwid3JpdGVlbmRcIiwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldm9rZShmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHdyaXRlci5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSAhPT0gZXJyb3IuQUJPUlRfRVJSKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZzX2Vycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwid3JpdGVzdGFydCBwcm9ncmVzcyB3cml0ZSBhYm9ydFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVyW1wib25cIiArIGV2ZW50XSA9IGZpbGVzYXZlcltcIm9uXCIgKyBldmVudF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlci53cml0ZShibG9iKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzYXZlci5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlci5hYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXNhdmVyLnJlYWR5U3RhdGUgPSBmaWxlc2F2ZXIuV1JJVElORztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGZzX2Vycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnNfZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpci5nZXRGaWxlKG5hbWUsIHtjcmVhdGU6IGZhbHNlfSwgYWJvcnRhYmxlKGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWxldGUgZmlsZSBpZiBpdCBhbHJlYWR5IGV4aXN0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGFib3J0YWJsZShmdW5jdGlvbihleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleC5jb2RlID09PSBleC5OT1RfRk9VTkRfRVJSKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmc19lcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSksIGZzX2Vycm9yKTtcbiAgICAgICAgICAgICAgICB9KSwgZnNfZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLCBGU19wcm90byA9IEZpbGVTYXZlci5wcm90b3R5cGVcbiAgICAgICAgICAgICwgc2F2ZUFzID0gZnVuY3Rpb24oYmxvYiwgbmFtZSwgbm9fYXV0b19ib20pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZpbGVTYXZlcihibG9iLCBuYW1lLCBub19hdXRvX2JvbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA7XG4gICAgICAgIC8vIElFIDEwKyAobmF0aXZlIHNhdmVBcylcbiAgICAgICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiYgbmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihibG9iLCBuYW1lLCBub19hdXRvX2JvbSkge1xuICAgICAgICAgICAgICAgIGlmICghbm9fYXV0b19ib20pIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvYiA9IGF1dG9fYm9tKGJsb2IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IoYmxvYiwgbmFtZSB8fCBcImRvd25sb2FkXCIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIEZTX3Byb3RvLmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZmlsZXNhdmVyID0gdGhpcztcbiAgICAgICAgICAgIGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XG4gICAgICAgICAgICBkaXNwYXRjaChmaWxlc2F2ZXIsIFwiYWJvcnRcIik7XG4gICAgICAgIH07XG4gICAgICAgIEZTX3Byb3RvLnJlYWR5U3RhdGUgPSBGU19wcm90by5JTklUID0gMDtcbiAgICAgICAgRlNfcHJvdG8uV1JJVElORyA9IDE7XG4gICAgICAgIEZTX3Byb3RvLkRPTkUgPSAyO1xuXG4gICAgICAgIEZTX3Byb3RvLmVycm9yID1cbiAgICAgICAgICAgIEZTX3Byb3RvLm9ud3JpdGVzdGFydCA9XG4gICAgICAgICAgICAgICAgRlNfcHJvdG8ub25wcm9ncmVzcyA9XG4gICAgICAgICAgICAgICAgICAgIEZTX3Byb3RvLm9ud3JpdGUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgRlNfcHJvdG8ub25hYm9ydCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRlNfcHJvdG8ub25lcnJvciA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZTX3Byb3RvLm9ud3JpdGVlbmQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbDtcblxuICAgICAgICByZXR1cm4gc2F2ZUFzO1xuICAgIH0oXG4gICAgICAgIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGZcbiAgICAgICAgfHwgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3dcbiAgICAgICAgfHwgdGhpcy5jb250ZW50XG4gICAgKSk7XG4vLyBgc2VsZmAgaXMgdW5kZWZpbmVkIGluIEZpcmVmb3ggZm9yIEFuZHJvaWQgY29udGVudCBzY3JpcHQgY29udGV4dFxuLy8gd2hpbGUgYHRoaXNgIGlzIG5zSUNvbnRlbnRGcmFtZU1lc3NhZ2VNYW5hZ2VyXG4vLyB3aXRoIGFuIGF0dHJpYnV0ZSBgY29udGVudGAgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgd2luZG93XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMuc2F2ZUFzID0gc2F2ZUFzO1xufSBlbHNlIGlmICgodHlwZW9mIGRlZmluZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkZWZpbmUgIT09IG51bGwpICYmIChkZWZpbmUuYW1kICE9IG51bGwpKSB7XG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHNhdmVBcztcbiAgICB9KTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL3BsdWdpbnMvc2F2ZUFzLmpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiBXZWIgRm9udCBMb2FkZXIgdjEuNi4yNiAtIChjKSBBZG9iZSBTeXN0ZW1zLCBHb29nbGUuIExpY2Vuc2U6IEFwYWNoZSAyLjAgKi8oZnVuY3Rpb24oKXtmdW5jdGlvbiBhYShhLGIsYyl7cmV0dXJuIGEuY2FsbC5hcHBseShhLmJpbmQsYXJndW1lbnRzKX1mdW5jdGlvbiBiYShhLGIsYyl7aWYoIWEpdGhyb3cgRXJyb3IoKTtpZigyPGFyZ3VtZW50cy5sZW5ndGgpe3ZhciBkPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO0FycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGMsZCk7cmV0dXJuIGEuYXBwbHkoYixjKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYixhcmd1bWVudHMpfX1mdW5jdGlvbiBwKGEsYixjKXtwPUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kJiYtMSE9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQudG9TdHJpbmcoKS5pbmRleE9mKFwibmF0aXZlIGNvZGVcIik/YWE6YmE7cmV0dXJuIHAuYXBwbHkobnVsbCxhcmd1bWVudHMpfXZhciBxPURhdGUubm93fHxmdW5jdGlvbigpe3JldHVybituZXcgRGF0ZX07ZnVuY3Rpb24gY2EoYSxiKXt0aGlzLmE9YTt0aGlzLm09Ynx8YTt0aGlzLmM9dGhpcy5tLmRvY3VtZW50fXZhciBkYT0hIXdpbmRvdy5Gb250RmFjZTtmdW5jdGlvbiB0KGEsYixjLGQpe2I9YS5jLmNyZWF0ZUVsZW1lbnQoYik7aWYoYylmb3IodmFyIGUgaW4gYyljLmhhc093blByb3BlcnR5KGUpJiYoXCJzdHlsZVwiPT1lP2Iuc3R5bGUuY3NzVGV4dD1jW2VdOmIuc2V0QXR0cmlidXRlKGUsY1tlXSkpO2QmJmIuYXBwZW5kQ2hpbGQoYS5jLmNyZWF0ZVRleHROb2RlKGQpKTtyZXR1cm4gYn1mdW5jdGlvbiB1KGEsYixjKXthPWEuYy5nZXRFbGVtZW50c0J5VGFnTmFtZShiKVswXTthfHwoYT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO2EuaW5zZXJ0QmVmb3JlKGMsYS5sYXN0Q2hpbGQpfWZ1bmN0aW9uIHYoYSl7YS5wYXJlbnROb2RlJiZhLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYSl9XG4gIGZ1bmN0aW9uIHcoYSxiLGMpe2I9Ynx8W107Yz1jfHxbXTtmb3IodmFyIGQ9YS5jbGFzc05hbWUuc3BsaXQoL1xccysvKSxlPTA7ZTxiLmxlbmd0aDtlKz0xKXtmb3IodmFyIGY9ITEsZz0wO2c8ZC5sZW5ndGg7Zys9MSlpZihiW2VdPT09ZFtnXSl7Zj0hMDticmVha31mfHxkLnB1c2goYltlXSl9Yj1bXTtmb3IoZT0wO2U8ZC5sZW5ndGg7ZSs9MSl7Zj0hMTtmb3IoZz0wO2c8Yy5sZW5ndGg7Zys9MSlpZihkW2VdPT09Y1tnXSl7Zj0hMDticmVha31mfHxiLnB1c2goZFtlXSl9YS5jbGFzc05hbWU9Yi5qb2luKFwiIFwiKS5yZXBsYWNlKC9cXHMrL2csXCIgXCIpLnJlcGxhY2UoL15cXHMrfFxccyskLyxcIlwiKX1mdW5jdGlvbiB5KGEsYil7Zm9yKHZhciBjPWEuY2xhc3NOYW1lLnNwbGl0KC9cXHMrLyksZD0wLGU9Yy5sZW5ndGg7ZDxlO2QrKylpZihjW2RdPT1iKXJldHVybiEwO3JldHVybiExfVxuICBmdW5jdGlvbiB6KGEpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYS5mKXJldHVybiBhLmY7dmFyIGI9YS5tLmxvY2F0aW9uLnByb3RvY29sO1wiYWJvdXQ6XCI9PWImJihiPWEuYS5sb2NhdGlvbi5wcm90b2NvbCk7cmV0dXJuXCJodHRwczpcIj09Yj9cImh0dHBzOlwiOlwiaHR0cDpcIn1mdW5jdGlvbiBlYShhKXtyZXR1cm4gYS5tLmxvY2F0aW9uLmhvc3RuYW1lfHxhLmEubG9jYXRpb24uaG9zdG5hbWV9XG4gIGZ1bmN0aW9uIEEoYSxiLGMpe2Z1bmN0aW9uIGQoKXtrJiZlJiZmJiYoayhnKSxrPW51bGwpfWI9dChhLFwibGlua1wiLHtyZWw6XCJzdHlsZXNoZWV0XCIsaHJlZjpiLG1lZGlhOlwiYWxsXCJ9KTt2YXIgZT0hMSxmPSEwLGc9bnVsbCxrPWN8fG51bGw7ZGE/KGIub25sb2FkPWZ1bmN0aW9uKCl7ZT0hMDtkKCl9LGIub25lcnJvcj1mdW5jdGlvbigpe2U9ITA7Zz1FcnJvcihcIlN0eWxlc2hlZXQgZmFpbGVkIHRvIGxvYWRcIik7ZCgpfSk6c2V0VGltZW91dChmdW5jdGlvbigpe2U9ITA7ZCgpfSwwKTt1KGEsXCJoZWFkXCIsYil9XG4gIGZ1bmN0aW9uIEIoYSxiLGMsZCl7dmFyIGU9YS5jLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtpZihlKXt2YXIgZj10KGEsXCJzY3JpcHRcIix7c3JjOmJ9KSxnPSExO2Yub25sb2FkPWYub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7Z3x8dGhpcy5yZWFkeVN0YXRlJiZcImxvYWRlZFwiIT10aGlzLnJlYWR5U3RhdGUmJlwiY29tcGxldGVcIiE9dGhpcy5yZWFkeVN0YXRlfHwoZz0hMCxjJiZjKG51bGwpLGYub25sb2FkPWYub25yZWFkeXN0YXRlY2hhbmdlPW51bGwsXCJIRUFEXCI9PWYucGFyZW50Tm9kZS50YWdOYW1lJiZlLnJlbW92ZUNoaWxkKGYpKX07ZS5hcHBlbmRDaGlsZChmKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Z3x8KGc9ITAsYyYmYyhFcnJvcihcIlNjcmlwdCBsb2FkIHRpbWVvdXRcIikpKX0sZHx8NUUzKTtyZXR1cm4gZn1yZXR1cm4gbnVsbH07ZnVuY3Rpb24gQygpe3RoaXMuYT0wO3RoaXMuYz1udWxsfWZ1bmN0aW9uIEQoYSl7YS5hKys7cmV0dXJuIGZ1bmN0aW9uKCl7YS5hLS07RShhKX19ZnVuY3Rpb24gRihhLGIpe2EuYz1iO0UoYSl9ZnVuY3Rpb24gRShhKXswPT1hLmEmJmEuYyYmKGEuYygpLGEuYz1udWxsKX07ZnVuY3Rpb24gRyhhKXt0aGlzLmE9YXx8XCItXCJ9Ry5wcm90b3R5cGUuYz1mdW5jdGlvbihhKXtmb3IodmFyIGI9W10sYz0wO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYi5wdXNoKGFyZ3VtZW50c1tjXS5yZXBsYWNlKC9bXFxXX10rL2csXCJcIikudG9Mb3dlckNhc2UoKSk7cmV0dXJuIGIuam9pbih0aGlzLmEpfTtmdW5jdGlvbiBIKGEsYil7dGhpcy5jPWE7dGhpcy5mPTQ7dGhpcy5hPVwiblwiO3ZhciBjPShifHxcIm40XCIpLm1hdGNoKC9eKFtuaW9dKShbMS05XSkkL2kpO2MmJih0aGlzLmE9Y1sxXSx0aGlzLmY9cGFyc2VJbnQoY1syXSwxMCkpfWZ1bmN0aW9uIGZhKGEpe3JldHVybiBJKGEpK1wiIFwiKyhhLmYrXCIwMFwiKStcIiAzMDBweCBcIitKKGEuYyl9ZnVuY3Rpb24gSihhKXt2YXIgYj1bXTthPWEuc3BsaXQoLyxcXHMqLyk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10ucmVwbGFjZSgvWydcIl0vZyxcIlwiKTstMSE9ZC5pbmRleE9mKFwiIFwiKXx8L15cXGQvLnRlc3QoZCk/Yi5wdXNoKFwiJ1wiK2QrXCInXCIpOmIucHVzaChkKX1yZXR1cm4gYi5qb2luKFwiLFwiKX1mdW5jdGlvbiBLKGEpe3JldHVybiBhLmErYS5mfWZ1bmN0aW9uIEkoYSl7dmFyIGI9XCJub3JtYWxcIjtcIm9cIj09PWEuYT9iPVwib2JsaXF1ZVwiOlwiaVwiPT09YS5hJiYoYj1cIml0YWxpY1wiKTtyZXR1cm4gYn1cbiAgZnVuY3Rpb24gZ2EoYSl7dmFyIGI9NCxjPVwiblwiLGQ9bnVsbDthJiYoKGQ9YS5tYXRjaCgvKG5vcm1hbHxvYmxpcXVlfGl0YWxpYykvaSkpJiZkWzFdJiYoYz1kWzFdLnN1YnN0cigwLDEpLnRvTG93ZXJDYXNlKCkpLChkPWEubWF0Y2goLyhbMS05XTAwfG5vcm1hbHxib2xkKS9pKSkmJmRbMV0mJigvYm9sZC9pLnRlc3QoZFsxXSk/Yj03Oi9bMS05XTAwLy50ZXN0KGRbMV0pJiYoYj1wYXJzZUludChkWzFdLnN1YnN0cigwLDEpLDEwKSkpKTtyZXR1cm4gYytifTtmdW5jdGlvbiBoYShhLGIpe3RoaXMuYz1hO3RoaXMuZj1hLm0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O3RoaXMuaD1iO3RoaXMuYT1uZXcgRyhcIi1cIik7dGhpcy5qPSExIT09Yi5ldmVudHM7dGhpcy5nPSExIT09Yi5jbGFzc2VzfWZ1bmN0aW9uIGlhKGEpe2EuZyYmdyhhLmYsW2EuYS5jKFwid2ZcIixcImxvYWRpbmdcIildKTtMKGEsXCJsb2FkaW5nXCIpfWZ1bmN0aW9uIE0oYSl7aWYoYS5nKXt2YXIgYj15KGEuZixhLmEuYyhcIndmXCIsXCJhY3RpdmVcIikpLGM9W10sZD1bYS5hLmMoXCJ3ZlwiLFwibG9hZGluZ1wiKV07Ynx8Yy5wdXNoKGEuYS5jKFwid2ZcIixcImluYWN0aXZlXCIpKTt3KGEuZixjLGQpfUwoYSxcImluYWN0aXZlXCIpfWZ1bmN0aW9uIEwoYSxiLGMpe2lmKGEuaiYmYS5oW2JdKWlmKGMpYS5oW2JdKGMuYyxLKGMpKTtlbHNlIGEuaFtiXSgpfTtmdW5jdGlvbiBqYSgpe3RoaXMuYz17fX1mdW5jdGlvbiBrYShhLGIsYyl7dmFyIGQ9W10sZTtmb3IoZSBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoZSkpe3ZhciBmPWEuY1tlXTtmJiZkLnB1c2goZihiW2VdLGMpKX1yZXR1cm4gZH07ZnVuY3Rpb24gTihhLGIpe3RoaXMuYz1hO3RoaXMuZj1iO3RoaXMuYT10KHRoaXMuYyxcInNwYW5cIix7XCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifSx0aGlzLmYpfWZ1bmN0aW9uIE8oYSl7dShhLmMsXCJib2R5XCIsYS5hKX1mdW5jdGlvbiBQKGEpe3JldHVyblwiZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTk5OTlweDtsZWZ0Oi05OTk5cHg7Zm9udC1zaXplOjMwMHB4O3dpZHRoOmF1dG87aGVpZ2h0OmF1dG87bGluZS1oZWlnaHQ6bm9ybWFsO21hcmdpbjowO3BhZGRpbmc6MDtmb250LXZhcmlhbnQ6bm9ybWFsO3doaXRlLXNwYWNlOm5vd3JhcDtmb250LWZhbWlseTpcIitKKGEuYykrXCI7XCIrKFwiZm9udC1zdHlsZTpcIitJKGEpK1wiO2ZvbnQtd2VpZ2h0OlwiKyhhLmYrXCIwMFwiKStcIjtcIil9O2Z1bmN0aW9uIFEoYSxiLGMsZCxlLGYpe3RoaXMuZz1hO3RoaXMuaj1iO3RoaXMuYT1kO3RoaXMuYz1jO3RoaXMuZj1lfHwzRTM7dGhpcy5oPWZ8fHZvaWQgMH1RLnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuYy5tLmRvY3VtZW50LGI9dGhpcyxjPXEoKSxkPW5ldyBQcm9taXNlKGZ1bmN0aW9uKGQsZSl7ZnVuY3Rpb24gaygpe3EoKS1jPj1iLmY/ZSgpOmEuZm9udHMubG9hZChmYShiLmEpLGIuaCkudGhlbihmdW5jdGlvbihhKXsxPD1hLmxlbmd0aD9kKCk6c2V0VGltZW91dChrLDI1KX0sZnVuY3Rpb24oKXtlKCl9KX1rKCl9KSxlPW5ldyBQcm9taXNlKGZ1bmN0aW9uKGEsZCl7c2V0VGltZW91dChkLGIuZil9KTtQcm9taXNlLnJhY2UoW2UsZF0pLnRoZW4oZnVuY3Rpb24oKXtiLmcoYi5hKX0sZnVuY3Rpb24oKXtiLmooYi5hKX0pfTtmdW5jdGlvbiBSKGEsYixjLGQsZSxmLGcpe3RoaXMudj1hO3RoaXMuQj1iO3RoaXMuYz1jO3RoaXMuYT1kO3RoaXMucz1nfHxcIkJFU2Jzd3lcIjt0aGlzLmY9e307dGhpcy53PWV8fDNFMzt0aGlzLnU9Znx8bnVsbDt0aGlzLm89dGhpcy5qPXRoaXMuaD10aGlzLmc9bnVsbDt0aGlzLmc9bmV3IE4odGhpcy5jLHRoaXMucyk7dGhpcy5oPW5ldyBOKHRoaXMuYyx0aGlzLnMpO3RoaXMuaj1uZXcgTih0aGlzLmMsdGhpcy5zKTt0aGlzLm89bmV3IE4odGhpcy5jLHRoaXMucyk7YT1uZXcgSCh0aGlzLmEuYytcIixzZXJpZlwiLEsodGhpcy5hKSk7YT1QKGEpO3RoaXMuZy5hLnN0eWxlLmNzc1RleHQ9YTthPW5ldyBIKHRoaXMuYS5jK1wiLHNhbnMtc2VyaWZcIixLKHRoaXMuYSkpO2E9UChhKTt0aGlzLmguYS5zdHlsZS5jc3NUZXh0PWE7YT1uZXcgSChcInNlcmlmXCIsSyh0aGlzLmEpKTthPVAoYSk7dGhpcy5qLmEuc3R5bGUuY3NzVGV4dD1hO2E9bmV3IEgoXCJzYW5zLXNlcmlmXCIsSyh0aGlzLmEpKTthPVxuICAgIFAoYSk7dGhpcy5vLmEuc3R5bGUuY3NzVGV4dD1hO08odGhpcy5nKTtPKHRoaXMuaCk7Tyh0aGlzLmopO08odGhpcy5vKX12YXIgUz17RDpcInNlcmlmXCIsQzpcInNhbnMtc2VyaWZcIn0sVD1udWxsO2Z1bmN0aW9uIFUoKXtpZihudWxsPT09VCl7dmFyIGE9L0FwcGxlV2ViS2l0XFwvKFswLTldKykoPzpcXC4oWzAtOV0rKSkvLmV4ZWMod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1Q9ISFhJiYoNTM2PnBhcnNlSW50KGFbMV0sMTApfHw1MzY9PT1wYXJzZUludChhWzFdLDEwKSYmMTE+PXBhcnNlSW50KGFbMl0sMTApKX1yZXR1cm4gVH1SLnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbigpe3RoaXMuZi5zZXJpZj10aGlzLmouYS5vZmZzZXRXaWR0aDt0aGlzLmZbXCJzYW5zLXNlcmlmXCJdPXRoaXMuby5hLm9mZnNldFdpZHRoO3RoaXMuQT1xKCk7bGEodGhpcyl9O1xuICBmdW5jdGlvbiBtYShhLGIsYyl7Zm9yKHZhciBkIGluIFMpaWYoUy5oYXNPd25Qcm9wZXJ0eShkKSYmYj09PWEuZltTW2RdXSYmYz09PWEuZltTW2RdXSlyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBsYShhKXt2YXIgYj1hLmcuYS5vZmZzZXRXaWR0aCxjPWEuaC5hLm9mZnNldFdpZHRoLGQ7KGQ9Yj09PWEuZi5zZXJpZiYmYz09PWEuZltcInNhbnMtc2VyaWZcIl0pfHwoZD1VKCkmJm1hKGEsYixjKSk7ZD9xKCktYS5BPj1hLnc/VSgpJiZtYShhLGIsYykmJihudWxsPT09YS51fHxhLnUuaGFzT3duUHJvcGVydHkoYS5hLmMpKT9WKGEsYS52KTpWKGEsYS5CKTpuYShhKTpWKGEsYS52KX1mdW5jdGlvbiBuYShhKXtzZXRUaW1lb3V0KHAoZnVuY3Rpb24oKXtsYSh0aGlzKX0sYSksNTApfWZ1bmN0aW9uIFYoYSxiKXtzZXRUaW1lb3V0KHAoZnVuY3Rpb24oKXt2KHRoaXMuZy5hKTt2KHRoaXMuaC5hKTt2KHRoaXMuai5hKTt2KHRoaXMuby5hKTtiKHRoaXMuYSl9LGEpLDApfTtmdW5jdGlvbiBXKGEsYixjKXt0aGlzLmM9YTt0aGlzLmE9Yjt0aGlzLmY9MDt0aGlzLm89dGhpcy5qPSExO3RoaXMucz1jfXZhciBYPW51bGw7Vy5wcm90b3R5cGUuZz1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmE7Yi5nJiZ3KGIuZixbYi5hLmMoXCJ3ZlwiLGEuYyxLKGEpLnRvU3RyaW5nKCksXCJhY3RpdmVcIildLFtiLmEuYyhcIndmXCIsYS5jLEsoYSkudG9TdHJpbmcoKSxcImxvYWRpbmdcIiksYi5hLmMoXCJ3ZlwiLGEuYyxLKGEpLnRvU3RyaW5nKCksXCJpbmFjdGl2ZVwiKV0pO0woYixcImZvbnRhY3RpdmVcIixhKTt0aGlzLm89ITA7b2EodGhpcyl9O1xuICBXLnByb3RvdHlwZS5oPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuYTtpZihiLmcpe3ZhciBjPXkoYi5mLGIuYS5jKFwid2ZcIixhLmMsSyhhKS50b1N0cmluZygpLFwiYWN0aXZlXCIpKSxkPVtdLGU9W2IuYS5jKFwid2ZcIixhLmMsSyhhKS50b1N0cmluZygpLFwibG9hZGluZ1wiKV07Y3x8ZC5wdXNoKGIuYS5jKFwid2ZcIixhLmMsSyhhKS50b1N0cmluZygpLFwiaW5hY3RpdmVcIikpO3coYi5mLGQsZSl9TChiLFwiZm9udGluYWN0aXZlXCIsYSk7b2EodGhpcyl9O2Z1bmN0aW9uIG9hKGEpezA9PS0tYS5mJiZhLmomJihhLm8/KGE9YS5hLGEuZyYmdyhhLmYsW2EuYS5jKFwid2ZcIixcImFjdGl2ZVwiKV0sW2EuYS5jKFwid2ZcIixcImxvYWRpbmdcIiksYS5hLmMoXCJ3ZlwiLFwiaW5hY3RpdmVcIildKSxMKGEsXCJhY3RpdmVcIikpOk0oYS5hKSl9O2Z1bmN0aW9uIHBhKGEpe3RoaXMuaj1hO3RoaXMuYT1uZXcgamE7dGhpcy5oPTA7dGhpcy5mPXRoaXMuZz0hMH1wYS5wcm90b3R5cGUubG9hZD1mdW5jdGlvbihhKXt0aGlzLmM9bmV3IGNhKHRoaXMuaixhLmNvbnRleHR8fHRoaXMuaik7dGhpcy5nPSExIT09YS5ldmVudHM7dGhpcy5mPSExIT09YS5jbGFzc2VzO3FhKHRoaXMsbmV3IGhhKHRoaXMuYyxhKSxhKX07XG4gIGZ1bmN0aW9uIHJhKGEsYixjLGQsZSl7dmFyIGY9MD09LS1hLmg7KGEuZnx8YS5nKSYmc2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBhPWV8fG51bGwsaz1kfHxudWxsfHx7fTtpZigwPT09Yy5sZW5ndGgmJmYpTShiLmEpO2Vsc2V7Yi5mKz1jLmxlbmd0aDtmJiYoYi5qPWYpO3ZhciBoLG09W107Zm9yKGg9MDtoPGMubGVuZ3RoO2grKyl7dmFyIGw9Y1toXSxuPWtbbC5jXSxyPWIuYSx4PWw7ci5nJiZ3KHIuZixbci5hLmMoXCJ3ZlwiLHguYyxLKHgpLnRvU3RyaW5nKCksXCJsb2FkaW5nXCIpXSk7TChyLFwiZm9udGxvYWRpbmdcIix4KTtyPW51bGw7bnVsbD09PVgmJihYPXdpbmRvdy5Gb250RmFjZT8oeD0vR2Vja28uKkZpcmVmb3hcXC8oXFxkKykvLmV4ZWMod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpKT80MjxwYXJzZUludCh4WzFdLDEwKTohMDohMSk7WD9yPW5ldyBRKHAoYi5nLGIpLHAoYi5oLGIpLGIuYyxsLGIucyxuKTpyPW5ldyBSKHAoYi5nLGIpLHAoYi5oLGIpLGIuYyxsLGIucyxhLFxuICAgIG4pO20ucHVzaChyKX1mb3IoaD0wO2g8bS5sZW5ndGg7aCsrKW1baF0uc3RhcnQoKX19LDApfWZ1bmN0aW9uIHFhKGEsYixjKXt2YXIgZD1bXSxlPWMudGltZW91dDtpYShiKTt2YXIgZD1rYShhLmEsYyxhLmMpLGY9bmV3IFcoYS5jLGIsZSk7YS5oPWQubGVuZ3RoO2I9MDtmb3IoYz1kLmxlbmd0aDtiPGM7YisrKWRbYl0ubG9hZChmdW5jdGlvbihiLGQsYyl7cmEoYSxmLGIsZCxjKX0pfTtmdW5jdGlvbiBzYShhLGIpe3RoaXMuYz1hO3RoaXMuYT1ifWZ1bmN0aW9uIHRhKGEsYixjKXt2YXIgZD16KGEuYyk7YT0oYS5hLmFwaXx8XCJmYXN0LmZvbnRzLm5ldC9qc2FwaVwiKS5yZXBsYWNlKC9eLipodHRwKHM/KTooXFwvXFwvKT8vLFwiXCIpO3JldHVybiBkK1wiLy9cIithK1wiL1wiK2IrXCIuanNcIisoYz9cIj92PVwiK2M6XCJcIil9XG4gIHNhLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXtpZihmW1wiX19tdGlfZm50THN0XCIrZF0pe3ZhciBjPWZbXCJfX210aV9mbnRMc3RcIitkXSgpLGU9W10saDtpZihjKWZvcih2YXIgbT0wO208Yy5sZW5ndGg7bSsrKXt2YXIgbD1jW21dLmZvbnRmYW1pbHk7dm9pZCAwIT1jW21dLmZvbnRTdHlsZSYmdm9pZCAwIT1jW21dLmZvbnRXZWlnaHQ/KGg9Y1ttXS5mb250U3R5bGUrY1ttXS5mb250V2VpZ2h0LGUucHVzaChuZXcgSChsLGgpKSk6ZS5wdXNoKG5ldyBIKGwpKX1hKGUpfWVsc2Ugc2V0VGltZW91dChmdW5jdGlvbigpe2IoKX0sNTApfXZhciBjPXRoaXMsZD1jLmEucHJvamVjdElkLGU9Yy5hLnZlcnNpb247aWYoZCl7dmFyIGY9Yy5jLm07Qih0aGlzLmMsdGEoYyxkLGUpLGZ1bmN0aW9uKGUpe2U/YShbXSk6KGZbXCJfX01vbm90eXBlQ29uZmlndXJhdGlvbl9fXCIrZF09ZnVuY3Rpb24oKXtyZXR1cm4gYy5hfSxiKCkpfSkuaWQ9XCJfX01vbm90eXBlQVBJU2NyaXB0X19cIitcbiAgICBkfWVsc2UgYShbXSl9O2Z1bmN0aW9uIHVhKGEsYil7dGhpcy5jPWE7dGhpcy5hPWJ9dWEucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkPXRoaXMuYS51cmxzfHxbXSxlPXRoaXMuYS5mYW1pbGllc3x8W10sZj10aGlzLmEudGVzdFN0cmluZ3N8fHt9LGc9bmV3IEM7Yj0wO2ZvcihjPWQubGVuZ3RoO2I8YztiKyspQSh0aGlzLmMsZFtiXSxEKGcpKTt2YXIgaz1bXTtiPTA7Zm9yKGM9ZS5sZW5ndGg7YjxjO2IrKylpZihkPWVbYl0uc3BsaXQoXCI6XCIpLGRbMV0pZm9yKHZhciBoPWRbMV0uc3BsaXQoXCIsXCIpLG09MDttPGgubGVuZ3RoO20rPTEpay5wdXNoKG5ldyBIKGRbMF0saFttXSkpO2Vsc2Ugay5wdXNoKG5ldyBIKGRbMF0pKTtGKGcsZnVuY3Rpb24oKXthKGssZil9KX07ZnVuY3Rpb24gdmEoYSxiLGMpe2E/dGhpcy5jPWE6dGhpcy5jPWIrd2E7dGhpcy5hPVtdO3RoaXMuZj1bXTt0aGlzLmc9Y3x8XCJcIn12YXIgd2E9XCIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzc1wiO2Z1bmN0aW9uIHhhKGEsYil7Zm9yKHZhciBjPWIubGVuZ3RoLGQ9MDtkPGM7ZCsrKXt2YXIgZT1iW2RdLnNwbGl0KFwiOlwiKTszPT1lLmxlbmd0aCYmYS5mLnB1c2goZS5wb3AoKSk7dmFyIGY9XCJcIjsyPT1lLmxlbmd0aCYmXCJcIiE9ZVsxXSYmKGY9XCI6XCIpO2EuYS5wdXNoKGUuam9pbihmKSl9fVxuICBmdW5jdGlvbiB5YShhKXtpZigwPT1hLmEubGVuZ3RoKXRocm93IEVycm9yKFwiTm8gZm9udHMgdG8gbG9hZCFcIik7aWYoLTEhPWEuYy5pbmRleE9mKFwia2l0PVwiKSlyZXR1cm4gYS5jO2Zvcih2YXIgYj1hLmEubGVuZ3RoLGM9W10sZD0wO2Q8YjtkKyspYy5wdXNoKGEuYVtkXS5yZXBsYWNlKC8gL2csXCIrXCIpKTtiPWEuYytcIj9mYW1pbHk9XCIrYy5qb2luKFwiJTdDXCIpOzA8YS5mLmxlbmd0aCYmKGIrPVwiJnN1YnNldD1cIithLmYuam9pbihcIixcIikpOzA8YS5nLmxlbmd0aCYmKGIrPVwiJnRleHQ9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGEuZykpO3JldHVybiBifTtmdW5jdGlvbiB6YShhKXt0aGlzLmY9YTt0aGlzLmE9W107dGhpcy5jPXt9fVxuICB2YXIgQWE9e2xhdGluOlwiQkVTYnN3eVwiLFwibGF0aW4tZXh0XCI6XCJcXHUwMGU3XFx1MDBmNlxcdTAwZmNcXHUwMTFmXFx1MDE1ZlwiLGN5cmlsbGljOlwiXFx1MDQzOVxcdTA0NGZcXHUwNDE2XCIsZ3JlZWs6XCJcXHUwM2IxXFx1MDNiMlxcdTAzYTNcIixraG1lcjpcIlxcdTE3ODBcXHUxNzgxXFx1MTc4MlwiLEhhbnVtYW46XCJcXHUxNzgwXFx1MTc4MVxcdTE3ODJcIn0sQmE9e3RoaW46XCIxXCIsZXh0cmFsaWdodDpcIjJcIixcImV4dHJhLWxpZ2h0XCI6XCIyXCIsdWx0cmFsaWdodDpcIjJcIixcInVsdHJhLWxpZ2h0XCI6XCIyXCIsbGlnaHQ6XCIzXCIscmVndWxhcjpcIjRcIixib29rOlwiNFwiLG1lZGl1bTpcIjVcIixcInNlbWktYm9sZFwiOlwiNlwiLHNlbWlib2xkOlwiNlwiLFwiZGVtaS1ib2xkXCI6XCI2XCIsZGVtaWJvbGQ6XCI2XCIsYm9sZDpcIjdcIixcImV4dHJhLWJvbGRcIjpcIjhcIixleHRyYWJvbGQ6XCI4XCIsXCJ1bHRyYS1ib2xkXCI6XCI4XCIsdWx0cmFib2xkOlwiOFwiLGJsYWNrOlwiOVwiLGhlYXZ5OlwiOVwiLGw6XCIzXCIscjpcIjRcIixiOlwiN1wifSxDYT17aTpcImlcIixpdGFsaWM6XCJpXCIsbjpcIm5cIixub3JtYWw6XCJuXCJ9LFxuICAgIERhPS9eKHRoaW58KD86KD86ZXh0cmF8dWx0cmEpLT8pP2xpZ2h0fHJlZ3VsYXJ8Ym9va3xtZWRpdW18KD86KD86c2VtaXxkZW1pfGV4dHJhfHVsdHJhKS0/KT9ib2xkfGJsYWNrfGhlYXZ5fGx8cnxifFsxLTldMDApPyhufGl8bm9ybWFsfGl0YWxpYyk/JC87XG4gIGZ1bmN0aW9uIEVhKGEpe2Zvcih2YXIgYj1hLmYubGVuZ3RoLGM9MDtjPGI7YysrKXt2YXIgZD1hLmZbY10uc3BsaXQoXCI6XCIpLGU9ZFswXS5yZXBsYWNlKC9cXCsvZyxcIiBcIiksZj1bXCJuNFwiXTtpZigyPD1kLmxlbmd0aCl7dmFyIGc7dmFyIGs9ZFsxXTtnPVtdO2lmKGspZm9yKHZhciBrPWsuc3BsaXQoXCIsXCIpLGg9ay5sZW5ndGgsbT0wO208aDttKyspe3ZhciBsO2w9a1ttXTtpZihsLm1hdGNoKC9eW1xcdy1dKyQvKSl7dmFyIG49RGEuZXhlYyhsLnRvTG93ZXJDYXNlKCkpO2lmKG51bGw9PW4pbD1cIlwiO2Vsc2V7bD1uWzJdO2w9bnVsbD09bHx8XCJcIj09bD9cIm5cIjpDYVtsXTtuPW5bMV07aWYobnVsbD09bnx8XCJcIj09biluPVwiNFwiO2Vsc2UgdmFyIHI9QmFbbl0sbj1yP3I6aXNOYU4obik/XCI0XCI6bi5zdWJzdHIoMCwxKTtsPVtsLG5dLmpvaW4oXCJcIil9fWVsc2UgbD1cIlwiO2wmJmcucHVzaChsKX0wPGcubGVuZ3RoJiYoZj1nKTszPT1kLmxlbmd0aCYmKGQ9ZFsyXSxnPVtdLGQ9ZD9kLnNwbGl0KFwiLFwiKTpcbiAgICBnLDA8ZC5sZW5ndGgmJihkPUFhW2RbMF1dKSYmKGEuY1tlXT1kKSl9YS5jW2VdfHwoZD1BYVtlXSkmJihhLmNbZV09ZCk7Zm9yKGQ9MDtkPGYubGVuZ3RoO2QrPTEpYS5hLnB1c2gobmV3IEgoZSxmW2RdKSl9fTtmdW5jdGlvbiBGYShhLGIpe3RoaXMuYz1hO3RoaXMuYT1ifXZhciBHYT17QXJpbW86ITAsQ291c2luZTohMCxUaW5vczohMH07RmEucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEMsYz10aGlzLmMsZD1uZXcgdmEodGhpcy5hLmFwaSx6KGMpLHRoaXMuYS50ZXh0KSxlPXRoaXMuYS5mYW1pbGllczt4YShkLGUpO3ZhciBmPW5ldyB6YShlKTtFYShmKTtBKGMseWEoZCksRChiKSk7RihiLGZ1bmN0aW9uKCl7YShmLmEsZi5jLEdhKX0pfTtmdW5jdGlvbiBIYShhLGIpe3RoaXMuYz1hO3RoaXMuYT1ifUhhLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuYS5pZCxjPXRoaXMuYy5tO2I/Qih0aGlzLmMsKHRoaXMuYS5hcGl8fFwiaHR0cHM6Ly91c2UudHlwZWtpdC5uZXRcIikrXCIvXCIrYitcIi5qc1wiLGZ1bmN0aW9uKGIpe2lmKGIpYShbXSk7ZWxzZSBpZihjLlR5cGVraXQmJmMuVHlwZWtpdC5jb25maWcmJmMuVHlwZWtpdC5jb25maWcuZm4pe2I9Yy5UeXBla2l0LmNvbmZpZy5mbjtmb3IodmFyIGU9W10sZj0wO2Y8Yi5sZW5ndGg7Zis9Milmb3IodmFyIGc9YltmXSxrPWJbZisxXSxoPTA7aDxrLmxlbmd0aDtoKyspZS5wdXNoKG5ldyBIKGcsa1toXSkpO3RyeXtjLlR5cGVraXQubG9hZCh7ZXZlbnRzOiExLGNsYXNzZXM6ITEsYXN5bmM6ITB9KX1jYXRjaChtKXt9YShlKX19LDJFMyk6YShbXSl9O2Z1bmN0aW9uIElhKGEsYil7dGhpcy5jPWE7dGhpcy5mPWI7dGhpcy5hPVtdfUlhLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZi5pZCxjPXRoaXMuYy5tLGQ9dGhpcztiPyhjLl9fd2ViZm9udGZvbnRkZWNrbW9kdWxlX198fChjLl9fd2ViZm9udGZvbnRkZWNrbW9kdWxlX189e30pLGMuX193ZWJmb250Zm9udGRlY2ttb2R1bGVfX1tiXT1mdW5jdGlvbihiLGMpe2Zvcih2YXIgZz0wLGs9Yy5mb250cy5sZW5ndGg7ZzxrOysrZyl7dmFyIGg9Yy5mb250c1tnXTtkLmEucHVzaChuZXcgSChoLm5hbWUsZ2EoXCJmb250LXdlaWdodDpcIitoLndlaWdodCtcIjtmb250LXN0eWxlOlwiK2guc3R5bGUpKSl9YShkLmEpfSxCKHRoaXMuYyx6KHRoaXMuYykrKHRoaXMuZi5hcGl8fFwiLy9mLmZvbnRkZWNrLmNvbS9zL2Nzcy9qcy9cIikrZWEodGhpcy5jKStcIi9cIitiK1wiLmpzXCIsZnVuY3Rpb24oYil7YiYmYShbXSl9KSk6YShbXSl9O3ZhciBZPW5ldyBwYSh3aW5kb3cpO1kuYS5jLmN1c3RvbT1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgdWEoYixhKX07WS5hLmMuZm9udGRlY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IElhKGIsYSl9O1kuYS5jLm1vbm90eXBlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBzYShiLGEpfTtZLmEuYy50eXBla2l0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBIYShiLGEpfTtZLmEuYy5nb29nbGU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IEZhKGIsYSl9O3ZhciBaPXtsb2FkOnAoWS5sb2FkLFkpfTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShmdW5jdGlvbigpe3JldHVybiBafSk6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPVo6KHdpbmRvdy5XZWJGb250PVosd2luZG93LldlYkZvbnRDb25maWcmJlkubG9hZCh3aW5kb3cuV2ViRm9udENvbmZpZykpO30oKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9wbHVnaW5zL3dlYmZvbnQuanNcbi8vIG1vZHVsZSBpZCA9IDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLkJhc2VCcnVzaC5wcm90b3R5cGUsIHtcbiAgdXNlRHJhd2luZ0NvbG9yOiB0cnVlLFxuICBzZXRPcHRpb25zOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIGZvciAodmFyIHByb3AgaW4gb3B0aW9ucykge1xuICAgICAgdGhpc1twcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgfVxuICB9LFxuICB0eXBlOiBcImJhc2UtYnJ1c2hcIixcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKGNhbnZhcywgb3B0aW9ucykge1xuICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGlmKHRoaXMuY2FudmFzLmFwcGxpY2F0aW9uKSB7XG4gICAgICB0aGlzLmNhbnZhcy5hcHBsaWNhdGlvbi5maXJlKFwiZW50aXR5OmNyZWF0ZWRcIiwge3RhcmdldDogdGhpcywgb3B0aW9uczogb3B0aW9uc30pXG4gICAgfVxuICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgfSxcbiAgY29udmVydENvbG9yOiBmdW5jdGlvbiAoY29sb3IsIHR5cGUpIHtcbiAgICB0eXBlID0gdHlwZSB8fCBcIm5hbWVcIjtcbiAgICBpZiAoY29sb3IgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgaWYgKHR5cGUgPT0gXCJzb3VyY2VcIikge1xuICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgICB9XG4gICAgICBjb2xvciA9IFwiI1wiICsgZmFicmljLkNvbG9yLmZyb21Tb3VyY2UoY29sb3IpLnRvSGV4KCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09IFwiaGV4XCIgfHwgdHlwZSA9PSBcInNvdXJjZVwiKSB7XG4gICAgICBpZiAoZmFicmljLkNvbG9yLmNvbG9yTmFtZU1hcFtjb2xvcl0pIHtcbiAgICAgICAgY29sb3IgPSBmYWJyaWMuQ29sb3IuY29sb3JOYW1lTWFwW2NvbG9yXTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09IFwic291cmNlXCIpIHtcbiAgICAgICAgaWYgKGNvbG9yID09IFwidHJhbnNwYXJlbnRcIikge1xuICAgICAgICAgIHJldHVybiBbMCwgMCwgMCwgMF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9zb3VyY2UgPSBmYWJyaWMuQ29sb3IuZnJvbUhleChjb2xvcikuZ2V0U291cmNlKClcbiAgICAgICAgX3NvdXJjZVszXSAqPSAyNTU7XG4gICAgICAgIHJldHVybiBfc291cmNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH0sXG4gIGdldENvbG9yOiBmdW5jdGlvbiAodHlwZSkge1xuICAgIHZhciBjb2xvciA9IHRoaXMudXNlRHJhd2luZ0NvbG9yICYmIHRoaXMuY2FudmFzLmRyYXdpbmdDb2xvciB8fCB0aGlzLmNvbG9yO1xuICAgIHJldHVybiB0aGlzLmNvbnZlcnRDb2xvcihjb2xvciwgdHlwZSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9icnVzaGVzL0Jhc2VCcnVzaC5qc1xuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbmZhYnJpYy5NYWdpY1dhbmQgPSByZXF1aXJlKCcuLi9wbHVnaW5zL21hZ2ljd2FuZCcpO1xuXG4gIC8qKlxuICAgKiBQZW5jaWxCcnVzaCBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLlBlbmNpbEJydXNoXG4gICAqIEBleHRlbmRzIGZhYnJpYy5CYXNlQnJ1c2hcbiAgICovXG4gIGZhYnJpYy5QYWludEJ1Y2tldEJydXNoID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLkJhc2VCcnVzaCwgLyoqIEBsZW5kcyBmYWJyaWMuUGVuY2lsQnJ1c2gucHJvdG90eXBlICovIHtcbiAgICB0eXBlOiAncGFpbnQtYnVja2V0LWJydXNoJyxcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7ZmFicmljLkNhbnZhc30gY2FudmFzXG4gICAgICogQHJldHVybiB7ZmFicmljLlBlbmNpbEJydXNofSBJbnN0YW5jZSBvZiBhIHBlbmNpbCBicnVzaFxuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGNhbnZhcykge1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBjYW52YXMpO1xuICAgICAgdGhpcy5fcG9pbnRzID0gW107XG4gICAgfSxcbiAgICBnZXRUYXJnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy5jYW52YXMuZHJhd2luZ0NvbnRleHQ7XG4gICAgfSxcbiAgICBvbk1vdXNlVXA6IGZ1bmN0aW9uKCkge30sXG4gICAgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uKCkge30sXG4gICAgb25Nb3VzZURvd246IGZ1bmN0aW9uKHBvaW50ZXIpIHtcbiAgICAgIHRoaXMuX2ZpbGwocG9pbnRlcik7XG4gICAgfSxcbiAgICBfZmlsbDogZnVuY3Rpb24ocG9pbnRlcil7XG4gICAgICBwb2ludGVyID0ge1xuICAgICAgICB4OiBNYXRoLmZsb29yKHBvaW50ZXIueCksXG4gICAgICAgIHk6IE1hdGguZmxvb3IocG9pbnRlci55KVxuICAgICAgfTtcblxuICAgICAgdmFyIGluZm8gPSB0aGlzLmdldFRhcmdldCgpLmdldEltYWdlRGF0YSgwLDAsdGhpcy5nZXRUYXJnZXQoKS5jYW52YXMud2lkdGgsdGhpcy5nZXRUYXJnZXQoKS5jYW52YXMuaGVpZ2h0KTtcblxuICAgICAgZmFicmljLk1hZ2ljV2FuZC5mbG9vZEZpbGwoaW5mbywgcG9pbnRlci54ICwgcG9pbnRlci55LCAxLHt9LG51bGwsZnVuY3Rpb24obWFzayl7XG4gICAgICAgIHZhciBfY29sb3IgPSB0aGlzLmdldENvbG9yKCdzb3VyY2UnKTtcbiAgICAgICAgdmFyIF90YXJnZXQgPSB0aGlzLmdldFRhcmdldCgpO1xuICAgICAgICB2YXIgX3cgPSBtYXNrLmJvdW5kcy5tYXhYIC0gbWFzay5ib3VuZHMubWluWCArIDEsIF9oID0gbWFzay5ib3VuZHMubWF4WSAtIG1hc2suYm91bmRzLm1pblkgKyAxO1xuICAgICAgICB2YXIgb2xkSW1hZ2VEYXRhID0gX3RhcmdldC5nZXRJbWFnZURhdGEoIG1hc2suYm91bmRzLm1pblgsbWFzay5ib3VuZHMubWluWSxfdywgX2gpO1xuXG4gICAgICAgIG1hc2sucmVuZGVyKF90YXJnZXQse1xuICAgICAgICAgIGludGVyc2VjdGlvbkNvbG9yIDogX2NvbG9yLFxuICAgICAgICAgIGZpbGwgOiBfY29sb3IsXG4gICAgICAgICAgY2FjaGU6IGZhbHNlLFxuICAgICAgICAgIGxlZnQgOiBtYXNrLmJvdW5kcy5taW5YLFxuICAgICAgICAgIHRvcCA6IG1hc2suYm91bmRzLm1pbllcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jYW52YXMuZmlyZShcImRyYXc6YWZ0ZXJcIix7XG4gICAgICAgICAgdGFyZ2V0OiB0aGlzLmdldFRhcmdldCgpICxcbiAgICAgICAgICByZWRvOiBfdGFyZ2V0LmdldEltYWdlRGF0YSggbWFzay5ib3VuZHMubWluWCxtYXNrLmJvdW5kcy5taW5ZLF93LCBfaCksXG4gICAgICAgICAgdW5kbzogb2xkSW1hZ2VEYXRhICxcbiAgICAgICAgICBsZWZ0IDogbWFzay5ib3VuZHMubWluWCxcbiAgICAgICAgICB0b3AgOiBtYXNrLmJvdW5kcy5taW5ZLFxuICAgICAgICAgIGNvbG9yOiB0aGlzLmdldENvbG9yKCkuc2xpY2UoKVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcbiAgICBnZXRIaXN0b3J5UmVjb3JkOiBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjYW52YXM6ICAgdGhpcy5jYW52YXMsXG4gICAgICAgIG9iamVjdDogICBldmVudC50YXJnZXQgLFxuICAgICAgICB0eXBlOiAgICAgXCJkcmF3OmJ1Y2tldFwiLFxuICAgICAgICBsZWZ0OiAgICAgZXZlbnQubGVmdCAsXG4gICAgICAgIHRvcDogICAgICBldmVudC50b3AgLFxuICAgICAgICB1bmRvRGF0YTogZXZlbnQudW5kbyxcbiAgICAgICAgcmVkb0RhdGE6IGV2ZW50LnJlZG8sXG4gICAgICAgIGNvbG9yOiAgICB0aGlzLmNvbnZlcnRDb2xvcihldmVudC5jb2xvcixcInNvdXJjZVwiICApLFxuICAgICAgICB1bmRvOiBmdW5jdGlvbihfYWN0aW9uKXtcbiAgICAgICAgICBfYWN0aW9uLm9iamVjdC5wdXRJbWFnZURhdGEoX2FjdGlvbi51bmRvRGF0YSwgX2FjdGlvbi5sZWZ0LF9hY3Rpb24udG9wKTtcbiAgICAgICAgICBfYWN0aW9uLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVkbzogZnVuY3Rpb24oX2FjdGlvbil7XG4gICAgICAgICAgX2FjdGlvbi5vYmplY3QucHV0SW1hZ2VEYXRhKF9hY3Rpb24ucmVkb0RhdGEsIF9hY3Rpb24ubGVmdCxfYWN0aW9uLnRvcCk7XG4gICAgICAgICAgX2FjdGlvbi5jYW52YXMucmVuZGVyQWxsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG5mYWJyaWMuU2xpZGVDYW52YXMucHJvdG90eXBlLmRyYXdpbmdUb29scy5QYWludEJ1Y2tldEJydXNoID0ge1xuICBpY29uOiAgJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJyArIHJlcXVpcmUoJ2Jhc2U2NC1sb2FkZXIhLi8uLi9tZWRpYS9wYWludC1idWNrZXQuc3ZnJyksXG4gIHRpdGxlOiAnQnVja2V0IEJydXNoJ1xufTtcbmZhYnJpYy5TbGlkZUNhbnZhcy5wcm90b3R5cGUuYWN0aXZlRHJhd2luZ1Rvb2xzLnB1c2goXCJQYWludEJ1Y2tldEJydXNoXCIpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9icnVzaGVzL1BhaW50QnVja2V0QnJ1c2guanNcbi8vIG1vZHVsZSBpZCA9IDI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuXG4gIC8qKlxuICAgKiBQZW5jaWxCcnVzaCBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLlBlbmNpbEJydXNoXG4gICAqIEBleHRlbmRzIGZhYnJpYy5CYXNlQnJ1c2hcbiAgICovXG4gIGZhYnJpYy5QYWludFBlbkJydXNoID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLkJhc2VCcnVzaCwgLyoqIEBsZW5kcyBmYWJyaWMuUGVuY2lsQnJ1c2gucHJvdG90eXBlICovIHtcbiAgICB0eXBlOiAncGFpbnQtcGVuLWJydXNoJyxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtmYWJyaWMuQ2FudmFzfSBjYW52YXNcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUGVuY2lsQnJ1c2h9IEluc3RhbmNlIG9mIGEgcGVuY2lsIGJydXNoXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oY2FudmFzKSB7XG4gICAgICB0aGlzLmNhbGxTdXBlcignaW5pdGlhbGl6ZScsIGNhbnZhcyk7XG4gICAgICB0aGlzLl9wb2ludHMgPSBbXTtcbiAgICB9LFxuICAgIGdldFRhcmdldDogZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiB0aGlzLmNhbnZhcy5kcmF3aW5nQ29udGV4dDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIElub3Zva2VkIG9uIG1vdXNlIGRvd25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRlclxuICAgICAqL1xuICAgIG9uTW91c2VEb3duOiBmdW5jdGlvbihwb2ludGVyKSB7XG4gICAgICB0aGlzLl9yZXNldCgpO1xuICAgICAgdGhpcy5fZmlsbChwb2ludGVyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW5vdm9rZWQgb24gbW91c2UgbW92ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyXG4gICAgICovXG4gICAgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uKHBvaW50ZXIpIHtcbiAgICAgIHRoaXMuX2ZpbGwocG9pbnRlcik7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBJbnZva2VkIG9uIG1vdXNlIHVwXG4gICAgICovXG4gICAgb25Nb3VzZVVwOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuY2FudmFzLmZpcmUoXCJkcmF3OmFmdGVyXCIse1xuICAgICAgICB0YXJnZXQ6IHRoaXMuZ2V0VGFyZ2V0KCkgLFxuICAgICAgICBwb2ludHM6IHRoaXMuX3BvaW50cy5zbGljZSgpICxcbiAgICAgICAgY29sb3I6IHRoaXMuZ2V0Q29sb3IoJ3NvdXJjZScpXG4gICAgICB9KTtcbiAgICB9LFxuICAgIF9maWxsOiBmdW5jdGlvbihwb2ludGVyKXtcbiAgICAgIHBvaW50ZXIgPSB7XG4gICAgICAgIHg6IE1hdGguZmxvb3IocG9pbnRlci54KSxcbiAgICAgICAgeTogTWF0aC5mbG9vcihwb2ludGVyLnkpXG4gICAgICB9O1xuXG4gICAgICBpZihfLmZpbmRXaGVyZSh0aGlzLl9wb2ludHMscG9pbnRlcikpe1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIHRoaXMuZ2V0VGFyZ2V0KCkuZmlsbFJlY3QocG9pbnRlci54ICwgcG9pbnRlci55ICAsMSwxKTtcbiAgICAgIHZhciBfZGF0YSA9IHRoaXMuZ2V0VGFyZ2V0KCkuZ2V0SW1hZ2VEYXRhKHBvaW50ZXIueCAsIHBvaW50ZXIueSAgLDEsMSk7XG4gICAgICBwb2ludGVyLmNvbG9yID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoX2RhdGEuZGF0YSk7XG4gICAgICB0aGlzLl9wb2ludHMucHVzaChwb2ludGVyKTtcbiAgICAgIHZhciBfY29sb3IgPSB0aGlzLmdldENvbG9yKCdzb3VyY2UnKTtcblxuXG5cblxuICAgICAgX2RhdGEuZGF0YVswXSA9IF9jb2xvclswXTtcbiAgICAgIF9kYXRhLmRhdGFbMV0gPSBfY29sb3JbMV07XG4gICAgICBfZGF0YS5kYXRhWzJdID0gX2NvbG9yWzJdO1xuICAgICAgX2RhdGEuZGF0YVszXSA9IF9jb2xvclszXTtcblxuICAgICAgdGhpcy5nZXRUYXJnZXQoKS5wdXRJbWFnZURhdGEoX2RhdGEsIHBvaW50ZXIueCAsIHBvaW50ZXIueSk7XG4gICAgICB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICB9LFxuICAgIHVuZG9QYWludEFjdGlvbjogZnVuY3Rpb24oX2FjdGlvbil7XG4gICAgICB2YXIgY3R4ID0gX2FjdGlvbi5vYmplY3Q7XG4gICAgICBmb3IodmFyIGkgaW4gX2FjdGlvbi5wb2ludHMpe1xuICAgICAgICB2YXIgX3AgID1fYWN0aW9uLnBvaW50c1tpXSwgX2MgPSBfYWN0aW9uLmJydXNoLmdldEFjdGlvbkNvbG9yKF9wLmNvbG9yKTtcbiAgICAgICAgaWYoX2NbM10gPT0gMCkge1xuICAgICAgICAgIGN0eC5jbGVhclJlY3QoX3AueCxfcC55ICAsMSwxKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwicmdiYShcIiArIF9jWzBdICsgXCIsXCIgKyBfY1sxXSArIFwiLFwiICsgX2NbMl0gKyBcIixcIiArIF9jWzNdICsgIFwiKVwiO1xuICAgICAgICAgIGN0eC5maWxsUmVjdChfcC54LF9wLnkgICwxLDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfYWN0aW9uLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICB9LFxuICAgIHJlZG9QYWludEFjdGlvbjogZnVuY3Rpb24oX2FjdGlvbil7XG5cbiAgICAgIHZhciBjdHggPSBfYWN0aW9uLm9iamVjdCwgX2MgPSBfYWN0aW9uLmJydXNoLmdldEFjdGlvbkNvbG9yKF9hY3Rpb24uY29sb3IpO1xuICAgICAgdmFyIHB0cyA9IF9hY3Rpb24ucG9pbnRzO1xuICAgICAgaWYoX2NbM10gPT0gMCkge1xuICAgICAgICBmb3IodmFyIGkgaW4gcHRzKXtcbiAgICAgICAgICBjdHguY2xlYXJSZWN0KHB0c1tpXS54LHB0c1tpXS55ICAsMSwxKTtcbiAgICAgICAgfVxuICAgICAgfWVsc2V7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBcInJnYmEoXCIgKyBfY1swXSArIFwiLFwiICsgX2NbMV0gKyBcIixcIiArIF9jWzJdICsgXCIsXCIgKyBfY1szXSArIFwiKVwiO1xuICAgICAgICBmb3IodmFyIGkgaW4gcHRzKXtcbiAgICAgICAgICBjdHguZmlsbFJlY3QocHRzW2ldLngscHRzW2ldLnkgLDEsMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF9hY3Rpb24uY2FudmFzLnJlbmRlckFsbCgpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ2xlYXIgcG9pbnRzIGFycmF5IGFuZCBzZXQgY29udGV4dFRvcCBjYW52YXMgc3R5bGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fcG9pbnRzLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLmdldFRhcmdldCgpLmZpbGxTdHlsZSA9IHRoaXMuY29sb3I7XG4gICAgfSxcbiAgICBnZXRIaXN0b3J5UmVjb3JkOiBmdW5jdGlvbihldmVudCl7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNhbnZhczogICB0aGlzLmNhbnZhcyxcbiAgICAgICAgdHlwZTogICAgIFwiZHJhdzpwZW5cIixcbiAgICAgICAgb2JqZWN0OiAgIGV2ZW50LnRhcmdldCAsXG4gICAgICAgIHBvaW50czogICBldmVudC5wb2ludHMgLFxuICAgICAgICBicnVzaDogICB0aGlzLFxuICAgICAgICBjb2xvcjogICAgZXZlbnQuY29sb3IsXG4gICAgICAgIHVuZG86ICAgICB0aGlzLnVuZG9QYWludEFjdGlvbixcbiAgICAgICAgcmVkbzogICAgIHRoaXMucmVkb1BhaW50QWN0aW9uXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuZmFicmljLlNsaWRlQ2FudmFzLnByb3RvdHlwZS5kcmF3aW5nVG9vbHMuUGFpbnRQZW5CcnVzaCA9IHtcbiAgY2xhc3NOYW1lOiAnZmEgZmEtcGFpbnQtYnJ1c2gnLFxuICB0aXRsZTogJ1BlbiBCcnVzaCdcbn07XG5mYWJyaWMuU2xpZGVDYW52YXMucHJvdG90eXBlLmFjdGl2ZURyYXdpbmdUb29scy5wdXNoKFwiUGFpbnRQZW5CcnVzaFwiKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYnJ1c2hlcy9QYWludFBlbkJydXNoLmpzXG4vLyBtb2R1bGUgaWQgPSAyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcblxuZmFicmljLlBlbmNpbEJydXNoLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24oY2FudmFzKSB7XG4gIHRoaXMuY2FsbFN1cGVyKCdpbml0aWFsaXplJywgY2FudmFzKTtcbiAgdGhpcy5fcG9pbnRzID0gWyBdO1xufTtcbmZhYnJpYy5QZW5jaWxCcnVzaC5wcm90b3R5cGUudHlwZSA9ICdwZW5jaWwtYnJ1c2gnO1xuXG5mYWJyaWMuUGVuY2lsQnJ1c2gucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGN0eCAgPSB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLCB2ID0gdGhpcy5jYW52YXMudmlld3BvcnRUcmFuc2Zvcm0sIHAxID0gdGhpcy5fcG9pbnRzWzBdLCBwMiA9IHRoaXMuX3BvaW50c1sxXTtcbiAgY3R4LnNhdmUoKTtcbiAgY3R4LnRyYW5zZm9ybSh2WzBdLCB2WzFdLCB2WzJdLCB2WzNdLCB2WzRdLCB2WzVdKTtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHgubGluZVdpZHRoID0gMSAvIHRoaXMuY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtWzBdO1xuICBpZiAodGhpcy5fcG9pbnRzLmxlbmd0aCA9PT0gMiAmJiBwMS54ID09PSBwMi54ICYmIHAxLnkgPT09IHAyLnkpIHtcbiAgICBwMS54IC09IDAuNSAvIHRoaXMuY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtWzBdO1xuICAgIHAyLnggKz0gMC41IC8gdGhpcy5jYW52YXMudmlld3BvcnRUcmFuc2Zvcm1bMF07XG4gIH1cbiAgY3R4Lm1vdmVUbyhwMS54LCBwMS55KTtcbiAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IHRoaXMuX3BvaW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBtaWRQb2ludCA9IHAxLm1pZFBvaW50RnJvbShwMik7XG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8ocDEueCwgcDEueSwgbWlkUG9pbnQueCwgbWlkUG9pbnQueSk7XG4gICAgcDEgPSB0aGlzLl9wb2ludHNbaV07XG4gICAgcDIgPSB0aGlzLl9wb2ludHNbaSArIDFdO1xuICB9XG4gIGN0eC5saW5lVG8ocDEueCwgcDEueSk7XG4gIGN0eC5zdHJva2UoKTtcbiAgY3R4LnJlc3RvcmUoKTtcbn07XG5cbmZhYnJpYy5QZW5jaWxCcnVzaC5wcm90b3R5cGUuY3JlYXRlUGF0aCA9IGZ1bmN0aW9uKHBhdGhEYXRhKSB7XG4gIHZhciBwYXRoID0gbmV3IGZhYnJpYy5QYXRoKHBhdGhEYXRhLCB7XG4gICAgc3Ryb2tlOiB0aGlzLmdldENvbG9yKCksXG4gICAgc3Ryb2tlV2lkdGg6IHRoaXMud2lkdGgsXG4gICAgYXBwbGljYXRpb246IHRoaXMuY2FudmFzLmFwcGxpY2F0aW9uXG4gIH0pO1xuICBpZiAodGhpcy5zaGFkb3cpIHtcbiAgICB0aGlzLnNoYWRvdy5hZmZlY3RTdHJva2UgPSB0cnVlO1xuICAgIHBhdGguc2V0U2hhZG93KHRoaXMuc2hhZG93KTtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn07XG5mYWJyaWMuUGVuY2lsQnJ1c2gucHJvdG90eXBlLm1pbkxlbmd0aCA9IDM7XG5cbmZhYnJpYy5QZW5jaWxCcnVzaC5wcm90b3R5cGUuYWNjdXJhY3kgPSAwO1xuZmFicmljLlBlbmNpbEJydXNoLnByb3RvdHlwZS5fZmluYWxpemVBbmRBZGRQYXRoID0gZnVuY3Rpb24oKSB7XG4gIGlmKHRoaXMuX3BvaW50cy5sZW5ndGggPCAyKXJldHVybjtcbiAgdmFyIGN0eCA9IHRoaXMuY2FudmFzLmNvbnRleHRUb3A7XG4gIGN0eC5jbG9zZVBhdGgoKTtcbiAgdGhpcy5jYW52YXMuY2xlYXJDb250ZXh0KHRoaXMuY2FudmFzLmNvbnRleHRUb3ApO1xuICBpZih0aGlzLmFjY3VyYWN5KXtcbiAgICBmb3IodmFyIGkgaW4gdGhpcy5fcG9pbnRzKXtcbiAgICAgIHRoaXMuX3BvaW50c1tpXS54ID0gK3RoaXMuX3BvaW50c1tpXS54LnRvRml4ZWQodGhpcy5hY2N1cmFjeSk7XG4gICAgICB0aGlzLl9wb2ludHNbaV0ueSA9ICt0aGlzLl9wb2ludHNbaV0ueS50b0ZpeGVkKHRoaXMuYWNjdXJhY3kpO1xuICAgIH1cbiAgICBmb3IoaSA9IHRoaXMuX3BvaW50cy5sZW5ndGggLSAxOyBpLS07ICl7XG4gICAgICBpZih0aGlzLl9wb2ludHNbaV0ueCA9PSB0aGlzLl9wb2ludHNbaSArIDFdLnggJiYgIHRoaXMuX3BvaW50c1tpXS55ID09IHRoaXMuX3BvaW50c1tpICsgMV0ueSl7XG4gICAgICAgIHRoaXMuX3BvaW50cy5zcGxpY2UoaSwxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYodGhpcy5fcG9pbnRzLmxlbmd0aCA8IDIpcmV0dXJuO1xuICB2YXIgcGF0aERhdGEgPSB0aGlzLmNvbnZlcnRQb2ludHNUb1NWR1BhdGgodGhpcy5fcG9pbnRzKS5qb2luKCcnKTtcbiAgaWYgKHRoaXMuX3BvaW50cy5sZW5ndGggPCB0aGlzLm1pbkxlbmd0aCB8fCBwYXRoRGF0YSA9PT0gJ00gMCAwIFEgMCAwIDAgMCBMIDAgMCcpIHtcbiAgICByZXR1cm4gdGhpcy5jYW52YXMucmVuZGVyQWxsKCk7XG4gIH1cbiAgdmFyIHBhdGggPSB0aGlzLmNyZWF0ZVBhdGgocGF0aERhdGEpO1xuICB0aGlzLmNhbnZhcy5hZGQocGF0aCk7XG4gIHBhdGguc2V0Q29vcmRzKCk7XG4gIHRoaXMuX3Jlc2V0U2hhZG93KCk7XG4gIHRoaXMuY2FudmFzLnJlbmRlckFsbCgpO1xuICB0aGlzLmNhbnZhcy5maXJlKCdwYXRoOmNyZWF0ZWQnLCB7IHBhdGg6IHBhdGggfSk7XG59O1xuXG5cbmZhYnJpYy5TbGlkZUNhbnZhcy5wcm90b3R5cGUuZHJhd2luZ1Rvb2xzLlBlbmNpbEJydXNoID0ge1xuICBjbGFzc05hbWU6ICdmYSBmYS1wZW5jaWwnLFxuICB0aXRsZTogJ1BlbmNpbCBCcnVzaCdcbn07XG5mYWJyaWMuU2xpZGVDYW52YXMucHJvdG90eXBlLmFjdGl2ZURyYXdpbmdUb29scy5wdXNoKFwiUGVuY2lsQnJ1c2hcIik7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2JydXNoZXMvUGVuY2lsQnJ1c2guanNcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuZmFicmljLlBvaW50c0JydXNoID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLkJhc2VCcnVzaCwge1xuICB0eXBlOiBcInBvaW50cy1icnVzaFwiLFxuICBtYXhpbXVtUG9pbnRzIDogMCxcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKGNhbnZhcykge1xuICAgIHRoaXMuY2FsbFN1cGVyKCdpbml0aWFsaXplJywgY2FudmFzKTtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH0sXG4gIGN1cnJlbnRQb2ludCA6IDEsXG4gIGdldFBvaW50czogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZmFicmljLnV0aWwub2JqZWN0LndoZXJlKHRoaXMuY2FudmFzLl9vYmplY3RzLHt0eXBlOiBcIm1hdGVyaWFsLXBvaW50XCJ9KTtcbiAgfSxcbiAgY2hlY2tQb3NpdGlvbjogbnVsbCxcbiAgb25Nb3VzZURvd246IGZ1bmN0aW9uIChwb2ludGVyKSB7XG5cbiAgfSxcbiAgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uIChwb2ludGVyKSB7XG4gIH0sXG4gIHJlc2V0OiBmdW5jdGlvbigpe1xuICB9LFxuICBvbk1vdXNlVXA6IGZ1bmN0aW9uIChwb2ludGVyKSB7XG4gICAgdmFyIF9wb2ludHMgPSB0aGlzLmdldFBvaW50cygpO1xuXG4gICAgdmFyIHBvcyA9IHtcbiAgICAgIGxlZnQ6IHBvaW50ZXIueCAtMC41LFxuICAgICAgdG9wOiBwb2ludGVyLnkgIC0wLjUsXG4gICAgfTtcblxuICAgIHZhciBfY29ycmVjdCA9IHRoaXMuY2hlY2tQb3NpdGlvbiA/IHRoaXMuY2hlY2tQb3NpdGlvbihwb2ludGVyKSA6IHRydWUgO1xuXG4gICAgaWYoIV9jb3JyZWN0KXtcbiAgICAgIHRoaXMuY2FudmFzLmZpcmUoXCJwb2ludDpyZWplY3RlZFwiLHtwb2ludCA6IHBvaW50ZXJ9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZih0aGlzLm1heGltdW1Qb2ludHMgJiYgX3BvaW50cy5sZW5ndGggPj0gdGhpcy5tYXhpbXVtUG9pbnRzKXtcbiAgICAgIGlmKHRoaXMuY3VycmVudFBvaW50ID4gdGhpcy5tYXhpbXVtUG9pbnRzKXtcbiAgICAgICAgdGhpcy5jdXJyZW50UG9pbnQgPSAxO1xuICAgICAgfVxuICAgICAgaWYodGhpcy53aG9sZUNvb3JkaW5hdGVzKXtcbiAgICAgICAgcG9pbnRlci54ID0gTWF0aC5yb3VuZChwb2ludGVyLngpICsgMC41O1xuICAgICAgICBwb2ludGVyLnkgPSBNYXRoLnJvdW5kKHBvaW50ZXIueSkgICsgMC41O1xuICAgICAgfVxuXG4gICAgICB2YXIgX29iaiA9IGZhYnJpYy51dGlsLm9iamVjdC5maW5kV2hlcmUoX3BvaW50cyx7bnVtYmVyIDogdGhpcy5jdXJyZW50UG9pbnQrK30pO1xuXG4gICAgICB2YXIgc3RhdGVzID0ge1xuICAgICAgICBvcmlnaW5hbCA6IHtcbiAgICAgICAgICBsZWZ0OiBfb2JqLmxlZnQsXG4gICAgICAgICAgdG9wOiBfb2JqLnRvcFxuICAgICAgICB9LFxuICAgICAgICBtb2RpZmllZDogIHtcbiAgICAgICAgICBsZWZ0OiBwb2ludGVyLnggLSAwLjUsXG4gICAgICAgICAgdG9wOiBwb2ludGVyLnkgLSAwLjVcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX29iai5zZXQoc3RhdGVzLm1vZGlmaWVkKS5zZXRDb29yZHMoKS5maXJlKFwibW9kaWZpZWRcIix7c3RhdGVzOiBzdGF0ZXN9KTtcbiAgICAgIHRoaXMuY2FudmFzLmZpcmUoXCJvYmplY3Q6bW9kaWZpZWRcIix7dGFyZ2V0IDogX29iaiwgc3RhdGVzOiBzdGF0ZXN9KTtcbiAgICAgIHRoaXMuY2FudmFzLnNldEFjdGl2ZU9iamVjdChfb2JqKTtcbiAgICAgIHRoaXMuY2FudmFzLnJlbmRlckFsbCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy5jdXJyZW50UG9pbnQgPSAxO1xuICAgICAgd2hpbGUoZmFicmljLnV0aWwub2JqZWN0LmZpbmRXaGVyZShfcG9pbnRzLHtudW1iZXIgOiB0aGlzLmN1cnJlbnRQb2ludH0pKXtcbiAgICAgICAgdGhpcy5jdXJyZW50UG9pbnQrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX29iaiA9IG5ldyBmYWJyaWMuTWF0ZXJpYWxQb2ludCh7XG4gICAgICBudW1iZXI6IHRoaXMuY3VycmVudFBvaW50ICxcbiAgICAgIGFwcGxpY2F0aW9uOiB0aGlzLmNhbnZhcy5hcHBsaWNhdGlvbixcbiAgICAgIGxlZnQ6IHBvcy5sZWZ0LFxuICAgICAgdG9wOiBwb3MudG9wXG4gICAgfSk7XG5cbiAgICB0aGlzLmN1cnJlbnRQb2ludCsrO1xuICAgIHRoaXMuY2FudmFzLmFkZChfb2JqKTtcbiAgICB0aGlzLmNhbnZhcy5maXJlKFwicG9pbnQ6Y3JlYXRlZFwiLHtwb2ludCA6IF9vYmp9KVxuICAgIHRoaXMuY2FudmFzLnNldEFjdGl2ZU9iamVjdChfb2JqKTtcbiAgICB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgfSxcbiAgX3JlbmRlcjogZnVuY3Rpb24gKCkge1xuICB9XG59KTtcblxuZmFicmljLlNsaWRlQ2FudmFzLnByb3RvdHlwZS5kcmF3aW5nVG9vbHMuUG9pbnRzQnJ1c2ggPSB7XG4gIGNsYXNzTmFtZTogJ2ZhIGZhLWNpcmNsZS1vJyxcbiAgdGl0bGU6ICdQb2ludHMgQnJ1c2gnXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9icnVzaGVzL1BvaW50c0JydXNoLmpzXG4vLyBtb2R1bGUgaWQgPSAyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cblxuICAvKipcbiAgICogUGVuY2lsQnJ1c2ggY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5SZWN0YW5nbGVCcnVzaFxuICAgKiBAZXh0ZW5kcyBmYWJyaWMuQmFzZUJydXNoXG4gICAqL1xuICBmYWJyaWMuUG9seWdvbkJydXNoID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLkJhc2VCcnVzaCwgLyoqIEBsZW5kcyBmYWJyaWMuUmVjdGFuZ2xlQnJ1c2gucHJvdG90eXBlICovIHtcbiAgICByZXN1bHRPYmplY3RUeXBlOiBcIlBvbHlsaW5lXCIsXG4gICAgdHlwZTogXCJwb2x5Z29uLWJydXNoXCIsXG4gICAgdmlydHVhbE9iamVjdDogZmFsc2UsXG4gICAgbWF4aW11bVBvaW50cyA6IDAsXG4gICAgaW5kaXZpZHVhbERyYXdpbmc6IHRydWUsXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5DYW52YXN9IGNhbnZhc1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5SZWN0YW5nbGVCcnVzaH0gSW5zdGFuY2Ugb2YgYSBwZW5jaWwgYnJ1c2hcbiAgICAgKi9cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgICB0aGlzLmNhbGxTdXBlcignaW5pdGlhbGl6ZScsIGNhbnZhcyk7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBJbm92b2tlZCBvbiBtb3VzZSBkb3duXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXJcbiAgICAgKi9cbiAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24gKHBvaW50ZXIpIHtcblxuXG4gICAgICBpZih0aGlzLmluZGl2aWR1YWxEcmF3aW5nIHx8ICF0aGlzLnRhcmdldCl7XG4gICAgICAgIHZhciBfcG9pbnQgPSB7eDogcG9pbnRlci54LCB5OiBwb2ludGVyLnl9O1xuICAgICAgICB0aGlzLnBvaW50cy5wdXNoKF9wb2ludCk7XG4gICAgICAgIGlmKCF0aGlzLnZpcnR1YWxPYmplY3Qpe1xuICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5jYW52YXMuY3JlYXRlT2JqZWN0KFxuICAgICAgICAgICAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCh7fSxcbiAgICAgICAgICAgICAgdGhpcy5yZXN1bHRPYmplY3RQcm9wZXJ0aWVzLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy5yZXN1bHRPYmplY3RUeXBlLFxuICAgICAgICAgICAgICAgIHBvaW50czogW19wb2ludF0sXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9ZWxzZXtcbiAgICAgICAgdGhpcy5fY3JlYXRlX2FjdGl2ZV9wb2ludChwb2ludGVyKTtcbiAgICAgIH1cblxuICAgICAgaWYodGhpcy52aXJ0dWFsT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuX3NldEJydXNoU3R5bGVzKCk7XG4gICAgICAgIHRoaXMuX3NldFNoYWRvdygpO1xuICAgICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICAgIH1lbHNle1xuICAgICAgICB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2NyZWF0ZV9hY3RpdmVfcG9pbnQ6IGZ1bmN0aW9uIChwb2ludGVyKSB7XG4gICAgICB2YXIgX3BvaW50ID0ge3g6IHBvaW50ZXIueCwgeTogcG9pbnRlci55fTtcbiAgICAgIHRoaXMuYWN0aXZlUG9pbnQgPSAgX3BvaW50O1xuICAgICAgdGhpcy5hY3RpdmVUYXJnZXRQb2ludCA9ICB7eDogcG9pbnRlci54IC0gdGhpcy50YXJnZXQubGVmdCwgeSA6IHBvaW50ZXIueSAtIHRoaXMudGFyZ2V0LnRvcH07XG4gICAgICB0aGlzLnBvaW50cy5wdXNoKHRoaXMuYWN0aXZlUG9pbnQpO1xuICAgICAgdGhpcy50YXJnZXQuYWRkUG9pbnQodGhpcy5hY3RpdmVUYXJnZXRQb2ludCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBJbm92b2tlZCBvbiBtb3VzZSBtb3ZlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXJcbiAgICAgKi9cbiAgICBvbk1vdXNlTW92ZTogZnVuY3Rpb24gKHBvaW50ZXIpIHtcblxuXG4gICAgICB2YXIgX3AgPSAge3g6IHBvaW50ZXIueCAtIHRoaXMudGFyZ2V0LmxlZnQsIHkgOiBwb2ludGVyLnkgLSB0aGlzLnRhcmdldC50b3B9O1xuXG5cbiAgICAgIGlmKHRoaXMuYWN0aXZlUG9pbnQpe1xuICAgICAgICB0aGlzLmFjdGl2ZVBvaW50LnggPSBwb2ludGVyLng7XG4gICAgICAgIHRoaXMuYWN0aXZlUG9pbnQueSA9IHBvaW50ZXIueTtcbiAgICAgICAgdmFyIF9vcmRlciA9IHRoaXMudGFyZ2V0LnBvaW50cy5sZW5ndGggO1xuXG4gICAgICAgIHRoaXMudGFyZ2V0LnNldFBvaW50KFwicFwiICsgX29yZGVyLCB7XG4gICAgICAgICAgeCA6IHBvaW50ZXIueCAtIHRoaXMudGFyZ2V0LmxlZnQsXG4gICAgICAgICAgeSA6IHBvaW50ZXIueSAtIHRoaXMudGFyZ2V0LnRvcFxuICAgICAgICB9KTtcbiAgICAgIH1lbHNle1xuICAgICAgICB2YXIgX2Rpc3QgPSBmYWJyaWMuUG9pbnQucHJvdG90eXBlLmRpc3RhbmNlRnJvbS5jYWxsKHRoaXMucG9pbnRzWzBdLF9wKVxuICAgICAgICBpZihfZGlzdCA+IDEwKXtcbiAgICAgICAgICB0aGlzLl9jcmVhdGVfYWN0aXZlX3BvaW50KHBvaW50ZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICB9LFxuICAgIHJlc2V0OiBmdW5jdGlvbigpe1xuICAgICAgdGhpcy5wb2ludHMgPSBbXTtcbiAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcbiAgICAgIHRoaXMuYWN0aXZlUG9pbnQgPSBudWxsO1xuICAgICAgdGhpcy5hY3RpdmVUYXJnZXRQb2ludCA9IG51bGw7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBJbnZva2VkIG9uIG1vdXNlIHVwXG4gICAgICovXG4gICAgb25Nb3VzZVVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnRhcmdldC51cGRhdGVCYm94KCk7XG4gICAgICBpZih0aGlzLnBvaW50cy5sZW5ndGggPT0gdGhpcy5tYXhpbXVtUG9pbnRzKXtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5hY3RpdmVQb2ludCA9IG51bGw7XG4gICAgICB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRHJhdyBhIHNtb290aCBwYXRoIG9uIHRoZSB0b3BDYW52YXMgdXNpbmcgcXVhZHJhdGljQ3VydmVUb1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5jYW52YXMuZmlyZShcImJlZm9yZTpicnVzaDpyZW5kZXJcIix7dGFyZ2V0OiB0aGlzfSk7XG5cbiAgICAgIHZhciBjdHggPSB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLFxuICAgICAgICB2ID0gdGhpcy5jYW52YXMudmlld3BvcnRUcmFuc2Zvcm07XG5cbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHgudHJhbnNmb3JtKHZbMF0sIHZbMV0sIHZbMl0sIHZbM10sIHZbNF0sIHZbNV0pO1xuXG4gICAgICB2YXIgX2tsYXNzX3Byb3RvID0gZmFicmljW3RoaXMucmVzdWx0T2JqZWN0VHlwZV0ucHJvdG90eXBlO1xuXG4gICAgICBjdHgubGluZVdpZHRoID0gX2tsYXNzX3Byb3RvLnN0cm9rZVdpZHRoO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gX2tsYXNzX3Byb3RvLnN0cm9rZTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBfa2xhc3NfcHJvdG8uZmlsbDtcblxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbyh0aGlzLnBvaW50c1swXS54LHRoaXMucG9pbnRzWzBdLnkpO1xuICAgICAgZm9yKHZhciBpID0gMTsgaSA8IHRoaXMucG9pbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY3R4LmxpbmVUbyh0aGlzLnBvaW50c1tpXS54LHRoaXMucG9pbnRzW2ldLnkpXG4gICAgICB9XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICBjdHguZmlsbCgpO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIHRoaXMuY2FudmFzLmZpcmUoXCJicnVzaDpyZW5kZXJcIix7dGFyZ2V0OiB0aGlzfSlcbiAgICB9LFxuICAgIGRyYXdpbmdMaW1pdHM6IG51bGwsIC8qe1xuICAgICAgbGVmdDogMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgdG9wOiAwXG4gICAgfSwqL1xuICAgIG1pbkhlaWdodDogNTAsXG4gICAgbWluV2lkdGg6IDUwLFxuICAgIF9jaGVja1JlY3RhbmdsZTogZnVuY3Rpb24oX3JlY3Qpe1xuXG5cbiAgICAgIHZhciBkbCA9IHRoaXMuZHJhd2luZ0xpbWl0cztcbiAgICAgIGlmKGRsICYmIGRsID09IFwiYmFja2dyb3VuZEltYWdlXCIpe1xuICAgICAgICBkbD0gdGhpcy5jYW52YXMuYmFja2dyb3VuZEltYWdlO1xuICAgICAgfVxuXG4gICAgICBfcmVjdCA9IHtcbiAgICAgICAgbGVmdDogX3JlY3QubGVmdCxcbiAgICAgICAgdG9wOiBfcmVjdC50b3AsXG4gICAgICAgIHdpZHRoOiBfcmVjdC53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBfcmVjdC5oZWlnaHQsXG4gICAgICB9O1xuXG4gICAgICBfcmVjdC5sZWZ0ICAtPSBmYWJyaWMuUmVjdC5wcm90b3R5cGUuc3Ryb2tlV2lkdGggLyAyO1xuICAgICAgX3JlY3QudG9wICAgLT0gZmFicmljLlJlY3QucHJvdG90eXBlLnN0cm9rZVdpZHRoIC8gMjtcblxuICAgICAgaWYoZGwpe1xuICAgICAgICBpZihfcmVjdC5sZWZ0ICsgX3JlY3Qud2lkdGggPCBkbC5sZWZ0IHx8XG4gICAgICAgICAgX3JlY3QudG9wICArIF9yZWN0LmhlaWdodCA8IGRsLnRvcCB8fFxuICAgICAgICAgIF9yZWN0LmxlZnQgPiBkbC53aWR0aCB8fFxuICAgICAgICAgIF9yZWN0LnRvcCA+IGRsLmhlaWdodCl7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoX3JlY3QudG9wIDwgZGwudG9wKXtcbiAgICAgICAgICBfcmVjdC5oZWlnaHQgKz1fcmVjdC50b3AgO1xuICAgICAgICAgIF9yZWN0LnRvcCA9IGRsLnRvcDtcbiAgICAgICAgfVxuICAgICAgICBpZihfcmVjdC5sZWZ0IDwgZGwubGVmdCl7XG4gICAgICAgICAgX3JlY3Qud2lkdGggKz0gX3JlY3QubGVmdDtcbiAgICAgICAgICBfcmVjdC5sZWZ0ID0gZGwubGVmdDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZih0aGlzLm1pbldpZHRoICYmIF9yZWN0LndpZHRoIDwgdGhpcy5taW5XaWR0aCl7XG4gICAgICAgIF9yZWN0LndpZHRoID0gdGhpcy5taW5XaWR0aDtcbiAgICAgIH1cbiAgICAgIGlmKHRoaXMubWluSGVpZ2h0ICYmIF9yZWN0LmhlaWdodCA8IHRoaXMubWluSGVpZ2h0KXtcbiAgICAgICAgX3JlY3QuaGVpZ2h0ID0gdGhpcy5taW5IZWlnaHQ7XG4gICAgICB9XG5cblxuICAgICAgaWYoZGwpIHtcbiAgICAgICAgdmFyIF94ZGlmZiA9IF9yZWN0LmxlZnQgKyBfcmVjdC53aWR0aCAtIGRsLndpZHRoO1xuICAgICAgICBpZiAoX3hkaWZmID4gMCkge1xuICAgICAgICAgIF9yZWN0LndpZHRoIC09IF94ZGlmZjtcbiAgICAgICAgICBpZiAodGhpcy5taW5XaWR0aCAmJiBfcmVjdC53aWR0aCA8IHRoaXMubWluV2lkdGgpIHtcbiAgICAgICAgICAgIF9yZWN0LmxlZnQgLT0gdGhpcy5taW5XaWR0aCAtIF9yZWN0LndpZHRoO1xuICAgICAgICAgICAgX3JlY3Qud2lkdGggPSB0aGlzLm1pbldpZHRoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgX3lkaWZmID0gX3JlY3QudG9wICsgX3JlY3QuaGVpZ2h0IC0gZGwuaGVpZ2h0O1xuICAgICAgICBpZiAoX3lkaWZmID4gMCkge1xuICAgICAgICAgIF9yZWN0LmhlaWdodCAtPSBfeWRpZmY7XG4gICAgICAgICAgaWYgKHRoaXMubWluSGVpZ2h0ICYmIF9yZWN0LmhlaWdodCA8IHRoaXMubWluSGVpZ2h0KSB7XG4gICAgICAgICAgICBfcmVjdC50b3AgLT0gdGhpcy5taW5IZWlnaHQgLSBfcmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICBfcmVjdC5oZWlnaHQgPSB0aGlzLm1pbkhlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBfcmVjdDtcbiAgICB9LFxuICAgIHJlc3VsdE9iamVjdFByb3BlcnRpZXM6IHt9XG4gIH0pO1xuXG5cbmZhYnJpYy5TbGlkZUNhbnZhcy5wcm90b3R5cGUuZHJhd2luZ1Rvb2xzLlBvbHlnb25CcnVzaCA9IHtcbiAgaWNvbjogJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnKyByZXF1aXJlKCdiYXNlNjQtbG9hZGVyIS4vLi4vbWVkaWEvcG9seWdvbi5wbmcnKSxcbiAgdGl0bGU6ICdQb2x5Z29uIEJydXNoJ1xufTtcbmZhYnJpYy5TbGlkZUNhbnZhcy5wcm90b3R5cGUuYWN0aXZlRHJhd2luZ1Rvb2xzLnB1c2goXCJQb2x5Z29uQnJ1c2hcIik7XG5cblxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9icnVzaGVzL1BvbHlnb25CcnVzaC5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbi8qKlxuICogUGVuY2lsQnJ1c2ggY2xhc3NcbiAqIEBjbGFzcyBmYWJyaWMuUmVjdGFuZ2xlQnJ1c2hcbiAqIEBleHRlbmRzIGZhYnJpYy5CYXNlQnJ1c2hcbiAqL1xuZmFicmljLlJlY3RhbmdsZUJydXNoID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLkJhc2VCcnVzaCwgLyoqIEBsZW5kcyBmYWJyaWMuUmVjdGFuZ2xlQnJ1c2gucHJvdG90eXBlICovIHtcbiAgcmVzdWx0T2JqZWN0VHlwZTogXCJSZWN0XCIsXG4gIHR5cGU6IFwicmVjdGFuZ2xlLWJydXNoXCIsXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge2ZhYnJpYy5DYW52YXN9IGNhbnZhc1xuICAgKiBAcmV0dXJuIHtmYWJyaWMuUmVjdGFuZ2xlQnJ1c2h9IEluc3RhbmNlIG9mIGEgcGVuY2lsIGJydXNoXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBjYW52YXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbm92b2tlZCBvbiBtb3VzZSBkb3duXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyXG4gICAqL1xuICBvbk1vdXNlRG93bjogZnVuY3Rpb24gKHBvaW50ZXIpIHtcbiAgICAvL3ByZXBhcmUgZm9yIGRyYXdpbmdcbiAgICBkZWxldGUgdGhpcy5wMjtcblxuICAgIHRoaXMucDEgPSBuZXcgZmFicmljLlBvaW50KHBvaW50ZXIueCwgcG9pbnRlci55KTtcbiAgICB0aGlzLl9zZXRCcnVzaFN0eWxlcygpO1xuICAgIHRoaXMuX3NldFNoYWRvdygpO1xuICAgIHRoaXMuY2FudmFzLmNvbnRleHRUb3AubW92ZVRvKHRoaXMucDEueCwgdGhpcy5wMS55KTtcbiAgICB0aGlzLl9yZW5kZXIoKTtcbiAgfSxcblxuICAvKipcbiAgICogSW5vdm9rZWQgb24gbW91c2UgbW92ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRlclxuICAgKi9cbiAgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uIChwb2ludGVyKSB7XG5cbiAgICB0aGlzLnAyID0gbmV3IGZhYnJpYy5Qb2ludChwb2ludGVyLngsIHBvaW50ZXIueSk7XG5cbiAgICBpZih0aGlzLmRyYXdpbmdPYmplY3Qpe1xuICAgICAgdmFyIF9yZWN0ID0gdGhpcy5fZ2V0UmVjdCgpO1xuICAgICAgdGhpcy5kcmF3aW5nT2JqZWN0LnNldChfcmVjdCk7XG4gICAgICB0aGlzLmRyYXdpbmdPYmplY3QuZmlyZShcInNjYWxpbmdcIik7XG4gICAgfWVsc2V7XG5cbiAgICAgIGlmICh0aGlzLnAxLnggPT09IHRoaXMucDIueCAmJiB0aGlzLnAxLnkgPT09IHRoaXMucDIueSkge1xuICAgICAgICBkZWxldGUgdGhpcy5wMjtcbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgaWYodGhpcy5yZXN1bHRPYmplY3RUeXBlKXtcbiAgICAgICAgICB2YXIgX3JlY3QgPSB0aGlzLl9nZXRSZWN0KCk7XG4gICAgICAgICAgdGhpcy5kcmF3aW5nT2JqZWN0ID0gdGhpcy5fY3JlYXRlUmVjdGFuZ2xlKF9yZWN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNhbnZhcy5yZW5kZXJMYXllcihcImxvd2VyXCIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIG9uIG1vdXNlIHVwXG4gICAqL1xuICBvbk1vdXNlVXA6IGZ1bmN0aW9uICgpIHtcbiAgICBpZih0aGlzLmRyYXdpbmdPYmplY3Qpe1xuICAgICAgdmFyIF9yZWN0ID0gdGhpcy5fZ2V0UmVjdCgpO1xuICAgICAgdmFyIF9yZWN0MiA9IHRoaXMuX2NoZWNrUmVjdGFuZ2xlKF9yZWN0KTtcblxuICAgICAgdGhpcy5jYW52YXMubGF5ZXJzLmxvd2VyLm9iamVjdHMuc3BsaWNlKHRoaXMuY2FudmFzLmxheWVycy5sb3dlci5vYmplY3RzLmluZGV4T2YodGhpcy5kcmF3aW5nT2JqZWN0KSwgMSk7XG5cbiAgICAgIHRoaXMuZHJhd2luZ09iamVjdC5zZXQoX3JlY3QyKTtcbiAgICAgIHRoaXMuY2FudmFzLmFkZCh0aGlzLmRyYXdpbmdPYmplY3QpO1xuICAgICAgdGhpcy5jYW52YXMuc2V0QWN0aXZlT2JqZWN0KHRoaXMuZHJhd2luZ09iamVjdCk7XG4gICAgICB0aGlzLmRyYXdpbmdPYmplY3Quc2V0Q29vcmRzKCk7XG4gICAgICBkZWxldGUgdGhpcy5kcmF3aW5nT2JqZWN0O1xuICAgIH1cbiAgICB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICAvLyB0aGlzLl9maW5hbGl6ZUFuZEFkZFBhdGgoKTtcbiAgfSxcblxuICAvKipcbiAgICogRHJhdyBhIHNtb290aCBwYXRoIG9uIHRoZSB0b3BDYW52YXMgdXNpbmcgcXVhZHJhdGljQ3VydmVUb1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FudmFzLmZpcmUoXCJiZWZvcmU6YnJ1c2g6cmVuZGVyXCIse3RhcmdldDogdGhpc30pXG4gICAgaWYgKCF0aGlzLnAyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBjdHggPSB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLFxuICAgICAgdiA9IHRoaXMuY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtLFxuICAgICAgcDEgPSB0aGlzLnAxLFxuICAgICAgcDIgPSB0aGlzLnAyO1xuXG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgudHJhbnNmb3JtKHZbMF0sIHZbMV0sIHZbMl0sIHZbM10sIHZbNF0sIHZbNV0pO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBpZih0aGlzLmFwcGxpY2F0aW9uKXtcbiAgICAgIHZhciBfa2xhc3NfcHJvdG8gPSB0aGlzLmFwcGxpY2F0aW9uLmdldERlZmF1bHRQcm9wZXJ0aWVzKGZhYnJpY1t0aGlzLnJlc3VsdE9iamVjdFR5cGVdLnByb3RvdHlwZSkgfHwge307XG4gICAgICBjdHgubGluZVdpZHRoID0gX2tsYXNzX3Byb3RvLnN0cm9rZVdpZHRoO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gX2tsYXNzX3Byb3RvLnN0cm9rZTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBfa2xhc3NfcHJvdG8uZmlsbDtcbiAgICB9XG5cbiAgICB2YXIgX3JlY3QgPSB0aGlzLl9nZXRSZWN0KCk7XG4gICAgY3R4LnJlY3QoX3JlY3QubGVmdCwgX3JlY3QudG9wLCBfcmVjdC53aWR0aCwgX3JlY3QuaGVpZ2h0KTtcblxuICAgIGN0eC5maWxsKCk7XG4gICAgY3R4LnN0cm9rZSgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgdGhpcy5jYW52YXMuZmlyZShcImJydXNoOnJlbmRlclwiLHt0YXJnZXQ6IHRoaXN9KVxuICB9LFxuICBfZ2V0UmVjdDogZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIHgxLCB4MiwgeTEsIHkyO1xuICAgIGlmICh0aGlzLnAxLnggPCB0aGlzLnAyLngpIHtcbiAgICAgIHgxID0gdGhpcy5wMS54LCB4MiA9IHRoaXMucDIueDtcbiAgICB9IGVsc2Uge1xuICAgICAgeDIgPSB0aGlzLnAxLngsIHgxID0gdGhpcy5wMi54O1xuICAgIH1cbiAgICBpZiAodGhpcy5wMS55IDwgdGhpcy5wMi55KSB7XG4gICAgICB5MSA9IHRoaXMucDEueSwgeTIgPSB0aGlzLnAyLnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkyID0gdGhpcy5wMS55LCB5MSA9IHRoaXMucDIueTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IHgxLFxuICAgICAgdG9wOiB5MSxcbiAgICAgIHdpZHRoOiB4MiAtIHgxLFxuICAgICAgaGVpZ2h0OiB5MiAtIHkxXG4gICAgfTtcbiAgfSxcbiAgZHJhd2luZ0xpbWl0czogbnVsbCwgLyp7XG4gICBsZWZ0OiAwLFxuICAgd2lkdGg6IDAsXG4gICBoZWlnaHQ6IDAsXG4gICB0b3A6IDBcbiAgIH0sKi9cbiAgbWluSGVpZ2h0OiA1MCxcbiAgbWluV2lkdGg6IDUwLFxuICBfY2hlY2tSZWN0YW5nbGU6IGZ1bmN0aW9uKF9yZWN0KXtcblxuXG4gICAgdmFyIGRsID0gdGhpcy5kcmF3aW5nTGltaXRzO1xuICAgIGlmKGRsICYmIGRsID09IFwiYmFja2dyb3VuZEltYWdlXCIpe1xuICAgICAgZGw9IHRoaXMuY2FudmFzLmJhY2tncm91bmRJbWFnZTtcbiAgICB9XG5cbiAgICBfcmVjdCA9IHtcbiAgICAgIGxlZnQ6IF9yZWN0LmxlZnQsXG4gICAgICB0b3A6IF9yZWN0LnRvcCxcbiAgICAgIHdpZHRoOiBfcmVjdC53aWR0aCxcbiAgICAgIGhlaWdodDogX3JlY3QuaGVpZ2h0LFxuICAgIH07XG5cbiAgICAvLyBfcmVjdC5sZWZ0ICAtPSBmYWJyaWMuUmVjdC5wcm90b3R5cGUuc3Ryb2tlV2lkdGggLyAyO1xuICAgIC8vIF9yZWN0LnRvcCAgIC09IGZhYnJpYy5SZWN0LnByb3RvdHlwZS5zdHJva2VXaWR0aCAvIDI7XG5cbiAgICBpZihkbCl7XG4gICAgICBpZihfcmVjdC5sZWZ0ICsgX3JlY3Qud2lkdGggPCBkbC5sZWZ0IHx8XG4gICAgICAgIF9yZWN0LnRvcCAgKyBfcmVjdC5oZWlnaHQgPCBkbC50b3AgfHxcbiAgICAgICAgX3JlY3QubGVmdCA+IGRsLndpZHRoIHx8XG4gICAgICAgIF9yZWN0LnRvcCA+IGRsLmhlaWdodCl7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYoX3JlY3QudG9wIDwgZGwudG9wKXtcbiAgICAgICAgX3JlY3QuaGVpZ2h0ICs9X3JlY3QudG9wIDtcbiAgICAgICAgX3JlY3QudG9wID0gZGwudG9wO1xuICAgICAgfVxuICAgICAgaWYoX3JlY3QubGVmdCA8IGRsLmxlZnQpe1xuICAgICAgICBfcmVjdC53aWR0aCArPSBfcmVjdC5sZWZ0O1xuICAgICAgICBfcmVjdC5sZWZ0ID0gZGwubGVmdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0aGlzLm1pbldpZHRoICYmIF9yZWN0LndpZHRoIDwgdGhpcy5taW5XaWR0aCl7XG4gICAgICBfcmVjdC53aWR0aCA9IHRoaXMubWluV2lkdGg7XG4gICAgfVxuICAgIGlmKHRoaXMubWluSGVpZ2h0ICYmIF9yZWN0LmhlaWdodCA8IHRoaXMubWluSGVpZ2h0KXtcbiAgICAgIF9yZWN0LmhlaWdodCA9IHRoaXMubWluSGVpZ2h0O1xuICAgIH1cblxuXG4gICAgaWYoZGwpIHtcbiAgICAgIHZhciBfeGRpZmYgPSBfcmVjdC5sZWZ0ICsgX3JlY3Qud2lkdGggLSBkbC53aWR0aDtcbiAgICAgIGlmIChfeGRpZmYgPiAwKSB7XG4gICAgICAgIF9yZWN0LndpZHRoIC09IF94ZGlmZjtcbiAgICAgICAgaWYgKHRoaXMubWluV2lkdGggJiYgX3JlY3Qud2lkdGggPCB0aGlzLm1pbldpZHRoKSB7XG4gICAgICAgICAgX3JlY3QubGVmdCAtPSB0aGlzLm1pbldpZHRoIC0gX3JlY3Qud2lkdGg7XG4gICAgICAgICAgX3JlY3Qud2lkdGggPSB0aGlzLm1pbldpZHRoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgX3lkaWZmID0gX3JlY3QudG9wICsgX3JlY3QuaGVpZ2h0IC0gZGwuaGVpZ2h0O1xuICAgICAgaWYgKF95ZGlmZiA+IDApIHtcbiAgICAgICAgX3JlY3QuaGVpZ2h0IC09IF95ZGlmZjtcbiAgICAgICAgaWYgKHRoaXMubWluSGVpZ2h0ICYmIF9yZWN0LmhlaWdodCA8IHRoaXMubWluSGVpZ2h0KSB7XG4gICAgICAgICAgX3JlY3QudG9wIC09IHRoaXMubWluSGVpZ2h0IC0gX3JlY3QuaGVpZ2h0O1xuICAgICAgICAgIF9yZWN0LmhlaWdodCA9IHRoaXMubWluSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfcmVjdDtcbiAgfSxcbiAgX2NyZWF0ZVJlY3RhbmdsZTogZnVuY3Rpb24ocmVjdCl7XG4gICAgdGhpcy5jYW52YXMuc2V0QWN0aXZlT2JqZWN0KGZhbHNlKTtcbiAgICByZWN0LmFjdGl2ZSA9IHRydWU7XG4gICAgcmVjdC5hcHBsaWNhdGlvbiA9IHRoaXMuYXBwbGljYXRpb247XG4gICAgcmVjdC5jYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICB2YXIgX29iamVjdCA9IGZhYnJpYy51dGlsLmNyZWF0ZU9iamVjdCh0aGlzLnJlc3VsdE9iamVjdFR5cGUscmVjdCk7XG4gICAgdGhpcy5jYW52YXMubGF5ZXJzLmxvd2VyLm9iamVjdHMucHVzaChfb2JqZWN0KTtcbiAgICBfb2JqZWN0LnVwZGF0ZVJlc3BvbnNpdmVCb3JkZXIoKTtcbiAgICB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICByZXR1cm4gX29iamVjdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBPbiBtb3VzZXVwIGFmdGVyIGRyYXdpbmcgdGhlIHBhdGggb24gY29udGV4dFRvcCBjYW52YXNcbiAgICogd2UgdXNlIHRoZSBwb2ludHMgY2FwdHVyZWQgdG8gY3JlYXRlIGFuIG5ldyBmYWJyaWMgcmVjdCBvYmplY3RcbiAgICogYW5kIGFkZCBpdCB0byB0aGUgZmFicmljIGNhbnZhcy5cbiAgICovXG4gIC8vIF9maW5hbGl6ZUFuZEFkZFBhdGg6IGZ1bmN0aW9uICgpIHtcbiAgLy9cbiAgLy8gICBpZiAoIXRoaXMucDIpIHtcbiAgLy8gICAgIHJldHVybiBmYWxzZTtcbiAgLy8gICB9XG4gIC8vICAgdmFyIGN0eCA9IHRoaXMuY2FudmFzLmNvbnRleHRUb3A7XG4gIC8vICAgY3R4LmNsb3NlUGF0aCgpO1xuICAvL1xuICAvL1xuICAvLyAgIHRoaXMuY2FudmFzLmNsZWFyQ29udGV4dCh0aGlzLmNhbnZhcy5jb250ZXh0VG9wKTtcbiAgLy8gICB0aGlzLl9yZXNldFNoYWRvdygpO1xuICAvL1xuICAvLyAgIC8vIHZhciBfcmVjdCA9IHRoaXMuX2dldFJlY3QoKTtcbiAgLy8gICB2YXIgX3JlY3QyID0gdGhpcy5fY2hlY2tSZWN0YW5nbGUoX3JlY3QpO1xuICAvLyAgIGlmKF9yZWN0Mil7XG4gIC8vICAgICAvLyBpZih0aGlzLnJlc3VsdE9iamVjdFR5cGUpe1xuICAvLyAgICAgLy8gICB0aGlzLl9jcmVhdGVSZWN0YW5nbGUoX3JlY3QyKTtcbiAgLy8gICAgIC8vIH1cbiAgLy8gICAgIHRoaXMuY2FudmFzLmZpcmUoJ3JlY3Q6Y3JlYXRlZCcsIHtyZWN0OiBfcmVjdDIsIG9yaWdpbmFsOiBfcmVjdH0pO1xuICAvLyAgIH1lbHNle1xuICAvLyAgICAgdGhpcy5jYW52YXMuZmlyZSgncmVjdDpyZWplY3RlZCcsIHtyZWN0OiBfcmVjdH0pO1xuICAvLyAgIH1cbiAgLy8gICB0aGlzLmNhbnZhcy5yZW5kZXJMYXllcih0aGlzLmxheWVycy5sb3dlcik7XG4gIC8vIH1cbn0pO1xuXG5cbmZhYnJpYy5TbGlkZUNhbnZhcy5wcm90b3R5cGUuZHJhd2luZ1Rvb2xzLlJlY3RhbmdsZUJydXNoID0ge1xuICBjbGFzc05hbWU6ICdmYSBmYS1wZW5jaWwtc3F1YXJlJyxcbiAgdGl0bGU6ICdzZWxlY3QtYnJ1c2gnXG59O1xuZmFicmljLlNsaWRlQ2FudmFzLnByb3RvdHlwZS5hY3RpdmVEcmF3aW5nVG9vbHMucHVzaChcIlJlY3RhbmdsZUJydXNoXCIpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9icnVzaGVzL1JlY3RhbmdsZUJydXNoLmpzXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogIyBBcHBsaWNhdGlvblxuICpcbiAqIGZhcmJpYy5hcHAgZnVuY3Rpb24gaXMgdGhlIGVudHJ5IHBvaW50IG9mIEZhYnJpY0pTIGFwcGxpY2F0aW9uLlxuICogQXBwbGljYXRpb24gY291bGQgYmUgaW5pdGlhbGlzZWQgd2l0aCBjb25maWd1cmF0aW9uIG9iamVjdC4gRGlmZmVyZW50IGV4dGVuc2lvbnMgYWxsb3dzIHRvIGluaXRpYWxpemUgc3BlY2lhbCBhcHBsaWNhdGlvbiBhdHRyaWJ1dGVzIHN1Y2ggYXMgKm9iamVjdCBwcm90b3R5cGVzKiwgKnJlc2l6YWJsZSBjYW52YXMqLCAqYXZhaWxhYmxlIGZvbnRzKiwgZXRjLlxuICpcbiAqICMjIyBvcHRpb246IHV0aWxcbiAqIG1lZGlhUm9vdCAtIHJvb3QgZGlyZWN0b3J5IGZvciBhbGwgbWVkaWEgZmlsZXMgaW4gZmFicmljIGFwcGxpY2F0aW9uXG4gKlxuICogIyMjIG9wdGlvbjogcmVzaXphYmxlXG4gKiBtYWtlcyBjYW52YXMgcmVzcG9uc2libGUuIENhbnZhcyB3aWxsIGJlIHNjYWxlZCB0byAxMDAlIG9mIGl0cyBjb250YWluZXIgc2l6ZVxuICpcbiAqICMjIyBvcHRpb246IG9uUmVzaXplXG4gKiBmdW5jdGlvbiB3aGljaCBvdmVycmlkZSBkZWFmdWx0IGNhbnZhcyByZXNpemUgYmVoYXZpb3IuXG4gKlxuICogIyMjIG9wdGlvbjogY2FsbGJhY2tcbiAqIGZ1bmN0aW9uIGNhbGxzIGFmdGVyIGNhbnZhcyBpbml0aWFsaXplZFxuICpcbiAqICMjIyBvcHRpb246IGluaXRpYWxpemVcbiAqIGZ1bmN0aW9uIGNhbGxzIGJlZm9yZSBjYW52YXMgaW5pdGlhbGl6ZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogbmV3IGZhYnJpYy5BcHBsaWNhdGlvbih7XG4gKiAgICAgIHJlc2l6YWJsZTogdHJ1ZSxcbiAqICAgICAgb25SZXNpemU6IGZ1bmN0aW9uKCl7fSxcbiAqICAgICAgdXRpbDoge1xuICogICAgICAgIG1lZGlhUm9vdDogJy4uLy4uL21lZGlhLydcbiAqICAgICAgfSxcbiAqICAgICAgY2FudmFzQ29udGFpbmVyOiBcImZpZXJhLWNhbnZhc1wiLFxuICogICAgICBwcm90b3R5cGVzOiB7fSxcbiAqICAgICAgb2JqZWN0czoge30sXG4gKiAgICAgIGV2ZW50TGlzdGVuZXJzOiB7fSxcbiAqICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCl7fSxcbiAqICAgICAgaW5pdGlhbGl6ZTogIGZ1bmN0aW9uKCl7fVxuICogICAgICBjdXN0b21QdWJsaWNBcHBsaWNhdGlvbkZ1bmN0aW9uOiBmdW5jdGlvbigpe30sXG4gKiAgICAgIGN1c3RvbVB1YmxpY0FwcGxpY2F0aW9uQXR0cmlidXRlOiB2YWx1ZVxuICogIH0pXG4gKlxuICovXG5cbmZhYnJpYy5BcHBsaWNhdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdGhpcy5pbml0KG9wdGlvbnMpO1xufTtcblxuZmFicmljLkFwcGxpY2F0aW9uLnByb3RvdHlwZSA9IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoe30sZmFicmljLk9ic2VydmFibGUse1xuXG5cbiAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICAvKipcbiAgICAgKiBpZCBvZiB0YXJnZXQgY2FudmFzIGVsZW1lbnRcbiAgICAgKi9cbiAgICBjYW52YXNDb250YWluZXI6IG51bGwsXG5cbiAgfSxcbiAgY3JlZGVudGlhbHM6IGZhbHNlLFxuICByZWFkeSA6IGZhbHNlLFxuICBjYW52YXNDbGFzczogJ0NhbnZhcycsXG4gIG9wdGlvbnNPcmRlcjogW1xuICAgIFwiY2FudmFzQ29udGFpbmVyXCIsXG4gICAgXCIqXCIsXG4gICAgXCJvYmplY3RzXCIsXG4gICAgXCJzbGlkZVwiXG4gIF0sXG4gIHBsdWdpbnM6IHtcbiAgICBwcmVsb2FkZXJzOiBbXSxcbiAgICBjb25maWd1cmF0aW9uOiBbXSxcbiAgICBjYW52YXM6IFtdXG4gIH0sXG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIEV2ZW50IExpc3RlbmVycyBjb3VsZGJlIHVzZWQgdG8gZGV0ZWN0IGFjdGl2ZW9iamVjdCBjaGFuZ2VzXG4gICAqICAtIGNhbnZhczpjcmVhdGVkXG4gICAqICAtIGVudGl0eTpsb2FkIC0gRXZlbnQgZmlyZWQgb24gY3JlYXRpb24gb2YgZXZlcnkgbmV3IGZhYnJpYyBpbnN0YW5jZShjYW52YXMsYnJ1c2gsb2JqZWN0KVxuICAgKlxuICAgKiAgQGV4YW1wbGVcbiAgICogICdlbnRpdHk6bG9hZCcgOiBmdW5jdGlvbihlKXtcbiAgICogICAgIGlmKGUub3B0aW9ucy5ib3hUeXBlID09ICdtYWNoaW5lJykge1xuICAgKiAgICAgICBlLm9wdGlvbnMudHlwZSA9IFwibWFjaGluZS1tYXNrLXJlY3RhbmdsZVwiO1xuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICovXG4gIGV2ZW50TGlzdGVuZXJzOiB7XG4gICAgXCJjYW52YXM6Y3JlYXRlZFwiOiBbXSxcbiAgICBcImVudGl0eTpjcmVhdGVkXCI6IFtcbiAgICAgIGZ1bmN0aW9uKGUpe1xuICAgICAgICBpZihlLnRhcmdldC5ldmVudExpc3RlbmVycyl7XG4gICAgICAgICAgZm9yKHZhciBpIGluIGUudGFyZ2V0LmV2ZW50TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICB2YXIgX2xpc3RlbmVycyA9IGUudGFyZ2V0LmV2ZW50TGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgaWYoX2xpc3RlbmVycy5jb25zdHJ1Y3RvciA9PSBBcnJheSl7XG4gICAgICAgICAgICAgIGZvciAodmFyIGogaW4gX2xpc3RlbmVycykge1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0Lm9uKGksIF9saXN0ZW5lcnNbal0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgZS50YXJnZXQub24oaSwgX2xpc3RlbmVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoZS5vcHRpb25zLmV2ZW50TGlzdGVuZXJzKXtcbiAgICAgICAgICBmb3IodmFyIGkgaW4gZS5vcHRpb25zLmV2ZW50TGlzdGVuZXJzKXtcbiAgICAgICAgICAgIGUudGFyZ2V0Lm9uKGksZS5vcHRpb25zLmV2ZW50TGlzdGVuZXJzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIGUub3B0aW9ucy5ldmVudExpc3RlbmVycztcblxuICAgICAgICBpZihlLnRhcmdldC5fZGVmYXVsdF9ldmVudF9saXN0ZW5lcnMpe1xuICAgICAgICAgIGZvcih2YXIgaSBpbiBlLnRhcmdldC5fZGVmYXVsdF9ldmVudF9saXN0ZW5lcnMpe1xuICAgICAgICAgICAgZS50YXJnZXQub24oaSxlLnRhcmdldC5fZGVmYXVsdF9ldmVudF9saXN0ZW5lcnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAgb25TbGlkZUxvYWRlZDogZnVuY3Rpb24gKCkge30sXG4gIG9uQ2FudmFzQ3JlYXRlZDogZnVuY3Rpb24gKCkge30sXG4gIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7fSxcblxuICBpbml0OiBmdW5jdGlvbihvcHRpb25zKXtcbiAgICB0aGlzLmluaXRFdmVudExpc3RlbmVycygpO1xuICAgIG9wdGlvbnMgPSAgZmFicmljLnV0aWwub2JqZWN0LmRlZXBFeHRlbmQoe30sdGhpcy5kZWZhdWx0T3B0aW9ucyAsb3B0aW9ucyB8fCB7fSk7XG5cbiAgICB0aGlzLmZpcmUoXCJsb2FkaW5nOmJlZ2luXCIse29wdGlvbnMgOiBvcHRpb25zfSk7XG5cbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcblxuXG4gICAgJCggZG9jdW1lbnQgKS5yZWFkeShmdW5jdGlvbigpe1xuICAgICAgZmFicmljLnV0aWwub3JkZXIoW1xuICAgICAgICB0aGlzLnByZWxvYWRlcixcbiAgICAgICAgdGhpcy5sb2FkQ29uZmlndXJhdGlvbixcbiAgICAvLyAgICB0aGlzLmNyZWF0ZUFwcCxcbiAgICAgICAgdGhpcy5pbml0T3B0aW9ucyxcbiAgICAgICAgdGhpcy5pbml0aWFsaXplLFxuICAgICAgICB0aGlzLm9uQXBwbGljYXRpb25DcmVhdGVkLFxuICAgICAgICB0aGlzLnBvc3Rsb2FkZXIsXG4gICAgICAgIHRoaXMuY2FsbGJhY2sgJiYgZnVuY3Rpb24oKXtcbiAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuY2FsbGJhY2suYmluZCh0aGlzKSwwKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24oKXtcbiAgICAgICAgICB0aGlzLmZpcmUoXCJyZWFkeVwiKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICBdLHRoaXMpXG4gICAgfS5iaW5kKHRoaXMpKVxuICB9LFxuICBvbkFwcGxpY2F0aW9uQ3JlYXRlZDogZnVuY3Rpb24oKXtcbiAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcbiAgICB0aGlzLmZpcmUoXCJsb2FkaW5nOmVuZFwiLHt9KTtcbiAgfSxcbiAgc2V0Q3JlZGVudGlhbHM6IGZ1bmN0aW9uKGNyZWRlbnRpYWxzKXtcbiAgICBpZihjcmVkZW50aWFscyl7XG4gICAgICBjb25zb2xlLmluZm8oXCIlY0ZpZXJhIENhbnZhcyBFZGl0b3IlYyBieSAlY0RlbmlzIFBvbm9tYXJldiVjICVjJTYkcyVjIC8gJWMlOSRzJWNcIiwgXCJjb2xvcjogI2ZmYTUwMFwiLCBcImNvbG9yOiAjMjAyMDIwXCIsIFwiY29sb3I6ICMyRUMwNkNcIiwgXCJjb2xvcjogIzIwMjAyMFwiLCBcImNvbG9yOiAjMzM3YWI3XCIsIFwid3d3LmhvbWV0bHQucnVcIiwgXCJjb2xvcjogIzIwMjAyMFwiLCBcImNvbG9yOiAjMzM3YWI3XCIsIFwicG9ub21hcmV2dGx0QGdtYWlsLmNvbVwiLCBcImNvbG9yOiAjMjAyMDIwXCIpO1xuICAgIH1cbiAgfSxcbiAgaW5pdE9wdGlvbnM6IGZ1bmN0aW9uIChyZXNvbHZlLGVycm9yKSB7XG4gICAgdGhpcy5zZXQodGhpcy5fb3B0aW9ucyxyZXNvbHZlKTtcbiAgfSxcbiAgbG9hZENvbmZpZ3VyYXRpb246IGZ1bmN0aW9uIChyZXNvbHZlLGVycm9yKSB7XG4gICAgaWYoIXRoaXMuX29wdGlvbnMuY29uZmlndXJhdGlvbil7XG4gICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgIH1cbiAgICB2YXIgX2FwcCA9IHRoaXM7XG4gICAgZmFicmljLnV0aWwucHJvbWlzZVxuICAgICAgLm1hcChcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5jb25maWd1cmF0aW9uLFxuICAgICAgICBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsZmFpbCkge1xuICAgICAgICAgICAgZmFicmljLnV0aWwuZGF0YS5sb2FkSnNvbih2YWx1ZSxyZXNvbHZlLGZhaWwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICApXG4gICAgICAudGhlbihmdW5jdGlvbihyZXN1bHRzKXtcbiAgICAgICAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChfYXBwLl9vcHRpb25zLHJlc3VsdHMpXG4gICAgICB9KVxuICAgICAgLnRoZW4ocmVzb2x2ZSxlcnJvcik7XG4gIH0sXG4gIHNldENhbnZhc0NvbnRhaW5lcjogZnVuY3Rpb24gKGNhbnZhc0NvbnRhaW5lcikge1xuICAgIHRoaXMuY2FudmFzQ29udGFpbmVyID0gY2FudmFzQ29udGFpbmVyO1xuXG4gICAgaWYgKGNhbnZhc0NvbnRhaW5lci5jb25zdHJ1Y3RvciA9PSBTdHJpbmcpIHtcbiAgICAgIHZhciBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNhbnZhc0NvbnRhaW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsID0gY2FudmFzQ29udGFpbmVyO1xuICAgIH1cbiAgICB0aGlzLmNhbnZhcyA9IG5ldyBmYWJyaWNbdGhpcy5jYW52YXNDbGFzc10oZWwsIHthcHBsaWNhdGlvbjogdGhpc30pO1xuICAgIC8vIH1lbHNle1xuICAgIC8vICAgdGhpcy5jYW52YXMgPSBuZXcgZmFicmljW3RoaXMuY2FudmFzQ2xhc3NdKHthcHBsaWNhdGlvbjogdGhpc30pO1xuICAgIC8vIH1cblxuICAgIHRoaXMuZmlyZShcImNhbnZhczpjcmVhdGVkXCIpO1xuICAgIHRoaXMub25DYW52YXNDcmVhdGVkKCk7XG4gIH0sXG4gIGRpc3Bvc2U6IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5jYW52YXMuZGlzcG9zZSgpO1xuICB9LFxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gRXZlbnQgTGlzdGVuZXJzXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBzZXRFdmVudExpc3RlbmVyczogZnVuY3Rpb24odmFsKXtcbiAgICB0aGlzLm9uKHZhbCk7XG4gIH0sXG4gIGluaXRFdmVudExpc3RlbmVyczogZnVuY3Rpb24oKXtcbiAgICBpZighdGhpcy5fX2V2ZW50TGlzdGVuZXJzKXtcbiAgICAgIHRoaXMuX19ldmVudExpc3RlbmVycyA9IHt9O1xuICAgIH1cbiAgICBmb3IgKHZhciBldmVudCBpbiB0aGlzLmV2ZW50TGlzdGVuZXJzKSB7XG4gICAgICBpZighdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50XSl7XG4gICAgICAgIHRoaXMuX19ldmVudExpc3RlbmVyc1tldmVudF0gPSBbXVxuICAgICAgfVxuICAgICAgdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50XSA9IHRoaXMuX19ldmVudExpc3RlbmVyc1tldmVudF0uY29uY2F0ICh0aGlzLmV2ZW50TGlzdGVuZXJzW2V2ZW50XSk7XG4gICAgfVxuICB9LFxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgX19zZXQgOiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5fX3NldCxcbiAgX3NldE9iamVjdDogZmFicmljLk9iamVjdC5wcm90b3R5cGUuX3NldE9iamVjdCxcbiAgc2V0OiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5zZXQsXG4gIHNldE9wdGlvbnM6IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLnNldE9wdGlvbnMsXG4gIGFjdGlvbnM6IHtcbiAgICBzYXZlOiB7XG4gICAgICB0aXRsZTogXCJzYXZlIHByb2plY3RcIixcbiAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLWZsb3BweS1vJyxcbiAgICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMudG9PYmplY3QoKTtcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbi5hcGkuc2F2ZShkYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG4vLyBmYWJyaWMuQXBwbGljYXRpb24uYWRkUGx1Z2luID0gZmFicmljLlBsdWdpbnNNaXhpbi5hZGRQbHVnaW4uYmluZChmYWJyaWMuQXBwbGljYXRpb24pO1xuXG5mYWJyaWMuYXBwID0gZnVuY3Rpb24ob3B0aW9ucyl7XG4gIHJldHVybiBuZXcgZmFicmljLkFwcGxpY2F0aW9uKG9wdGlvbnMpO1xufTtcblxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9jb3JlL2FwcGxpY2F0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqICMgUHJvdG90eXBlc1xuXG4gUHJvdG90eXBlcyBhbGxvd3MgdG8gZGVmaW5lICoqcHJvdG90eXBlcyoqIHByb3BlcnR5IGluIEFwcGxpY2F0aW9uIGNvbmZpZ3VyYXRpb24uXG5cbiBgYGBqYXZhc2NyaXB0XG4gQXBwbGljYXRpb24gKHtcbiAgcHJvdG90eXBlczoge1xuICAgIENsYXNzTmFtZTogb3B0aW9uc1xuICB9XG4gfSlcbiBgYGBcblxuIElmIHByb3RvdHlwZSBpcyBkZWZpbmVkIGV2ZXJ5IG5ldyBPYmplY3QgY3JlYXRlZCBieSBhcHBsaWNhdGlvbiB3aWxsIGhhdmUgdGhpcyBwcm9wZXJ0aWVzIGJ5IGRlZmF1bHQuXG5cbiBgYGBqYXZhc2NyaXB0XG4gICBOZXdDbGFzczoge1xuICAgICRzdXBlcjogXCJQYXJlbnRDbGFzc1wiLFxuICAgIHR5cGU6IFwibmV3LWNsYXNzXCIsXG4gICAgXFwvKm90aGVyIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMqXFwvXG4gICB9XG4gIGBgYFxuXG4gaWYgcHJvcGVydHkgKip0eXBlKiogb2YgT2JqZWN0IGNsYXNzIGlzIGRlZmluZWQgdGhlbiBldmVyeSBvYmplY3QgYmUgZGVmYXVsdCB3aWxsIGhhdmUgdGhpcyB0eXBlLlxuXG4gYGBgamF2YXNjcmlwdFxuICAgT2JqZWN0OiB7XG4gICAgdHlwZTogXCJyZWN0YW5nbGVcIlxuICAgfVxuIC4uLlxuIC8vcmVjdGFuZ2xlIHdpbGwgYmUgY3JlYXRlZFxuIGZhYnJpYy5jcmVhdGVPYmplY3Qoe3dpZHRoOjEwMCwgaGVpZ2h0OiAxMDB9KVxuIGBgYFxuKi9cblxuXG5cblxuXG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLkFwcGxpY2F0aW9uLnByb3RvdHlwZSwge1xuICBvcHRpb25zT3JkZXI6IChmdW5jdGlvbigpe1xuICAgIHZhciBvbyA9IGZhYnJpYy5BcHBsaWNhdGlvbi5wcm90b3R5cGUub3B0aW9uc09yZGVyO1xuICAgIG9vLnNwbGljZShvby5pbmRleE9mKFwiY2FudmFzQ29udGFpbmVyXCIpLDAsXCJwcm90b3R5cGVzXCIpO1xuICAgIHJldHVybiBvbztcbiAgfSkoKSxcbiAgZ2V0RGVmYXVsdFByb3BlcnRpZXM6IGZ1bmN0aW9uKHByb3RvKXtcbiAgICBpZighdGhpcy5wcm90b3R5cGVzKXJldHVybjtcblxuICAgIHZhciBrbGFzc25hbWUgPSBmYWJyaWMudXRpbC5zdHJpbmcuY2FwaXRhbGl6ZShmYWJyaWMudXRpbC5zdHJpbmcuY2FtZWxpemUocHJvdG8udHlwZSksdHJ1ZSk7XG5cbiAgICB2YXIgX3Byb3RvUHJvcGVydGllcyA9IHByb3RvLl9fcHJvdG9fXyAmJiBwcm90by5fX3Byb3RvX18udHlwZSAmJiB0aGlzLmdldERlZmF1bHRQcm9wZXJ0aWVzKHByb3RvLl9fcHJvdG9fXykgfHwge307XG4gICAgdmFyIF9kZWZhdWx0UHJvcGVydGllcyA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZSh0aGlzLnByb3RvdHlwZXNba2xhc3NuYW1lXSk7XG5cbiAgICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKF9wcm90b1Byb3BlcnRpZXMsX2RlZmF1bHRQcm9wZXJ0aWVzKTtcblxuICAgIHJldHVybiBfcHJvdG9Qcm9wZXJ0aWVzO1xuICB9LFxuICAvKipcbiAgICogZGVmYXVsdCBwcm90b3R5cGVzIHByb3BlcnRlcyBmb3Igb2JqZWN0c1xuICAgKi9cbiAgcHJvdG90eXBlczoge1xuICAgIE9iamVjdDoge1xuICAgICAgaW5jbHVkZURlZmF1bHRWYWx1ZXM6IGZhbHNlXG4gICAgfSxcbiAgICBDYW52YXM6IHtcbiAgICAgIGluY2x1ZGVEZWZhdWx0VmFsdWVzOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgc2V0VXRpbHM6IGZ1bmN0aW9uICh1dGlsc09wdGlvbnMpIHtcblxuICAgIGlmKCF1dGlsc09wdGlvbnMpe1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKHRoaXMudXRpbCB8fCB7fSx1dGlsc09wdGlvbnMpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9uc1sndXRpbCddKSB7XG4gICAgICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy51dGlsLCB0aGlzLm9wdGlvbnNbJ3V0aWwnXSk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnNbJ2ZhYnJpYyddKSB7XG4gICAgICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYywgdGhpcy5vcHRpb25zWydmYWJyaWMnXSk7XG4gICAgfVxuICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnNbJ2ZhYnJpYyddO1xuICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnNbJ3V0aWwnXTtcbiAgfSxcbiAgc2V0UHJvdG90eXBlczogZnVuY3Rpb24gKHByb3RvdHlwZXMpIHtcblxuICAgIHZhciBfcHJvdG90eXBlcyA9IGZhYnJpYy51dGlsLm9iamVjdC5kZWVwRXh0ZW5kKHt9LCB0aGlzLnByb3RvdHlwZXMgLHByb3RvdHlwZXMpO1xuXG4gICAgdGhpcy5wcm90b3R5cGVzID0gX3Byb3RvdHlwZXM7XG4gICAgdGhpcy5rbGFzc2VzID0ge307XG5cblxuICAgIGlmKF9wcm90b3R5cGVzLmV2ZW50TGlzdGVuZXJzKXtcbiAgICAgIF9wcm90b3R5cGVzLmV2ZW50TGlzdGVuZXJzLiRleHRlbmQgPSAnYXJyYXknO1xuICAgIH1cblxuICAgIGZvciAodmFyIGtsYXNzTmFtZSBpbiBfcHJvdG90eXBlcykge1xuICAgICAgdmFyIF9wcm90byA9IF9wcm90b3R5cGVzW2tsYXNzTmFtZV07XG5cbiAgICAgIGZvciAodmFyIGogaW4gX3Byb3RvKSB7XG4gICAgICAgIGlmIChfcHJvdG9bal0gJiYgX3Byb3RvW2pdW1wiJGV4dGVuZFwiXSkge1xuICAgICAgICAgIHZhciBfZXh0ZW5kID0gX3Byb3RvW2pdW1wiJGV4dGVuZFwiXTtcbiAgICAgICAgICBpZiggX2V4dGVuZCA9PSBcImFycmF5XCIpe1xuICAgICAgICAgICAgX3Byb3RvW2pdID0gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZEFycmF5c09iamVjdChmYWJyaWNba2xhc3NOYW1lXS5wcm90b3R5cGVbal0sX3Byb3RvW2pdKTtcbiAgICAgICAgICB9IGVsc2UgaWYoIF9leHRlbmQgPT0gXCJkZWVwXCIpe1xuICAgICAgICAgICAgX3Byb3RvW2pdID0gZmFicmljLnV0aWwub2JqZWN0LmRlZXBFeHRlbmQoZmFicmljW2tsYXNzTmFtZV0ucHJvdG90eXBlW2pdLF9wcm90b1tqXSk7XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBfcHJvdG9bal0gPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpY1trbGFzc05hbWVdLnByb3RvdHlwZVtqXSxfcHJvdG9bal0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWxldGUgX3Byb3RvW2pdW1wiJGV4dGVuZFwiXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIGlmKF9wcm90b1tcIiRzdXBlclwiXSl7XG4gICAgICAgIHZhciBfc3VwZXJrbGFzcyA9IGZhYnJpY1tfcHJvdG9bXCIkc3VwZXJcIl0gfHwga2xhc3NOYW1lXSA7XG4gICAgICAgIGRlbGV0ZSBfcHJvdG9bXCIkc3VwZXJcIl07XG5cbiAgICAgICAgdmFyIF9mcm9tT2JqZWN0ID0gX3Byb3RvLmZyb21PYmplY3QgfHwgX3N1cGVya2xhc3MuZnJvbU9iamVjdCA7XG4gICAgICAgIGRlbGV0ZSBfcHJvdG8uZnJvbU9iamVjdDtcbiAgICAgICAgdmFyIF9rbGFzcyA9IHRoaXMua2xhc3Nlc1trbGFzc05hbWVdID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoX3N1cGVya2xhc3MsIF9wcm90byk7XG4gICAgICAgIF9rbGFzcy5mcm9tT2JqZWN0ID0gX2Zyb21PYmplY3QuYmluZChfa2xhc3MpO1xuICAgICAgfVxuXG4gICAgLy8gICBpZiAoa2xhc3NOYW1lLmFjdGlvbnMgJiYgX3Byb3RvLmFjdGlvbnMuY29uc3RydWN0b3IgPT0gRnVuY3Rpb24pIHtcbiAgICAvLyAgICAgZmFicmljW2tsYXNzTmFtZV0ucHJvdG90eXBlLmFjdGlvbnMgPSBfcHJvdG8uYWN0aW9ucy5jYWxsKGZhYnJpY1trbGFzc05hbWVdLnByb3RvdHlwZSlcbiAgICAvLyAgIH1cbiAgICB9XG5cbiAgICBpZiAoX3Byb3RvdHlwZXMuQXBwbGljYXRpb24pIHtcbiAgICAgIGZhYnJpYy51dGlsLm9iamVjdC5kZWVwRXh0ZW5kKHRoaXMsIF9wcm90b3R5cGVzLkFwcGxpY2F0aW9uKTtcbiAgICB9XG5cbiAgICAvLyBkZWxldGUgdGhpcy5vcHRpb25zWydwcm90b3R5cGVzJ107XG5cbiAgICBpZiAodGhpcy5hY3Rpb25zICYmIHRoaXMuYWN0aW9ucy5jb25zdHJ1Y3RvciA9PSBGdW5jdGlvbikge1xuICAgICAgdGhpcy5hY3Rpb25zID0gdGhpcy5hY3Rpb25zLmNhbGwodGhpcylcbiAgICB9XG4gIH0sXG5cbiAgZXZlbnRMaXN0ZW5lcnM6IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmRBcnJheXNPYmplY3QoZmFicmljLkFwcGxpY2F0aW9uLnByb3RvdHlwZS5ldmVudExpc3RlbmVycywge1xuICAgIFwiZW50aXR5OmNyZWF0ZWRcIjogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcblxuICAgICAgdGFyZ2V0LmFwcGxpY2F0aW9uID0gdGhpcztcbiAgICAgIGZhYnJpYy51dGlsLm9iamVjdC5kZWZhdWx0cyhlLm9wdGlvbnMsIHRoaXMuZ2V0RGVmYXVsdFByb3BlcnRpZXModGFyZ2V0LCBlLm9wdGlvbnMpKTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIGUub3B0aW9ucykge1xuICAgICAgICB2YXIgdmFsdWUgPSBlLm9wdGlvbnNba2V5XTtcbiAgICAgICAgaWYgKGtleVswXSA9PSBcIitcIikge1xuICAgICAgICAgIHZhciBfa2V5ID0ga2V5LnN1YnN0cigxKTtcbiAgICAgICAgICB2YXIgX2FyciA9IHRhcmdldC5nZXQoX2tleSk7XG4gICAgICAgICAgaWYgKF9hcnIgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgX2FyciA9IF9hcnIuc2xpY2UoKS5jb25jYXQodmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfYXJyID0gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCh7fSwgX2FyciwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlLm9wdGlvbnNbX2tleV0gPSBfYXJyO1xuICAgICAgICAgIGRlbGV0ZSBlLm9wdGlvbnNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkZWxldGUgZS5vcHRpb25zLnR5cGU7XG4gICAgICBkZWxldGUgZS5vcHRpb25zLmFwcGxpY2F0aW9uO1xuICAgIH1cbiAgfSlcbn0pO1xuXG5cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY29yZS9hcHBsaWNhdGlvbi5wcm90b3R5cGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbmZhYnJpYy5TbGlkZSA9IGZ1bmN0aW9uKGFwcGxpY2F0aW9uLCBzbGlkZSl7XG5cblxuICBpZihmYWJyaWMuaXNMaWtlbHlOb2RlKXtcbiAgICAvLyBmYWJyaWMuQ2FudmFzID0gZmFicmljLlNsaWRlQ2FudmFzO1xuICAgIHZhciB3ID0gc2xpZGUuc2xpZGVXaWR0aDsgLy90b2RvfHwgc2xpZGUudGVtcGxhdGUud2lkdGg7XG4gICAgdmFyIGggPSBzbGlkZS5zbGlkZUhlaWdodDsvL3RvZG8gfHwgc2xpZGUudGVtcGxhdGUuaGVpZ2h0O1xuICAgIHZhciB6b29tID0gZmFicmljLlNsaWRlQ2FudmFzLnByb3RvdHlwZS56b29tIHx8IDE7XG4gICAgdGhpcy5jYW52YXMgPSBmYWJyaWMuY3JlYXRlQ2FudmFzRm9yTm9kZSh3ICogem9vbSxoICogem9vbSk7XG4gIH1lbHNle1xuICAgIHRoaXMuY2FudmFzID0gIG5ldyBmYWJyaWMuU2xpZGVDYW52YXMoe2FwcGxpY2F0aW9uOiBhcHBsaWNhdGlvbiwgaW50ZXJhY3RpdmU6IGZhbHNlfSk7XG4gIH1cblxuICB0aGlzLm9iamVjdCA9IHNsaWRlO1xuIC8vIHRoaXMuZGF0YSA9IHNsaWRlLmRhdGE7XG4gIHRoaXMuYXBwbGljYXRpb24gPSBhcHBsaWNhdGlvbjtcbiAgdGhpcy5pZCA9ICsrIGZhYnJpYy5TbGlkZS5fc2xpZGVzX2lkX2NvdW50ZXI7XG59O1xuXG5mYWJyaWMuU2xpZGUucHJvdG90eXBlID0gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCh7fSxmYWJyaWMuT2JzZXJ2YWJsZSx7XG4gIHRpdGxlIDogJ9Cd0L7QstGL0Lkg0KHQu9Cw0LnQtCdcbn0pO1xuXG5mYWJyaWMuU2xpZGUuX3NsaWRlc19pZF9jb3VudGVyID0gMTtcblxuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5BcHBsaWNhdGlvbi5wcm90b3R5cGUsIHtcbiAgZGVmYXVsdE9wdGlvbnM6IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLkFwcGxpY2F0aW9uLnByb3RvdHlwZS5kZWZhdWx0T3B0aW9ucyx7XG4gICAgYWN0aXZlU2xpZGU6IDBcbiAgfSksXG4gIG9wdGlvbnNPcmRlcjogKGZ1bmN0aW9uKCl7XG4gICAgdmFyIG9vID0gZmFicmljLkFwcGxpY2F0aW9uLnByb3RvdHlwZS5vcHRpb25zT3JkZXI7XG4gICAgb28ucHVzaChcImFjdGl2ZVNsaWRlXCIsXCJzbGlkZXNcIik7XG4gICAgcmV0dXJuIG9vO1xuICB9KSgpLFxuICBhY3RpdmVTbGlkZTogMCxcbiAgLyppbml0aWFsaXplOiBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKHRoaXMsIHtcbiAgIGxhc3RfaWQ6IDEsXG4gICBzY2FsZVZhbHVlOiAxLFxuICAgYWN0aXZlU2xpZGU6IG51bGwsXG4gICBoaXN0b3J5OiBudWxsLFxuICAgc2xpZGVzOiBbXSxcbiAgIGNhbnZhczogbnVsbFxuICAgfSk7XG5cbiAgIHRoaXMuYWxpZ21lbnRMaW5lWCA9IGZhbHNlO1xuICAgdGhpcy5hbGlnbWVudExpbmVZID0gZmFsc2U7XG5cbiAgIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQodGhpcyxvcHRpb25zKTtcbiAgIGZhYnJpYy51dGlsLm9iamVjdC5kZWZhdWx0cyhvcHRpb25zLHRoaXMuZGVmdWx0T3B0aW9ucyk7XG5cbiAgIC8vIHRoaXMuc2V0QWNjZXNzKHRoaXMuYWNjZXNzKTtcblxuICAgaWYob3B0aW9ucy5ncmlkc25hcHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICB0aGlzLmdyaWRzbmFwcGVyID0gb3B0aW9ucy5ncmlkc25hcHBlclxuICAgfVxuICAgaWYob3B0aW9ucy5oaXN0b3J5ICE9PSB1bmRlZmluZWQpIHtcbiAgIHRoaXMuaGlzdG9yeSA9IG9wdGlvbnMuaGlzdG9yeTtcbiAgIH1cbiAgIGlmKG9wdGlvbnMuZGF0YSl7XG4gICB0aGlzLmRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICB9XG4gICBpZih0aGlzLmhpc3RvcnkpIHtcbiAgIHRoaXMuaGlzdG9yeSA9IG5ldyBIaXN0b3J5KHRoaXMpO1xuICAgdGhpcy5oaXN0b3J5LmFwcGxpY2F0aW9uID0gdGhpcy5hcHBsaWNhdGlvbjtcbiAgIH1cblxuXG4gICBpZihvcHRpb25zLmNhbnZhcyl7XG4gICB2YXIgX2NhbnZhcyA9IG5ldyBmYWJyaWMuU2xpZGVDYW52YXMoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0aW9ucy5jYW52YXMpKTtcbiAgIF9jYW52YXMuYXBwbGljYXRpb24gPSB0aGlzLmFwcGxpY2F0aW9uO1xuICAgX2NhbnZhcy5wcm9qZWN0ID0gdGhpcztcbiAgIHRoaXMuc2V0Q2FudmFzKF9jYW52YXMpO1xuICAgfVxuXG4gICByZXR1cm4gdGhpcztcbiAgIH0sKi9cbiAgc2V0U2xpZGVzOiBmdW5jdGlvbiAoc2xpZGVzKSB7XG4gICAgc2xpZGVzID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lRGVlcChzbGlkZXMpO1xuICAgIHRoaXMuc2xpZGVzID0gW107XG5cbiAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgIHRoaXMuY2FudmFzLl9vYmplY3RzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgc2xpZGVzLmZvckVhY2goZnVuY3Rpb24oc2xpZGUpe1xuICAgICAgdGhpcy5hZGRTbGlkZShzbGlkZSlcbiAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgdGhpcy5wcmVsb2FkKCk7XG4gICAgdGhpcy5sYXp5TG9hZCgpO1xuICB9LFxuICBzZXRBY3RpdmVTbGlkZTogZnVuY3Rpb24oc2xpZGVJZCl7XG4gICAgLy8gY29uc29sZS5sb2coXCJAI1wiKTtcbiAgICByZXR1cm47XG5cbiAgICBpZih0aGlzLmNhbnZhcy5wcm9jZXNzaW5nKXJldHVybjtcbiAgICBpZih0aGlzLmFjdGl2ZVNsaWRlID09PSBzbGlkZSlyZXR1cm47XG5cbiAgICB0aGlzLmZpcmUoXCJzbGlkZTpjaGFuZ2U6YmVnaW5cIiwge2NhbnZhczogdGhpcy5jYW52YXN9KTtcbiAgICBpZih0aGlzLmFjdGl2ZVNsaWRlKSB7XG4gICAgICBkZWxldGUgdGhpcy5hY3RpdmVTbGlkZS5jYW52YXMubWlycm9yU2xpZGU7XG4gICAgfVxuXG4gICAgdGhpcy5wcm9jZXNzaW5nID10cnVlO1xuICAgIGlmICh0aGlzLnVubG9hZFVuYWN0aXZlU2xpZGVzICYmIHRoaXMuY2FudmFzICYmIHRoaXMuYWN0aXZlU2xpZGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmFjdGl2ZVNsaWRlLmNhbnZhcztcbiAgICAgIHRoaXMuYWN0aXZlU2xpZGUuZmlyZShcImNhbnZhczpjaGFuZ2VkXCIse2NhbnZhczogbnVsbH0pO1xuICAgICAgdGhpcy5hY3RpdmVTbGlkZS5kYXRhID0gdGhpcy5jYW52YXMudG9PYmplY3QoKTtcbiAgICAgIHRoaXMuY2FudmFzLmNsZWFyKCk7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlU2xpZGUgPSBzbGlkZTtcbiAgICB0aGlzLmFjdGl2ZVNsaWRlLmNhbnZhcy5taXJyb3JTbGlkZSA9IHRoaXMuY2FudmFzO1xuXG5cblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5jYW52YXMucHJvY2Vzc2luZyA9IHRydWU7XG5cbiAgICBpZih0aGlzLmFjdGl2ZVNsaWRlLmNhbnZhcy5sb2FkZWQpe1xuICAgICAgX3RoaXMuY2FudmFzLm1pcnJvcihfdGhpcy5hY3RpdmVTbGlkZS5jYW52YXMpO1xuICAgICAgX3RoaXMuY2FudmFzLnByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgIF90aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICAgIF90aGlzLmZpcmUoXCJzbGlkZTpjaGFuZ2VkXCIsIHtjYW52YXM6IF90aGlzLmNhbnZhc30pO1xuICAgICAgX3RoaXMubGF6eUxvYWQoKTtcbiAgICB9ZWxzZXtcblxuICAgICAgLy8gX3RoaXMuY2FudmFzLmZpcmUoXCJsb2FkaW5nOmJlZ2luXCIse3R5cGU6XCJjdXJyZW50XCIgLCB0YXJnZXQ6IF90aGlzLmNhbnZhc30pO1xuICAgICAgdGhpcy5hY3RpdmVTbGlkZS5jYW52YXMubG9hZChzbGlkZS5vYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuY2FudmFzLm1pcnJvcihfdGhpcy5hY3RpdmVTbGlkZS5jYW52YXMpO1xuICAgICAgICBfdGhpcy5jYW52YXMucHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5jYW52YXMucmVuZGVyQWxsKCk7XG4gICAgICAgIF90aGlzLmZpcmUoXCJzbGlkZTpjaGFuZ2VkXCIsIHtjYW52YXM6IF90aGlzLmNhbnZhc30pO1xuICAgICAgICAvLyBfdGhpcy5jYW52YXMuZmlyZShcImxvYWRpbmc6ZW5kXCIse3R5cGU6XCJjdXJyZW50XCIgLCB0YXJnZXQ6IF90aGlzLmNhbnZhc30pO1xuICAgICAgICBfdGhpcy5sYXp5TG9hZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICB1bmxvYWRVbmFjdGl2ZVNsaWRlczogZmFsc2UsXG4gIGxhenlMb2FkRW5hYmxlZDogdHJ1ZSxcbiAgbGF6eUxvYWQ6IGZ1bmN0aW9uKCl7XG5cbiAgICB2YXIgYXBwID0gdGhpcztcbiAgICBpZih0aGlzLmxhenlMb2FkRW5hYmxlZCl7XG4gICAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKGZ1bmN0aW9uKHNsaWRlKXtcbiAgICAgICAgaWYoIXNsaWRlLmNhbnZhcy5sb2FkZWQgJiYgIXNsaWRlLmNhbnZhcy5wcm9jZXNzaW5nKXtcbiAgICAgICAgICBzbGlkZS5jYW52YXMubG9hZChzbGlkZS5vYmplY3QsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNsaWRlLmZpcmUoXCJsb2FkZWRcIik7XG4gICAgICAgICAgICBpZihhcHAuYWN0aXZlU2xpZGUgPT0gc2xpZGUuaWQpe1xuICAgICAgICAgICAgICB0aGlzLnNldEFjdGl2ZVNsaWRlKHNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXBwLmZpcmUoXCJzbGlkZTpsb2FkaW5nOmVuZFwiLCB7dGFyZ2V0OiB0aGlzfSk7XG5cbiAgICAgICAgICAgIGZvcih2YXIgX3MgaW4gYXBwLnNsaWRlcyl7XG4gICAgICAgICAgICAgIGlmKCFhcHAuc2xpZGVzW19zXS5jYW52YXMubG9hZGVkKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFwcC5maXJlKFwibG9hZGluZzplbmRcIiwge30pO1xuICAgICAgICAgIH0uYmluZChzbGlkZSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9ZWxzZXtcbiAgICAgIGFwcC5maXJlKFwibG9hZGluZzplbmRcIix7fSk7XG4gICAgfVxuICB9LFxuICBhZGRTbGlkZTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgc2xpZGUgPSBuZXcgZmFicmljLlNsaWRlKHRoaXMsIG9wdGlvbnMpO1xuICAgIHRoaXMuc2xpZGVzLnB1c2goc2xpZGUpO1xuICAgIHJldHVybiBzbGlkZTtcbiAgfSxcbiAgcmVtb3ZlU2xpZGU6IGZ1bmN0aW9uIChzbGlkZSkge1xuICAgIHZhciBfcyA9IHRoaXMuc2xpZGVzO1xuICAgIHZhciBfY3VyUG9zID0gX3MuaW5kZXhPZihzbGlkZSk7XG4gICAgX3Muc3BsaWNlKF9jdXJQb3MsIDEpO1xuXG4gICAgaWYoc2xpZGUgPT0gdGhpcy5hY3RpdmVTbGlkZSl7XG4gICAgICBkZWxldGUgdGhpcy5hY3RpdmVTbGlkZSA7XG4gICAgfVxuICB9LFxuICAvKipcbiAgICogbW92ZSBzbGlkZSB0byBhbm90aGVyIHBvc2l0aW9uXG4gICAqIEBwYXJhbSBzbGlkZVxuICAgKiBAcGFyYW0gbmV3UG9zaXRpb25cbiAgICovXG4gIG1vdmVTbGlkZTogZnVuY3Rpb24gKHNsaWRlLG5ld1Bvc2l0aW9uKSB7XG4gICAgdmFyIF9zID0gdGhpcy5zbGlkZXM7XG5cbiAgICB2YXIgX2N1clBvcyA9IF9zLmluZGV4T2Yoc2xpZGUpO1xuICAgIG5ld1Bvc2l0aW9uID0gcGFyc2VJbnQobmV3UG9zaXRpb24pO1xuXG4gICAgaWYgKF9jdXJQb3MgPCBuZXdQb3NpdGlvbikge1xuICAgICAgX3Muc3BsaWNlKF9jdXJQb3MsIDEpO1xuICAgICAgX3Muc3BsaWNlKG5ld1Bvc2l0aW9uLDAsIHNsaWRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3Muc3BsaWNlKF9jdXJQb3MsIDEpO1xuICAgICAgX3Muc3BsaWNlKG5ld1Bvc2l0aW9uLCAwLCBzbGlkZSk7XG4gICAgfVxuICB9LFxuICAvKipcbiAgICogcmVwbGFjZSBzbGlkZVxuICAgKiBAcGFyYW0gc2xpZGVcbiAgICogQHBhcmFtIG5ld1Bvc2l0aW9uIC0gcG9zaXRpb24gb2YgdGhlIHNlY29uZCBzbGlkZVxuICAgKi9cbiAgcmVwbGFjZVNsaWRlOiBmdW5jdGlvbiAoc2xpZGUsbmV3UG9zaXRpb24pIHtcbiAgICB2YXIgX3MgPSB0aGlzLnNsaWRlcztcbiAgICB2YXIgX3JlcGxhY2VkU2xpZGUgPSBfc1tuZXdQb3NpdGlvbl07XG4gICAgdmFyIF9jdXJQb3MgPSBfcy5pbmRleE9mKHNsaWRlKTtcbiAgICBpZiAoX2N1clBvcyA8IG5ld1Bvc2l0aW9uKSB7XG4gICAgICBfcy5zcGxpY2UobmV3UG9zaXRpb24sIDEsIHNsaWRlKTtcbiAgICAgIF9zLnNwbGljZShfY3VyUG9zLCAxLCBfcmVwbGFjZWRTbGlkZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9zLnNwbGljZShfY3VyUG9zLCAxLCBfcmVwbGFjZWRTbGlkZSk7XG4gICAgICBfcy5zcGxpY2UobmV3UG9zaXRpb24sIDEsIHNsaWRlKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlbG9hZDogZnVuY3Rpb24oKXtcbiAgICBmb3IodmFyIGkgaW4gdGhpcy5zbGlkZXMpIHtcbiAgICAgIHZhciBfc2xpZGUgPSB0aGlzLnNsaWRlc1tpXTtcbiAgICAgIC8vIF9zbGlkZS5jYW52YXMucHJlbG9hZChfc2xpZGUub2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyAgIF9zbGlkZS5maXJlKFwibW9kaWZpZWRcIik7XG4gICAgICAvLyB9KTtcbiAgICB9XG4gIH0sXG5cbiAgc2V0QWN0aXZlU2xpZGVCeUluZGV4OiBmdW5jdGlvbihpbmRleCl7XG4gICAgdGhpcy5zZXRBY3RpdmVTbGlkZSh0aGlzLnNsaWRlc1tpbmRleF0pXG4gIH0sXG4gIHNldEFjdGl2ZVNsaWRlQnlJZDogZnVuY3Rpb24oaWQpe1xuICAgIHRoaXMuc2V0QWN0aXZlU2xpZGUoICBmYWJyaWMudXRpbC5vYmplY3QuZmluZFdoZXJlKHRoaXMuc2xpZGVzLHtpZDogaWR9KSk7XG4gIH0sXG4gIGR1cGxpY2F0ZVNsaWRlOiBmdW5jdGlvbiAoc2xpZGVEYXRhKSB7XG4gICAgc2xpZGVEYXRhID0gc2xpZGVEYXRhLmNhbnZhcy50b09iamVjdCgpO1xuICAgIHZhciBfc2xpZGUgPSB0aGlzLmFkZFNsaWRlKHNsaWRlRGF0YSk7XG4gICAgX3NsaWRlLmNhbnZhcy5sb2FkKF9zbGlkZS5vYmplY3QpO1xuICB9LFxuXG4gIG5leHRTbGlkZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gdGhpcy5zbGlkZXMuaW5kZXhPZih0aGlzLmFjdGl2ZVNsaWRlKTtcbiAgICBpZiAoaSA8IHRoaXMuc2xpZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMuc2V0QWN0aXZlU2xpZGUoaSArIDEpO1xuICAgIH1cbiAgfSxcbiAgcHJldlNsaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSB0aGlzLnNsaWRlcy5pbmRleE9mKHRoaXMuYWN0aXZlU2xpZGUpO1xuICAgIGlmIChpID4gMCkge1xuICAgICAgdGhpcy5zZXRBY3RpdmVTbGlkZShpIC0gMSk7XG4gICAgfVxuICB9LFxuICBnb3RvU2xpZGU6IGZ1bmN0aW9uIChzbGlkZSkge1xuICAgIHRoaXMuc2V0QWN0aXZlU2xpZGUoc2xpZGUgLSAxKTtcbiAgfSxcbiAgbmV4dFNsaWRlQXZhaWxhYmxlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSB0aGlzLnNsaWRlcy5pbmRleE9mKHRoaXMuYWN0aXZlU2xpZGUpO1xuICAgIHJldHVybiBpIDwgdGhpcy5zbGlkZXMubGVuZ3RoIC0gMVxuICB9LFxuICBwcmV2U2xpZGVBdmFpbGFibGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IHRoaXMuc2xpZGVzLmluZGV4T2YodGhpcy5hY3RpdmVTbGlkZSk7XG4gICAgcmV0dXJuIGkgPiAwXG4gIH0sXG5cbn0pO1xuXG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLlNsaWRlQ2FudmFzLnByb3RvdHlwZSwge1xuICAvKipcbiAgICogQ29weSB0aGUgY29udGVudCBvZiBhY3RpdmUgc2xpZGUgdG8gbWFpbiBjYW52YXMuXG4gICAqIEBwYXJhbSBzbGlkZVxuICAgKi9cbiAgbWlycm9yOiBmdW5jdGlvbiAoc2xpZGUpIHtcbiAgICB0aGlzLmRpc2NhcmRBY3RpdmVHcm91cCgpO1xuICAgIHRoaXMuZGlzY2FyZEFjdGl2ZU9iamVjdCgpO1xuICAgIC8vIHRoaXMuc2xpZGVXaWR0aCA9IHNsaWRlLnNsaWRlV2lkdGg7XG4gICAgLy8gdGhpcy5zbGlkZUhlaWdodCA9IHNsaWRlLnNsaWRlSGVpZ2h0O1xuICAgIHRoaXMuc2V0T3JpZ2luYWxTaXplKHt3aWR0aDogc2xpZGUub3JpZ2luYWxXaWR0aCB8fCBzbGlkZS53aWR0aCwgaGVpZ2h0OiBzbGlkZS5vcmlnaW5hbEhlaWdodCB8fCBzbGlkZS5oZWlnaHR9KVxuICAgIHRoaXMuYmFja2dyb3VuZEltYWdlID0gc2xpZGUuYmFja2dyb3VuZEltYWdlO1xuXG4gICAgaWYodGhpcy5yZXNpemFibGUpIHtcbiAgICAgIHRoaXMub3JpZ2luYWxXaWR0aCAgPSBzbGlkZS5vcmlnaW5hbFdpZHRoO1xuICAgICAgdGhpcy5vcmlnaW5hbEhlaWdodCAgPSBzbGlkZS5vcmlnaW5hbEhlaWdodCA7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLnNldFdpZHRoKChzbGlkZS5vcmlnaW5hbFdpZHRoIHx8IHNsaWRlLndpZHRoKSogdGhpcy52aWV3cG9ydFRyYW5zZm9ybVswXSk7XG4gICAgICB0aGlzLnNldEhlaWdodCgoc2xpZGUub3JpZ2luYWxIZWlnaHQgfHwgc2xpZGUuaGVpZ2h0KSAgKiB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzBdKTtcbiAgICB9XG4gICAgdGhpcy5fb25SZXNpemUoKTtcbiAgICB0aGlzLmFjdGl2ZUFyZWEgPSBzbGlkZS5hY3RpdmVBcmVhO1xuICAgIHRoaXMub3JpZ2luYWxTbGlkZSA9IHNsaWRlO1xuXG4gICAgdGhpcy50ZW1wbGF0ZSA9IHNsaWRlLnRlbXBsYXRlO1xuICAgIHRoaXMub2Zmc2V0cyA9IHNsaWRlLm9mZnNldHM7XG4gICAgLy8gdGhpcy5fb2JqZWN0cyA9IFtdO1xuICAgIC8vIHRoaXMubGF5ZXJzID0gc2xpZGUubGF5ZXJzO1xuXG4gICAgaWYodGhpcy5iYWNrZ3JvdW5kSW1hZ2Upe1xuICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2UuY2FudmFzID0gdGhpcztcbiAgICB9XG4gICAgLy90b2RvXG4gICAgLy8gaWYodGhpcy5fYmFja2dyb3VuZExheWVyKSB7XG4gICAgLy8gICBmb3IgKHZhciBpIGluIHRoaXMuX2JhY2tncm91bmRMYXllcikge1xuICAgIC8vICAgICB0aGlzLl9iYWNrZ3JvdW5kTGF5ZXJbaV0uY2FudmFzID0gdGhpcztcbiAgICAvLyAgICAgdGhpcy5fYmFja2dyb3VuZExheWVyW2ldLnNldENvb3JkcygpO1xuICAgIC8vICAgfVxuICAgIC8vICAgdGhpcy5zZXRBY3RpdmVBcmVhKHRydWUpO1xuICAgIC8vIH1jZCBmaWVyXG5cbiAgICBmb3IodmFyIGxheWVyTmFtZSBpbiBzbGlkZS5sYXllcnMpIHtcbiAgICAgIHRoaXMubGF5ZXJzW2xheWVyTmFtZV0ub2JqZWN0cyA9IFtdO1xuICAgIH1cbiAgICB0aGlzLl9vYmplY3RzID0gdGhpcy5sYXllcnMubG93ZXIub2JqZWN0cztcblxuICAgIGlmKHNsaWRlLmxheWVycykge1xuICAgICAgZm9yKHZhciBsYXllck5hbWUgaW4gc2xpZGUubGF5ZXJzKXtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBzbGlkZS5sYXllcnNbbGF5ZXJOYW1lXS5vYmplY3RzKSB7XG4gICAgICAgICAgdGhpcy5hZGQoc2xpZGUubGF5ZXJzW2xheWVyTmFtZV0ub2JqZWN0c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgc2xpZGUubGF5ZXJzW2xheWVyTmFtZV0ub2JqZWN0cyA9IHRoaXMubGF5ZXJzW2xheWVyTmFtZV0ub2JqZWN0cztcbiAgICAgIH1cbiAgICAgIHNsaWRlLl9vYmplY3RzID0gdGhpcy5fb2JqZWN0cztcbiAgICB9ZWxzZXtcbiAgICAgIGlmKHNsaWRlLl9vYmplY3RzKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gc2xpZGUuX29iamVjdHMpIHtcbiAgICAgICAgICB0aGlzLmFkZChzbGlkZS5fb2JqZWN0c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNsaWRlLl9vYmplY3RzID0gdGhpcy5fb2JqZWN0cztcbiAgICB9XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBzbGlkZS5vbignb2JqZWN0OmFkZGVkJyxmdW5jdGlvbihlKXtcbiAgICAgIF90aGlzLmFkZChlLnRhcmdldCk7XG4gICAgfSk7XG4gICAgdGhpcy5maXJlKCdjaGFuZ2VkJywge3RhcmdldDogc2xpZGV9KVxuICB9LFxuICBwcm9qZWN0OiBudWxsLFxuICB1bmlxdWU6IGZhbHNlLFxuICByZXF1aXJlZDogZmFsc2UsXG4gIHN0YXRlUHJvcGVydGllczogW1widW5pcXVlXCIsXCJyZXF1aXJlZFwiXSxcbiAgcmVtb3ZlU2xpZGU6IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5wcm9qZWN0LnJlbW92ZVNsaWRlKHRoaXMpXG4gIH0sXG4gIGR1cGxpY2F0ZVNsaWRlOiBmdW5jdGlvbigpe1xuICAgIHRoaXMucHJvamVjdC5kdXBsaWNhdGVTbGlkZSh0aGlzKVxuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY29yZS9hcHBsaWNhdGlvbi5zbGlkZXMuanNcbi8vIG1vZHVsZSBpZCA9IDM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxuXG5cbmlmKCFPYmplY3QudmFsdWVzKXtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdCwgJ3ZhbHVlcycsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24oX29iamVjdCkge1xuICAgICAgdmFyIF92YWx1ZXMgPSBbXTtcbiAgICAgIE9iamVjdC5rZXlzKF9vYmplY3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfdmFsdWVzLnB1c2goX29iamVjdFtrZXldKTtcbiAgICAgICAgLy8gdXNlIHZhbFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3ZhbHVlcztcbiAgICB9XG4gIH0pO1xufVxuXG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLHtcbiAgZXJyb3JzOiBbXVxufSk7XG5cbmZhYnJpYy51dGlsLm9yZGVyID0gZnVuY3Rpb24oX2FycmF5LGNvbnRleHQgKXtcbiAgKGZ1bmN0aW9uIF9jYWxsKCl7XG4gICAgaWYoIV9hcnJheS5sZW5ndGgpcmV0dXJuO1xuICAgIHZhciBmb28gPSBfYXJyYXkuc2hpZnQoKTtcbiAgICBpZihmb28pe1xuICAgICAgaWYoZm9vLmxlbmd0aCl7XG4gICAgICAgIGZvby5jYWxsKGNvbnRleHQsX2NhbGwpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIGZvby5jYWxsKGNvbnRleHQpO1xuICAgICAgICBfY2FsbCgpO1xuICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgX2NhbGwoKTtcbiAgICB9XG4gIH0pKClcbn07XG5cbmZhYnJpYy51dGlsLnByb21pc2UgPSB7XG4gIG1hcDogZnVuY3Rpb24gKGRhdGEsIGZvbykge1xuXG4gICAgaWYoZGF0YS5jb25zdHJ1Y3RvciA9PSBBcnJheSl7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZGF0YS5tYXAoZm9vKSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMsIGVycm9yKSB7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gICAgdmFyIHVybHMgPSBPYmplY3QudmFsdWVzKGRhdGEpO1xuICAgIHJldHVybiBQcm9taXNlLmFsbCh1cmxzLm1hcChmb28pKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMsIGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9tYXAgPSB7fTtcblxuICAgICAgICBmb3IodmFyIGkgPSAwIDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgIF9tYXBba2V5c1tpXV0gPSByZXN1bHRzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoX21hcCk7XG4gICAgICB9KVxuICB9LFxuICB3cmFwOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiB3cmFwKGZvbykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7XG4gICAgICAgIGlmICghZm9vLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgZmFpbCkge1xuICAgICAgICAgICAgdmFyIF9yZXN1bHQgPSBmb28uY2FsbChjb250ZXh0KTtcbiAgICAgICAgICAgIChfcmVzdWx0IHx8IF9yZXN1bHQgPT09IHVuZGVmaW5lZCkgPyByZXNvbHZlKCkgOiBmYWlsKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZvby5iaW5kKGNvbnRleHQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZmFicmljLk9iamVjdC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICB0aGlzLl9zZXRPYmplY3Qoa2V5LCB2YWx1ZSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBrZXkgIT09ICdjbGlwVG8nKSB7XG4gICAgICB0aGlzLl9zZXQoa2V5LCB2YWx1ZSh0aGlzLmdldChrZXkpKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5fc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZhYnJpYy5PYmplY3QucHJvdG90eXBlLl9zZXRPYmplY3QgPSBmdW5jdGlvbihvcHRpb25zLGNhbGxiYWNrKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIGlmKHRoaXMub3B0aW9uc09yZGVyKXtcbiAgICB2YXIgbWlkZGxlSW5kZXggPSB0aGlzLm9wdGlvbnNPcmRlci5pbmRleE9mKFwiKlwiKSB8fCAtMTtcblxuICAgIHZhciBpID0gbWlkZGxlSW5kZXgsIHByb3AgLCBrZXlJbmRleDtcblxuICAgIHdoaWxlKChwcm9wID0gdGhpcy5vcHRpb25zT3JkZXJbLS1pXSkpe1xuICAgICAgaWYoKGtleUluZGV4ID0ga2V5cy5pbmRleE9mKHByb3ApKSAhPT0gLTEpe1xuICAgICAgICBrZXlzLnNwbGljZShrZXlJbmRleCwgMSk7XG4gICAgICAgIGtleXMudW5zaGlmdChwcm9wKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaSA9IG1pZGRsZUluZGV4O1xuICAgIHdoaWxlKHByb3AgPSB0aGlzLm9wdGlvbnNPcmRlclsrK2ldKXtcbiAgICAgIGlmKChrZXlJbmRleCA9IGtleXMuaW5kZXhPZihwcm9wKSkgIT09IC0xKXtcbiAgICAgICAga2V5cy5zcGxpY2Uoa2V5SW5kZXgsIDEpO1xuICAgICAgICBrZXlzLnB1c2gocHJvcCk7XG4gICAgICB9XG4gICAgfVxuXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByb3AgPSBrZXlzW2ldO1xuICAgIGlmKHR5cGVvZiBvcHRpb25zW3Byb3BdID09IFwiZnVuY3Rpb25cIil7XG4gICAgICBrZXlzLnNwbGljZShpLCAxKTtcbiAgICAgIGtleXMudW5zaGlmdChwcm9wKTtcbiAgICB9XG4gIH1cbiAgdmFyIHF1ZXVlO1xuICBmb3IgKHZhciBpIGluIGtleXMpIHtcbiAgICB2YXIgX2tleSA9IGtleXNbaV07XG4gICAgaWYob3B0aW9uc1tfa2V5XSA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnNbX2tleV0gPT09IG51bGwpY29udGludWU7XG4gICAgdmFyIF9mb29OYW1lID0gXCJzZXRcIiArIGZhYnJpYy51dGlsLnN0cmluZy5jYXBpdGFsaXplKF9rZXksIHRydWUpO1xuICAgIGlmKHRoaXNbX2Zvb05hbWVdICYmIHRoaXNbX2Zvb05hbWVdLm5hbWUgJiYgdGhpc1tfZm9vTmFtZV0ubmFtZSAhPSBcImFub255bW91c1wiKXtcbiAgICAgIGlmKHRoaXNbX2Zvb05hbWVdLmxlbmd0aCA9PSAyKXtcbiAgICAgICAgaWYoIXF1ZXVlKXtcbiAgICAgICAgICBxdWV1ZSA9IGZhYnJpYy51dGlsLnF1ZXVlTG9hZCgyLGNhbGxiYWNrKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgcXVldWUudG90YWwgKys7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1tfZm9vTmFtZV0ob3B0aW9uc1tfa2V5XSxmdW5jdGlvbihfa2V5KXtcbiAgICAgICAgICBxdWV1ZSgpO1xuICAgICAgICB9LmJpbmQodGhpcyxfa2V5KSk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgdGhpc1tfZm9vTmFtZV0ob3B0aW9uc1tfa2V5XSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fX3NldChfa2V5LCBvcHRpb25zW19rZXldKTtcbiAgICB9XG4gIH1cbiAgaWYocXVldWUpe1xuICAgIHF1ZXVlKClcbiAgfWVsc2UgaWYoY2FsbGJhY2sgKXtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59O1xuXG52YXIgX2dldF9wb2ludGVyX292ZXJ3cml0dGVuID0gZmFicmljLkNhbnZhcy5wcm90b3R5cGUuZ2V0UG9pbnRlcjtcblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuQ2FudmFzLnByb3RvdHlwZSwge1xuICBzZXRXaWR0aDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0RGltZW5zaW9ucyh7IHdpZHRoOiB2YWx1ZSB9LCB7fSk7XG4gIH0sXG4gIHNldEhlaWdodDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0RGltZW5zaW9ucyh7IGhlaWdodDogdmFsdWUgfSwge30pO1xuICB9LFxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgX3NldE9iamVjdDogZmFicmljLk9iamVjdC5wcm90b3R5cGUuX3NldE9iamVjdCxcbiAgb3JpZ2luYWxTdGF0ZToge30sXG4gIHN0YXRlUHJvcGVydGllczogW10sXG4gIGVkaXRpbmdPYmplY3Q6IG51bGwsXG4gIGdldE9iamVjdEJ5SUQ6IGZ1bmN0aW9uKF9pZCl7XG4gICAgdmFyIGxheWVycyA9IHRoaXMubGF5ZXJzIHx8IFt7b2JqZWN0czogdGhpcy5fb2JqZWN0c31dO1xuICAgIGZvciAodmFyIGkgaW4gbGF5ZXJzKSB7XG4gICAgICBmb3IgKHZhciBqIGluIGxheWVyc1tpXS5vYmplY3RzKSB7XG4gICAgICAgIGlmIChsYXllcnNbaV0ub2JqZWN0c1tqXS5pZCA9PT0gX2lkKSB7XG4gICAgICAgICAgcmV0dXJuIGxheWVyc1tpXS5vYmplY3RzW2pdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICAvKlxuICAgQWRkIEN1c3RvbSBPYmplY3QgVHJhbmZvcm1hdGlvbnNcbiAgICovXG4gIGdldFBvaW50ZXI6IGZ1bmN0aW9uIChlLCBpZ25vcmVab29tLCB1cHBlckNhbnZhc0VsKSB7XG4gICAgdmFyIHBvaW50ZXIgPSBfZ2V0X3BvaW50ZXJfb3ZlcndyaXR0ZW4uY2FsbCh0aGlzLCBlLCBpZ25vcmVab29tLCB1cHBlckNhbnZhc0VsKTtcbiAgICBpZiAoZS5fZ3JvdXApIHtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxpemVQb2ludGVyKGUuX2dyb3VwLCBwb2ludGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50ZXI7XG4gIH0sXG4gIF9fc2V0IDogZmFicmljLk9iamVjdC5wcm90b3R5cGUuX3NldCxcbiAgZ2V0TW9kaWZpZWRTdGF0ZXM6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB2YXIgc3RhdGVzID0ge1xuICAgICAgb3JpZ2luYWw6IHt9LFxuICAgICAgbW9kaWZpZWQ6IHt9XG4gICAgfTtcbiAgICBmb3IgKHZhciBwcm9wIGluIHRhcmdldC5vcmlnaW5hbFN0YXRlKSB7XG4gICAgICBpZiAodGFyZ2V0Lm9yaWdpbmFsU3RhdGVbcHJvcF0gIT09IHRhcmdldFtwcm9wXSkge1xuICAgICAgICBpZih0YXJnZXQub3JpZ2luYWxTdGF0ZVtwcm9wXSBpbnN0YW5jZW9mIE9iamVjdCl7XG4gICAgICAgICAgaWYoSlNPTi5zdHJpbmdpZnkodGFyZ2V0Lm9yaWdpbmFsU3RhdGVbcHJvcF0pID09IEpTT04uc3RyaW5naWZ5KHRhcmdldFtwcm9wXSkpe1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0YXRlcy5vcmlnaW5hbFtwcm9wXSA9IHRhcmdldC5vcmlnaW5hbFN0YXRlW3Byb3BdO1xuICAgICAgICBzdGF0ZXMubW9kaWZpZWRbcHJvcF0gPSB0YXJnZXRbcHJvcF07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZXM7XG4gIH0sXG4gIF9maW5hbGl6ZUN1cnJlbnRUcmFuc2Zvcm06IGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLl9jdXJyZW50VHJhbnNmb3JtLFxuICAgICAgdGFyZ2V0ID0gdHJhbnNmb3JtLnRhcmdldDtcblxuICAgIGlmICh0YXJnZXQuX3NjYWxpbmcpIHtcbiAgICAgIHRhcmdldC5fc2NhbGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHRhcmdldC5zZXRDb29yZHMoKTtcblxuICAgIHRoaXMuX3Jlc3RvcmVPcmlnaW5YWSh0YXJnZXQpO1xuICAgIC8vIG9ubHkgZmlyZSA6bW9kaWZpZWQgZXZlbnQgaWYgdGFyZ2V0IGNvb3JkaW5hdGVzIHdlcmUgY2hhbmdlZCBkdXJpbmcgbW91c2Vkb3duLW1vdXNldXBcbiAgICB0aGlzLmZpcmVNb2RpZmllZElmQ2hhbmdlZCh0YXJnZXQpO1xuICB9LFxuICBmaXJlTW9kaWZpZWRJZkNoYW5nZWQ6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBpZiAodGhpcy5zdGF0ZWZ1bCkge1xuICAgICAgdmFyIF9zdGF0ZXMgPSB0YXJnZXQuaGFzU3RhdGVDaGFuZ2VkKCk7XG4gICAgICBpZihfc3RhdGVzKXtcbiAgICAgICAgdGhpcy5maXJlKCdvYmplY3Q6bW9kaWZpZWQnLCB7dGFyZ2V0OiB0YXJnZXQgLCBzdGF0ZXM6IF9zdGF0ZXN9KTtcbiAgICAgICAgdGFyZ2V0LmZpcmUoJ21vZGlmaWVkJyx7c3RhdGVzOiBfc3RhdGVzfSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAvLyBfc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSxjYWxsYmFjaykge1xuICAvLyAgIGlmICh0aGlzLnNwZWNpYWxQcm9wZXJ0aWVzLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcbiAgLy8gICAgIHRoaXNbXCJzZXRcIiArIGZhYnJpYy51dGlsLnN0cmluZy5jYXBpdGFsaXplKGtleSwgdHJ1ZSldKHZhbHVlLGNhbGxiYWNrKTtcbiAgLy8gICB9IGVsc2Uge1xuICAvLyAgICAgZmFicmljLk9iamVjdC5wcm90b3R5cGUuX3NldC5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAvLyAgIH1cbiAgLy8gICByZXR1cm4gdGhpcztcbiAgLy8gfSxcbiAgZ2V0OiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5nZXQsXG4gIHNldDogZmFicmljLk9iamVjdC5wcm90b3R5cGUuc2V0LFxuICBoYXNTdGF0ZUNoYW5nZWQ6IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLmhhc1N0YXRlQ2hhbmdlZCxcbiAgLyoqIENyZWF0ZXMgYSBib3R0b20gY2FudmFzXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IFtjYW52YXNFbF1cbiAgICovXG4gIF9jcmVhdGVMb3dlckNhbnZhczogZnVuY3Rpb24gKGNhbnZhc0VsKSB7XG4gICAgaWYgKHR5cGVvZiBjYW52YXNFbCA9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aGlzLmxvd2VyQ2FudmFzRWwgPSBmYWJyaWMudXRpbC5nZXRCeUlkKGNhbnZhc0VsKSB8fCB0aGlzLl9jcmVhdGVDYW52YXNFbGVtZW50KCk7XG4gICAgfSBlbHNlIGlmIChjYW52YXNFbCkge1xuICAgICAgdGhpcy5sb3dlckNhbnZhc0VsID0gY2FudmFzRWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmlydHVhbCA9IHRydWU7XG4gICAgICB0aGlzLmxvd2VyQ2FudmFzRWwgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCk7XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdENhbnZhc0VsZW1lbnQodGhpcy5sb3dlckNhbnZhc0VsKTtcblxuICAgIGZhYnJpYy51dGlsLmFkZENsYXNzKHRoaXMubG93ZXJDYW52YXNFbCwgJ2xvd2VyLWNhbnZhcycpO1xuXG4gICAgaWYgKHRoaXMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIHRoaXMuX2FwcGx5Q2FudmFzU3R5bGUodGhpcy5sb3dlckNhbnZhc0VsKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRleHRDb250YWluZXIgPSB0aGlzLmxvd2VyQ2FudmFzRWwuZ2V0Q29udGV4dCgnMmQnKTtcbiAgfSxcbiAgZmluZFRhcmdldDogZnVuY3Rpb24gKGUsIHNraXBHcm91cCkge1xuICAgIGlmICh0aGlzLnNraXBUYXJnZXRGaW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGlnbm9yZVpvb20gPSB0cnVlLFxuICAgICAgcG9pbnRlciA9IHRoaXMuZ2V0UG9pbnRlcihlLCBpZ25vcmVab29tKSxcbiAgICAgIGFjdGl2ZUdyb3VwID0gdGhpcy5nZXRBY3RpdmVHcm91cCgpLFxuICAgICAgYWN0aXZlT2JqZWN0ID0gdGhpcy5nZXRBY3RpdmVPYmplY3QoKTtcbiAgICBpZiAoYWN0aXZlR3JvdXAgJiYgIXNraXBHcm91cCAmJiB0aGlzLl9jaGVja1RhcmdldChwb2ludGVyLCBhY3RpdmVHcm91cCkpIHtcbiAgICAgIHJldHVybiBhY3RpdmVHcm91cDtcbiAgICB9XG5cbiAgICBpZiAoYWN0aXZlT2JqZWN0ICYmIHRoaXMuX2NoZWNrVGFyZ2V0KHBvaW50ZXIsIGFjdGl2ZU9iamVjdCkpIHtcbiAgICAgIC8vYWRkZWQgdmlzY2Vyb2lkXG4gICAgICB0aGlzLl9maXJlT3Zlck91dEV2ZW50cyhhY3RpdmVPYmplY3QsIGUpO1xuICAgICAgcmV0dXJuIGFjdGl2ZU9iamVjdDtcbiAgICB9XG5cbiAgICB0aGlzLnRhcmdldHMgPSBbIF07XG5cbiAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fc2VhcmNoUG9zc2libGVUYXJnZXRzKHRoaXMuX29iamVjdHMsIHBvaW50ZXIpO1xuICAgIHRoaXMuX2ZpcmVPdmVyT3V0RXZlbnRzKHRhcmdldCwgZSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxufSk7XG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLk9iamVjdC5wcm90b3R5cGUsIHtcbiAgc2V0QW5nbGU6IGZ1bmN0aW9uKGFuZ2xlKSB7XG4gICAgdGhpcy5hbmdsZSA9IGFuZ2xlO1xuICB9LFxuICBfX3NldCA6IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLl9zZXQsXG4gIGdldCA6IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLmdldCxcbiAgX3NldDogZnVuY3Rpb24gKGtleSwgdmFsdWUgLGNhbGxiYWNrKSB7XG4gICAgdmFyIF9mb29OYW1lID0gXCJzZXRcIiArIGZhYnJpYy51dGlsLnN0cmluZy5jYXBpdGFsaXplKGtleSwgdHJ1ZSk7XG4gICAgaWYodGhpc1tfZm9vTmFtZV0gICYmIHRoaXNbX2Zvb05hbWVdLm5hbWUgJiYgdGhpc1tfZm9vTmFtZV0ubmFtZSAhPSBcImFub255bW91c1wiKXtcbiAgICAgIC8vIGlmICh0aGlzLnNwZWNpYWxQcm9wZXJ0aWVzLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcbiAgICAgIC8vIGlmKHRoaXNbX2Zvb05hbWVdKXtcbiAgICAgIHRoaXNbX2Zvb05hbWVdKHZhbHVlLGNhbGxiYWNrKTtcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuX19zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkaXNhYmxlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZXQoe1xuICAgICAgc2VsZWN0YWJsZTogZmFsc2UsXG4gICAgICBldmVudGVkOiBmYWxzZSxcbiAgICAgIGhhc0NvbnRyb2xzOiBmYWxzZSxcbiAgICAgIGxvY2tNb3ZlbWVudFg6IHRydWUsXG4gICAgICBsb2NrTW92ZW1lbnRZOiB0cnVlXG4gICAgfSk7XG4gIH0sXG4gIHN0b3JlZDogdHJ1ZSxcbiAgLyoqXG4gICAqIFNhdmVzIHN0YXRlIG9mIGFuIG9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9iamVjdCB3aXRoIGFkZGl0aW9uYWwgYHN0YXRlUHJvcGVydGllc2AgYXJyYXkgdG8gaW5jbHVkZSB3aGVuIHNhdmluZyBzdGF0ZVxuICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAqL1xuICBzYXZlU3RhdGU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLnN0YXRlUHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIHZhciBfdmFsID0gdGhpcy5nZXQocHJvcCk7XG4gICAgICBpZihfdmFsIGluc3RhbmNlb2YgT2JqZWN0KXtcbiAgICAgICAgdGhpcy5vcmlnaW5hbFN0YXRlW3Byb3BdID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lRGVlcChfdmFsKTtcbiAgICAgIH1lbHNle1xuICAgICAgICB0aGlzLm9yaWdpbmFsU3RhdGVbcHJvcF0gPSBfdmFsO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5zdGF0ZVByb3BlcnRpZXMpIHtcbiAgICAgIG9wdGlvbnMuc3RhdGVQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICB0aGlzLm9yaWdpbmFsU3RhdGVbcHJvcF0gPSB0aGlzLmdldChwcm9wKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgaGFzU3RhdGVDaGFuZ2VkOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbW9kaWZpZWQgPSAwO1xuICAgIHZhciBzdGF0ZXMgPSB7XG4gICAgICBvcmlnaW5hbDoge30sXG4gICAgICBtb2RpZmllZDoge31cbiAgICB9O1xuICAgIGZvciAodmFyIHByb3AgaW4gdGhpcy5vcmlnaW5hbFN0YXRlKSB7XG4gICAgICBpZiAodGhpcy5vcmlnaW5hbFN0YXRlW3Byb3BdICE9PSB0aGlzW3Byb3BdKSB7XG4gICAgICAgIGlmKHRoaXMub3JpZ2luYWxTdGF0ZVtwcm9wXSBpbnN0YW5jZW9mIE9iamVjdCl7XG4gICAgICAgICAgaWYoSlNPTi5zdHJpbmdpZnkodGhpcy5vcmlnaW5hbFN0YXRlW3Byb3BdKSA9PSBKU09OLnN0cmluZ2lmeSh0aGlzW3Byb3BdKSl7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGVzLm9yaWdpbmFsW3Byb3BdID0gdGhpcy5vcmlnaW5hbFN0YXRlW3Byb3BdO1xuICAgICAgICBzdGF0ZXMubW9kaWZpZWRbcHJvcF0gPSB0aGlzW3Byb3BdO1xuICAgICAgICBtb2RpZmllZCsrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbW9kaWZpZWQgJiYgc3RhdGVzO1xuICB9XG59KTtcblxuZmFicmljLnV0aWwuZ2V0UHJvcG9ydGlvbnMgPSBmdW5jdGlvbiAocGhvdG8sIGNvbnRhaW5lciwgbW9kZSkge1xuICBtb2RlID0gbW9kZSB8fCAnZml0JztcbiAgdmFyIF93ID0gcGhvdG8ubmF0dXJhbFdpZHRoIHx8IHBob3RvLndpZHRoO1xuICB2YXIgX2ggPSBwaG90by5uYXR1cmFsSGVpZ2h0IHx8IHBob3RvLmhlaWdodDtcbiAgaWYgKCFjb250YWluZXIuaGVpZ2h0ICYmICFjb250YWluZXIud2lkdGgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2NhbGU6IDEsXG4gICAgICB3aWR0aDogX3csXG4gICAgICBoZWlnaHQ6IF9oXG4gICAgfTtcbiAgfVxuICBpZiAoIXBob3RvLmhlaWdodCAmJiAhcGhvdG8ud2lkdGgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2NhbGU6IDAuMDAxLFxuICAgICAgd2lkdGg6IGNvbnRhaW5lci53aWR0aCxcbiAgICAgIGhlaWdodDogY29udGFpbmVyLmhlaWdodFxuICAgIH07XG4gIH1cblxuICAvLyB2YXIgX2FzcCA9IF93IC8gX2gsIF9jX2FzcCA9IGNvbnRhaW5lci53aWR0aCAvIGNvbnRhaW5lci5oZWlnaHQ7XG5cbiAgLy8gaWYgKF9hc3AgPiBfY19hc3ApIHtcbiAgLy8gICBfaCA9IGNvbnRhaW5lci5oZWlnaHQ7XG4gIC8vICAgX3cgPSBfaCAqIF9hc3A7XG4gIC8vXG4gIC8vIH0gZWxzZSB7XG4gIC8vICAgX3cgPSBjb250YWluZXIud2lkdGg7XG4gIC8vICAgX2ggPSBfdyAvIF9hc3A7XG4gIC8vIH1cbiAgLy8gdmFyIHNjYWxlWCA9IGNvbnRhaW5lci53aWR0aCAvIF93O1xuICAvLyB2YXIgc2NhbGVZID0gY29udGFpbmVyLmhlaWdodCAvIF9oO1xuICB2YXIgc2NhbGVYID0gY29udGFpbmVyLndpZHRoICYmIGNvbnRhaW5lci53aWR0aCAvIF93IHx8IDk5OTtcbiAgdmFyIHNjYWxlWSA9IGNvbnRhaW5lci5oZWlnaHQgJiYgY29udGFpbmVyLmhlaWdodCAvIF9oIHx8IDk5OTtcblxuICB2YXIgc2NhbGU7XG4gIGlmIChtb2RlID09PSAnY292ZXInKSB7XG4gICAgc2NhbGUgPSBNYXRoLm1heChzY2FsZVgsIHNjYWxlWSk7XG4gIH1cbiAgaWYgKG1vZGUgPT09ICdmaXQnKSB7XG4gICAgc2NhbGUgPSBNYXRoLm1pbihzY2FsZVgsIHNjYWxlWSk7XG4gIH1cbiAgaWYgKG1vZGUgPT09ICdjZW50ZXInKSB7XG4gICAgc2NhbGUgPSAxO1xuICB9XG4gIHJldHVybiB7XG4gICAgc2NhbGU6IHNjYWxlLFxuICAgIHdpZHRoOiBNYXRoLmZsb29yKF93ICogc2NhbGUpLFxuICAgIGhlaWdodDogTWF0aC5mbG9vcihfaCAqIHNjYWxlKVxuICB9O1xufTtcblxuZmFicmljLnV0aWwuVXRmOEFycmF5VG9TdHIgPSBmdW5jdGlvbihhcnJheSkge1xuICB2YXIgb3V0LCBpLCBsZW4sIGM7XG4gIHZhciBjaGFyMiwgY2hhcjM7XG5cbiAgb3V0ID0gXCJcIjtcbiAgbGVuID0gYXJyYXkubGVuZ3RoO1xuICBpID0gMDtcbiAgd2hpbGUoaSA8IGxlbikge1xuICAgIGMgPSBhcnJheVtpKytdO1xuICAgIHN3aXRjaChjID4+IDQpXG4gICAge1xuICAgICAgY2FzZSAwOiBjYXNlIDE6IGNhc2UgMjogY2FzZSAzOiBjYXNlIDQ6IGNhc2UgNTogY2FzZSA2OiBjYXNlIDc6XG4gICAgICAvLyAweHh4eHh4eFxuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgMTI6IGNhc2UgMTM6XG4gICAgICAvLyAxMTB4IHh4eHggICAxMHh4IHh4eHhcbiAgICAgIGNoYXIyID0gYXJyYXlbaSsrXTtcbiAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyAmIDB4MUYpIDw8IDYpIHwgKGNoYXIyICYgMHgzRikpO1xuICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE0OlxuICAgICAgICAvLyAxMTEwIHh4eHggIDEweHggeHh4eCAgMTB4eCB4eHh4XG4gICAgICAgIGNoYXIyID0gYXJyYXlbaSsrXTtcbiAgICAgICAgY2hhcjMgPSBhcnJheVtpKytdO1xuICAgICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgJiAweDBGKSA8PCAxMikgfFxuICAgICAgICAgICgoY2hhcjIgJiAweDNGKSA8PCA2KSB8XG4gICAgICAgICAgKChjaGFyMyAmIDB4M0YpIDw8IDApKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbmZhYnJpYy51dGlsLmNyZWF0ZU9iamVjdCA9IGZ1bmN0aW9uICh0eXBlLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZih0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIil7XG4gICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSB0eXBlO1xuICAgIHR5cGUgPSBudWxsO1xuICB9ZWxzZXtcbiAgICBvcHRpb25zLnR5cGUgPSB0eXBlO1xuICB9XG4gIHZhciBhcHAgPSBvcHRpb25zLmFwcGxpY2F0aW9uO1xuICBhcHAgJiYgYXBwLmZpcmUoXCJlbnRpdHk6bG9hZFwiLHtvcHRpb25zOiBvcHRpb25zfSk7XG5cbiAgdmFyIF9rbGFzc05hbWUgPSBmYWJyaWMudXRpbC5zdHJpbmcuY2FtZWxpemUoZmFicmljLnV0aWwuc3RyaW5nLmNhcGl0YWxpemUodHlwZSB8fCBvcHRpb25zLnR5cGUgfHwgYXBwLnByb3RvdHlwZXMuT2JqZWN0LnR5cGUsdHJ1ZSkpO1xuICB2YXIgX2tsYXNzID0gZmFicmljW19rbGFzc05hbWVdIHx8IGFwcC5rbGFzc2VzW19rbGFzc05hbWVdO1xuXG5cbiAgaWYoIV9rbGFzcyl7XG4gICAgY29uc29sZS5lcnJvcihfa2xhc3NOYW1lICsgXCIgaXMgdW5kZWZpbmVkXCIpO1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgZmFicmljLlJlY3Qob3B0aW9ucykpXG4gIH1cblxuICB2YXIgZWwgPSBfa2xhc3MuZnJvbU9iamVjdChvcHRpb25zLCBmdW5jdGlvbiAoZWwpIHtcbiAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhlbCk7XG4gICAgY2FsbGJhY2sgPSBudWxsO1xuICB9KTtcbiAgaWYgKGVsKSB7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZWwpO1xuICAgIGNhbGxiYWNrID0gbnVsbDtcbiAgfVxuICByZXR1cm4gZWw7XG59O1xuXG5mYWJyaWMudXRpbC5kYXRhVVJJdG9CbG9iID0gZnVuY3Rpb24gKGRhdGFVUkksIGRhdGFUWVBFKSB7XG4gIHZhciBiaW5hcnkgPSBhdG9iKGRhdGFVUkkuc3BsaXQoJywnKVsxXSksIGFycmF5ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmluYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgYXJyYXkucHVzaChiaW5hcnkuY2hhckNvZGVBdChpKSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBCbG9iKFtuZXcgVWludDhBcnJheShhcnJheSldLCB7dHlwZTogZGF0YVRZUEV9KTtcbn07XG5cbmZhYnJpYy51dGlsLmJsb2JUb0RhdGFVUkwgPSBmdW5jdGlvbiAoYmxvYiwgY2FsbGJhY2spIHtcbiAgdmFyIGEgPSBuZXcgRmlsZVJlYWRlcigpO1xuICBhLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgY2FsbGJhY2soZS50YXJnZXQucmVzdWx0KTtcbiAgfTtcbiAgYS5yZWFkQXNEYXRhVVJMKGJsb2IpO1xufTtcblxuZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudFdpdGhTaXplID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgdmFyIGNhbnZhcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgY2FudmFzLndpZHRoID0gc2l6ZS53aWR0aDtcbiAgY2FudmFzLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuICByZXR1cm4gY2FudmFzO1xufTtcblxuZmFicmljLnV0aWwuc3RyaW5nLnRvRGFzaGVkID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csICckMS0kMicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5mYWJyaWMudXRpbC5zdHJpbmcudW5jYXBpdGFsaXplID0gZnVuY3Rpb24oc3RyaW5nKXtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArXG4gICAgKHN0cmluZy5zbGljZSgxKSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9jb3JlL2Jhc2UuanNcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfR3JvdXBSZW1vdmVOZXRpdmUgPSBmYWJyaWMuR3JvdXAucHJvdG90eXBlLnJlbW92ZTtcblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuR3JvdXAucHJvdG90eXBlLCB7XG4gIC8qKlxuICAgKiBSZW1vdmVzIG9iamVjdCBmcm9tIGNhbnZhcyB0byB3aGljaCBpdCB3YXMgYWRkZWQgbGFzdFxuICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5yZW1vdmUodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9Hcm91cFJlbW92ZU5ldGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY29yZS9ncm91cC5leHQuanNcbi8vIG1vZHVsZSBpZCA9IDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxucmVxdWlyZShcIi4vLi4vbWl4aW5zL3Byb3BvcnRpYW5hbFNpemVNaXhpblwiKTtcblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuSW1hZ2UucHJvdG90eXBlLGZhYnJpYy5JbWFnZU1peGluLCB7XG4gIGFzeW5jOiB0cnVlLFxuICB0b09iamVjdE5hdGl2ZTogZmFicmljLkltYWdlLnByb3RvdHlwZS50b09iamVjdCxcbiAgdG9PYmplY3Q6ICAgICBmdW5jdGlvbigpe1xuICAgIHZhciBvYmogPSBmYWJyaWMuSW1hZ2UucHJvdG90eXBlLnRvT2JqZWN0TmF0aXZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtcbiAgICBpZihvYmouc3JjLmluZGV4T2YoZmFicmljLnV0aWwubWVkaWFSb290KSA9PSAwKXtcbiAgICAgIG9iai5zcmMgPSBvYmouc3JjLnJlcGxhY2UoZmFicmljLnV0aWwubWVkaWFSb290LFwiXCIpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9LFxuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgIHRoaXMuZmlsdGVycyA9IFtdO1xuICAgIHRoaXMucmVzaXplRmlsdGVycyA9IFtdO1xuXG5cbiAgICBpZiAob3B0aW9ucy5vcmlnaW5hbFNyYykge1xuICAgICAgdGhpcy5fZWRpdGVkID0gdHJ1ZTtcbiAgICAgIGZhYnJpYy51dGlsLmxvYWRJbWFnZShvcHRpb25zLm9yaWdpbmFsU3JjLCBmdW5jdGlvbiAoaW1nKSB7XG4gICAgICAgIHRoaXMuX29yaWdpbmFsRWxlbWVudCA9IGltZztcbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdEVsZW1lbnQoZWxlbWVudCwgb3B0aW9ucywgY2FsbGJhY2sgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5pbml0aWFsaXplLmNhbGwodGhpcywgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgfS5iaW5kKHRoaXMpKTsvL2FkZGluZyBjYWxsYmFja1xuICB9LFxuXG4gIF9pbml0RWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5zZXRFbGVtZW50KGZhYnJpYy51dGlsLmdldEJ5SWQoZWxlbWVudCksIGNhbGxiYWNrLCBvcHRpb25zKTtcbiAgICBmYWJyaWMudXRpbC5hZGRDbGFzcyh0aGlzLmdldEVsZW1lbnQoKSwgZmFicmljLkltYWdlLkNTU19DQU5WQVMpO1xuICB9LFxuICAvKipcbiAgICogU2V0cyBjcm9zc09yaWdpbiB2YWx1ZSAob24gYW4gaW5zdGFuY2UgYW5kIGNvcnJlc3BvbmRpbmcgaW1hZ2UgZWxlbWVudClcbiAgICogQHJldHVybiB7ZmFicmljLkltYWdlfSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIHNldENyb3NzT3JpZ2luOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLmNyb3NzT3JpZ2luID0gdmFsdWU7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY3Jvc3NPcmlnaW4gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHNldEVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50LCBjYWxsYmFjaywgb3B0aW9ucykge1xuXG4gICAgdmFyIF9jYWxsYmFjaywgX3RoaXM7XG5cbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLl9vcmlnaW5hbEVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuX2luaXRDb25maWcob3B0aW9ucyk7XG4gICAgLy8gdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMgKTtcbiAgICAvLyB0aGlzLl9zZXRXaWR0aEhlaWdodCh0aGlzKTtcbiAgICAvLyBpZiAodGhpcy5fZWxlbWVudCAmJiB0aGlzLmNyb3NzT3JpZ2luKSB7XG4gICAgLy8gICB0aGlzLl9lbGVtZW50LmNyb3NzT3JpZ2luID0gdGhpcy5jcm9zc09yaWdpbjtcbiAgICAvLyB9XG5cblxuICAgIGlmICh0aGlzLnJlc2l6ZUZpbHRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBfY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBfdGhpcyA9IHRoaXM7XG4gICAgICBfY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmFwcGx5RmlsdGVycyhjYWxsYmFjaywgX3RoaXMucmVzaXplRmlsdGVycywgX3RoaXMuX2ZpbHRlcmVkRWwgfHwgX3RoaXMuX29yaWdpbmFsRWxlbWVudCwgdHJ1ZSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZpbHRlcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICB0aGlzLmFwcGx5RmlsdGVycyhfY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIGlmIChfY2FsbGJhY2spIHtcbiAgICAgIF9jYWxsYmFjayh0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5jYW52YXMucmVuZGVyQWxsKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGFjdGlvbnMgOiB7XG4gICAgc291cmNlOiB7XG4gICAgICB0eXBlOiAnZWZmZWN0JyxcbiAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLWZpbGUtaW1hZ2UtbycsXG4gICAgICB0aXRsZTogXCJzb3VyY2VcIixcbiAgICAgIGFjdGlvblBhcmFtZXRlcnM6IGZ1bmN0aW9uICgkZWwsIGRhdGEpIHtcbiAgICAgICAgZGF0YS50YXJnZXQuYXBwbGljYXRpb24uY3JlYXRlR2FsbGVyeShkYXRhLnRhcmdldCwgJGVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG5mYWJyaWMudXRpbC5pbml0RmlsdGVycyA9IGZ1bmN0aW9uIChpbWcsIG9iamVjdCwgY2FsbGJhY2spIHtcblxuICAvLyBpZiAoZmFicmljLnZlcnNpb24gPj0gMS42KSB7XG4gIGZhYnJpYy5JbWFnZS5wcm90b3R5cGUuX2luaXRGaWx0ZXJzLmNhbGwob2JqZWN0LCBvYmplY3QuZmlsdGVycywgZnVuY3Rpb24gKGZpbHRlcnMpIHtcbiAgICBvYmplY3QuZmlsdGVycyA9IGZpbHRlcnMgfHwgW107XG4gICAgZmFicmljLkltYWdlLnByb3RvdHlwZS5faW5pdEZpbHRlcnMuY2FsbChvYmplY3QsIG9iamVjdC5yZXNpemVGaWx0ZXJzLCBmdW5jdGlvbiAocmVzaXplRmlsdGVycykge1xuICAgICAgb2JqZWN0LnJlc2l6ZUZpbHRlcnMgPSByZXNpemVGaWx0ZXJzIHx8IFtdO1xuICAgICAgY2FsbGJhY2soaW1nLCBvYmplY3QpO1xuICAgIH0pO1xuICB9KTtcbiAgLy8gfSBlbHNlIHtcbiAgLy8gICBmYWJyaWMuSW1hZ2UucHJvdG90eXBlLl9pbml0RmlsdGVycy5jYWxsKG9iamVjdCwgb2JqZWN0LCBmdW5jdGlvbiAoZmlsdGVycykge1xuICAvLyAgICAgb2JqZWN0LmZpbHRlcnMgPSBmaWx0ZXJzIHx8IFtdO1xuICAvLyAgICAgY2FsbGJhY2soaW1nLCBvYmplY3QpO1xuICAvLyAgIH0pO1xuICAvLyB9XG59O1xuXG5mYWJyaWMudXRpbC5pbml0SW1hZ2VBbmRGaWx0ZXJzID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgaWYgKG9iamVjdC5pbWFnZSkge1xuICAgIHZhciBpbWcgPSBvYmplY3QuaW1hZ2U7XG4gICAgZGVsZXRlIG9iamVjdC5zcmM7XG4gICAgZGVsZXRlIG9iamVjdC5pbWFnZTtcbiAgICBmYWJyaWMudXRpbC5pbml0RmlsdGVycyhpbWcsIG9iamVjdCwgY2FsbGJhY2spO1xuICB9ZWxzZSBpZiAob2JqZWN0LnNyYykge1xuICAgIGZhYnJpYy51dGlsLmxvYWRJbWFnZShvYmplY3Quc3JjLCBmdW5jdGlvbiAoaW1nKSB7XG4gICAgICAvL2RlbGV0ZSBvYmplY3Quc3JjO1xuICAgICAgZmFicmljLnV0aWwuaW5pdEZpbHRlcnMoaW1nLCBvYmplY3QsIGNhbGxiYWNrKTtcbiAgICB9LCBudWxsLCBvYmplY3QuY3Jvc3NPcmlnaW4pO1xuICB9IGVsc2Uge1xuICAgIGZhYnJpYy51dGlsLmluaXRGaWx0ZXJzKG51bGwsIG9iamVjdCwgY2FsbGJhY2spO1xuICB9XG59O1xuXG5mYWJyaWMuSW1hZ2UuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7XG4gIGZhYnJpYy51dGlsLmluaXRJbWFnZUFuZEZpbHRlcnMob2JqZWN0LCBmdW5jdGlvbiAoaW1nLCBvYmplY3QpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgZmFicmljLkltYWdlKGltZywgb2JqZWN0LCBjYWxsYmFjayk7XG4gIH0pXG59O1xuXG5cbmZhYnJpYy5JbWFnZS5wcm90b3R5cGUuX3RvX29iamVjdF9vdmVyd3JpdHRlbiA9IGZhYnJpYy5JbWFnZS5wcm90b3R5cGUudG9PYmplY3Q7XG5mYWJyaWMuSW1hZ2UucHJvdG90eXBlLnNldFNyYyA9IGZ1bmN0aW9uIChvcHQpIHtcbiAgY29uc29sZS5sb2cob3B0KTtcbn07XG5cbmZhYnJpYy5JbWFnZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbiAob3B0KSB7XG4gIHZhciBvYmogPSBmYWJyaWMuSW1hZ2UucHJvdG90eXBlLl90b19vYmplY3Rfb3ZlcndyaXR0ZW4uY2FsbCh0aGlzLCBvcHQpO1xuXG5cbiAgaWYgKHRoaXMuX2VkaXRlZCkge1xuICAgIG9iai5vcmlnaW5hbFNyYyA9IHRoaXMuX29yaWdpbmFsX3NyYyB8fCB0aGlzLl9vcmlnaW5hbEVsZW1lbnQuc3JjIHx8IHRoaXMuX2VsZW1lbnQuc3JjO1xuICAgIG9iai5zcmMgPSB0aGlzLl9lbGVtZW50LnNyYztcbiAgfSBlbHNlIHtcbiAgICBvYmouc3JjID0gdGhpcy5fb3JpZ2luYWxfc3JjIHx8IHRoaXMuX29yaWdpbmFsRWxlbWVudC5zcmMgfHwgdGhpcy5fZWxlbWVudC5zcmM7XG4gIH1cbiAgaWYgKHRoaXMuY29udGVudE9mZnNldHMpIHtcbiAgICBvYmouY29udGVudE9mZnNldHMgPSB0aGlzLmNvbnRlbnRPZmZzZXRzO1xuICB9XG5cblxuICBpZiAoIXRoaXMuaW5jbHVkZURlZmF1bHRWYWx1ZXMpIHtcbiAgICBpZiAoIW9iai5maWx0ZXJzLmxlbmd0aClkZWxldGUgb2JqLmZpbHRlcnM7XG4gIH1cbiAgLy9pZih0aGlzLl9vcmlnaW5hbEVsZW1lbnQpe1xuICAvLyAgICBvYmoudGh1bWIgPSB0aGlzLl9lbGVtZW50LnNyYztcbiAgLy99XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2NvcmUvaW1hZ2UuZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1ZNTCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHlwZW9mIEdfdm1sQ2FudmFzTWFuYWdlciAhPT0gJ3VuZGVmaW5lZCc7IH1cblxuLy93ZWlyZCBzdHVmZlxuLy8gZGVsZXRlIGZhYnJpYy5SZWN0LnByb3RvdHlwZS50b09iamVjdDtcbi8vIGZhYnJpYy5SZWN0LnByb3RvdHlwZS5zdG9yZVByb3BlcnRpZXMgPSBbXCIqXCIsXCJyeFwiLFwicnlcIl07XG5cbmZhYnJpYy5JTkNMVURFX0FMTCA9IFwiKlwiO1xuXG52YXIgX3RvT2JqZWN0X292ZXJ3cml0dGVuID0gZmFicmljLk9iamVjdC5wcm90b3R5cGUudG9PYmplY3Q7XG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5PYmplY3QucHJvdG90eXBlLCB7XG4gIHN0b3JlUHJvcGVydGllczogWycqJ10sXG4gIGV2ZW50TGlzdGVuZXJzOiB7fSxcbiAgdG9PYmplY3Q6IGZ1bmN0aW9uIChwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgaWYgKHByb3BlcnRpZXNUb0luY2x1ZGUgPT0gZmFicmljLklOQ0xVREVfQUxMKSB7XG4gICAgICBwcm9wZXJ0aWVzVG9JbmNsdWRlID0gW2ZhYnJpYy5JTkNMVURFX0FMTF07XG4gICAgfVxuXG4gICAgcHJvcGVydGllc1RvSW5jbHVkZSA9IHByb3BlcnRpZXNUb0luY2x1ZGUgfHwgW107XG4gICAgcHJvcGVydGllc1RvSW5jbHVkZSA9IHByb3BlcnRpZXNUb0luY2x1ZGUuY29uY2F0KHRoaXMuc3RvcmVQcm9wZXJ0aWVzKTtcblxuXG4gICAgdmFyIG9iaiA9IF90b09iamVjdF9vdmVyd3JpdHRlbi5jYWxsKHRoaXMsIHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgIGlmIChwcm9wZXJ0aWVzVG9JbmNsdWRlWzBdICE9PSBmYWJyaWMuSU5DTFVERV9BTEwpIHtcbiAgICAgIGlmICghdGhpcy5pbmNsdWRlRGVmYXVsdFZhbHVlcykge1xuICAgICAgICB0aGlzLl9yZW1vdmVEZWZhdWx0VmFsdWVzKG9iaik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3RvcmVQcm9wZXJ0aWVzLmluZGV4T2YoXCIqXCIpID09IC0xKSB7XG4gICAgICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgICAgICBpZiAodGhpcy5zdG9yZVByb3BlcnRpZXMuaW5kZXhPZihpKSA9PSAtMSkge1xuICAgICAgICAgIGRlbGV0ZSBvYmpbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmZpcmUoXCJiZWZvcmU6b2JqZWN0XCIsIHtvYmplY3Q6IG9ian0pO1xuICAgIHJldHVybiBvYmo7XG4gIH0sXG4gIC8qKlxuICAgKiBTZXRzIG9iamVjdCdzIHByb3BlcnRpZXMgZnJvbSBvcHRpb25zXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICovXG4gIHNldE9wdGlvbnM6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdGhpcy5fc2V0T2JqZWN0KG9wdGlvbnMpO1xuICAgIC8vIHRoaXMuX2luaXRHcmFkaWVudChvcHRpb25zKTtcbiAgICAvLyB0aGlzLl9pbml0UGF0dGVybihvcHRpb25zKTtcbiAgICAvLyB0aGlzLl9pbml0Q2xpcHBpbmcob3B0aW9ucyk7XG4gIH0sXG4gIF9pbml0RW50aXR5OiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIG9wdGlvbnMuYXBwbGljYXRpb24gJiYgb3B0aW9ucy5hcHBsaWNhdGlvbi5maXJlKFwiZW50aXR5OmNyZWF0ZWRcIiwge3RhcmdldDogdGhpcywgb3B0aW9uczogb3B0aW9uc30pO1xuICB9LFxuICBpbml0aWFsaXplOiBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLl9pbml0RW50aXR5KG9wdGlvbnMpO1xuICAgIC8vIGlmKG9wdGlvbnMud2hvbGVDb29yZGluYXRlcyl7XG4gICAgLy8gICB2YXIgY29vcmRpbmF0ZXMgPSBbXCJsZWZ0XCIsXCJ0b3BcIixcIndpZHRoXCIsXCJoZWlnaHRcIl07XG4gICAgLy8gICBmb3IodmFyIGkgaW4gY29vcmRpbmF0ZXMpe1xuICAgIC8vICAgICBpZihvcHRpb25zW2Nvb3JkaW5hdGVzW2ldXSl7XG4gICAgLy8gICAgICAgb3B0aW9uc1tjb29yZGluYXRlc1tpXV0gPSBNYXRoLnJvdW5kKG9wdGlvbnNbY29vcmRpbmF0ZXNbaV1dKTtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIHRoaXMuX3NldE9iamVjdChvcHRpb25zLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfc2VsZi5sb2FkZWQgPSB0cnVlO1xuICAgICAgX3NlbGYuZmlyZShcImxvYWRlZFwiKTtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKF9zZWxmKTtcbiAgICB9KTtcbiAgfSxcbiAgYWRkOiBmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgY2FudmFzLmFkZCh0aGlzKTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgdGhpcy5fc2V0T2JqZWN0KGtleSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKGtleVswXSA9PSBcIiZcIikge1xuICAgICAgICBrZXkgPSBrZXkuc3Vic3RyKDEpO1xuICAgICAgICB0aGlzLl9zZXQoa2V5LCB2YWx1ZSh0aGlzLmdldChrZXkpKSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2V0KGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufSk7XG5cblxuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5PYmplY3QucHJvdG90eXBlLCB7XG4gIGhhc0JvdW5kc0NvbnRyb2xzOiB0cnVlLFxuICBmbGlwVG9vbHM6ICAgICBmYWxzZSxcbiAgb3JkZXJUb29sczogICAgZmFsc2UsXG4gIHN0cm9rZTogXCJ0cmFuc3BhcmVudFwiLFxuICBvblRvcDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmNhbnZhcy5fb2JqZWN0cy5pbmRleE9mKHRoaXMpID09IHRoaXMuY2FudmFzLl9vYmplY3RzLmxlbmd0aCAtIDE7XG4gIH0sXG4gIGZsb3A6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZsaXBZID0gIXRoaXMuZmxpcFk7XG4gICAgdGhpcy5jYW52YXMucmVuZGVyQWxsKCk7XG4gIH0sXG4gIGZsaXA6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZsaXBYID0gIXRoaXMuZmxpcFg7XG4gICAgdGhpcy5jYW52YXMucmVuZGVyQWxsKCk7XG4gIH0sXG4gIG9uQm90dG9tOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzLl9vYmplY3RzLmluZGV4T2YodGhpcykgPT0gMDtcbiAgfSxcbiAgZHVwbGljYXRlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgX29iamVjdCA9IHRoaXMudG9PYmplY3QoZmFicmljLklOQ0xVREVfQUxMKTtcbiAgICBfb2JqZWN0LmFjdGl2ZSA9IHRydWU7XG5cbiAgICB2YXIgX2Nsb25lID0gX29iamVjdC5jbG9uZVN5bmMgJiYgX29iamVjdC5jbG9uZVN5bmMoKSB8fCB0aGlzLmNhbnZhcy5jcmVhdGVPYmplY3QoX29iamVjdCk7XG4gICAgcmV0dXJuIF9jbG9uZTtcbiAgfSxcbiAgbWluU3Ryb2tlV2lkdGg6IDAsXG4gIG1heFN0cm9rZVdpZHRoOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiBNYXRoLm1pbih0aGlzLndpZHRoLHRoaXMuaGVpZ2h0KSAvIDI7XG4gIH0sXG4gIGFjdGlvbnM6IHtcbiAgICBib3VuZGluZ1JlY3Q6IHtcbiAgICAgIHR5cGU6ICdsYWJlbCcsXG4gICAgICB0ZW1wbGF0ZTogJzxkdD5MOjwvZHQ+PGRkIGNsYXNzPVwie2xlZnRDbGFzc31cIiB0aXRsZT1cIntsZWZ0fVwiPntyb3VuZExlZnR9PC9kZD48ZHQ+VDo8L2R0PjxkZCBjbGFzcz1cInt0b3BDbGFzc31cIiAgdGl0bGU9XCJ7dG9wfVwiPntyb3VuZFRvcH08L2RkPjxkdD5SOjwvZHQ+PGRkIGNsYXNzPVwie3JpZ2h0Q2xhc3N9XCIgdGl0bGU9XCJ7cmlnaHR9XCI+e3JvdW5kUmlnaHR9PC9kZD48ZHQ+Qjo8L2R0PjxkZCBjbGFzcz1cIntib3R0b21DbGFzc31cIiAgdGl0bGU9XCJ7Ym90dG9tfVwiPntyb3VuZEJvdHRvbX08L2RkPicsXG4gICAgICB2YWx1ZToge1xuICAgICAgICBvYnNlcnZlOiBcIm1vZGlmaWVkIHNjYWxpbmcgbW92aW5nIHJvdGF0aW5nXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24oKXtcbiAgICAgICAgICB2YXIgX3JlY3QgPSB0aGlzLmdldEJvdW5kaW5nUmVjdCgpO1xuXG4gICAgICAgICAgaWYodGhpcy5tb3ZlbWVudExpbWl0cykge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5tb3ZlbWVudExpbWl0cyA9PSB0aGlzLmNhbnZhcykge1xuICAgICAgICAgICAgICB2YXIgX3YgPSB0aGlzLmNhbnZhcy52aWV3cG9ydFRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgdmFyIF9tbHIgPSB7XG4gICAgICAgICAgICAgICAgbGVmdDogX3ZbNF0sXG4gICAgICAgICAgICAgICAgdG9wOiBfdls1XSxcbiAgICAgICAgICAgICAgICB3aWR0aDogKHRoaXMuY2FudmFzLm9yaWdpbmFsV2lkdGggfHwgdGhpcy5jYW52YXMud2lkdGgpICogX3ZbMF0sXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAodGhpcy5jYW52YXMub3JpZ2luYWxIZWlnaHQgfHwgdGhpcy5jYW52YXMuaGVpZ2h0KSAgKiBfdlszXSxcbiAgICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgIF9tbHIgPSB0aGlzLm1vdmVtZW50TGltaXRzLmdldEJvdW5kaW5nUmVjdCgpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIF9yZWN0LmJvdHRvbSA9IHRoaXMubW92ZW1lbnRMaW1pdHMuaGVpZ2h0IC0gX3JlY3QuaGVpZ2h0O1xuICAgICAgICAgICAgdmFyIF90ID0gX3JlY3QudG9wIC0gX21sci50b3A7XG4gICAgICAgICAgICB2YXIgX2wgPSBfcmVjdC5sZWZ0IC0gX21sci5sZWZ0O1xuICAgICAgICAgICAgdmFyIF9yID0gX21sci53aWR0aCAtIF9yZWN0LndpZHRoIC0gX2w7XG4gICAgICAgICAgICB2YXIgX2IgPSBfbWxyLmhlaWdodCAtIF9yZWN0LmhlaWdodCAtIF90O1xuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgX3QgPSBfcmVjdC50b3A7XG4gICAgICAgICAgICBfbCA9IF9yZWN0LmxlZnQ7XG4gICAgICAgICAgICBfYiA9IHRoaXMuY2FudmFzLmhlaWdodCAtIF9yZWN0LmhlaWdodCAtIF9yZWN0LnRvcDtcbiAgICAgICAgICAgIF9yICA9IHRoaXMuY2FudmFzLndpZHRoIC0gX3JlY3Qud2lkdGggLSBfcmVjdC5sZWZ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3BDbGFzczogX3QgPiAwID8gXCJwb3NpdGl2ZVwiIDogX3QgPCAwID8gXCJuZWdhdGl2ZVwiIDogXCJ6ZXJvXCIsXG4gICAgICAgICAgICBib3R0b21DbGFzczogX2IgPiAwID8gXCJwb3NpdGl2ZVwiIDogX2IgPCAwID8gXCJuZWdhdGl2ZVwiIDogXCJ6ZXJvXCIsXG4gICAgICAgICAgICBsZWZ0Q2xhc3M6IF9sID4gMCA/IFwicG9zaXRpdmVcIiA6IF9sIDwgMCA/IFwibmVnYXRpdmVcIiA6IFwiemVyb1wiLFxuICAgICAgICAgICAgcmlnaHRDbGFzczogX3IgPiAwID8gXCJwb3NpdGl2ZVwiIDogX3IgPCAwID8gXCJuZWdhdGl2ZVwiIDogXCJ6ZXJvXCIsXG4gICAgICAgICAgICB0b3A6ICAgIF90LFxuICAgICAgICAgICAgbGVmdDogICBfbCxcbiAgICAgICAgICAgIGJvdHRvbTogX2IsXG4gICAgICAgICAgICByaWdodDogIF9yLFxuICAgICAgICAgICAgcm91bmRUb3A6ICAgIE1hdGgucm91bmQoX3QpLFxuICAgICAgICAgICAgcm91bmRMZWZ0OiAgIE1hdGgucm91bmQoX2wpLFxuICAgICAgICAgICAgcm91bmRCb3R0b206IE1hdGgucm91bmQoX2IpLFxuICAgICAgICAgICAgcm91bmRSaWdodDogIE1hdGgucm91bmQoX3IpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBwb3NpdGlvbjoge1xuICAgICAgdGl0bGU6ICdwb3NpdGlvbicsXG4gICAgICB0eXBlOiAnbWVudScsXG4gICAgICBtZW51OiB7XG4gICAgICAgIG9iamVjdExlZnQ6IHtcbiAgICAgICAgICB0eXBlOiAgICdudW1iZXInLFxuICAgICAgICAgIHRpdGxlOiAgJ2xlZnQnLFxuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgdGhpcy5sZWZ0ID0gdmFsO1xuICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJtb2RpZmllZFwiKTtcbiAgICAgICAgICAgICAgdGhpcy5jYW52YXMuZmlyZShcIm9iamVjdDptb2RpZmllZFwiLCB7dGFyZ2V0OiB0aGlzfSk7XG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzLnJlbmRlckFsbCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZWZ0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9ic2VydmU6IFwibW9kaWZpZWRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb2JqZWN0VG9wOiB7XG4gICAgICAgICAgdHlwZTogICAnbnVtYmVyJyxcbiAgICAgICAgICB0aXRsZTogICd0b3AnLFxuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgdGhpcy50b3AgPSB2YWw7XG4gICAgICAgICAgICAgIHRoaXMuZmlyZShcIm1vZGlmaWVkXCIpO1xuICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5maXJlKFwib2JqZWN0Om1vZGlmaWVkXCIsIHt0YXJnZXQ6IHRoaXN9KTtcbiAgICAgICAgICAgICAgdGhpcy5jYW52YXMucmVuZGVyQWxsKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvcDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvYnNlcnZlOiBcIm1vZGlmaWVkXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGRpbWVuc2lvbnM6IHtcbiAgICAgIHRpdGxlOiAnZGltZW5zaW9ucycsXG4gICAgICB0eXBlOiAnbWVudScsXG4gICAgICBtZW51OntcbiAgICAgICAgb2JqZWN0V2lkdGg6IHtcbiAgICAgICAgICB0eXBlOiAgICdudW1iZXInLFxuICAgICAgICAgIHRpdGxlOiAgJ3dpZHRoJyxcbiAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWwpe1xuICAgICAgICAgICAgICB0aGlzLnNhdmVTdGF0ZSgpO1xuICAgICAgICAgICAgICB0aGlzLmRpbWVuc2lvbnNXaWR0aFZhbHVlID0gdmFsO1xuICAgICAgICAgICAgICB0aGlzLnNjYWxlVG9XaWR0aCh2YWwgKiAgdGhpcy5jYW52YXMuZ2V0Wm9vbSgpKTtcbiAgICAgICAgICAgICAgdGhpcy5jYW52YXMuZmlyZU1vZGlmaWVkSWZDaGFuZ2VkKHRoaXMpO1xuICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGltZW5zaW9uc1dpZHRoVmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBpZih0aGlzLmRpbWVuc2lvbnNXaWR0aFZhbHVlKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kaW1lbnNpb25zV2lkdGhWYWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLmdldEJvdW5kaW5nUmVjdCgpLndpZHRoIC8gdGhpcy5jYW52YXMuZ2V0Wm9vbSgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvYnNlcnZlOiBcIm1vZGlmaWVkXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9iamVjdEhlaWdodDoge1xuICAgICAgICAgIHR5cGU6ICAgJ251bWJlcicsXG4gICAgICAgICAgdGl0bGU6ICAnaGVpZ2h0JyxcbiAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWwpe1xuICAgICAgICAgICAgICB0aGlzLnNhdmVTdGF0ZSgpO1xuICAgICAgICAgICAgICB0aGlzLnNjYWxlVG9IZWlnaHQodmFsICogIHRoaXMuY2FudmFzLmdldFpvb20oKSk7XG4gICAgICAgICAgICAgIHRoaXMuZGltZW5zaW9uc0hlaWdodFZhbHVlID0gdmFsO1xuICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5maXJlTW9kaWZpZWRJZkNoYW5nZWQodGhpcyk7XG4gICAgICAgICAgICAgIHRoaXMuY2FudmFzLnJlbmRlckFsbCgpO1xuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5kaW1lbnNpb25zSGVpZ2h0VmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBpZih0aGlzLmRpbWVuc2lvbnNIZWlnaHRWYWx1ZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGltZW5zaW9uc0hlaWdodFZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHRoaXMuZ2V0Qm91bmRpbmdSZWN0KCkuaGVpZ2h0IC8gdGhpcy5jYW52YXMuZ2V0Wm9vbSgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvYnNlcnZlOiBcIm1vZGlmaWVkXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNlbnRlcjoge1xuICAgICAgY2xhc3NOYW1lOiAgJ2ZhIGZhLWJ1bGxzZXllJyxcbiAgICAgIHRpdGxlOiAnQ2VudGVyJyxcbiAgICAgIGFjdGlvbjogZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy5jZW50ZXIoKTtcbiAgICAgICAgdGhpcy5zZXRDb29yZHMoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9iamVjdEZsaXA6IHtcbiAgICAgIGNsYXNzTmFtZTogICdmYSBmYS1hcnJvd3MtaCcsXG4gICAgICB0aXRsZTogICAgICAnZmxpcCcsXG4gICAgICBhY3Rpb246ICAgICAnZmxpcCdcbiAgICB9LFxuICAgIGZsb3A6IHtcbiAgICAgIGNsYXNzTmFtZTogICdmYSBmYS1hcnJvd3MtdicsXG4gICAgICB0aXRsZTogICAgICAnZmxvcCdcbiAgICB9LFxuICAgIGJyaW5nRm9yd2FyZDoge1xuICAgICAgdGl0bGU6ICAgICAgJ2JyaW5nIGZvcndhcmQnLFxuICAgICAgY2xhc3NOYW1lOiAgJ2ZhIGZhLWxldmVsLXVwJyxcbiAgICAgIGRpc2FibGVkOiAgICdvblRvcCdcbiAgICB9LFxuICAgIHNlbmRCYWNrd2FyZHM6IHtcbiAgICAgIHRpdGxlOiAgICAgICdzZW5kIGJhY2t3YXJkcycsXG4gICAgICBjbGFzc05hbWU6ICAnZmEgZmEtbGV2ZWwtZG93bicsXG4gICAgICBkaXNhYmxlZDogICAnb25Cb3R0b20nXG4gICAgfSxcbiAgICByZW1vdmU6IHtcbiAgICAgIGNsYXNzTmFtZTogICdmYSBmYS10cmFzaCcsXG4gICAgICB0aXRsZTogICAgICAncmVtb3ZlJyxcbiAgICAgIGtleTogICAgICAgIFwiRGVsZXRlXCJcbiAgICB9LFxuICAgIGR1cGxpY2F0ZToge1xuICAgICAgY2xhc3NOYW1lOiAgJ2ZhIGZhLWNsb25lJyxcbiAgICAgIHRpdGxlOiAgICAgICdkdXBsaWNhdGUnXG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY29yZS9vYmplY3QuZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSAzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICovXG5mdW5jdGlvbiBfcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgaWYgKCF0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgZXZlbnRMaXN0ZW5lciA9IHRoaXMuX19ldmVudExpc3RlbmVyc1tldmVudE5hbWVdO1xuICBpZiAoaGFuZGxlcikge1xuICAgIGV2ZW50TGlzdGVuZXIuc3BsaWNlKGV2ZW50TGlzdGVuZXIuaW5kZXhPZihoYW5kbGVyKSwgMSlcbiAgfVxuICBlbHNlIHtcbiAgICBldmVudExpc3RlbmVyLmxlbmd0aCA9IDA7XG4gIH1cbn1cblxuZmFicmljLkNhbnZhcy5wcm90b3R5cGUuc3RvcE9ic2VydmluZyA9IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLnN0b3BPYnNlcnZpbmcgPSBmdW5jdGlvbiBzdG9wT2JzZXJ2aW5nKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICBpZiAoIXRoaXMuX19ldmVudExpc3RlbmVycykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHJlbW92ZSBhbGwga2V5L3ZhbHVlIHBhaXJzIChldmVudCBuYW1lIC0+IGV2ZW50IGhhbmRsZXIpXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgZm9yIChldmVudE5hbWUgaW4gdGhpcy5fX2V2ZW50TGlzdGVuZXJzKSB7XG4gICAgICBfcmVtb3ZlRXZlbnRMaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50TmFtZSk7XG4gICAgfVxuICB9XG4gIC8vIG9uZSBvYmplY3Qgd2l0aCBrZXkvdmFsdWUgcGFpcnMgd2FzIHBhc3NlZFxuICBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdvYmplY3QnKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBldmVudE5hbWUpIHtcbiAgICAgIF9yZW1vdmVFdmVudExpc3RlbmVyLmNhbGwodGhpcywgcHJvcCwgZXZlbnROYW1lW3Byb3BdKTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgX3JlbW92ZUV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5cbmZhYnJpYy5PYnNlcnZhYmxlLm9uID0gZmFicmljLkNhbnZhcy5wcm90b3R5cGUub24gPSBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGhhbmRsZXIscHJpb3JpdHkpIHtcbiAgaWYgKGV2ZW50TmFtZS5jb25zdHJ1Y3RvciA9PSBPYmplY3QpIHtcbiAgICBmb3IgKHZhciBpIGluIGV2ZW50TmFtZSkge1xuICAgICAgdGhpcy5vbihpLCBldmVudE5hbWVbaV0scHJpb3JpdHkpXG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHZhciBldmVudHMgPSBldmVudE5hbWUuc3BsaXQoXCIgXCIpO1xuICBmb3IgKHZhciBpIGluIGV2ZW50cykge1xuICAgIGV2ZW50TmFtZSA9IGV2ZW50c1tpXTtcbiAgICB0aGlzLm9ic2VydmUoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICBpZihwcmlvcml0eSl7XG4gICAgICB0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXS51bnNoaWZ0KHRoaXMuX19ldmVudExpc3RlbmVyc1tldmVudE5hbWVdLnBvcCgpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuZmFicmljLkNhbnZhcy5wcm90b3R5cGUub2ZmID0gZmFicmljLk9iamVjdC5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICB2YXIgZXZlbnRzID0gZXZlbnROYW1lLnNwbGl0KFwiIFwiKTtcbiAgZm9yICh2YXIgaSBpbiBldmVudHMpIHtcbiAgICB0aGlzLnN0b3BPYnNlcnZpbmcoZXZlbnRzW2ldLCBoYW5kbGVyKVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG5mYWJyaWMuQ2FudmFzLnByb3RvdHlwZS5maXJlID0gZmFicmljLk9iamVjdC5wcm90b3R5cGUuZmlyZSA9IGZ1bmN0aW9uIGZpcmUoZXZlbnROYW1lLCBvcHRpb25zKSB7XG4gIGlmICghdGhpcy5fX2V2ZW50TGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyc0ZvckV2ZW50ID0gdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV07XG4gIGlmIChsaXN0ZW5lcnNGb3JFdmVudCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaXN0ZW5lcnNGb3JFdmVudC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGlzdGVuZXJzRm9yRXZlbnRbaV0uY2FsbCh0aGlzLCBvcHRpb25zIHx8IHt9KTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzRm9yRXZlbnRBbGwgPSB0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbJyonXTtcbiAgaWYgKGxpc3RlbmVyc0ZvckV2ZW50QWxsKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy5ldmVudE5hbWUgPSBldmVudE5hbWU7XG4gICAgb3B0aW9ucy5saXN0ZW5lcnMgPSBsaXN0ZW5lcnNGb3JFdmVudDtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBsaXN0ZW5lcnNGb3JFdmVudEFsbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGlzdGVuZXJzRm9yRXZlbnRBbGxbaV0uY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2NvcmUvb2JzZXJ2ZS5qc1xuLy8gbW9kdWxlIGlkID0gMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKFwiLi9zdGF0aWMtY2FudmFzLmV4dFwiKTtcblxuLyoqXG4gKiAjIFNsaWRlQ2FudmFzXG4gKiBJbmhlcml0ZWQgZnJvbSBmYWJyaWMuQ2FudmFzXG4gKlxuICpcblxuICMjIG1ldGhvZDogbG9hZFxuXG5NYXRob2QgYWxsb3dzIHRvIGFkZCBuZXcgb2JqZWN0cyBhbmQgc2V0IG5ldyBhdHRyaWJ1dGVzIG9mIGNhbnZhcy5cblxuIGBgYGphdmFzY3JpcHRcbiBsb2FkIDogKHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IHN0cmluZyxcbiAgICBvYmplY3RzOiBbRmFicmljU2hhcGVPcHRpb25zXSxcbiAgICBjdXN0b21TeW5jT3B0aW9uOiBhbnksXG4gICAgY3VzdG9tQXN5bmNPcHRpb246IGFueVxuICB9LGNhbGxiYWNrKSA6IHZvaWRcbiBgYGBcblxuIFRvIGV4dGVuZCBsb2FkaW5nIGJlaGF2aW9yIGFuZCB1c2UgY3VzdG9tIG9wdGlvbnMgaXQgaXMgcG9zc2libGUgdG8gZGVmaW5lICoqc2V0IGZ1Y250aW9ucyoqIGluIENhbnZhcyBwcm90b3R5cGUuXG5cbiBgYGBqYXZhc2NyaXB0XG4gLy8gQ2FudmFzIFByb3RvdHlwZVxuIHNldEN1c3RvbUFzeW5jT3B0aW9uOiBmdW5jdGlvbih2YWwsY2FsbGJhY2spe1xuICB0aGlzLmRvQXN5bmNNZXRob2QodmFsLGNhbGxiYWNrKVxufVxuIHNldEN1c3RvbVN5bmNPcHRpb246IGZ1bmN0aW9uKHZhbCl7XG4gIHRoaXMuY3VzdG9tU3luY090aW9uID0gdmFsO1xufVxuIGBgYFxuXG4gIyMjIGF0dHJpYnV0ZTogYmFja2dyb3VuZEltYWdlUHJvcGVydGllc1xuXG4gZGVmYXVsdCBhdHRyaWJ1dGVzIGZvciBiYWNrZ3JvdW5kIGltYWdlXG5cbiAjIyMgZnJlZURyYXdpbmdCcnVzaFxuXG4gZGVmYXVsdCBhY3RpdmUgZHJhd2luZyBicnVzaFxuXG4gYGBgXG4gZnJlZURyYXdpbmdCcnVzaDogXCJQYWludEJ1Y2tldEJydXNoXCIgfCBcIlBhaW50UGVuQnJ1c2hcIiB8IFwiUGVuY2lsQnJ1c2hcIlxuIGBgYFxuXG4gIyMjIGF0dHJpYnV0ZTogb25TbGlkZUxvYWRlZFxuXG4gb25TbGlkZUxvYWRlZCBjYWxscyBhcyBhIGNhbGxiYWNrIGZvciBsb2FkIGZ1Y250aW9uXG5cbiAjIyMgYXR0cmlidXRlOiBiYWNrZ3JvdW5kUG9zaXRpb25cblxuIG9uU2xpZGVMb2FkZWQgY2FsbHMgYXMgYSBjYWxsYmFjayBmb3IgbG9hZCBmdWNudGlvblxuXG4gYGBgXG4gYmFja2dyb3VuZFBvc2l0aW9uOiAnbWFudWFsJyB8ICdyZXNpemUnIHwgJ2ZpdCcgfCAnY292ZXInIHwgJ2NlbnRlcidcbiBgYGBcblxuIC0gbWFudWFsIC0gYmFja2dyb3VuZCB3aWxsIG5lIG5vdCBzY2FsZWQgYW5kIHB1dCBhdCBsZWZ0IHRvcCBjb3JuZXJcbiAtIHJlc2l6ZSAtIGNhbnZhcyB3aWxsIGJlIHJlc2l6ZWQgYWNjb3JkaW5nIHRvIGltYWdlIHNpemVcbiAtIGZpdCAtIHdpbGwgYmUgc2NhbGVkIHRvIGZpdCBjYW52YXMgc2l6ZVxuIC0gY292ZXIgLSB3aWxsIGJlIHNjYWxlZCB0byBjb3ZlciBhbGwgY2FudmFzIHNpemVcbiAtIGNlbnRlciAtIGJhY2tvZ3J1bmQgd2lsbCBiZSBub3Qgc2NhbGVkIGJ1dCBwdXQgaW4gdGhlIG1pZGRsZVxuXG4gIyMjIG1ldGhvZDogc2V0SW50ZXJhY3RpdmVNb2RlXG5cbiBzd2l0Y2ggYmV0d2VlbiBkcmF3aW5nIGFuZCBoYW5kKCBtb3ZpbmcgY3VudmFzIGJ5IG1vdXNlKSBtb2Rlc1xuXG4gYGBgamF2YXNjcmlwdFxuIGNhbnZhcy5zZXRJbnRlcmFjdGl2ZU1vZGUoIG1vZGUgOiBcImhhbmRcIiB8IFwibWl4ZWRcIikgOiB2b2lkXG4gYGBgXG5cbiAjIyMgZHJhd2luZ0NvbG9yXG5cbiBkcmF3aW5nIGNvbG9yIHVzaW5nIGJ5IGJydXNoZXNcblxuICovXG5mYWJyaWMuU2xpZGVDYW52YXMgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuQ2FudmFzLGZhYnJpYy5QbHVnaW5zTWl4aW4sIHtcbiAgdHlwZTogJ3NsaWRlLWNhbnZhcycsXG4gIC8qKlxuICAgKiBpbml0aWFsaXplZCB3aWR0aCBvZiB0aGUgY2FudmFzXG4gICAqL1xuICB3aWR0aDogMTYwICxcbiAgLyoqXG4gICAqIGluaXRpYWxpemVkIGhlaWdodCBvZiB0aGUgY2FudmFzXG4gICAqL1xuICBoZWlnaHQ6IDkwLFxuICAvKipcbiAgICogb3V0cHV0IHF1YWxpdHlcbiAgICovXG4gIGRvdHNQZXJVbml0OiAxLFxuICBzY2FsZTogMSxcbiAgbG9hZGVkOiBmYWxzZSxcbiAgLyoqXG4gICAqIGFsbG93IHVzZXIgdG8gaW50ZXJhY3Qgd2l0aCBjYW52YXNcbiAgICovXG4gIGludGVyYWN0aXZlOiB0cnVlLFxuICAvKipcbiAgICogZmlsbCBub3QgdGhlIHNsaWRlIGFyZWEsIGJ1dCB3aG9sZSBjYW52YXMgd2l0aCBiYWNrZ3JvdW5kIGNvbG9yXG4gICAqL1xuICBhZGRUZXh0VG9vbDogZmFsc2UsXG4gIGRlZmF1bHRUZXh0OiBcInRleHRcIixcbiAgZGVmYXVsdFRleHRUeXBlOiBcInRleHRcIixcbiAgdGh1bWJTaXplOiB7XG4gICAgd2lkdGg6IDUwLFxuICAgIGhlaWdodDogMTAwXG4gIH0sXG4gIHN0b3JlUHJvcGVydGllczogWycqJywnYmFja2dyb3VuZEltYWdlJywnd2lkdGgnLCdoZWlnaHQnXSxcbiAgY29udGV4dFRvcEltYWdlU21vb3RoaW5nRW5hYmxlZDogdHJ1ZSxcbiAgcGx1Z2luczoge1xuICAgIGluaXRpYWxpemU6IFtcbiAgICBdLFxuICAgIHByZWxvYWRlcnM6IFtcbiAgICBdLFxuICAgIGxvYWRlcnM6IFtdLFxuICAgIHNhdmVycyA6IFtcbiAgICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZVRodW1iKHByb3BlcnRpZXNUb0luY2x1ZGUsIF9kYXRhKXtcbiAgICAgICAgaWYocHJvcGVydGllc1RvSW5jbHVkZS5pbmRleE9mKCd0aHVtYicpICE9PSAtMSl7XG4gICAgICAgICAgdmFyIHNpemUgPSBmYWJyaWMudXRpbC5nZXRQcm9wb3J0aW9ucyh0aGlzLmdldE9yaWdpbmFsU2l6ZSgpLCB0aGlzLnRodW1iU2l6ZSwgJ2ZpdCcpO1xuICAgICAgICAgIHZhciBjYW52YXMgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCk7XG4gICAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZS53aWR0aDtcbiAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgdGhpcy5yZW5kZXJUaHVtYihjYW52YXMpO1xuICAgICAgICAgIF9kYXRhLnRodW1iID0gY2FudmFzLnRvRGF0YVVSTCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24gc2VyaWFsaXplVGVtcGxhdGUocHJvcGVydGllc1RvSW5jbHVkZSwgX2RhdGEpIHtcbiAgICAgICAgaWYgKHByb3BlcnRpZXNUb0luY2x1ZGUuaW5kZXhPZigndGVtcGxhdGUnKSAhPT0gLTEpIHtcbiAgICAgICAgICBpZiAodGhpcy50ZW1wbGF0ZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBfZGF0YS50ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoX2RhdGFbaV0pID09IEpTT04uc3RyaW5naWZ5KF9kYXRhLnRlbXBsYXRlW2ldKSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBfZGF0YVtpXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2RhdGEudGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlLmlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAgc2V0QmFja2dyb3VuZENvbG9yOiBmdW5jdGlvbihiYWNrZ3JvdW5kQ29sb3IsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX19zZXRCZ092ZXJsYXlDb2xvcignYmFja2dyb3VuZENvbG9yJywgYmFja2dyb3VuZENvbG9yLCBmdW5jdGlvbigpe1xuICAgICAgdGhpcy5yZW5kZXJBbGwoKTtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9LmJpbmQodGhpcykpO1xuICB9LFxuICBzZXRJbnRlcmFjdGl2ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5pbnRlcmFjdGl2ZSA9IHZhbHVlO1xuICB9LFxuICBfaW5pdE9wdGlvbnM6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdGhpcy53aWR0aCA9IHRoaXMud2lkdGggfHwgcGFyc2VJbnQodGhpcy5sb3dlckNhbnZhc0VsLndpZHRoLCAxMCkgfHwgMDtcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuaGVpZ2h0IHx8IHBhcnNlSW50KHRoaXMubG93ZXJDYW52YXNFbC5oZWlnaHQsIDEwKSB8fCAwO1xuXG4gICAgaWYgKCF0aGlzLmxvd2VyQ2FudmFzRWwuc3R5bGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmxvd2VyQ2FudmFzRWwud2lkdGggPSB0aGlzLndpZHRoO1xuICAgIHRoaXMubG93ZXJDYW52YXNFbC5oZWlnaHQgPSB0aGlzLmhlaWdodDtcblxuICAgIHRoaXMubG93ZXJDYW52YXNFbC5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGggKyAncHgnO1xuICAgIHRoaXMubG93ZXJDYW52YXNFbC5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodCArICdweCc7XG5cbiAgICB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtID0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybS5zbGljZSgpO1xuICB9LFxuICBfY3JlYXRlVXBwZXJDYW52YXM6IGZ1bmN0aW9uICgpIHtcbiAgICBmYWJyaWMuQ2FudmFzLnByb3RvdHlwZS5fY3JlYXRlVXBwZXJDYW52YXMuY2FsbCh0aGlzKTtcbiAgICB2YXIgY3R4ID0gdGhpcy5jb250ZXh0VG9wO1xuXG4gICAgaWYoY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCl7XG4gICAgICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gdGhpcy5jb250ZXh0VG9wSW1hZ2VTbW9vdGhpbmdFbmFibGVkO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHgud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gdGhpcy5jb250ZXh0VG9wSW1hZ2VTbW9vdGhpbmdFbmFibGVkO1xuICAgIGN0eC5tb3pJbWFnZVNtb290aGluZ0VuYWJsZWQgICAgPSB0aGlzLmNvbnRleHRUb3BJbWFnZVNtb290aGluZ0VuYWJsZWQ7XG4gICAgY3R4Lm1zSW1hZ2VTbW9vdGhpbmdFbmFibGVkICAgICA9IHRoaXMuY29udGV4dFRvcEltYWdlU21vb3RoaW5nRW5hYmxlZDtcbiAgICBjdHgub0ltYWdlU21vb3RoaW5nRW5hYmxlZCAgICAgID0gdGhpcy5jb250ZXh0VG9wSW1hZ2VTbW9vdGhpbmdFbmFibGVkO1xuICB9LFxuICBfb25Nb3VzZVVwSW5EcmF3aW5nTW9kZTogZnVuY3Rpb24oZSkge1xuICAgIHRoaXMuX2lzQ3VycmVudGx5RHJhd2luZyA9IGZhbHNlO1xuICAgIGlmICh0aGlzLmNsaXBUbykge1xuICAgICAgdGhpcy5jb250ZXh0VG9wLnJlc3RvcmUoKTtcbiAgICB9XG4gICAgdmFyIHBvaW50ZXIgPSB0aGlzLmdldFBvaW50ZXIoZSk7XG4gICAgdGhpcy5mcmVlRHJhd2luZ0JydXNoLm9uTW91c2VVcChwb2ludGVyKTtcbiAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAndXAnKTtcbiAgfSxcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKGVsLCBvcHRpb25zLGNhbGxiYWNrKSB7XG4gICAgaWYoZWwgJiYgZWwuY29uc3RydWN0b3IgPT0gT2JqZWN0KXtcbiAgICAgIGNhbGxiYWNrPSBvcHRpb25zO1xuICAgICAgb3B0aW9ucyA9IGVsO1xuICAgICAgZWwgPSBudWxsO1xuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXG5cbiAgICBpZihvcHRpb25zLmFwcGxpY2F0aW9uKXtcbiAgICAgIG9wdGlvbnMuYXBwbGljYXRpb24uZmlyZShcImVudGl0eTpjcmVhdGVkXCIse3RhcmdldCA6IHRoaXMgLCBvcHRpb25zIDogb3B0aW9uc30pO1xuICAgIH1cblxuICAgIHRoaXMuaWQgPSBmYWJyaWMuU2xpZGVDYW52YXMuX19pZGNvdW50ZXIrKztcblxuICAgIHRoaXMuX29iamVjdHMgPSBbXTtcbiAgICB0aGlzLl9jcmVhdGVMb3dlckNhbnZhcyhlbCk7XG5cblxuICAgIGlmKCF0aGlzLnZpcnR1YWwpe1xuICAgICAgdGhpcy5jcmVhdGVkID0gdHJ1ZTtcblxuXG4gICAgICB0aGlzLl9jdXJyZW50VHJhbnNmb3JtID0gbnVsbDtcbiAgICAgIHRoaXMuX2dyb3VwU2VsZWN0b3IgPSBudWxsO1xuICAgICAgdGhpcy5faW5pdFdyYXBwZXJFbGVtZW50KCk7XG4gICAgICB0aGlzLl9jcmVhdGVVcHBlckNhbnZhcygpO1xuICAgICAgdGhpcy5faW5pdEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLl9pbml0UmV0aW5hU2NhbGluZygpO1xuICAgICAgdGhpcy5jYWxjT2Zmc2V0KCk7XG4gICAgICB0aGlzLmluaXRMYXllcnMoKTtcblxuXG5cbiAgICAgIHRoaXMuX2NyZWF0ZUNhY2hlQ2FudmFzKCk7XG4gICAgICB0aGlzLl9zZXRJbWFnZVNtb290aGluZygpO1xuICAgICAgdGhpcy5faW5pdFJldGluYVNjYWxpbmcoKTtcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuaW5pdExheWVycygpO1xuICAgIH1cblxuICAgIHRoaXMucGx1Z2lucy5pbml0aWFsaXplLmZvckVhY2goZnVuY3Rpb24oaW5pdGlhbGl6ZXIpe1xuICAgICAgaW5pdGlhbGl6ZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgaWYob3B0aW9uc1tcIithY3Rpb25zXCJdKSB7XG4gICAgICB0aGlzLnNldChcIithY3Rpb25zXCIsIG9wdGlvbnNbXCIrYWN0aW9uc1wiXSlcbiAgICB9XG4gICAgaWYob3B0aW9ucy5hY3Rpb25zKXtcbiAgICAgIHRoaXMuc2V0KFwiYWN0aW9uc1wiLG9wdGlvbnMuYWN0aW9ucylcbiAgICB9XG5cblxuICAgIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy5vblJlc2l6ZSl7XG4gICAgICB0aGlzLm9uUmVzaXplID0gb3B0aW9ucy5vblJlc2l6ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXF1ZXN0QW5pbUZyYW1lKSB7XG4gICAgICB0aGlzLmFkZFZpZGVvc1N1cHBvcnQoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9pbml0T3B0aW9ucygpO1xuXG4gICAgdGhpcy5fc2V0T2JqZWN0KG9wdGlvbnMpO1xuXG4gICAgdGhpcy5jYWxjT2Zmc2V0KCk7XG5cbiAgICAvLyB0aGlzLmxvYWQob3B0aW9ucyxjYWxsYmFjayk7XG5cbiAgICB0aGlzLmZpcmUoXCJjcmVhdGVkXCIpO1xuICAgIC8vIGlmKHRoaXMuYXBwbGljYXRpb24pe1xuICAgIC8vICAgdGhpcy5hcHBsaWNhdGlvbi5maXJlKFwiY2FudmFzOmNyZWF0ZWRcIix7dGFyZ2V0IDogdGhpc30pO1xuICAgIC8vIH1cbiAgfSxcbiAgaW5pdExheWVyczogZnVuY3Rpb24oKXtcbiAgICBpZih0aGlzLnVwcGVyQ2FudmFzRWwpe1xuICAgICAgdGhpcy53cmFwcGVyRWwuYXBwZW5kQ2hpbGQodGhpcy51cHBlckNhbnZhc0VsKTtcbiAgICB9XG4gICAgLy90b2RvIGZyb20gbGF5ZXJzIG1vZHVsZVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNyZWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMuX2luaXRJbnRlcmFjdGl2ZSgpO1xuICAgIHRoaXMuX2NyZWF0ZUNhY2hlQ2FudmFzKCk7XG4gIH0sXG4gIHRvT2JqZWN0OiBmdW5jdGlvbiAocHJvcGVydGllc1RvSW5jbHVkZSkge1xuXG4gICAgcHJvcGVydGllc1RvSW5jbHVkZSA9IChwcm9wZXJ0aWVzVG9JbmNsdWRlIHx8IFtdKS5jb25jYXQodGhpcy5zdG9yZVByb3BlcnRpZXMpO1xuXG4gICAgdmFyIF9zZWxmID0gIHRoaXM7XG4gICAgdmFyIF9vYmpzID0gdGhpcy5nZXRPYmplY3RzKCk7XG5cbiAgICBfb2JqcyA9IGZhYnJpYy51dGlsLm9iamVjdC5maWx0ZXIoX29ianMse3N0b3JlZDogdHJ1ZX0pO1xuICAgIF9vYmpzID0gX29ianMubWFwKGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2UudG9PYmplY3QoX3NlbGYub2JqZWN0c1Byb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgIH0pO1xuXG4gICAgdmFyIF9kYXRhID0ge1xuICAgICAgb2JqZWN0czogX29ianNcbiAgICB9O1xuXG4gICAgZmFicmljLnV0aWwucG9wdWxhdGVXaXRoUHJvcGVydGllcyh0aGlzLCBfZGF0YSwgdGhpcy5wcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICAvL1xuICAgIC8vIGZvcih2YXIgaSBpbiBwcm9wZXJ0aWVzVG9JbmNsdWRlKXtcbiAgICAvLyAgIHZhciBfcHJvcCA9IHByb3BlcnRpZXNUb0luY2x1ZGVbaV07XG4gICAgLy8gICBfZGF0YVtfcHJvcF0gPSB0aGlzW19wcm9wXTtcbiAgICAvLyB9XG5cbiAgICBpZihwcm9wZXJ0aWVzVG9JbmNsdWRlLmluZGV4T2YoJ2JhY2tncm91bmRJbWFnZScpICE9PSAtMSl7XG4gICAgICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKF9kYXRhLCB0aGlzLl9fc2VyaWFsaXplQmdPdmVybGF5KCkpO1xuICAgIH1cblxuICAgIGlmKHByb3BlcnRpZXNUb0luY2x1ZGUuaW5kZXhPZignd2lkdGgnKSAhPT0gLTEgJiYgdGhpcy5vcmlnaW5hbFdpZHRoKXtcbiAgICAgIF9kYXRhLndpZHRoID0gdGhpcy5vcmlnaW5hbFdpZHRoO1xuICAgIH1cbiAgICBpZihwcm9wZXJ0aWVzVG9JbmNsdWRlLmluZGV4T2YoJ2hlaWdodCcpICE9PSAtMSAmJiB0aGlzLm9yaWdpbmFsSGVpZ2h0KXtcbiAgICAgIF9kYXRhLmhlaWdodCA9IHRoaXMub3JpZ2luYWxIZWlnaHQ7XG4gICAgfVxuXG4gICAgdGhpcy5wbHVnaW5zLnNhdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHNhdmVyKXtcbiAgICAgIHNhdmVyLmNhbGwodGhpcywgcHJvcGVydGllc1RvSW5jbHVkZSwgX2RhdGEpO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5maXJlKFwiYmVmb3JlOm9iamVjdFwiLHtvYmplY3Q6IF9kYXRhfSk7XG5cbiAgICByZXR1cm4gX2RhdGE7XG4gIH0sXG4gIHNldFRlbXBsYXRlOiBmdW5jdGlvbih0ZW1wbGF0ZSl7XG5cbiAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgaWYoIXRlbXBsYXRlKXJldHVybjtcblxuICAgIHRoaXMuc2V0V2lkdGgodGhpcy5zbGlkZVdpZHRoIHx8IHRlbXBsYXRlLndpZHRoKTtcbiAgICB0aGlzLnNldEhlaWdodCh0aGlzLnNsaWRlSGVpZ2h0IHx8IHRlbXBsYXRlLmhlaWdodCk7XG4gICAgdGhpcy5vcmlnaW5hbEhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgIHRoaXMub3JpZ2luYWxXaWR0aCA9IHRoaXMud2lkdGg7XG5cbiAgICB0aGlzLnNldChmYWJyaWMudXRpbC5vYmplY3QucmVhcnJhbmdlKHRlbXBsYXRlLFtcImFyZWFzXCIsXCJoZWxwZXJzXCIsXCJvZmZzZXRzXCJdKSk7XG5cbiAgICB0aGlzLl91cGRhdGVfY2xpcF9yZWN0KCk7XG4gICAgdGhpcy5fdXBkYXRlX2JhY2tncm91bmRfaW1hZ2UoKTtcbiAgICB0aGlzLmZpcmUoXCJtb2RpZmllZFwiLHt0eXBlOiBcInRlbXBsYXRlXCJ9KTtcbiAgICB0aGlzLnJlbmRlckFsbCgpO1xuICB9LFxuICBhZGRUZXh0OiBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucykge1xuICAgIHRoaXMuY3JlYXRlT2JqZWN0KHtcbiAgICAgIHBvc2l0aW9uOiBcImNlbnRlclwiLFxuICAgICAgdGV4dDogdGV4dCxcbiAgICAgIHR5cGU6ICAgdGhpcy5kZWZhdWx0VGV4dFR5cGUsXG4gICAgICBjbGlwVG86IHRoaXMuYWN0aXZlQXJlYSxcbiAgICAgIG1vdmVtZW50TGltaXRzIDogdGhpcy5hY3RpdmVBcmVhXG4gICAgfSk7XG4gIH0sXG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIEV2ZW50IExpc3RlbmVyc1xuICAgKiAgLSBsb2FkaW5nOmVuZFxuICAgKiAgLSB0YXJnZXQ6bW9kaWZpZWQgLSBjb3VsZGJlIHVzZWQgdG8gZGV0ZWN0IGFjdGl2ZSBvYmplY3QgY2hhbmdlc1xuICAgKiAgLSB0YXJnZXQ6Y2hhbmdlZFxuICAgKiAgLSB0YXJnZXQ6Y2xlYXJlZFxuICAgKi9cbiAgZXZlbnRMaXN0ZW5lcnM6IHtcbiAgICAnb2JqZWN0Om1vdmluZyc6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHRoaXMuZmlyZSgndGFyZ2V0Om1vZGlmaWVkJywgdGhpcywgb2JqKVxuICAgIH0sXG4gICAgJ3NlbGVjdGlvbjpjbGVhcmVkJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZighdGhpcy50YXJnZXQpcmV0dXJuO1xuICAgICAgdGhpcy50YXJnZXQuZmlyZSgnZGVzZWxlY3RlZCcsIGV2ZW50KTtcbiAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcbiAgICAgIHRoaXMuZmlyZSgndGFyZ2V0OmNsZWFyZWQnLCBldmVudCk7XG4gICAgfSxcbiAgICAnb2JqZWN0OnNlbGVjdGVkJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2aW91cyA9IHRoaXMudGFyZ2V0O1xuICAgICAgdGhpcy50YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICBpZihldmVudC5wcmV2aW91cyl7XG4gICAgICAgIGV2ZW50LnByZXZpb3VzLmZpcmUoJ2Rlc2VsZWN0ZWQnLCBldmVudCk7XG4gICAgICB9XG4gICAgICB0aGlzLmZpcmUoJ3RhcmdldDpjaGFuZ2VkJywgZXZlbnQpO1xuICAgIH0sXG4gICAgJ2dyb3VwOnNlbGVjdGVkJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB0aGlzLnRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgIHRoaXMuZmlyZSgndGFyZ2V0OmNoYW5nZWQnLCBldmVudCk7XG4gICAgfVxuICB9XG59KTtcbmZhYnJpYy5TbGlkZUNhbnZhcy5fX2lkY291bnRlciA9IDA7XG5mYWJyaWMuU2xpZGVDYW52YXMuZnJvbUpzb24gPSBmdW5jdGlvbih1cmwsY2FsbGJhY2sgLCBlbGVtZW50KXtcbiAgZmFicmljLnV0aWwuZGF0YS5sb2FkSnNvbih1cmwsZnVuY3Rpb24oZGF0YSl7XG4gICAgbmV3IGZhYnJpYy5TbGlkZUNhbnZhcyhlbGVtZW50LGRhdGEsY2FsbGJhY2spXG4gIH0pXG59O1xuXG5mYWJyaWMuU2xpZGVDYW52YXMucHJvdG90eXBlLmFjdGlvbnMgPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKHt9LCB7XG4gIHNlbGVjdEFsbDoge1xuICAgdGl0bGU6ICdzZWxlY3RBbGwnLFxuICAgdHlwZTogJ2tleSdcbiAgfSxcbiAgYmFja2dyb3VuZENvbG9yIDoge1xuICAgIHR5cGU6IFwiY29sb3JcIlxuICB9LFxuICBhZGRUZXh0OiB7XG4gICAgY2xhc3NOYW1lOiAgJ2ZhIGZhLWZvbnQnLFxuICAgIHRpdGxlOiAndGV4dCcsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmFkZFRleHQodGhpcy5kZWZhdWx0VGV4dCx7fSk7XG4gICAgfVxuICB9XG59KTtcblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuQXBwbGljYXRpb24ucHJvdG90eXBlLCB7XG4gIHNldFNsaWRlOiBmdW5jdGlvbiAodmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF9jYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICBpZiAoX2NhbnZhcy5sb2FkKSB7XG4gICAgICBfY2FudmFzLmxvYWQodmFsdWUsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2NhbnZhcy5jcmVhdGVPYmplY3RzKHZhbHVlLCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG59KTtcblxuZmFicmljLkFwcGxpY2F0aW9uLnByb3RvdHlwZS5jYW52YXNDbGFzcyA9ICdTbGlkZUNhbnZhcyc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2NvcmUvc2xpZGUuanNcbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciB0ZXh0SW5pdGlhbGl6ZSA9IGZhYnJpYy5UZXh0LnByb3RvdHlwZS5pbml0aWFsaXplO1xuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5UZXh0LnByb3RvdHlwZSwge1xuICB0ZXh0SW5pdGlhbGl6ZTogdGV4dEluaXRpYWxpemUsXG4gIGVkaXRUb29sOiBmYWxzZSxcbiAgYWR2YW5jZWRDb2xvcnNUb29sczogZmFsc2UsXG4gIHRleHRGb250U2l6ZVRvb2xzOiBmYWxzZSxcbiAgdGV4dEFsaWdtZW50VG9vbHM6IGZhbHNlLFxuICBhZHZhbmNlZFRleHRTdHlsZVRvb2xzOiBmYWxzZSxcbiAgcmFzdGVyaXplVG9vbDogZmFsc2UsXG4gIHJhc3Rlcml6ZUtsYXNzOiBmYWJyaWMuSW1hZ2UsXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zKSB7XG4gICAgdGhpcy5faW5pdEVudGl0eShvcHRpb25zKTtcbiAgICB0aGlzLnRleHRJbml0aWFsaXplKHRleHQsIG9wdGlvbnMpO1xuICAgIC8vIHRoaXMudXBkYXRlQ2FjaGUoKTtcbiAgfSxcbiAgICBfcmVuZGVyX2NhY2hlOiBmdW5jdGlvbiAoY3R4KSB7XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5zY2FsZShcbiAgICB0aGlzLnNjYWxlWCAqICh0aGlzLmZsaXBYID8gLTEgOiAxKSxcbiAgICB0aGlzLnNjYWxlWSAqICh0aGlzLmZsaXBZID8gLTEgOiAxKVxuICApO1xuICB0aGlzLnRyYW5zZm9ybShjdHgpO1xuICB0aGlzLl9zZXRTaGFkb3coY3R4KTtcbiAgY3R4LnRyYW5zbGF0ZSgtdGhpcy53aWR0aCAvIDIsIC10aGlzLmhlaWdodCAvIDIpO1xuICBjdHguZHJhd0ltYWdlKHRoaXMuX2NhY2hlLCAwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gIGN0eC5yZXN0b3JlKCk7XG59LFxuICB1cGRhdGVDYWNoZTogZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIHNpemUgPSB7XG4gICAgICB3aWR0aDogdGhpcy53aWR0aCAqIHRoaXMuY2FudmFzLmRvdHNQZXJVbml0LFxuICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCAqIHRoaXMuY2FudmFzLmRvdHNQZXJVbml0XG4gICAgfTtcblxuICAgIHZhciBfY2xpcFRvID0gdGhpcy5jbGlwVG87XG4gICAgZGVsZXRlIHRoaXMuY2xpcFRvO1xuICAgIHRoaXMuX2NhY2hlID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudFdpdGhTaXplKHNpemUpO1xuICAgIHZhciBjdHggPSB0aGlzLl9jYWNoZS5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgY3R4LnNjYWxlKFxuICAgICAgdGhpcy5jYW52YXMuZG90c1BlclVuaXQsXG4gICAgICB0aGlzLmNhbnZhcy5kb3RzUGVyVW5pdCk7XG4gICAgY3R4LnRyYW5zbGF0ZSh0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQgLyAyKTtcblxuICAgIHRoaXMucmVuZGVyKGN0eCwgdHJ1ZSk7XG4gICAgdGhpcy5yZW5kZXIgPSB0aGlzLl9yZW5kZXJfY2FjaGU7XG4gICAgdGhpcy5jbGlwVG8gPSBfY2xpcFRvO1xuXG4gIH0sXG4gIHJhc3Rlcml6ZVRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnVwZGF0ZUNhY2hlKCk7XG4gICAgdmFyIGltZyA9IGZhYnJpYy51dGlsLmNyZWF0ZUltYWdlKCk7XG5cbiAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG9iaiA9IHRoaXMudG9PYmplY3QoKTtcbiAgICAgIG9iai53aWR0aCA9IGltZy53aWR0aDtcbiAgICAgIG9iai5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xuICAgICAgb2JqLnNjYWxlWCA9IHRoaXMuc2NhbGVYICogKHRoaXMuaGVpZ2h0IC8gaW1nLmhlaWdodCk7XG4gICAgICBvYmouc2NhbGVZID0gdGhpcy5zY2FsZVkgKiAodGhpcy53aWR0aCAvIGltZy53aWR0aCApO1xuICAgICAgb2JqLnJhc3Rlcml6ZWRUeXBlID0gb2JqLnR5cGU7XG4gICAgICBkZWxldGUgb2JqLnR5cGU7XG5cbiAgICAgIHZhciBlbCA9IG5ldyB0aGlzLnJhc3Rlcml6ZUtsYXNzKGltZywgb2JqKTtcbiAgICAgIHRoaXMuY2FudmFzLmFkZChlbCk7XG4gICAgICB0aGlzLmNhbnZhcy5yZW1vdmUodGhpcyk7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jYW52YXMuc2V0QWN0aXZlT2JqZWN0KGVsKTtcbiAgICAgICAgdGhpcy5jYW52YXMucmVuZGVyQWxsKCk7XG4gICAgICB9LmJpbmQodGhpcykpXG4gICAgfS5iaW5kKHRoaXMpO1xuICAgIGltZy5zcmMgPSB0aGlzLl9jYWNoZS50b0RhdGFVUkwoKTtcbiAgICAvL3RoaXMub24oJ21vZGlmaWVkJyx0aGlzLnVwZGF0ZUNhY2hlLmJpbmQodGhpcykpO1xuICB9LFxuICBnZXRTdHlsZTogZnVuY3Rpb24gKHN0eWxlTmFtZSkge1xuICAgIHZhciBvYmplY3QgPSB0aGlzO1xuICAgIHJldHVybiAob2JqZWN0LmdldFNlbGVjdGlvblN0eWxlcyAmJiBvYmplY3QuaXNFZGl0aW5nKVxuICAgICAgPyAob2JqZWN0LmdldFNlbGVjdGlvblN0eWxlcygpW3N0eWxlTmFtZV0gfHwgb2JqZWN0W3N0eWxlTmFtZV0pXG4gICAgICA6IChvYmplY3Rbc3R5bGVOYW1lXSB8fCBvYmplY3RbJ19fJyArIHN0eWxlTmFtZV0gfHwgJycpO1xuICB9LFxuICBnZXRQYXR0ZXJuOiBmdW5jdGlvbiAodXJsKSB7XG4gICAgdmFyIF9maWxsID0gdGhpcy5nZXRTdHlsZSgnZmlsbCAnKTtcbiAgICByZXR1cm4gX2ZpbGwgJiYgX2ZpbGwuc291cmNlO1xuICB9LFxuICBzZXRQYXR0ZXJuOiBmdW5jdGlvbiAodXJsKSB7XG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIHRoaXMuc2V0U3R5bGUoJ2ZpbGwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdmFyIF90ZXh0dXJlID0gXy5maW5kV2hlcmUodGhpcy5wcm9qZWN0LnRleHR1cmVzLCB7aWQ6IHVybH0pO1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGZhYnJpYy51dGlsLmxvYWRJbWFnZSh1cmwsIGZ1bmN0aW9uKGltZykge1xuICAgICAgICBfdGhpcy5zZXRTdHlsZSgnZmlsbCcsIG5ldyBmYWJyaWMuUGF0dGVybih7XG4gICAgICAgICAgc291cmNlOiBpbWcsXG4gICAgICAgICAgcmVwZWF0OiAncmVwZWF0J1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIGdldE9wYWNpdHk6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHlsZSgnb3BhY2l0eScpICogMTAwO1xuICB9LFxuICBzZXRPcGFjaXR5OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLnNldFN0eWxlKCdvcGFjaXR5JywgcGFyc2VJbnQodmFsdWUsIDEwKSAvIDEwMCk7XG4gIH0sXG4gIGdldFJhZGl1czogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldCgncmFkaXVzJyk7XG4gIH0sXG4gIHNldFNoYWRvdzogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnNldFByb3BlcnR5KCdzaGFkb3cnLCBvcHRpb25zID8gbmV3IGZhYnJpYy5TaGFkb3cob3B0aW9ucykgOiBudWxsKTtcbiAgfSxcbiAgc2V0UHJvcGVydHk6IGZ1bmN0aW9uIChwcm9wLCB2YWx1ZSkge1xuICAgIHRoaXNbcHJvcF0gPSB2YWx1ZTtcbiAgICB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgfSxcbiAgc2V0UmFkaXVzOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLnNldFByb3BlcnR5KCdyYWRpdXMnLCB2YWx1ZSk7XG4gIH0sXG4gIGdldFNwYWNpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ3NwYWNpbmcnKTtcbiAgfSxcbiAgc2V0U3BhY2luZzogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRQcm9wZXJ0eSgnc3BhY2luZycsIHZhbHVlKTtcbiAgfSxcbiAgZ2V0UmV2ZXJ0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ3JldmVydGVkJyk7XG4gIH0sXG4gIHNldFJldmVydGVkOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLnNldFByb3BlcnR5KCdyZXZlcnRlZCcsIHZhbHVlKTtcbiAgfSxcbiAgZ2V0RmlsbDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0eWxlKCdmaWxsJyk7XG4gIH0sXG4gIHNldEZpbGw6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0U3R5bGUoJ2ZpbGwnLCB2YWx1ZSk7XG4gIH0sXG4gIGdldFRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ3RleHQnKTtcbiAgfSxcbiAgc2V0VGV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRQcm9wZXJ0eSgndGV4dCcsIHZhbHVlKTtcbiAgfSxcbiAgZ2V0VGV4dEFsaWduOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCd0ZXh0QWxpZ24nKTtcbiAgfSxcbiAgc2V0VGV4dEFsaWduOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLnNldFByb3BlcnR5KCd0ZXh0QWxpZ24nLCB2YWx1ZS50b0xvd2VyQ2FzZSgpKTtcbiAgfSxcbiAgZ2V0Rm9udEZhbWlseTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldCgnZm9udEZhbWlseScpO1xuICB9LFxuICBzZXRGb250RmFtaWx5OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLnNldFN0eWxlKCdmb250RmFtaWx5JywgdmFsdWUpO1xuICB9LFxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuc3R5bGVzIHx8IHtcbiAgICAgICAgZmlsbCA6ICAgICAgICAgICAgICAgIHRoaXMuZmlsbCxcbiAgICAgICAgZm9udFNpemUgOiAgICAgICAgICAgIHRoaXMuZm9udFNpemUsXG4gICAgICAgIHRleHRCYWNrZ3JvdW5kQ29sb3IgOiB0aGlzLnRleHRCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIHRleHREZWNvcmF0aW9uIDogICAgICB0aGlzLnRleHREZWNvcmF0aW9uLFxuICAgICAgICBmb250RmFtaWx5IDogICAgICAgICAgdGhpcy5mb250RmFtaWx5LFxuICAgICAgICBmb250V2VpZ2h0IDogICAgICAgICAgdGhpcy5mb250V2VpZ2h0LFxuICAgICAgICBmb250U3R5bGUgOiAgICAgICAgICAgdGhpcy5mb250U3R5bGUsXG4gICAgICAgIHN0cm9rZSA6ICAgICAgICAgICAgICB0aGlzLnN0cm9rZSxcbiAgICAgICAgc3Ryb2tlV2lkdGggOiAgICAgICAgIHRoaXMuc3Ryb2tlV2lkdGhcbiAgICAgIH07XG4gIH0sXG4gIGdldEJnQ29sb3I6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2JhY2tncm91bmRDb2xvcicpO1xuICB9LFxuICBzZXRCZ0NvbG9yOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLnNldFByb3BlcnR5KCdiYWNrZ3JvdW5kQ29sb3InLCB2YWx1ZSk7XG4gIH0sXG4gIGdldFRleHRCZ0NvbG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCd0ZXh0QmFja2dyb3VuZENvbG9yJyk7XG4gIH0sXG4gIHNldFRleHRCZ0NvbG9yOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLnNldFByb3BlcnR5KCd0ZXh0QmFja2dyb3VuZENvbG9yJywgdmFsdWUpO1xuICB9LFxuICBnZXRTdHJva2U6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHlsZSgnc3Ryb2tlJyk7XG4gIH0sXG4gIHNldFN0cm9rZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRTdHlsZSgnc3Ryb2tlJywgdmFsdWUpO1xuICB9LFxuICBnZXRTdHJva2VXaWR0aDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0eWxlKCdzdHJva2VXaWR0aCcpO1xuICB9LFxuICBzZXRTdHJva2VXaWR0aDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRTdHlsZSgnc3Ryb2tlV2lkdGgnLCBwYXJzZUludCh2YWx1ZSwgMTApKTtcbiAgfSxcbiAgZGVjcmVhc2VGb250U2l6ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2V0U3R5bGUoJ2ZvbnRTaXplJywgcGFyc2VJbnQodGhpcy5nZXRTdHlsZSgnZm9udFNpemUnKSkgLSAxKTtcbiAgfSxcbiAgaW5jcmVhc2VGb250U2l6ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2V0U3R5bGUoJ2ZvbnRTaXplJywgcGFyc2VJbnQodGhpcy5nZXRTdHlsZSgnZm9udFNpemUnKSkgKyAxKTtcbiAgfSxcbiAgZ2V0Rm9udFNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHlsZSgnZm9udFNpemUnKTtcbiAgfSxcbiAgc2V0Rm9udFNpemU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0U3R5bGUoJ2ZvbnRTaXplJywgcGFyc2VJbnQodmFsdWUsIDEwKSk7XG4gIH0sXG4gIGdldExpbmVIZWlnaHQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHlsZSgnbGluZUhlaWdodCcpO1xuICB9LFxuICBzZXRMaW5lSGVpZ2h0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLnNldFN0eWxlKCdsaW5lSGVpZ2h0JywgcGFyc2VGbG9hdCh2YWx1ZSwgMTApKTtcbiAgfSxcbiAgYWRkVGV4dDogZnVuY3Rpb24gKHRleHQsb3B0aW9ucykge1xuXG4gICAgdmFyIF9tYXRjaCA9IHRoaXMudGV4dC5tYXRjaCgvXFxuL2cpO1xuICAgIHZhciBfbGluZUluZGV4ID0gX21hdGNoICYmIF9tYXRjaC5sZW5ndGggfHwgMDtcbiAgICB2YXIgY2hhckluZGV4ID0gdGhpcy50ZXh0Lmxlbmd0aCAtIHRoaXMudGV4dC5sYXN0SW5kZXhPZihcIlxcblwiKSAtIDE7XG5cbiAgICBpZighdGhpcy5zdHlsZXNbX2xpbmVJbmRleF0pe1xuICAgICAgdGhpcy5zdHlsZXNbX2xpbmVJbmRleF0gPSB7fVxuICAgIH1cblxuICAgIGlmKCF0aGlzLnN0eWxlc1tfbGluZUluZGV4XVtjaGFySW5kZXhdKXtcbiAgICAgIHRoaXMuc3R5bGVzW19saW5lSW5kZXhdW2NoYXJJbmRleF0gPSB7fVxuICAgIH1cbiAgICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKHRoaXMuc3R5bGVzW19saW5lSW5kZXhdW2NoYXJJbmRleF0sb3B0aW9ucyk7XG4gICAgdGhpcy50ZXh0ICs9dGV4dDtcbiAgICAvLyB0aGlzLnN0eWxlcztcbiAgfSxcbiAgZ2V0Qm9sZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0eWxlKCdmb250V2VpZ2h0JykgPT09IFwiYm9sZFwiO1xuICB9LFxuICBzZXRCb2xkOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLnNldFN0eWxlKCdmb250V2VpZ2h0JywgdmFsdWUgPyAnYm9sZCcgOiAnJyk7XG4gIH0sXG4gIGdldEl0YWxpYzogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0eWxlKCdmb250U3R5bGUnKSA9PT0gJ2l0YWxpYyc7XG4gIH0sXG4gIHNldEl0YWxpYzogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRTdHlsZSgnZm9udFN0eWxlJywgdmFsdWUgPyAnaXRhbGljJyA6ICcnICk7XG4gIH0sXG4gIGdldFVuZGVybGluZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0eWxlKCd0ZXh0RGVjb3JhdGlvbicpLmluZGV4T2YoJ3VuZGVybGluZScpID4gLTE7XG4gIH0sXG4gIHNldFVuZGVybGluZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSA/ICh0aGlzLmdldFN0eWxlKCd0ZXh0RGVjb3JhdGlvbicpICsgJyB1bmRlcmxpbmUnKVxuICAgICAgOiB0aGlzLmdldFN0eWxlKCd0ZXh0RGVjb3JhdGlvbicpLnJlcGxhY2UoJ3VuZGVybGluZScsICcnKTtcblxuICAgIHRoaXMuc2V0U3R5bGUoJ3RleHREZWNvcmF0aW9uJywgdmFsdWUpO1xuICB9LFxuICBnZXRMaW5ldGhyb3VnaDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0eWxlKCd0ZXh0RGVjb3JhdGlvbicpLmluZGV4T2YoJ2xpbmUtdGhyb3VnaCcpID4gLTE7XG4gIH0sXG4gIHNldExpbmV0aHJvdWdoOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YWx1ZSA9IHZhbHVlID8gKHRoaXMuZ2V0U3R5bGUoJ3RleHREZWNvcmF0aW9uJykgKyAnIGxpbmUtdGhyb3VnaCcpXG4gICAgICA6IHRoaXMuZ2V0U3R5bGUoJ3RleHREZWNvcmF0aW9uJykucmVwbGFjZSgnbGluZS10aHJvdWdoJywgJycpO1xuXG4gICAgdGhpcy5zZXRTdHlsZSgndGV4dERlY29yYXRpb24nLCB2YWx1ZSk7XG4gIH0sXG4gIGdldE92ZXJsaW5lOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3R5bGUoJ3RleHREZWNvcmF0aW9uJykuaW5kZXhPZignb3ZlcmxpbmUnKSA+IC0xO1xuICB9LFxuICBzZXRPdmVybGluZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSA/ICh0aGlzLmdldFN0eWxlKCd0ZXh0RGVjb3JhdGlvbicpICsgJyBvdmVybGluZScpXG4gICAgICA6IHRoaXMuZ2V0U3R5bGUoJ3RleHREZWNvcmF0aW9uJykucmVwbGFjZSgnb3ZlcmxpbicsICcnKTtcblxuICAgIHRoaXMuc2V0U3R5bGUoJ3RleHREZWNvcmF0aW9uJywgdmFsdWUpO1xuICB9LFxuICBzZXRTdHlsZTogZnVuY3Rpb24gKHN0eWxlTmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgb2JqZWN0ID0gdGhpcztcbiAgICB2YXIgX29sZCA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZURlZXAob2JqZWN0LmdldFN0eWxlcygpKTtcbiAgICAvL3ZhciBfb2xkID0gZmFicmljLnV0aWwub2JqZWN0LmRlZXBFeHRlbmQoe30sIG9iamVjdC5nZXRTdHlsZXMpOy8vZ2V0U2VsZWN0aW9uU3R5bGVzKCk7XG4gICAgaWYgKG9iamVjdC5zZXRTZWxlY3Rpb25TdHlsZXMgJiYgb2JqZWN0LmlzRWRpdGluZykge1xuICAgICAgdmFyIHN0eWxlID0ge307XG4gICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzdHlsZVtzdHlsZU5hbWVdID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgc3R5bGVbc3R5bGVOYW1lXTtcbiAgICAgIH1cbiAgICAgIG9iamVjdC5zZXRTZWxlY3Rpb25TdHlsZXMoc3R5bGUpO1xuICAgICAgb2JqZWN0LnNldENvb3JkcygpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9iamVjdFtzdHlsZU5hbWVdID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgb2JqZWN0W3N0eWxlTmFtZV07XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpIGluIG9iamVjdC5zdHlsZXMpIHtcbiAgICAgICAgZm9yICh2YXIgaiBpbiBvYmplY3Quc3R5bGVzW2ldKSB7XG4gICAgICAgICAgaWYgKG9iamVjdC5zdHlsZXNbaV1bal1bc3R5bGVOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkZWxldGUgb2JqZWN0LnN0eWxlc1tpXVtqXVtzdHlsZU5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzdHlsZXNfZGF0YSA9IG9iamVjdC5nZXRTdHlsZXMoKTtcblxuICAgIGlmKHRoaXMudHlwZSAhPSBcInRleHRcIil7XG4gICAgICB0aGlzLnN0eWxlcyA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZURlZXAoc3R5bGVzX2RhdGEpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0Q29vcmRzKCk7XG5cbiAgICB0aGlzLmZpcmUoXCJzdHlsZXM6bW9kaWZpZWRcIiwge1xuICAgICAgb3JpZ2luYWw6IF9vbGQsXG4gICAgICBtb2RpZmllZDogc3R5bGVzX2RhdGFcbiAgICB9KTtcbiAgICB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICAvKlxuICAgICB0aGlzLnByb2plY3QuaGlzdG9yeS5hZGQoe1xuICAgICBzbGlkZTogdGhpcy5zbGlkZSxcbiAgICAgb2JqZWN0OiB0aGlzLFxuICAgICB1bmRvOiBfb2xkLFxuICAgICByZWRvOiBzdHlsZXNfZGF0YSxcbiAgICAgdHlwZTogJ3N0eWxlZCcsXG4gICAgIHVuZG9GbjogZnVuY3Rpb24oKXtcbiAgICAgdGhpcy5vYmplY3QuZGF0YS5zdHlsZXMgPSB0aGlzLnVuZG87XG4gICAgIHRoaXMub2JqZWN0LmZhYnJpYy5zZXQoJ3N0eWxlcycsdGhpcy51bmRvKTtcbiAgICAgdGhpcy5vYmplY3QuZmFicmljLnNldENvb3JkcygpO1xuICAgICB0aGlzLm9iamVjdC5zbGlkZS5yZW5kZXIoKTtcbiAgICAgfSxcbiAgICAgcmVkb0ZuOiAgZnVuY3Rpb24oKXtcbiAgICAgdGhpcy5vYmplY3QuZGF0YS5zdHlsZXMgPSB0aGlzLnJlZG87XG4gICAgIHRoaXMub2JqZWN0LmZhYnJpYy5zZXQoJ3N0eWxlcycsdGhpcy5yZWRvKTtcbiAgICAgdGhpcy5vYmplY3QuZmFicmljLnNldENvb3JkcygpO1xuICAgICB0aGlzLm9iamVjdC5zbGlkZS5yZW5kZXIoKTtcbiAgICAgfVxuICAgICB9KTsqL1xuICB9LFxuXG4gIGdlbmVyYXRlVGV4dFN0eWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdmb250LXN0eWxlJzogdGhpcy5pc0l0YWxpYygpID8gJ2l0YWxpYycgOiAnbm9ybWFsJyxcbiAgICAgICdmb250LXdlaWdodCc6IHRoaXMuaXNCb2xkKCkgPyA3MDAgOiA0MDAsXG4gICAgICAndGV4dC1kZWNvcmF0aW9uJzogKHRoaXMuaXNMaW5ldGhyb3VnaCgpID8gJ2xpbmUtdGhyb3VnaCAnIDogJycgKSArXG4gICAgICAodGhpcy5pc092ZXJsaW5lKCkgPyAnb3ZlcmxpbmUgJyA6ICcnICkgK1xuICAgICAgKHRoaXMuaXNVbmRlcmxpbmUoKSA/ICd1bmRlcmxpbmUgJyA6ICcnKVxuICAgIH1cbiAgfSxcbiAgYWN0aW9uczoge1xuICAgIHJhc3Rlcml6ZVRleHQ6IHtcbiAgICAgIGluc2VydDogJ3Jhc3Rlcml6ZVRvb2wnLFxuICAgICAgY2xhc3NOYW1lOiAnYnV0dG9uLWVhc2VsJyxcbiAgICAgIHRpdGxlOiAncmFzdGVyaXplVGV4dCcsXG4gICAvLyAgIGFjdGlvbjogX1RFWC5yYXN0ZXJpemVUZXh0XG4gICAgfSxcbiAgICBmaWxsOiB7XG4gICAgICB0eXBlOiAnY29sb3InLFxuICAgICAgdGl0bGU6ICdmaWxsJyxcbiAgICAgIGluc2VydDogJyFhZHZhbmNlZENvbG9yc1Rvb2xzJyxcbiAgICAgIHZhbHVlOiAnZmlsbCdcbiAgICB9LFxuICAgIHRleHRCZ2NvbG9yOiB7XG4gICAgICB0eXBlOiAnY29sb3InLFxuICAgICAgdGl0bGU6ICdiZ0NvbG9yJyxcbiAgICAgIHZhbHVlOiAnYmdDb2xvcidcbiAgICB9LFxuICAgIHRleHRUZXh0Ymdjb2xvcjoge1xuICAgICAgdHlwZTogJ2NvbG9yJyxcbiAgICAgIHRpdGxlOiAndGV4dEJnQ29sb3InLFxuICAgICAgdmFsdWU6ICd0ZXh0QmdDb2xvcidcbiAgICB9LFxuICAgIHRleHRGaWxsOiB7XG4gICAgICB0eXBlOiAnY29sb3InLFxuICAgICAgdGl0bGU6ICdmaWxsJyxcbiAgICAgIHZhbHVlOiAnZmlsbCdcbiAgICB9LFxuICAgIHRleHRCb2xkOiB7XG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICB0aXRsZTogJ2JvbGQnLFxuICAgICAgdmFsdWU6ICdib2xkJyxcbiAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLWJvbGQnXG4gICAgfSxcbiAgICB0ZXh0SXRhbGljOiB7XG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICB0aXRsZTogJ2l0YWxpYycsXG4gICAgICB2YWx1ZTogJ2l0YWxpYycsXG4gICAgICBjbGFzc05hbWU6ICdmYSBmYS1pdGFsaWMnXG4gICAgfSxcbiAgICB0ZXh0VW5kZXJsaW5lOiB7XG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICB0aXRsZTogJ1VuZGVybGluZScsXG4gICAgICB2YWx1ZTogJ3VuZGVybGluZScsXG4gICAgICBjbGFzc05hbWU6ICdmYSBmYS11bmRlcmxpbmUnXG4gICAgfSxcbiAgICB0ZXh0TGluZXRocm91Z2g6IHtcbiAgICAgIHR5cGU6IFwiY2hlY2tib3hcIixcbiAgICAgIGluc2VydDogJ2FkdmFuY2VkVGV4dFN0eWxlVG9vbHMnLFxuICAgICAgdGl0bGU6ICdMaW5ldGhyb3VnaCcsXG4gICAgICB2YWx1ZTogJ2xpbmV0aHJvdWdoJyxcbiAgICAgIGNsYXNzTmFtZTogJ3RleHQtbGluZXRocm91Z2ggZmEgZmEtc3RyaWtldGhyb3VnaCdcbiAgICB9LFxuICAgIHRleHRPdmVybGluZToge1xuICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgaW5zZXJ0OiAnYWR2YW5jZWRUZXh0U3R5bGVUb29scycsXG4gICAgICB0aXRsZTogJ292ZXJsaW5lJyxcbiAgICAgIHZhbHVlOiAnb3ZlcmxpbmUnLFxuICAgICAgY2xhc3NOYW1lOiAndGV4dC1vdmVybGluZSBmYSBmYS1vdmVybGluZSdcbiAgICB9LFxuICAgIHRleHRBbGlnbjoge1xuICAgICAgdHlwZTogJ29wdGlvbnMnLFxuICAgICAgdGl0bGU6ICd0ZXh0IGFsaWduJyxcbiAgICAgIGluc2VydDogJ3RleHRBbGlnbWVudFRvb2xzJyxcbiAgICAgIHZhbHVlOiBcInRleHRBbGlnblwiLFxuICAgICAgbWVudToge1xuICAgICAgICB0ZXh0QWxpZ25DZW50ZXI6IHtcbiAgICAgICAgICB0aXRsZTogJ2FsaWduIGNlbnRlcicsXG4gICAgICAgICAgb3B0aW9uOiAnY2VudGVyJyxcbiAgICAgICAgICBjbGFzc05hbWU6ICdmYSBmYS1hbGlnbi1jZW50ZXInXG4gICAgICAgIH0sXG4gICAgICAgIHRleHRBbGlnbkxlZnQ6IHtcbiAgICAgICAgICB0aXRsZTogJ2FsaWduIGxlZnQnLFxuICAgICAgICAgIG9wdGlvbjogJ2xlZnQnLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLWFsaWduLWxlZnQnXG4gICAgICAgIH0sXG4gICAgICAgIHRleHRBbGlnblJpZ2h0OiB7XG4gICAgICAgICAgdGl0bGU6ICdhbGlnbiByaWdodCcsXG4gICAgICAgICAgb3B0aW9uOiAncmlnaHQnLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLWFsaWduLXJpZ2h0J1xuICAgICAgICB9LFxuICAgICAgICB0ZXh0QWxpZ25KdXN0aWZ5OiB7XG4gICAgICAgICAgdGl0bGU6ICdhbGlnbiBqdXN0aWZ5JyxcbiAgICAgICAgICBvcHRpb246ICdqdXN0aWZ5JyxcbiAgICAgICAgICBjbGFzc05hbWU6ICdmYSBmYS1hbGlnbi1qdXN0aWZ5J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBmb250RmFtaWx5OiB7XG4gICAgICB0eXBlOiAnZm9udEZhbWlseScsXG4gICAgICB0aXRsZTogJ2ZvbnQgZmFtaWx5JyxcbiAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLXRleHQnLFxuICAgICAgdmFsdWU6ICdmb250RmFtaWx5JyxcbiAgICAgIGRhdGE6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGxpY2F0aW9uLl9mb250c1xuICAgICAgfVxuICAgIH0sXG4gICAgdGV4dEZvbnRTaXplOiB7XG4gICAgICBpbnNlcnQ6ICd0ZXh0Rm9udFNpemVUb29scycsXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIHRpdGxlOiAnZm9udFNpemUnLFxuICAgICAgdmFsdWU6ICdmb250U2l6ZSdcbiAgICB9LFxuICAgIC8qdGV4dEZvbnQ6IHtcbiAgICAgaW5zZXJ0OiAndGV4dEZvbnRTaXplVG9vbHMnLFxuICAgICB0eXBlOiAnbWVudScsXG4gICAgIHRpdGxlOiAnZm9udCcsXG4gICAgIGNsYXNzTmFtZTogJ2ZhIGZhLWZvbnQnLFxuICAgICBtZW51OiB7XG4gICAgIHRleHRGb250U2l6ZURlY3JlYXNlOiB7XG4gICAgIHRpdGxlOiAnZGVjcmVhc2VGb250U2l6ZScsXG4gICAgIGFjdGlvbjogX1RFWC5kZWNyZWFzZUZvbnRTaXplLFxuICAgICBjbGFzc05hbWU6ICdmYSBmYS1mb250IGZvbnQtc2l6ZS1kZWNyZWFzZSdcbiAgICAgfSxcbiAgICAgdGV4dEZvbnRTaXplSW5jcmVhc2U6IHtcbiAgICAgdGl0bGU6ICdpbmNyZWFzZUZvbnRTaXplJyxcbiAgICAgYWN0aW9uOiBfVEVYLmluY3JlYXNlRm9udFNpemUsXG4gICAgIGNsYXNzTmFtZTogJ2ZhIGZhLWZvbnQgZm9udC1zaXplLWluY3JlYXNlJ1xuICAgICB9XG4gICAgIH1cbiAgICAgfSovXG4gICAgYWR2YW5jZWRDb2xvcnNUb29sczoge1xuICAgICAgY2xhc3NOYW1lOiAnY29sb3JzJyxcbiAgICAgIHR5cGU6ICdtZW51JyxcbiAgICAgIHRpdGxlOiAnY29sb3JzJyxcbiAgICAgIHRvZ2dsZWQ6IHRydWUsXG4gICAgICBtZW51OiBbXCJmaWxsXCIsXCJ0ZXh0Qmdjb2xvclwiLFwidGV4dFRleHRiZ2NvbG9yXCIsXCJ0ZXh0RmlsbFwiXVxuICAgIH0sXG4gICAgdGV4dFN0eWxlOiB7XG4gICAgICB0eXBlOiAnbWVudScsXG4gICAgICB0aXRsZTogJ3RleHQgc3R5bGUnLFxuICAgICAgdG9nZ2xlZDogdHJ1ZSxcbiAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLWZvbnQnLFxuICAgICAgc3R5bGU6ICdnZW5lcmF0ZVRleHRTdHlsZScsXG4gICAgICBtZW51OiBbXG4gICAgICAgIFwidGV4dEJvbGRcIixcInRleHRJdGFsaWNcIixcInRleHRVbmRlcmxpbmVcIixcInRleHRMaW5ldGhyb3VnaFwiLFxuICAgICAgICBcInRleHRPdmVybGluZVwiLFwidGV4dEFsaWduXCIsXCJmb250RmFtaWx5XCIsXCJ0ZXh0Rm9udFNpemVcIlxuICAgICAgXVxuICAgIH1cbiAgfVxufSk7XG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLklUZXh0LnByb3RvdHlwZSwge1xuICBpbml0SGlkZGVuVGV4dGFyZWFfbmF0aXZlOiBmYWJyaWMuSVRleHQucHJvdG90eXBlLmluaXRIaWRkZW5UZXh0YXJlYSxcbiAgaW5pdEhpZGRlblRleHRhcmVhOiBmdW5jdGlvbigpe1xuICAgIHRoaXMuaW5pdEhpZGRlblRleHRhcmVhX25hdGl2ZSgpO1xuICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc3R5bGUud2lkdGggPSBcIjk5OTlweFwiO1xuICB9LFxuICAvKipcbiAgICogRXhpdHMgZnJvbSBlZGl0aW5nIHN0YXRlXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JVGV4dH0gdGhpc0FyZ1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBleGl0RWRpdGluZzogZnVuY3Rpb24oKSB7XG4gICAgLy8gdmFyIGlzVGV4dENoYW5nZWQgPSAodGhpcy5fdGV4dEJlZm9yZUVkaXQgIT09IHRoaXMudGV4dCk7XG4gICAgdGhpcy5zZWxlY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuaXNFZGl0aW5nID0gZmFsc2U7XG4gICAgdGhpcy5zZWxlY3RhYmxlID0gdHJ1ZTtcblxuICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgICB0aGlzLmhpZGRlblRleHRhcmVhICYmIHRoaXMuY2FudmFzICYmIHRoaXMuaGlkZGVuVGV4dGFyZWEucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmhpZGRlblRleHRhcmVhKTtcbiAgICB0aGlzLmhpZGRlblRleHRhcmVhID0gbnVsbDtcblxuICAgIHRoaXMuYWJvcnRDdXJzb3JBbmltYXRpb24oKTtcbiAgICB0aGlzLl9yZXN0b3JlRWRpdGluZ1Byb3BzKCk7XG4gICAgdGhpcy5fY3VycmVudEN1cnNvck9wYWNpdHkgPSAwO1xuXG4gICAgdGhpcy5maXJlKCdlZGl0aW5nOmV4aXRlZCcpO1xuICAgIC8vIGlzVGV4dENoYW5nZWQgJiYgdGhpcy5maXJlKCdtb2RpZmllZCcpO1xuICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgdGhpcy5jYW52YXMub2ZmKCdtb3VzZTptb3ZlJywgdGhpcy5tb3VzZU1vdmVIYW5kbGVyKTtcbiAgICAgIHRoaXMuY2FudmFzLmZpcmUoJ3RleHQ6ZWRpdGluZzpleGl0ZWQnLCB7IHRhcmdldDogdGhpcyB9KTtcbiAgICAgIHRoaXMuY2FudmFzLmZpcmVNb2RpZmllZElmQ2hhbmdlZCh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIG1heFN0cm9rZVdpZHRoOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiBNYXRoLmNlaWwoIHRoaXMuZ2V0Rm9udFNpemUoKSAvIDEwKTtcbiAgfSxcbiAgYWN0aW9uczoge1xuICAgIGVudGVyRWRpdGluZzoge1xuICAgICAgaW5zZXJ0OiAgICAgJ2VkaXRUb29sJyxcbiAgICAgIGNsYXNzTmFtZTogICdmYSBmYS1wZW5jaWwtc3F1YXJlLW8nLFxuICAgICAgdGl0bGU6ICAgICAgJ2VkaXQnXG4gICAgICAvL2FjdGlvbjogICAgIF9URVguZW50ZXJFZGl0aW5nXG4gICAgfVxuICB9XG59KTtcblxuXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2NvcmUvdGV4dC5leHQuanNcbi8vIG1vZHVsZSBpZCA9IDQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImZhYnJpYy5kZWJ1ZyA9IERFVkVMT1BNRU5UO1xuZmFicmljLmV4dGVuc2lvbnMgPSBbXTtcbmZhYnJpYy51dGlsLmRhdGEgPSByZXF1aXJlKCcuL3V0aWwvZGF0YS5qcycpO1xuZmFicmljLnV0aWwucGF0aCA9IHJlcXVpcmUoJy4vdXRpbC9wYXRoLmpzJyk7XG5mYWJyaWMudXRpbC5jb21waWxlID0gcmVxdWlyZSgnLi91dGlsL2NvbXBpbGUuanMnKTtcbmZhYnJpYy51dGlsLmxvYWRlciA9IHJlcXVpcmUoJy4vdXRpbC9sb2FkZXIuanMnKTtcbmZhYnJpYy51dGlsLnN5bnRheCA9IHJlcXVpcmUoXCIuL3V0aWwvc3ludGF4XCIpO1xuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMudXRpbC5vYmplY3QscmVxdWlyZSgnLi91dGlsL29iamVjdC5qcycpKTtcbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLnV0aWwscmVxdWlyZSgnLi91dGlsL3V0aWwuanMnKSk7XG5cbnJlcXVpcmUoJy4vbW9kdWxlcycpO1xuXG5cbmlmKCFmYWJyaWMuaXNMaWtlbHlOb2RlKXtcbiAgLyoqXG4gICAqIGlubGluZSBzY3JpcHQgaW1hZ2VzXG4gICAqIEB0eXBlIHt7ZXJyb3I6IHN0cmluZ319XG4gICAqL1xuICBmYWJyaWMubWVkaWEgPSB7XG4gICAgLyoqXG4gICAgICogcmVwbGFjZSBpbWFnZXMgbG9hZGVkIHdpdGggZXJyb3JzXG4gICAgICovXG4gICAgZXJyb3I6ICdkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCcgKyByZXF1aXJlKCdiYXNlNjQtbG9hZGVyIS4vbWVkaWEvZXJyb3ItYnV0dG9uLnN2ZycpXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzICA9IGZhYnJpYztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZmllcmEuanNcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuXG5mYWJyaWMuUmVtb3ZlV2hpdGVEUCA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLlJlbW92ZVdoaXRlRFAgPSAgZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlcix7XG4gICAgdHlwZTogJ1JlbW92ZVdoaXRlRFAnLFxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgaWYob3B0aW9ucylkZWxldGUgb3B0aW9ucy50eXBlO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBmYWJyaWMudXRpbC5vYmplY3QuZGVmYXVsdHMob3B0aW9ucyB8fCB7fSx7XG4gICAgICAgICAgICAgICAgZnJvbUNvcm5lcnMgOiB0cnVlLFxuICAgICAgICAgICAgICAgIGJsdXJSYWRpdXM6IDIsXG4gICAgICAgICAgICAgICAgY29sb3JUaHJlc2hvbGQ6IDMyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wYXRoZmluZGVyID0gbmV3IGZhYnJpYy5QYXRoZmluZGVyKHRoaXMub3B0aW9ucyk7XG4gICAgfSxcbiAgICBhcHBseVRvOiBmdW5jdGlvbihjYW52YXNFbCkge1xuXG4gICAgICAgIHZhciBwYXRoZmluZGVyID0gdGhpcy5wYXRoZmluZGVyO1xuXG4gICAgICAgIHBhdGhmaW5kZXIuY29sb3JUaHJlc2hvbGQgPSB0aGlzLm9wdGlvbnMuY29sb3JUaHJlc2hvbGQ7XG4gICAgICAgIHBhdGhmaW5kZXIuc2V0UGljdHVyZShjYW52YXNFbCk7XG4gICAgICAgIHBhdGhmaW5kZXIuc2VsZWN0QmFja2dyb3VuZCh0aGlzLm9wdGlvbnMuZnJvbUNvcm5lcnMpO1xuICAgICAgICBpZihwYXRoZmluZGVyLm1hc2suY291bnQgKSB7XG4gICAgICAgICAgcGF0aGZpbmRlci5fZmlsbChbMCwgMCwgMCwgMF0pO1xuICAgICAgICAgIHBhdGhmaW5kZXIubWFzayA9IGZhYnJpYy5NYWdpY1dhbmQuaW52ZXJ0TWFzayhwYXRoZmluZGVyLm1hc2spO1xuICAgICAgICAgIC8vdG9kbyBpbnZlcnRpbmcgbWFza1xuXG4gICAgICAgICAgaWYocGF0aGZpbmRlci5tYXNrLmNvdW50KXtcbiAgICAgICAgICAgIHZhciBfd2lkdGggPSBwYXRoZmluZGVyLm1hc2suYm91bmRzLm1heFggLSBwYXRoZmluZGVyLm1hc2suYm91bmRzLm1pblggKyAxO1xuICAgICAgICAgICAgdmFyIF9oZWlnaHQgPSBwYXRoZmluZGVyLm1hc2suYm91bmRzLm1heFkgLSBwYXRoZmluZGVyLm1hc2suYm91bmRzLm1pblkgKyAxO1xuICAgICAgICAgICAgdmFyIGN0eCA9IGNhbnZhc0VsLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgICAgICB2YXIgaW1hZ2VEYXRhID0gcGF0aGZpbmRlci5lZGl0ZWRJbWFnZUNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmdldEltYWdlRGF0YShwYXRoZmluZGVyLm1hc2suYm91bmRzLm1pblgsIHBhdGhmaW5kZXIubWFzay5ib3VuZHMubWluWSwgX3dpZHRoLCBfaGVpZ2h0KTtcbiAgICAgICAgICAgIGNhbnZhc0VsLndpZHRoICA9IF93aWR0aDtcbiAgICAgICAgICAgIGNhbnZhc0VsLmhlaWdodCA9IF9oZWlnaHQ7XG4gICAgICAgICAgICBjdHgucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG4gICAgICAgICAgICB0aGlzLmJvdW5kcyA9IHBhdGhmaW5kZXIubWFzay5ib3VuZHM7XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB2YXIgY3R4ID0gY2FudmFzRWwuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIGNhbnZhc0VsLndpZHRoICA9IDE7XG4gICAgICAgICAgICBjYW52YXNFbC5oZWlnaHQgPSAxO1xuICAgICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLDAsMSwxKTtcbiAgICAgICAgICAgIHRoaXMuYm91bmRzID0ge1xuICAgICAgICAgICAgICBtYXhYOiAwLFxuICAgICAgICAgICAgICBtYXhZOiAwLFxuICAgICAgICAgICAgICBtaW5YOiAwLFxuICAgICAgICAgICAgICBtaW5ZOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICAvL2NsaXAgdGhlIGltYWdlXG4gICAgICAgIHBhdGhmaW5kZXIuY2xlYXJNZW1vcnkoKTtcblxuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCh0aGlzLmNhbGxTdXBlcigndG9PYmplY3QnKSwgdGhpcy5vcHRpb25zKTtcbiAgICB9XG59KTtcblxuZmFicmljLkltYWdlLmZpbHRlcnMuUmVtb3ZlV2hpdGVEUC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5SZW1vdmVXaGl0ZURQKG9iamVjdCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9maWx0ZXJzL3JlbW92ZVdoaXRlLmpzXG4vLyBtb2R1bGUgaWQgPSA0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbmZhYnJpYy5DYWNoZU1peGluID0ge1xuICBjYWNoaW5nOiB0cnVlLFxuICBkaXJ0eTogdHJ1ZSxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoIGN0eCkge1xuXG4gICAgY3R4LnNhdmUoKTtcbiAgICBpZiAodGhpcy50cmFuc2Zvcm1NYXRyaXgpIHtcbiAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCB0aGlzLnRyYW5zZm9ybU1hdHJpeCk7XG4gICAgfVxuICAgIHRoaXMudHJhbnNmb3JtKGN0eCk7XG5cbiAgICB0aGlzLl9zZXRTaGFkb3coY3R4KTtcbiAgICB0aGlzLmNsaXBUbyAmJiBmYWJyaWMudXRpbC5jbGlwQ29udGV4dCh0aGlzLCBjdHgpO1xuXG4gICAgY3R4LnRyYW5zbGF0ZSgtdGhpcy53aWR0aCAvIDIsIC10aGlzLmhlaWdodCAvIDIpO1xuXG4gICAgaWYgKHRoaXMuY2FjaGluZykge1xuICAgICAgaWYoIXRoaXMuX2NhY2hlKXtcbiAgICAgICAgdGhpcy5fY2FjaGUgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50V2l0aFNpemUodGhpcyk7XG4gICAgICB9XG4gICAgICBpZih0aGlzLmRpcnR5KXtcbiAgICAgICAgdGhpcy5fY2FjaGUud2lkdGggPSB0aGlzLndpZHRoO1xuICAgICAgICB0aGlzLl9jYWNoZS5oZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICAgICAgdmFyIGNhY2hlQ3R4ID0gdGhpcy5fY2FjaGUuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBjYWNoZUN0eC5jbGVhclJlY3QoMCwwLHRoaXMuX2NhY2hlLndpZHRoLHRoaXMuX2NhY2hlLmhlaWdodClcbiAgICAgICAgdGhpcy5fcmVuZGVyKGNhY2hlQ3R4KTtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBjdHguZHJhd0ltYWdlKHRoaXMuX2NhY2hlLCAwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLl9yZW5kZXIoY3R4KTtcbiAgICB9XG5cbiAgICB0aGlzLmNsaXBUbyAmJiBjdHgucmVzdG9yZSgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cblxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbWl4aW5zL0NhY2hlTWl4aW4uanNcbi8vIG1vZHVsZSBpZCA9IDQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImZhYnJpYy5TdHJva2VNaXhpbiA9IHtcbiAgc2hhcGU6IHtcbiAgICBzdHJva2VXaWR0aEZ1bGw6IDAsXG4gICAgc3Ryb2tlV2lkdGhFbXB0eTogMixcbiAgICBzdHJva2VXaWR0aEFjdGl2ZTogMixcbiAgICBzdHJva2VEYXNoQXJyYXkgOiBbNSw1XSxcbiAgICBmaWxsOiBcInRyYW5zcGFyZW50XCIsXG4gICAgc3Ryb2tlRW1wdHk6ICBcInJlZFwiLFxuICAgIHN0cm9rZUZ1bGw6ICAgXCJyZWRcIixcbiAgICBzdHJva2VBY3RpdmU6IFwiZ3JlZW5cIlxuICB9LFxuICBzZXRTaGFwZTogZnVuY3Rpb24oZWwsY2Ipe1xuXG4gICAgZWwgPSAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCh7XG4gICAgICBzdHJva2VXaWR0aEZ1bGw6IHRoaXMuc2hhcGUuc3Ryb2tlV2lkdGhGdWxsLFxuICAgICAgc3Ryb2tlV2lkdGhFbXB0eTogdGhpcy5zaGFwZS5zdHJva2VXaWR0aEVtcHR5LFxuICAgICAgc3Ryb2tlV2lkdGhBY3RpdmU6IHRoaXMuc2hhcGUuc3Ryb2tlV2lkdGhBY3RpdmUsXG4gICAgICBkYXNoQXJyYXkgOiB0aGlzLnNoYXBlLmRhc2hBcnJheSxcbiAgICAgIHN0cm9rZUVtcHR5OiAgdGhpcy5zaGFwZS5zdHJva2VFbXB0eSxcbiAgICAgIHN0cm9rZUZ1bGw6ICB0aGlzLnNoYXBlLnN0cm9rZUZ1bGwsXG4gICAgICBzdHJva2VBY3RpdmU6dGhpcy5zaGFwZS5zdHJva2VBY3RpdmVcbiAgICB9LGVsKTtcblxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBpZihlbCAmJiBlbC5zcmMgJiYgIWVsLnBhdGhzKXtcbiAgICAgIGZhYnJpYy5sb2FkU1ZHRnJvbVVSTChlbC5zcmMsZnVuY3Rpb24ocGF0aHMsb3B0aW9ucykge1xuICAgICAgICBlbC5wYXRocyAgPSBwYXRocztcbiAgICAgICAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChlbCxvcHRpb25zKTtcbiAgICAgICAgX3RoaXMuX3NldF9zaGFwZShlbCk7XG4gICAgICAgIF90aGlzLmFkZChfdGhpcy5fZmFicmljX3NoYXBlKVxuICAgICAgICBfdGhpcy5fYXBwbHlfc2hhcGUoKTtcbiAgICAgICAgY2IgJiYgY2IoKTtcbiAgICAgIH0pXG4gICAgfWVsc2V7XG4gICAgICBfdGhpcy5fc2V0X3NoYXBlKGVsKTtcbiAgICAgIF90aGlzLmFkZChfdGhpcy5fZmFicmljX3NoYXBlKTtcbiAgICAgIF90aGlzLl9hcHBseV9zaGFwZSgpO1xuICAgICAgY2IgJiYgY2IoKTtcbiAgICB9XG4gIH0sXG4gIGluaXRTaGFwZTogZnVuY3Rpb24ob3B0aW9ucyl7XG5cbiAgICB2YXIgX3NoYXBlT3B0aW9ucyA9IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQob3B0aW9ucy5zaGFwZSB8fCB7fSAsIHRoaXMuc2hhcGUpO1xuXG4gICAgdGhpcy5fZmFicmljX3NoYXBlID0gIG5ldyBmYWJyaWMuUmVjdChmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKHt9LF9zaGFwZU9wdGlvbnMse1xuICAgICAgd2lkdGg6ICAgICAgICAgICAgb3B0aW9ucy53aWR0aCxcbiAgICAgIGhlaWdodDogICAgICAgICAgIG9wdGlvbnMuaGVpZ2h0LFxuICAgICAgc3Ryb2tlOiAgICAgICAgICAgX3NoYXBlT3B0aW9ucy5zdHJva2VFbXB0eSxcbiAgICAgIHN0cm9rZVdpZHRoOiAgICAgIF9zaGFwZU9wdGlvbnMuc3Ryb2tlV2lkdGhFbXB0eVxuICAgIH0pKTtcbiAgfSxcblxuICAvKipcbiAgICog77+977+977+977+977+977+977+977+977+977+977+977+977+977+9IO+/ve+/ve+/ve+/ve+/vSDvv73vv70g77+977+977+977+977+977+977+9IO+/ve+/ve+/ve+/ve+/ve+/ve+/vSDvv73vv73vv73vv71cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hcHBseV9zaGFwZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzaGFwZSA9IHRoaXMuc2hhcGU7XG5cbiAgICB2YXIgX29mZiA9IHNoYXBlICYmIHNoYXBlLm9mZnNldHM7XG5cbiAgICBpZiAoIV9vZmYpIHtcbiAgICAgIF9vZmYgPSBbMCwgMCwgMCwgMF07XG4gICAgfVxuXG4gICAgdmFyIF9vZmZfdW5pdHMgPSBzaGFwZSAmJiBzaGFwZS5vZmZzZXRzX3VuaXRzO1xuXG4gICAgaWYgKCFfb2ZmX3VuaXRzKSB7XG4gICAgICAvL2lmIChmcmFtZS5ib3JkZXJfaW1hZ2UpIHt0b2RvXG4gICAgICAvLyAgICBfb2ZmX3VuaXRzID0gZnJhbWUuYm9yZGVyX2ltYWdlLndpZHRoX3VuaXRzIHx8IFswLCAwLCAwLCAwXTtcbiAgICAgIC8vfSBlbHNlIHtcbiAgICAgIF9vZmZfdW5pdHMgPSBbMSwgMSwgMSwgMV07XG4gICAgICAvL31cbiAgICB9XG5cbiAgICAvKmVsc2UgaWYoc2hhcGUub2Zmc2V0cyAmJiBzaGFwZS5vZmZzZXRzX3VuaXRzKXtcbiAgICAgdmFyIHMgPSB0aGlzLnNsaWRlLnNjYWxlVmFsdWU7XG4gICAgIHRoaXMuX2ZhYnJpY19zaGFwZSA9IG5ldyBmYWJyaWMuUmVjdCh7XG4gICAgIG9yaWdpblg6ICdjZW50ZXInLFxuICAgICBvcmlnaW5ZOiAnY2VudGVyJyxcbiAgICAgd2lkdGg6ICAodGhpcy5kYXRhLmdlb21ldHJ5LndpZHRoIC0gc2hhcGUub2Zmc2V0c1szXSAtIHNoYXBlLm9mZnNldHNbMV0pICogcyxcbiAgICAgaGVpZ2h0OiAodGhpcy5kYXRhLmdlb21ldHJ5LmhlaWdodCAtc2hhcGUub2Zmc2V0c1swXSAtIHNoYXBlLm9mZnNldHNbMl0pICogc1xuICAgICB9KTsqL1xuXG4gICAgX29mZiA9IHtcbiAgICAgIHRvcDogICBfb2ZmWzBdICogKF9vZmZfdW5pdHNbMF0gPyB0aGlzLmhlaWdodCAvIDEwMCA6IDEpIHx8IDAsXG4gICAgICByaWdodDogX29mZlsxXSAqIChfb2ZmX3VuaXRzWzFdID8gdGhpcy53aWR0aCAvIDEwMCA6IDEpIHx8IDAsXG4gICAgICBib3R0b206X29mZlsyXSAqIChfb2ZmX3VuaXRzWzJdID8gdGhpcy5oZWlnaHQgLyAxMDAgOiAxKSB8fCAwLFxuICAgICAgbGVmdDogIF9vZmZbM10gKiAoX29mZl91bml0c1szXSA/IHRoaXMud2lkdGggLyAxMDAgOiAxKSB8fCAwXG4gICAgfTtcblxuXG4gICAgdmFyIF93ID0gKHRoaXMud2lkdGggLSBfb2ZmLmxlZnQgLSBfb2ZmLnJpZ2h0ICk7Ly8gKnRoaXMuc2xpZGUuc2NhbGVWYWx1ZTtcbiAgICB2YXIgX2ggPSAodGhpcy5oZWlnaHQgLSBfb2ZmLnRvcCAtIF9vZmYuYm90dG9tKTsvLyAqdGhpcy5zbGlkZS5zY2FsZVZhbHVlO1xuXG5cbiAgICAvL2lmKHRoaXMucmVzb3VyY2VzLmZyYW1lLmRhdGEuc2hhcGUgJiYgdGhpcy5yZXNvdXJjZXMuZnJhbWUuZGF0YS5zaGFwZS5yYWRpdXMpe1xuICAgIC8vXG4gICAgLy8gICAgdGhpcy5fZmFicmljX3NoYXBlLnNldCh7XG4gICAgLy8gICAgICAgIGxlZnQ6IC10aGlzLndpZHRoLzIgICsgX29mZi5sZWZ0ICxcbiAgICAvLyAgICAgICAgdG9wOiAgLXRoaXMuaGVpZ2h0LzIgKyBfb2ZmLnRvcCAsXG4gICAgLy8gICAgICAgIHdpZHRoOiBfdyAtIF9vZmYubGVmdCAtX29mZi5yaWdodCxcbiAgICAvLyAgICAgICAgaGVpZ2h0OiAgX2ggLSBfb2ZmLnRvcCAtX29mZi5ib3R0b20sXG4gICAgLy8gICAgICAgIHNjYWxlWDogIDEsXG4gICAgLy8gICAgICAgIHNjYWxlWTogIDFcbiAgICAvLyAgICB9KTtcbiAgICAvL31lbHNle1xuXG5cbiAgICBpZih0aGlzLnNoYXBlLnBhdGggfHwgdGhpcy5zaGFwZS5wYXRocyB8fCB0aGlzLnNoYXBlLm9mZnNldHMpe1xuICAgICAgdmFyIF9zdyA9IHRoaXMuc2hhcGUud2lkdGggfHwgdGhpcy5fZmFicmljX3NoYXBlLndpZHRoO1xuICAgICAgdmFyIF9zaCA9IHRoaXMuc2hhcGUuaGVpZ2h0IHx8IHRoaXMuX2ZhYnJpY19zaGFwZS5oZWlnaHQ7XG5cbiAgICAgIGlmKHRoaXMuX2ZhYnJpY19zaGFwZS5zdHJva2VXaWR0aCl7XG4gICAgICAgIF9zdyArPSB0aGlzLl9mYWJyaWNfc2hhcGUuc3Ryb2tlV2lkdGggO1xuICAgICAgICBfc2ggKz0gdGhpcy5fZmFicmljX3NoYXBlLnN0cm9rZVdpZHRoIDtcbiAgICAgIH1cblxuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIGxlZnQ6ICAgLXRoaXMud2lkdGggLyAyICsgX29mZi5sZWZ0LFxuICAgICAgICB0b3A6ICAgIC10aGlzLmhlaWdodCAvIDIgKyBfb2ZmLnRvcCxcbiAgICAgICAgc2NhbGVYOiBfdyAvIDEwMCAvIChfc3cgLyAxMDApLC8vICogKHNoYXBlLnNjYWxlWCB8fCAxKSxcbiAgICAgICAgc2NhbGVZOiBfaCAvIDEwMCAvIChfc2ggLyAxMDApLC8vICogKHNoYXBlLnNjYWxlWSB8fCAxKVxuICAgICAgICBhbmdsZTogMFxuICAgICAgfTtcbiAgICB9ZWxzZXtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBsZWZ0OiAgIC10aGlzLndpZHRoIC8gMiArIF9vZmYubGVmdCxcbiAgICAgICAgdG9wOiAgICAtdGhpcy5oZWlnaHQgLyAyICsgX29mZi50b3AsXG4gICAgICAgIHdpZHRoOiAgICBfdywvLyAqIChzaGFwZS5zY2FsZVggfHwgMSksXG4gICAgICAgIGhlaWdodDogICBfaCwvLyAqIChzaGFwZS5zY2FsZVkgfHwgMSlcbiAgICAgICAgYW5nbGU6IDBcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhpcy5fZmFicmljX3NoYXBlLnNldChvcHRpb25zKTtcblxuICAgIHRoaXMudXBkYXRlU3Ryb2tlKCk7XG4gICAgdGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMucmVuZGVyQWxsKCk7XG4gIH0sXG4gIF9zZXRfc2hhcGU6IGZ1bmN0aW9uIChzaGFwZSkge1xuXG4gICAgaWYodGhpcy5fZmFicmljX3NoYXBlKXtcbiAgICAgIHRoaXMucmVtb3ZlKHRoaXMuX2ZhYnJpY19zaGFwZSk7XG4gICAgICBkZWxldGUgdGhpcy5fZmFicmljX3NoYXBlO1xuICAgIH1cbiAgICB2YXIgX2ZhYnJpY19zaGFwZTtcbiAgICB2YXIgX29wdGlvbnMgPSB7XG4gICAgICBmaWxsOiAgICAgICAgICAgICBcInRyYW5zcGFyZW50XCIsXG4gICAgICBzdHJva2VEYXNoQXJyYXkgOiB0aGlzLnNoYXBlLmRhc2hBcnJheSxcbiAgICB9O1xuXG4gICAgdGhpcy5zaGFwZSA9IHNoYXBlO1xuXG4gICAgaWYoIXNoYXBlKXtcbiAgICAgIF9mYWJyaWNfc2hhcGUgPSBuZXcgZmFicmljLlJlY3Qoe1xuICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodFxuICAgICAgfSk7XG4gICAgICBfZmFicmljX3NoYXBlLnNldChfb3B0aW9ucylcbiAgICB9ZWxzZSBpZiAoc2hhcGUucGF0aHMpIHtcblxuICAgICAgZm9yKHZhciBpIGluIHNoYXBlLnBhdGhzKXtcbiAgICAgICAgc2hhcGUucGF0aHNbaV0uc2V0KF9vcHRpb25zKVxuICAgICAgfVxuXG4gICAgICBfZmFicmljX3NoYXBlID0gZmFicmljLnV0aWwuZ3JvdXBTVkdFbGVtZW50cyhzaGFwZS5wYXRocywgc2hhcGUpO1xuICAgICAgLy90aGlzLl9vYmplY3RzLnVuc2hpZnQodGhpcy5fb2JqZWN0cy5wb3AoKSk7XG4gICAgfWVsc2Uge1xuICAgICAgdmFyIHBhdGg7XG5cbiAgICAgIGlmIChzaGFwZS5yYWRpdXMpIHtcbiAgICAgICAgcGF0aCA9IGZhYnJpYy51dGlsLmdldFJhZGl1c0NsaXBQYXRoKHNoYXBlLnJhZGl1cywgc2hhcGUucmFkaXVzX3VuaXRzLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIF9mYWJyaWNfc2hhcGUgPSBuZXcgZmFicmljLlBhdGgocGF0aCwgX29wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChzaGFwZS5wYXRoKSB7XG4gICAgICAgIF9mYWJyaWNfc2hhcGUgPSBuZXcgZmFicmljLlBhdGgoc2hhcGUucGF0aCwgX29wdGlvbnMpO1xuICAgICAgICAvL30gZWxzZSBpZihzaGFwZS5vZmZzZXRzKXtcbiAgICAgICAgLy8gIHBhdGggPSBmYWJyaWMudXRpbC5nZXRPZmZzZXRzQ2xpcFBhdGgoc2hhcGUub2Zmc2V0cywgc2hhcGUub2Zmc2V0c191bml0cylcbiAgICAgIH1lbHNle1xuICAgICAgICBwYXRoID0gICdNIDAgMCBMIHt3aWR0aH0gMCBMIHt3aWR0aH0ge2hlaWdodH0gTCAwIHtoZWlnaHR9IHonLmZvcm1hdChmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICB3aWR0aDogICAgICAgICAgICAxMDAsXG4gICAgICAgICAgaGVpZ2h0OiAgICAgICAgICAgMTAwXG4gICAgICAgIH0sc2hhcGUpKTtcblxuICAgICAgICBfZmFicmljX3NoYXBlID0gbmV3IGZhYnJpYy5QYXRoKHBhdGgsIF9vcHRpb25zKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy9fZmFicmljX3NoYXBlID0gIG5ldyBmYWJyaWMuUmVjdChmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgLy8gIHdpZHRoOiAgICAgICAgICAgIDEwMCxcbiAgICAgICAgLy8gIGhlaWdodDogICAgICAgICAgIDEwMFxuICAgICAgICAvL30sc2hhcGUpKTtcblxuICAgICAgfVxuICAgIH1cblxuXG4gICAgX2ZhYnJpY19zaGFwZS5zZXQoe1xuICAgICAgc2NhbGVYOiB0aGlzLndpZHRoICAvIF9mYWJyaWNfc2hhcGUud2lkdGgsXG4gICAgICBzY2FsZVk6IHRoaXMuaGVpZ2h0IC8gX2ZhYnJpY19zaGFwZS5oZWlnaHQsXG4gICAgICBwZXJQaXhlbFRhcmdldEZpbmQ6IHRydWUsXG4gICAgICBzZWxlY3RhYmxlOiBmYWxzZSxcbiAgICAgIG9yaWdpblg6IFwibGVmdFwiLFxuICAgICAgb3JpZ2luWTogXCJ0b3BcIlxuICAgIH0pO1xuXG5cblxuICAgIHRoaXMuX2ZhYnJpY19zaGFwZSA9ICBfZmFicmljX3NoYXBlO1xuXG5cbiAgICBpZih0aGlzLmVsZW1lbnQpe1xuICAgICAgdGhpcy5lbGVtZW50LmNsaXBUbyA9IHRoaXMuX2ZhYnJpY19zaGFwZTtcbiAgICB9XG5cblxuICAgIHRoaXMudXBkYXRlU3Ryb2tlKCk7XG5cbiAgfSxcblxuICB1cGRhdGVTdHJva2U6IGZ1bmN0aW9uKCl7XG5cbiAgICB2YXIgX3N0cm9rZSA9IHRoaXMuc2hhcGUuc3Ryb2tlO1xuICAgIHZhciBfc3cgPSAwO1xuICAgIGlmKCh0aGlzLl9hY3RpdmF0ZWQgfHwgdGhpcy5fY2xpcG1vZGUgKSYmIHRoaXMuc2hhcGUuc3Ryb2tlV2lkdGhBY3RpdmUpe1xuICAgICAgX3N3ID0gdGhpcy5zaGFwZS5zdHJva2VXaWR0aEFjdGl2ZVxuICAgIH1lbHNlIGlmKHRoaXMuZWxlbWVudCAmJiB0aGlzLnNoYXBlLnN0cm9rZVdpZHRoRnVsbCl7XG4gICAgICBfc3cgPSB0aGlzLnNoYXBlLnN0cm9rZVdpZHRoRnVsbDtcbiAgICB9ZWxzZSBpZighdGhpcy5lbGVtZW50ICYmIHRoaXMuc2hhcGUuc3Ryb2tlV2lkdGhFbXB0eSl7XG4gICAgICBfc3cgPSB0aGlzLnNoYXBlLnN0cm9rZVdpZHRoRW1wdHk7XG4gICAgfVxuICAgIGlmKCh0aGlzLl9hY3RpdmF0ZWQgfHwgdGhpcy5fY2xpcG1vZGUpICYmIHRoaXMuc2hhcGUuc3Ryb2tlQWN0aXZlKXtcbiAgICAgIF9zdHJva2UgPSB0aGlzLnNoYXBlLnN0cm9rZUFjdGl2ZVxuICAgIH1lbHNlIGlmKHRoaXMuZWxlbWVudCAmJiB0aGlzLnNoYXBlLnN0cm9rZUZ1bGwpe1xuICAgICAgX3N0cm9rZSA9IHRoaXMuc2hhcGUuc3Ryb2tlRnVsbDtcbiAgICB9ZWxzZSBpZighdGhpcy5lbGVtZW50ICYmIHRoaXMuc2hhcGUuc3Ryb2tlRW1wdHkpe1xuICAgICAgX3N0cm9rZSA9IHRoaXMuc2hhcGUuc3Ryb2tlRW1wdHk7XG4gICAgfVxuXG5cbiAgICB2YXIgX3N0cm9rZVdpZHRoID0gX3N3IC8gTWF0aC5tYXgodGhpcy5fZmFicmljX3NoYXBlLnNjYWxlWCx0aGlzLl9mYWJyaWNfc2hhcGUuc2NhbGVZKTtcblxuICAgIGlmKHRoaXMuc2hhcGUpe1xuICAgICAgaWYodGhpcy5zaGFwZS5wYXRocyApe1xuICAgICAgICBmb3IodmFyIGkgaW4gdGhpcy5fZmFicmljX3NoYXBlLnBhdGhzKXtcbiAgICAgICAgICB0aGlzLl9mYWJyaWNfc2hhcGUucGF0aHNbaV0uc2V0U3Ryb2tlV2lkdGgoX3N0cm9rZVdpZHRoKVxuICAgICAgICAgIHRoaXMuX2ZhYnJpY19zaGFwZS5wYXRoc1tpXS5zZXRTdHJva2UoX3N0cm9rZSlcbiAgICAgICAgfVxuICAgICAgfWVsc2V7XG4gICAgICAgIHRoaXMuX2ZhYnJpY19zaGFwZS5zZXRTdHJva2VXaWR0aChfc3Ryb2tlV2lkdGgpXG4gICAgICAgIHRoaXMuX2ZhYnJpY19zaGFwZS5zZXRTdHJva2UoX3N0cm9rZSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIC8qKlxuICAgKiDQutC+0LHRitC10LrRgiDQs9C+0YLQvtCy0LjRgtGB0Y8g0Log0LfQsNC80LXQvdGDINGE0L7RgtC+XG4gICAqL1xuICBhY3RpdmF0ZTogZnVuY3Rpb24oKXtcbiAgICB0aGlzLl9hY3RpdmF0ZWQgPSB0cnVlO1xuICAgIHRoaXMuX2ZhYnJpY19zaGFwZS5zZXRPcGFjaXR5KDEpO1xuICAgIHRoaXMudXBkYXRlU3Ryb2tlKCk7XG4gICAgdGhpcy5jYW52YXMucmVuZGVyQWxsKCk7XG4gIH0sXG4gIC8qKlxuICAgKiDQutC+0LHRitC10LrRgiDQvdC1INCz0L7RgtC+0LLQuNGC0YHRjyDQuiDQt9Cw0LzQtdC90YMg0YTQvtGC0L5cbiAgICovXG4gIGRlYWN0aXZhdGU6IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5fYWN0aXZhdGVkID0gZmFsc2U7XG4gICAgdGhpcy51cGRhdGVTdHJva2UoKTtcbiAgICB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgfSxcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbWl4aW5zL1N0cm9rZU1peGluLmpzXG4vLyBtb2R1bGUgaWQgPSA0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cblxuLyoqXG4gICAqIERyYXcgQ1NTMyBib3JkZXIgaW1hZ2Ugb24gY2FudmFzLlxuICAgKiBAcGFyYW0gY2FudmFzICAgIHtIVE1MQ2FudmFzRWxlbWVudH1cbiAgICogQHBhcmFtIGltZyAgICAgICB7SFRNTEltYWdlRWxlbWVudH0gYm9yZGVyLWltYWdlLXNvdXJjZSBpbWFnZVxuICAgKiBAcGFyYW0gb3B0aW9ucyAgIHtPYmplY3R9XG4gICAqICAgICAgc2xpY2Uge0FycmF5fSBib3JkZXItaW1hZ2Utc2xpY2UgdmFsdWVzXG4gICAqICAgICAgd2lkdGgge0FycmF5fSBib3JkZXItaW1hZ2Utd2lkdGggdmFsdWVzXG4gICAqICAgICAgb3V0c2V0IHtBcnJheX0gYm9yZGVyLWltYWdlLW91dHNldCB2YWx1ZXNcbiAgICogICAgICByZXBlYXQge0FycmF5fSBib3JkZXItaW1hZ2UtcmVwZWF0IHZhbHVlc1xuICAgKiBAcGFyYW0gc2l6ZSAgICAgIHtPYmplY3R9XG4gICAqL1xuICAgZmFicmljLnV0aWwuZHJhd0JvcmRlckltYWdlICA9IGZ1bmN0aW9uKGNhbnZhcywgaW1nLCBvcHRpb25zKXtcblxuXG4gICAgdmFyIG9wdGlvbnMgPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKHtcbiAgICAgIFwic2xpY2VcIjogICAgICAgIFsyNSwyNSwyNSwyNV0sXG4gICAgICBcIndpZHRoXCI6ICAgICAgICBbMjUsMjUsMjUsMjVdLFxuICAgICAgXCJmaWxsXCI6ICAgICAgICAgZmFsc2UsXG4gICAgICBcInJlcGVhdFwiOiAgICAgICBbXCJyb3VuZFwiLFwicm91bmRcIl0sXG4gICAgICBcIm91dHNldF92YWx1ZXNcIlx0OiBbMCwgMCwgMCwgMF0sXG4gICAgICBcInNsaWNlX3VuaXRzXCIgICA6IFswLCAwLCAwLCAwXSxcbiAgICAgIFwid2lkdGhfdW5pdHNcIlx0OiBbMCwgMCwgMCwgMF0sXG4gICAgICBcIm91dHNldF91bml0c1wiXHQ6IFswLCAwLCAwLCAwXSxcbiAgICAgIFwic2l6ZVwiXHRcdFx0OiBbY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0XVxuICAgIH0sb3B0aW9ucylcblxuXG4gICAgdmFyIHcgPSBpbWcud2lkdGg7XG4gICAgdmFyIGggPSBpbWcuaGVpZ2h0O1xuXG4gICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgdmFyIHNsaWNlID0gb3B0aW9ucy5zbGljZTtcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuXG4gICAgdmFyIHcyID0gb3B0aW9ucy5zaXplWzBdO1xuICAgIHZhciBoMiA9IG9wdGlvbnMuc2l6ZVsxXTtcblxuXG4gICAgaWYob3B0aW9ucy5zbGljZV91bml0c1swXSA9PSAxKXNsaWNlWzBdICo9ICBoIC8gMTAwO1xuICAgIGlmKG9wdGlvbnMuc2xpY2VfdW5pdHNbMV0gPT0gMSlzbGljZVsxXSAqPSAgdyAvIDEwMDtcbiAgICBpZihvcHRpb25zLnNsaWNlX3VuaXRzWzJdID09IDEpc2xpY2VbMl0gKj0gIGggLyAxMDA7XG4gICAgaWYob3B0aW9ucy5zbGljZV91bml0c1szXSA9PSAxKXNsaWNlWzNdICo9ICB3IC8gMTAwO1xuXG4gICAgaWYob3B0aW9ucy53aWR0aF91bml0c1swXSA9PSAxKXdpZHRoWzBdICo9IGgyIC8gMTAwO1xuICAgIGlmKG9wdGlvbnMud2lkdGhfdW5pdHNbMV0gPT0gMSl3aWR0aFsxXSAqPSB3MiAvIDEwMDtcbiAgICBpZihvcHRpb25zLndpZHRoX3VuaXRzWzJdID09IDEpd2lkdGhbMl0gKj0gaDIgLyAxMDA7XG4gICAgaWYob3B0aW9ucy53aWR0aF91bml0c1szXSA9PSAxKXdpZHRoWzNdICo9IHcyIC8gMTAwO1xuXG5cbiAgICBmdW5jdGlvbiBkcmF3U2lkZShzaWRlLHNsaWNlT2Zmc2V0LHNsaWNlV2lkdGgsIGRyYXdPZmZzZXQsZHJhd1dpZHRoKXtcbiAgICAgIHZhciBkO1xuICAgICAgaWYoc2lkZSA9PSAwKSB7XG4gICAgICAgIGQgPSBbc2xpY2VbM10gKyBzbGljZU9mZnNldCwgMCwgc2xpY2VXaWR0aCwgIHNsaWNlWzBdLFxuICAgICAgICAgIHdpZHRoWzNdICsgZHJhd09mZnNldCwgMCwgZHJhd1dpZHRoLCAgd2lkdGhbMF1dXG4gICAgICB9XG4gICAgICBpZihzaWRlID09IDIpe1xuICAgICAgICBkID0gW3NsaWNlWzNdICsgc2xpY2VPZmZzZXQsIGggLSBzbGljZVsyXSAsc2xpY2VXaWR0aCwgIHNsaWNlWzJdLFxuICAgICAgICAgIHdpZHRoWzNdICsgZHJhd09mZnNldCwgaDIgLSB3aWR0aFsyXSxkcmF3V2lkdGgsIHdpZHRoWzJdXVxuICAgICAgfVxuICAgICAgaWYoc2lkZSA9PSAxKSB7XG4gICAgICAgIGQgPSBbIHcgLSBzbGljZVsxXSwgc2xpY2VbMF0gKyBzbGljZU9mZnNldCwgIHNsaWNlWzFdLCBzbGljZVdpZHRoLFxuICAgICAgICAgIHcyIC0gd2lkdGhbMV0sIHdpZHRoWzBdICsgZHJhd09mZnNldCx3aWR0aFsxXSwgZHJhd1dpZHRoXTtcbiAgICAgIH1cbiAgICAgIGlmKHNpZGUgPT0gMykge1xuICAgICAgICBkID0gWyAwLCBzbGljZVswXSArIHNsaWNlT2Zmc2V0LCAgc2xpY2VbM10sIHNsaWNlV2lkdGgsXG4gICAgICAgICAgMCwgd2lkdGhbMF0gKyBkcmF3T2Zmc2V0LCB3aWR0aFszXSxkcmF3V2lkdGhdO1xuICAgICAgfVxuICAgICAgY3R4LmRyYXdJbWFnZShpbWcsZFswXSxkWzFdLGRbMl0sZFszXSxkWzRdLGRbNV0sZFs2XSxkWzddKVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gX2RyYXdfYm9yZGVyX3NpZGUoc2lkZSl7XG4gICAgICB2YXIgX3RvcF93aWR0aCwgX3RvcF9zbGljZSwgcmVwZWF0O1xuICAgICAgaWYoc2lkZSA9PSAwIHx8IHNpZGUgPT0gMil7XG4gICAgICAgIF90b3Bfd2lkdGggPSB3MiAtIHdpZHRoWzFdLSB3aWR0aFszXTtcbiAgICAgICAgX3RvcF9zbGljZSAgPSAgdyAtIHNsaWNlWzFdIC0gc2xpY2VbM107XG4gICAgICAgIHJlcGVhdCA9IG9wdGlvbnMucmVwZWF0WzBdO1xuICAgICAgfWVsc2V7XG4gICAgICAgIF90b3Bfd2lkdGggPSBoMiAtIHdpZHRoWzBdLSB3aWR0aFsyXTtcbiAgICAgICAgX3RvcF9zbGljZSAgPSAgaCAtIHNsaWNlWzBdIC0gc2xpY2VbMl07XG4gICAgICAgIHJlcGVhdCA9IG9wdGlvbnMucmVwZWF0WzFdO1xuICAgICAgfVxuXG5cbiAgICAgIGlmKHJlcGVhdCA9PSBcInN0cmV0Y2hcIil7XG4gICAgICAgIHJldHVybiBkcmF3U2lkZShzaWRlLCAwLCAgX3RvcF9zbGljZSAsICAwLCAgICAgX3RvcF93aWR0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBfYXNwZWN0ID0gICBzbGljZVtzaWRlXSAvIHdpZHRoW3NpZGVdO1xuICAgICAgdmFyIF9vbmVfd2lkdGggPSAgX3RvcF9zbGljZSAqICB3aWR0aFtzaWRlXSAvIHNsaWNlW3NpZGVdIDtcbiAgICAgIHZhciBjb3VudCA9IDE7XG4gICAgICB2YXIgX2xlZnQgPSAwO1xuXG4gICAgICBpZihyZXBlYXQgPT0gXCJyZXBlYXRcIil7XG5cbiAgICAgICAgdmFyIF9yZXN0ID0gX29uZV93aWR0aCAtIF90b3Bfd2lkdGggJSBfb25lX3dpZHRoIC8gMjtcbiAgICAgICAgdmFyIF9yZXN0X2FzcGVjdCAgPSBfYXNwZWN0ICogX3Jlc3Q7XG4gICAgICAgIGNvdW50ID0gIE1hdGguZmxvb3IoX3RvcF93aWR0aCAvIF9vbmVfd2lkdGgpO1xuXG5cbiAgICAgICAgaWYoX3Jlc3QgPiAwKXtcbiAgICAgICAgICBkcmF3U2lkZShzaWRlLCBfcmVzdF9hc3BlY3QgLCAgX3RvcF9zbGljZSAtIF9yZXN0X2FzcGVjdCwgIDAsICAgICBfb25lX3dpZHRoIC0gX3Jlc3QpXG4gICAgICAgIH1cblxuICAgICAgICBfbGVmdCA9ICBfb25lX3dpZHRoIC0gX3Jlc3Q7XG5cbiAgICAgICAgZm9yKHZhciBpID0gMCA7IGk8IGNvdW50O2kgKyspe1xuICAgICAgICAgIGRyYXdTaWRlKCBzaWRlLDAsICAgX3RvcF9zbGljZSAsICBfbGVmdCwgICAgIF9vbmVfd2lkdGgpO1xuICAgICAgICAgIF9sZWZ0ICs9X29uZV93aWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKF9yZXN0ID4gMCl7XG4gICAgICAgICAgZHJhd1NpZGUoc2lkZSwgIDAgLCAgICBfdG9wX3NsaWNlIC0gX3Jlc3RfYXNwZWN0LCAgX2xlZnQsICAgIF9vbmVfd2lkdGggLSBfcmVzdCApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZihyZXBlYXQgPT0gXCJyb3VuZFwiKXtcblxuICAgICAgICBfbGVmdCA9IDA7XG4gICAgICAgIGNvdW50ID0gIE1hdGgubWF4KDEsTWF0aC5yb3VuZChfdG9wX3dpZHRoIC8gX29uZV93aWR0aCkpO1xuICAgICAgICBfb25lX3dpZHRoID0gX3RvcF93aWR0aCAvIGNvdW50O1xuXG4gICAgICAgIHdoaWxlKF9sZWZ0IDwgX3RvcF93aWR0aCl7XG4gICAgICAgICAgZHJhd1NpZGUoc2lkZSwwLCAgICAgX3RvcF9zbGljZSAsICBfbGVmdCwgICAgIF9vbmVfd2lkdGggKTtcbiAgICAgICAgICBfbGVmdCArPV9vbmVfd2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBfZHJhd19ib3JkZXJfc2lkZSgwKTtcbiAgICBfZHJhd19ib3JkZXJfc2lkZSgyKTtcbiAgICBfZHJhd19ib3JkZXJfc2lkZSgxKTtcbiAgICBfZHJhd19ib3JkZXJfc2lkZSgzKTtcblxuICAvL3RvcCBsZWZ0XG4gICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDAsIHNsaWNlWzNdLCBzbGljZVswXSwgMCwgMCwgd2lkdGhbM10sIHdpZHRoWzBdKTtcbiAgLy90b3AgcmlnaHRcbiAgICBjdHguZHJhd0ltYWdlKGltZywgdyAtIHNsaWNlWzFdLCAwLCBzbGljZVsxXSwgc2xpY2VbMF0sXG4gICAgICB3MiAtIHdpZHRoWzFdLCAwLCB3aWR0aFsxXSwgd2lkdGhbMF0pO1xuICAvL2JvdHRvbSBsZWZ0XG4gICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIGggLSBzbGljZVsyXSwgc2xpY2VbM10sIHNsaWNlWzJdLFxuICAgICAgMCwgaDIgLSB3aWR0aFsyXSwgd2lkdGhbM10sIHdpZHRoWzJdKTtcblxuICAvL2JvdHRvbSByaWdodFxuICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCB3IC0gc2xpY2VbMV0sIGggLSBzbGljZVsyXSwgc2xpY2VbMV0sIHNsaWNlWzJdLFxuICAgICAgdzIgLSB3aWR0aFsxXSwgaDIgLSB3aWR0aFsyXSwgd2lkdGhbMV0sIHdpZHRoWzJdKTtcblxuICB9XG5cbiAgLypcbiAgIHZhciBGcmFtZSA9IGZ1bmN0aW9uKHByb2plY3QsZGF0YSl7XG5cbiAgIGlmKGRhdGEuYm9yZGVyX2ltYWdlKXtcbiAgIGRhdGEuYm9yZGVyX2ltYWdlID0gbWl4aW4oIHtcbiAgIFwic2xpY2VcIjogICAgICAgICAgWzI1LDI1LDI1LDI1XSxcbiAgIFwid2lkdGhcIjogICAgICAgICAgWzI1LDI1LDI1LDI1XSxcbiAgIFwiZmlsbFwiOiAgICAgICAgICAgZmFsc2UsXG4gICBcInJlcGVhdFwiOiAgICAgICAgIFtcInJvdW5kXCIsXCJyb3VuZFwiXSxcbiAgIFwib3V0c2V0XCJcdDogICAgIFswLCAwLCAwLCAwXSxcbiAgIFwic2xpY2VfdW5pdHNcIiAgIDogWzAsIDAsIDAsIDBdLFxuICAgXCJ3aWR0aF91bml0c1wiXHQ6IFswLCAwLCAwLCAwXSxcbiAgIFwib3V0c2V0X3VuaXRzXCJcdDogWzAsIDAsIDAsIDBdXG4gICB9LCBkYXRhLmJvcmRlcl9pbWFnZSlcbiAgIH1cblxuXG4gICB0aGlzLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLHByb2plY3QsZGF0YSk7XG4gICB0aGlzLl9hZGRfcm9vdChcIm1hc2tcIik7XG4gICB0aGlzLl9hZGRfcm9vdChcImltYWdlXCIpO1xuICAgdGhpcy5leGFtcGxlID0gdGhpcy5fZ2V0X2V4YW1wbGUoKTtcblxuICAgfTsqL1xuICBmYWJyaWMudXRpbC5nZXRPZmZzZXRzQ2xpcFBhdGggPSBmdW5jdGlvbihvKSB7XG5cbiAgICByZXR1cm4gWydNJywgb1szXSwgb1swXSwgJ0wnLCAxMDAgLSBvWzFdLCBvWzBdLCAnTCcsIDEwMCAtIG9bMV0sIDEwMCAtIG9bMl0sICdMJywgb1szXSwgMTAwIC0gb1syXSwgJ3onXS5qb2luKFwiIFwiKTtcbiAgfTtcblxuICBmYWJyaWMudXRpbC5nZXRSYWRpdXNDbGlwUGF0aCA9IGZ1bmN0aW9uKHJhZGl1cyxyYWRpdXNfdW5pdHMsIHdpZHRoLGhlaWdodCkge1xuXG4gIHZhciBiciAgPSByYWRpdXM7XG4gIHZhciBicnUgPSByYWRpdXNfdW5pdHMgfHwgWzEsMSwxLDEsMSwxLDEsMV07XG5cblxuXG4gIHZhciBzID0ge1xuICAgIFwidG9wLWxlZnQtaFwiOiAgICAgYnJbMF0gKiAoYnJ1WzBdID8gaGVpZ2h0IC8gMTAwIDogMSksXG4gICAgXCJ0b3AtbGVmdC13XCI6ICAgICBiclsxXSAqIChicnVbMV0gPyB3aWR0aCAvIDEwMCA6IDEpLFxuICAgIFwidG9wLXJpZ2h0LWhcIjogICAgYnJbMl0gKiAoYnJ1WzJdID8gaGVpZ2h0IC8gMTAwIDogMSksXG4gICAgXCJ0b3AtcmlnaHQtd1wiOiAgICBiclszXSAqIChicnVbM10gPyB3aWR0aCAvIDEwMCA6IDEpLFxuICAgIFwiYm90dG9tLXJpZ2h0LXdcIjogYnJbNF0gKiAoYnJ1WzRdID8gd2lkdGggLyAxMDAgOiAxKSxcbiAgICBcImJvdHRvbS1yaWdodC1oXCI6IGJyWzVdICogKGJydVs1XSA/IGhlaWdodCAvIDEwMCA6IDEpLFxuICAgIFwiYm90dG9tLWxlZnQtd1wiOiAgYnJbNl0gKiAoYnJ1WzZdID8gd2lkdGggLyAxMDAgOiAxKSxcbiAgICBcImJvdHRvbS1sZWZ0LWhcIjogIGJyWzddICogKGJydVs3XSA/IGhlaWdodCAvIDEwMCA6IDEpXG4gIH07XG5cbiAgcmV0dXJuIFtcbiAgICBcIk1cIiwgMCwgc1tcInRvcC1sZWZ0LWhcIl0sXG4gICAgXCJDXCIsIDAsIHNbXCJ0b3AtbGVmdC1oXCJdLCAwLCAwLCBzW1widG9wLWxlZnQtd1wiXSwgMCxcbiAgICBcIkhcIiwgd2lkdGggLSBzW1widG9wLXJpZ2h0LXdcIl0sXG4gICAgXCJDXCIsIHdpZHRoIC0gc1tcInRvcC1yaWdodC13XCJdLCAwLCB3aWR0aCwgMCwgd2lkdGgsIHNbXCJ0b3AtcmlnaHQtaFwiXSxcbiAgICBcIlZcIiwgaGVpZ2h0IC0gc1tcImJvdHRvbS1yaWdodC1oXCJdLFxuICAgIFwiQ1wiLCB3aWR0aCwgaGVpZ2h0IC0gc1tcImJvdHRvbS1yaWdodC1oXCJdLCB3aWR0aCwgaGVpZ2h0LCB3aWR0aCAtIHNbXCJib3R0b20tcmlnaHQtd1wiXSwgaGVpZ2h0LFxuICAgIFwiSFwiLCBzW1wiYm90dG9tLWxlZnQtd1wiXSxcbiAgICBcIkNcIiwgc1tcImJvdHRvbS1sZWZ0LXdcIl0sIGhlaWdodCwgMCwgaGVpZ2h0LCAwLCBoZWlnaHQgLSBzW1wiYm90dG9tLWxlZnQtaFwiXSxcbiAgICBcIlpcIlxuICBdLmpvaW4oXCIgXCIpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbW9kdWxlcy9ib3JkZXJJbWFnZS5qc1xuLy8gbW9kdWxlIGlkID0gNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBfYmluZEV2ZW50cyA9IGZhYnJpYy5DYW52YXMucHJvdG90eXBlLl9iaW5kRXZlbnRzO1xudmFyIF9vbk1vdXNlRG93bl9vdmVyd3JpdHRlbiA9IGZhYnJpYy5DYW52YXMucHJvdG90eXBlLl9vbk1vdXNlRG93bjtcbnZhciBfb25Nb3VzZVVwX292ZXJ3cml0dGVuID0gZmFicmljLkNhbnZhcy5wcm90b3R5cGUuX29uTW91c2VVcDtcbnZhciBfaW5pdEV2ZW50TGlzdGVuZXJzX292ZXJ3cml0dGVuID0gZmFicmljLkNhbnZhcy5wcm90b3R5cGUuX2luaXRFdmVudExpc3RlbmVycztcbnZhciByZW1vdmVMaXN0ZW5lcnNfb3ZlcndyaXR0ZW4gPSBmYWJyaWMuQ2FudmFzLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcnM7XG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLkNhbnZhcy5wcm90b3R5cGUsIHtcbiAgdGFwaG9sZFRocmVzaG9sZDogMjAwMCxcbiAgX2JpbmRFdmVudHM6IGZ1bmN0aW9uICgpIHtcbiAgICBfYmluZEV2ZW50cy5jYWxsKHRoaXMpO1xuICAgIHRoaXMuX29uQ2xpY2sgPSB0aGlzLl9vbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25Eb3VibGVDbGljayA9IHRoaXMuX29uRG91YmxlQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vblRhcEhvbGQgPSB0aGlzLl9vblRhcEhvbGQuYmluZCh0aGlzKTtcbiAgfSxcblxuICBfb25Eb3VibGVDbGljazogZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0ID0gc2VsZi5maW5kVGFyZ2V0KGUpO1xuICAgIHNlbGYuZmlyZSgnbW91c2U6ZGJsY2xpY2snLCB7XG4gICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgIGU6IGVcbiAgICB9KTtcblxuICAgIGlmICh0YXJnZXQgJiYgIXNlbGYuaXNEcmF3aW5nTW9kZSkge1xuICAgICAgLy8gVG8gdW5pZnkgdGhlIGJlaGF2aW9yLCB0aGUgb2JqZWN0J3MgZG91YmxlIGNsaWNrIGV2ZW50IGRvZXMgbm90IGZpcmUgb24gZHJhd2luZyBtb2RlLlxuICAgICAgdGFyZ2V0LmZpcmUoJ2RibGNsaWNrJywge1xuICAgICAgICBlOiBlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgX29uRHJvcDogZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgX3pvb20gPSB0aGlzLmdldFpvb20oKTtcbiAgICBlLnggLz0gX3pvb207XG4gICAgZS55IC89IF96b29tO1xuICAgIGUub2Zmc2V0WCAvPSBfem9vbTtcbiAgICBlLm9mZnNldFkgLz0gX3pvb207XG4gICAgZS53aWR0aCA9IGUuaGVscGVyLndpZHRoKCkgLyBfem9vbTtcbiAgICBlLmhlaWdodCA9IGUuaGVscGVyLmhlaWdodCgpIC8gX3pvb207XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGUudGFyZ2V0ID0gc2VsZi5maW5kVGFyZ2V0KGUub3JpZ2luYWxFdmVudCk7XG5cbiAgICBzZWxmLmZpcmUoJ21vdXNlOmRyb3AnLCBlKTtcblxuICAgIGlmIChlLnRhcmdldCAmJiAhc2VsZi5pc0RyYXdpbmdNb2RlKSB7XG4gICAgICAvLyBUbyB1bmlmeSB0aGUgYmVoYXZpb3IsIHRoZSBvYmplY3QncyBkb3VibGUgY2xpY2sgZXZlbnQgZG9lcyBub3QgZmlyZSBvbiBkcmF3aW5nIG1vZGUuXG4gICAgICBlLnRhcmdldC5maXJlKCdvYmplY3Q6ZHJvcCcsIGUpO1xuICAgIH1cbiAgfSxcblxuICBfb25EcmFnTW92ZTogZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0ID0gc2VsZi5maW5kVGFyZ2V0KGUub3JpZ2luYWxFdmVudCk7XG4gICAgc2VsZi5maXJlKCdtb3VzZTpkcmFnbW92ZScsIHtcbiAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgZTogZSxcbiAgICAgIGRhdGE6IGUuZGF0YVxuICAgIH0pO1xuICAgIGlmICh0YXJnZXQgJiYgIXNlbGYuaXNEcmF3aW5nTW9kZSkge1xuICAgICAgLy8gVG8gdW5pZnkgdGhlIGJlaGF2aW9yLCB0aGUgb2JqZWN0J3MgZG91YmxlIGNsaWNrIGV2ZW50IGRvZXMgbm90IGZpcmUgb24gZHJhd2luZyBtb2RlLlxuICAgICAgdGFyZ2V0LmZpcmUoJ29iamVjdDpkcmFnbW92ZScsIHtcbiAgICAgICAgZTogZSxcbiAgICAgICAgZGF0YTogZS5kYXRhXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xhc3RfdGFyZ2V0ID09IHRhcmdldClyZXR1cm47XG4gICAgaWYgKHRoaXMuX2xhc3RfdGFyZ2V0KSB7XG4gICAgICBzZWxmLmZpcmUoJ21vdXNlOmRyYWdsZWF2ZScsIHtcbiAgICAgICAgdGFyZ2V0OiB0aGlzLl9sYXN0X3RhcmdldCxcbiAgICAgICAgZTogZSxcbiAgICAgICAgZGF0YTogZS5kYXRhXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2xhc3RfdGFyZ2V0LmZpcmUoJ29iamVjdDpkcmFnbGVhdmUnLCB7XG4gICAgICAgIGU6IGUsXG4gICAgICAgIGRhdGE6IGUuZGF0YVxuICAgICAgfSk7XG4gICAgICB0aGlzLl9sYXN0X3RhcmdldCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGFyZ2V0KSB7XG5cbiAgICAgIHNlbGYuZmlyZSgnbW91c2U6ZHJhZ2VudGVyJywge1xuICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgZTogZSxcbiAgICAgICAgZGF0YTogZS5kYXRhXG4gICAgICB9KTtcbiAgICAgIHRhcmdldC5maXJlKCdvYmplY3Q6ZHJhZ2VudGVyJywge1xuICAgICAgICBlOiBlLFxuICAgICAgICBkYXRhOiBlLmRhdGFcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9sYXN0X3RhcmdldCA9IHRhcmdldDtcbiAgICB9XG5cbiAgfSxcblxuICBfb25DbGljazogZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0ID0gc2VsZi5maW5kVGFyZ2V0KGUpO1xuICAgIHNlbGYuZmlyZSgnbW91c2U6Y2xpY2snLCB7XG4gICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgIGU6IGVcbiAgICB9KTtcblxuICAgIGlmICh0YXJnZXQgJiYgIXNlbGYuaXNEcmF3aW5nTW9kZSkge1xuICAgICAgaWYgKFxuICAgICAgICB0YXJnZXQub3JpZ2luYWxTdGF0ZS5sZWZ0ID09IHRhcmdldC5sZWZ0ICYmXG4gICAgICAgIHRhcmdldC5vcmlnaW5hbFN0YXRlLnRvcCA9PSB0YXJnZXQudG9wICYmXG4gICAgICAgIHRhcmdldC5vcmlnaW5hbFN0YXRlLnNjYWxlWCA9PSB0YXJnZXQuc2NhbGVYICYmXG4gICAgICAgIHRhcmdldC5vcmlnaW5hbFN0YXRlLnNjYWxlWSA9PSB0YXJnZXQuc2NhbGVZICYmXG4gICAgICAgIHRhcmdldC5vcmlnaW5hbFN0YXRlLmFuZ2xlID09IHRhcmdldC5hbmdsZVxuICAgICAgKSB7XG4gICAgICAgIC8vIFRvIHVuaWZ5IHRoZSBiZWhhdmlvciwgdGhlIG9iamVjdCdzIGRvdWJsZSBjbGljayBldmVudCBkb2VzIG5vdCBmaXJlIG9uIGRyYXdpbmcgbW9kZS5cbiAgICAgICAgdGFyZ2V0LmZpcmUoJ29iamVjdDpjbGljaycsIHtcbiAgICAgICAgICBlOiBlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBfb25UYXBIb2xkOiBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciB0YXJnZXQgPSBzZWxmLmZpbmRUYXJnZXQoZSk7XG4gICAgc2VsZi5maXJlKCd0b3VjaDp0YXBob2xkJywge1xuICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICBlOiBlXG4gICAgfSk7XG5cbiAgICBpZiAodGFyZ2V0ICYmICFzZWxmLmlzRHJhd2luZ01vZGUpIHtcbiAgICAgIC8vIFRvIHVuaWZ5IHRoZSBiZWhhdmlvciwgdGhlIG9iamVjdCdzIHRhcCBob2xkIGV2ZW50IGRvZXMgbm90IGZpcmUgb24gZHJhd2luZyBtb2RlLlxuICAgICAgdGFyZ2V0LmZpcmUoJ3RhcGhvbGQnLCB7XG4gICAgICAgIGU6IGVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChlLnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgc2VsZi50b3VjaFN0YXJ0VGltZXIgIT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHNlbGYudG91Y2hTdGFydFRpbWVyKTtcbiAgICB9XG4gIH0sXG5cbiAgX29uTW91c2VEb3duOiBmdW5jdGlvbiAoZSkge1xuICAgIF9vbk1vdXNlRG93bl9vdmVyd3JpdHRlbi5jYWxsKHRoaXMsIGUpO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAoZS50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIHZhciB0b3VjaFN0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5fb25UYXBIb2xkKGUpO1xuICAgICAgICBzZWxmLmlzTG9uZ1RhcCA9IHRydWU7XG4gICAgICB9LCBzZWxmLnRhcGhvbGRUaHJlc2hvbGQpO1xuICAgICAgc2VsZi50b3VjaFN0YXJ0VGltZXIgPSB0b3VjaFN0YXJ0VGltZXI7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQWRkIHJpZ2h0IGNsaWNrIHN1cHBvcnRcbiAgICBpZiAoZS53aGljaCA9PT0gMykge1xuICAgICAgdmFyIHRhcmdldCA9IHRoaXMuZmluZFRhcmdldChlKTtcbiAgICAgIHNlbGYuZmlyZSgnbW91c2U6ZG93bicsIHt0YXJnZXQ6IHRhcmdldCwgZTogZX0pO1xuICAgICAgaWYgKHRhcmdldCAmJiAhc2VsZi5pc0RyYXdpbmdNb2RlKSB7XG4gICAgICAgIC8vIFRvIHVuaWZ5IHRoZSBiZWhhdmlvciwgdGhlIG9iamVjdCdzIG1vdXNlIGRvd24gZXZlbnQgZG9lcyBub3QgZmlyZSBvbiBkcmF3aW5nIG1vZGUuXG4gICAgICAgIHRhcmdldC5maXJlKCdtb3VzZWRvd24nLCB7XG4gICAgICAgICAgZTogZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgX29uTW91c2VVcDogZnVuY3Rpb24gKGUpIHtcblxuICAgIF9vbk1vdXNlVXBfb3ZlcndyaXR0ZW4uY2FsbCh0aGlzLCBlKTtcblxuICAgIGlmIChlLnR5cGUgPT09ICd0b3VjaGVuZCcpIHtcbiAgICAgIC8vIFByb2Nlc3MgdGFwIGhvbGQuXG4gICAgICBpZiAodGhpcy50b3VjaFN0YXJ0VGltZXIgIT0gbnVsbCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50b3VjaFN0YXJ0VGltZXIpO1xuICAgICAgfVxuICAgICAgLy8gUHJvY2VzcyBsb25nIHRhcC5cbiAgICAgIGlmICh0aGlzLmlzTG9uZ1RhcCkge1xuICAgICAgICB0aGlzLl9vbkxvbmdUYXBFbmQoZSk7XG4gICAgICAgIHRoaXMuaXNMb25nVGFwID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBQcm9jZXNzIGRvdWJsZSBjbGlja1xuICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgdmFyIGxhc3RUb3VjaCA9IHRoaXMubGFzdFRvdWNoIHx8IG5vdyArIDE7XG4gICAgICB2YXIgZGVsdGEgPSBub3cgLSBsYXN0VG91Y2g7XG4gICAgICBpZiAoZGVsdGEgPCAzMDAgJiYgZGVsdGEgPiAwKSB7XG4gICAgICAgIC8vIEFmdGVyIHdlIGRldGN0IGEgZG91YmxldGFwLCBzdGFydCBvdmVyXG4gICAgICAgIHRoaXMubGFzdFRvdWNoID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9vbkRvdWJsZVRhcChlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGFzdFRvdWNoID0gbm93O1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBfb25Eb3VibGVUYXA6IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHRhcmdldCA9IHNlbGYuZmluZFRhcmdldChlKTtcbiAgICBzZWxmLmZpcmUoJ3RvdWNoOmRvdWJsZXRhcCcsIHtcbiAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgZTogZVxuICAgIH0pO1xuXG4gICAgaWYgKHRhcmdldCAmJiAhc2VsZi5pc0RyYXdpbmdNb2RlKSB7XG4gICAgICAvLyBUbyB1bmlmeSB0aGUgYmVoYXZpb3IsIHRoZSBvYmplY3QncyBkb3VibGUgdGFwIGV2ZW50IGRvZXMgbm90IGZpcmUgb24gZHJhd2luZyBtb2RlLlxuICAgICAgdGFyZ2V0LmZpcmUoJ29iamVjdDpkb3VibGV0YXAnLCB7XG4gICAgICAgIGU6IGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICBfb25Mb25nVGFwRW5kOiBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciB0YXJnZXQgPSBzZWxmLmZpbmRUYXJnZXQoZSk7XG4gICAgc2VsZi5maXJlKCd0b3VjaDpsb25ndGFwZW5kJywge1xuICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICBlOiBlXG4gICAgfSk7XG5cbiAgICBpZiAodGFyZ2V0ICYmICFzZWxmLmlzRHJhd2luZ01vZGUpIHtcbiAgICAgIC8vIFRvIHVuaWZ5IHRoZSBiZWhhdmlvciwgdGhlIG9iamVjdCdzIGxvbmcgdGFwIGVuZCBldmVudCBkb2VzIG5vdCBmaXJlIG9uIGRyYXdpbmcgbW9kZS5cbiAgICAgIHRhcmdldC5maXJlKCdvYmplY3Q6bG9uZ3RhcGVuZCcsIHtcbiAgICAgICAgZTogZVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIF9pbml0RXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgX2luaXRFdmVudExpc3RlbmVyc19vdmVyd3JpdHRlbi5jYWxsKHNlbGYpO1xuXG4gICAgZmFicmljLnV0aWwuYWRkTGlzdGVuZXIoc2VsZi51cHBlckNhbnZhc0VsLCAnY2xpY2snLCBzZWxmLl9vbkNsaWNrKTtcbiAgICBmYWJyaWMudXRpbC5hZGRMaXN0ZW5lcihzZWxmLnVwcGVyQ2FudmFzRWwsICdkYmxjbGljaycsIHNlbGYuX29uRG91YmxlQ2xpY2spO1xuXG4gICAgc2VsZi5vbignb2JqZWN0OnNjYWxpbmcnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUudGFyZ2V0ICYmIGUudGFyZ2V0Ll9zY2FsaW5nX2V2ZW50c19lbmFibGVkKSB7XG4gICAgICAgIGUudGFyZ2V0LmZpcmUoXCJzY2FsaW5nXCIsIGUuZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc2VsZi5vbignb2JqZWN0OnNlbGVjdGVkJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldCkge1xuICAgICAgICBlLnRhcmdldC5maXJlKFwib2JqZWN0OnNlbGVjdGVkXCIsIGUuZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc2VsZi5vbignbW91c2U6b3ZlcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS50YXJnZXQpIHtcbiAgICAgICAgZS50YXJnZXQuZmlyZShcIm1vdXNlOm92ZXJcIiwgZS5lKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHNlbGYub24oJ21vdXNlOm91dCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS50YXJnZXQpIHtcbiAgICAgICAgZS50YXJnZXQuZmlyZShcIm1vdXNlOm91dFwiLCBlLmUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH0sXG5cbiAgcmVtb3ZlTGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJlbW92ZUxpc3RlbmVyc19vdmVyd3JpdHRlbi5jYWxsKHNlbGYpO1xuXG5cbiAgICBmYWJyaWMudXRpbC5yZW1vdmVMaXN0ZW5lcihzZWxmLnVwcGVyQ2FudmFzRWwsICdjbGljaycsIHNlbGYuX29uQ2xpY2spO1xuICAgIGZhYnJpYy51dGlsLnJlbW92ZUxpc3RlbmVyKHNlbGYudXBwZXJDYW52YXNFbCwgJ2RibGNsaWNrJywgc2VsZi5fb25Eb3VibGVDbGljayk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9tb2R1bGVzL2NhbnZhcy5ldmVudHMuanNcbi8vIG1vZHVsZSBpZCA9IDQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMse1xuICBkZWJ1Z1RpbWVvdXQ6IDBcbn0pO1xuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5BcHBsaWNhdGlvbi5wcm90b3R5cGUsIHtcbiAgc2V0RGVidWc6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLm9uKFwicmVhZHlcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5lbmFibGVEZWJ1Z2dpbmcoKTtcbiAgICB9KVxuICB9LFxuXG4gIGVuYWJsZURlYnVnZ2luZzogZnVuY3Rpb24oKXtcbiAgICBpZihmYWJyaWMuZGVidWcpe1xuXG4gICAgICB2YXIgX29wZXJhbmQgPSBcImNvbG9yOiAjMkVDMDZDOyBmb250LXN0eWxlOiBpdGFsaWM7XCI7XG4gICAgICBjb25zb2xlLmluZm8oXCJkZWJ1ZyBlbmFibGVkLiAodXNlICVjYXBwJWMsICVjcHJvamVjdCVjLCAlY2NhbnZhcyVjLCAlY3RhcmdldCVjIGluIGNvbnNvbGUpXCIsXG4gICAgICAgIF9vcGVyYW5kLCBcImNvbG9yOiAjMjAyMDIwXCIsXG4gICAgICAgIF9vcGVyYW5kLCBcImNvbG9yOiAjMjAyMDIwXCIsXG4gICAgICAgIF9vcGVyYW5kLCBcImNvbG9yOiAjMjAyMDIwXCIsXG4gICAgICAgIF9vcGVyYW5kLCBcImNvbG9yOiAjMjAyMDIwXCIpO1xuXG4gICAgICB3aW5kb3cuYXBwID0gdGhpcztcbiAgICAgIHdpbmRvdy5jYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICAgIHdpbmRvdy5wcm9qZWN0ID0gdGhpcy5wcm9qZWN0O1xuICAgICAgd2luZG93LnRhcmdldCA9IG51bGw7XG4gICAgICB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5vbihcInRhcmdldDpjaGFuZ2VkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93LnRhcmdldCA9IHRoaXMudGFyZ2V0O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KTtcblxuZmFicmljLk9iamVjdC5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbihub0JvcmRlcnMpe1xuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgY2FudmFzLndpZHRoID0gbm9Cb3JkZXJzID90aGlzLndpZHRoOiB0aGlzLndpZHRoICsgMjtcbiAgY2FudmFzLmhlaWdodCA9IG5vQm9yZGVycyA/dGhpcy5oZWlnaHQgOiB0aGlzLmhlaWdodCArIDI7XG5cbiAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICBpZighbm9Cb3JkZXJzKXtcbiAgICBjdHgubGluZVdpZHRoPTE7XG4gICAgY3R4LnN0cm9rZVN0eWxlPVwieWVsbG93XCI7XG4gICAgY3R4LnN0cm9rZVJlY3QoMCwwLHRoaXMud2lkdGggKyAyLHRoaXMuaGVpZ2h0KyAyKTtcbiAgICBjdHguc2V0TGluZURhc2goWzQsNF0pO1xuICAgIGN0eC5zdHJva2VTdHlsZT1cIiMwMDAwMDBcIjtcbiAgICBjdHguc3Ryb2tlUmVjdCgwLDAsdGhpcy53aWR0aCArIDIsdGhpcy5oZWlnaHQrIDIpO1xuICB9XG4gIGN0eC50cmFuc2xhdGUodGhpcy53aWR0aC8yICArIDEsdGhpcy5oZWlnaHQvMiArIDEpO1xuICB2YXIgX2NsaXBUbyA9IHRoaXMuY2xpcFRvO1xuICBkZWxldGUgdGhpcy5jbGlwVG87XG4gIHRoaXMucmVuZGVyKGN0eCx0cnVlKTtcbiAgdGhpcy5jbGlwVG8gPSBfY2xpcFRvO1xuICB3aW5kb3cub3BlbihjYW52YXMudG9EYXRhVVJMKCksXCJfYmxhbmtcIik7XG59O1xuXG5cbmZhYnJpYy5BcHBsaWNhdGlvbi5wcm90b3R5cGUubG9nRXZlbnRzID0gZmFicmljLk9iamVjdC5wcm90b3R5cGUubG9nRXZlbnRzID0gZnVuY3Rpb24gZXZlbnRzTG9nZ2VyKG9wdGlvbnMpe1xuICB2YXIgX2NvdW50ZXIgPSB7fTtcbiAgZm9yKHZhciBpIGluIG9wdGlvbnMpe1xuICAgIF9jb3VudGVyW2ldID0gMDtcbiAgICB0aGlzLm9uKG9wdGlvbnNbaV0sZnVuY3Rpb24oaSwgZXZlbnQpIHtcbiAgICAgIGNvbnNvbGUubG9nKGkgKyBcIiBcIiArICsrX2NvdW50ZXJbaV0sZXZlbnQpO1xuICAgIH0uYmluZCh0aGlzLGkpKTtcbiAgfVxufTtcblxuXG5cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbW9kdWxlcy9kZWJ1Zy5qc1xuLy8gbW9kdWxlIGlkID0gNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaWYodHlwZW9mIFdlYkZvbnQgPT0gXCJ1bmRlZmluZWRcIil7XG4gIGZhYnJpYy53ZWJGb250c0xvYWRlciA9IHJlcXVpcmUoXCIuLy4uLy4uL3BsdWdpbnMvd2ViZm9udC5qc1wiKTtcbn1lbHNle1xuICBmYWJyaWMud2ViRm9udHNMb2FkZXIgPSBXZWJGb250O1xufVxuXG4vL9C40L3RgtC10YDQtdGB0L3QsNGPINCx0LjQsdC70LjQvtGC0LXQutCwXG4vLyBodHRwOi8vb3BlbnR5cGUuanMub3JnL2luZGV4Lmh0bWxcbi8vdG9kbyBhZGQgc3RlcFxuLy9cbi8vIGZhYnJpYy5BcHBsaWNhdGlvbi5wcm90b3R5cGUuc3RlcHMuc3BsaWNlKDMsMCxcImxvYWRXZWJmb250c1wiKTtcblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuQXBwbGljYXRpb24ucHJvdG90eXBlLCB7XG4gIC8vIHNldFdlYmZvbnRzOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgLy9cbiAgLy8gfSxcbiAgc2V0Rm9udHM6IGZ1bmN0aW9uIChmb250cywgY2FsbGJhY2spIHtcbiAgICB0aGlzLmZvbnRzID0gZm9udHM7XG4gICAgaWYoZmFicmljLmlzTGlrZWx5Tm9kZSl7XG4gICAgICAvL3RvZG8g0YjRgNC40YTRgtGLINC90LUg0LPRgNGD0LfRj9GC0YHRjyDQvdCwINGB0LXRgNCy0LXRgNC1XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgLy8gaWYoIWZvbnRzIHx8ICFmb250cy5sZW5ndGgpe1xuICAgIC8vICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgLy8gfVxuICAgIHRoaXMuZmlyZShcImxvYWRpbmdcIix7dHlwZTogXCJ3ZWJmb250c1wifSk7XG5cbiAgICB0aGlzLl9mb250cyA9IFtdO1xuXG4gICAgZm9yKHZhciBpIGluIHRoaXMuZm9udHMpe1xuICAgICAgdGhpcy5fZm9udHMgPSB0aGlzLl9mb250cy5jb25jYXQodGhpcy5mb250c1tpXSk7XG4gICAgfVxuICAgIHRoaXMuX2ZvbnRzID0gZmFicmljLnV0aWwub2JqZWN0LnNvcnRCeSh0aGlzLl9mb250cywgZnVuY3Rpb24oZm9udCl7IHJldHVybiBmb250OyB9KTtcblxuICAgIGlmKGZhYnJpYy53ZWJGb250c0xvYWRlciAmJiAodGhpcy5mb250cy5nb29nbGUgJiYgdGhpcy5mb250cy5nb29nbGUubGVuZ3RoIHx8IHRoaXMuZm9udHMuY3VzdG9tICYmIHRoaXMuZm9udHMuY3VzdG9tLmxlbmd0aCkgKXtcbiAgICAgIHZhciBmb250c19vcHRpb25zID0ge1xuICAgICAgICBhY3RpdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYodGhpcy5mb250cy5nb29nbGUgJiYgdGhpcy5mb250cy5nb29nbGUubGVuZ3RoKXtcbiAgICAgICAgZm9udHNfb3B0aW9ucy5nb29nbGUgPSAge1xuICAgICAgICAgIGZhbWlsaWVzOiB0aGlzLmZvbnRzLmdvb2dsZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYodGhpcy5mb250cy5jdXN0b20gJiYgdGhpcy5mb250cy5jdXN0b20ubGVuZ3RoKXtcbiAgICAgICAgZm9udHNfb3B0aW9ucy5jdXN0b20gPSAge1xuICAgICAgICAgIGZhbWlsaWVzOiB0aGlzLmZvbnRzLmN1c3RvbVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBmYWJyaWMud2ViRm9udHNMb2FkZXIubG9hZChmb250c19vcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gICAgaWYgKHRoaXMud2FpdEZvcldlYmZvbnRzKSB7XG4gICAgICBmYWJyaWMudXRpbC5mb250cy53YWl0Rm9yKHRoaXMud2FpdEZvcldlYmZvbnRzLCBjYWxsYmFjaylcbiAgICB9XG4gIH0sXG4gIGZvbnRzOiB7XG4gICAgc3RhbmRhcnQ6IFtcbiAgICAgICdBcmlhbCcsXG4gICAgICAnQXJpYWwgQmxhY2snLFxuICAgICAgJ0NvbWljIFNhbnMgTVMnLFxuICAgICAgJ0NvdXJpZXIgTmV3JyxcbiAgICAgICdHZW9yZ2lhJyxcbiAgICAgICdJbXBhY3QnLFxuICAgICAgJ0x1Y2lkYSBDb25zb2xlJyxcbiAgICAgICdUYWhvbWEnLFxuICAgICAgJ1RpbWVzIE5ldyBSb21hbicsXG4gICAgICAnR2VuZXZhJyxcbiAgICAgICdzYW5zLXNlcmlmJyxcbiAgICAgICdzZXJpZicsXG4gICAgICAnbW9ub3NwYWNlJyxcbiAgICAgICdjdXJzaXZlJ1xuICAgIF0sXG4gICAgZ29vZ2xlOiBbXSxcbiAgICBjdXN0b206IFtdXG4gIH1cbn0pO1xuXG5cbmZhYnJpYy51dGlsLmZvbnRzID0ge1xuICB3YWl0Rm9yOiBmdW5jdGlvbiAoZm9udHMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGxvYWRlZEZvbnRzID0gMDtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGZvbnRzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgKGZ1bmN0aW9uIChmb250KSB7XG4gICAgICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAvLyBDaGFyYWN0ZXJzIHRoYXQgdmFyeSBzaWduaWZpY2FudGx5IGFtb25nIGRpZmZlcmVudCBmb250c1xuICAgICAgICBub2RlLmlubmVySFRNTCA9ICdnaUl0VDFXUXlAIS0vIyc7XG4gICAgICAgIC8vIFZpc2libGUgLSBzbyB3ZSBjYW4gbWVhc3VyZSBpdCAtIGJ1dCBub3Qgb24gdGhlIHNjcmVlblxuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgbm9kZS5zdHlsZS5sZWZ0ID0gJy0xMDAwMHB4JztcbiAgICAgICAgbm9kZS5zdHlsZS50b3AgPSAnLTEwMDAwcHgnO1xuICAgICAgICAvLyBMYXJnZSBmb250IHNpemUgbWFrZXMgZXZlbiBzdWJ0bGUgY2hhbmdlcyBvYnZpb3VzXG4gICAgICAgIG5vZGUuc3R5bGUuZm9udFNpemUgPSAnMzAwcHgnO1xuICAgICAgICAvLyBSZXNldCBhbnkgZm9udCBwcm9wZXJ0aWVzXG4gICAgICAgIG5vZGUuc3R5bGUuZm9udEZhbWlseSA9ICdzYW5zLXNlcmlmJztcbiAgICAgICAgbm9kZS5zdHlsZS5mb250VmFyaWFudCA9ICdub3JtYWwnO1xuICAgICAgICBub2RlLnN0eWxlLmZvbnRTdHlsZSA9ICdub3JtYWwnO1xuICAgICAgICBub2RlLnN0eWxlLmZvbnRXZWlnaHQgPSAnbm9ybWFsJztcbiAgICAgICAgbm9kZS5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gJzAnO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5vZGUpO1xuXG4gICAgICAgIC8vIFJlbWVtYmVyIHdpZHRoIHdpdGggbm8gYXBwbGllZCB3ZWIgZm9udFxuICAgICAgICB2YXIgd2lkdGggPSBub2RlLm9mZnNldFdpZHRoO1xuXG4gICAgICAgIG5vZGUuc3R5bGUuZm9udEZhbWlseSA9IGZvbnQ7XG5cbiAgICAgICAgdmFyIGludGVydmFsO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrRm9udCgpIHtcbiAgICAgICAgICAvLyBDb21wYXJlIGN1cnJlbnQgd2lkdGggd2l0aCBvcmlnaW5hbCB3aWR0aFxuICAgICAgICAgIGlmIChub2RlICYmIG5vZGUub2Zmc2V0V2lkdGggIT0gd2lkdGgpIHtcbiAgICAgICAgICAgICsrbG9hZGVkRm9udHM7XG4gICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICBub2RlID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJZiBhbGwgZm9udHMgaGF2ZSBiZWVuIGxvYWRlZFxuICAgICAgICAgIGlmIChsb2FkZWRGb250cyA+PSBmb250cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChpbnRlcnZhbCkge1xuICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsb2FkZWRGb250cyA9PSBmb250cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgfSwgNTApXG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY2hlY2tGb250KCkpIHtcbiAgICAgICAgICBpbnRlcnZhbCA9IHNldEludGVydmFsKGNoZWNrRm9udCwgNTApO1xuICAgICAgICB9XG4gICAgICB9KShmb250c1tpXSk7XG4gICAgfVxuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9tb2R1bGVzL2ZvbnRzLmpzXG4vLyBtb2R1bGUgaWQgPSA0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cblxuZmFicmljLnV0aWwubWVkaWFSb290ID0gXCJcIjtcbmZhYnJpYy51dGlsLmFkZE5vQ2FjaGUgPSBmYWxzZTtcblxuZmFicmljLnV0aWwuX2xvYWRJbWFnZV9vdmVyd3JpdHRlbiA9IGZhYnJpYy51dGlsLmxvYWRJbWFnZTtcblxuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5BcHBsaWNhdGlvbi5wcm90b3R5cGUsIHtcbiAgb3B0aW9uc09yZGVyOiAoZnVuY3Rpb24oKXtcbiAgICB2YXIgb28gPSBmYWJyaWMuQXBwbGljYXRpb24ucHJvdG90eXBlLm9wdGlvbnNPcmRlcjtcbiAgICBvby5zcGxpY2Uob28uaW5kZXhPZihcImNhbnZhc0NvbnRhaW5lclwiKSwwLFwibWVkaWFSb290XCIpO1xuICAgIHJldHVybiBvbztcbiAgfSkoKSxcbiAgc2V0TWVkaWFSb290OiBmdW5jdGlvbiAoX21lZGlhUm9vdCkge1xuICAgIGlmIChfbWVkaWFSb290KSB7XG4gICAgICB2YXIgX2Rpcm5hbWU7XG4gICAgICBpZiAoZmFicmljLmlzTGlrZWx5Tm9kZSkge1xuICAgICAgICBfZGlybmFtZSA9IF9fZGlybmFtZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9kaXJuYW1lID0gZmFicmljLnV0aWwucGF0aC5nZXRQYXJlbnREaXJlY3RvcnlVcmwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgfVxuXG4gICAgLy8gIGlmICgoX21lZGlhUm9vdC5pbmRleE9mKFwiLi9cIikgPT0gMCkpIHtcbiAgICAvLyAgfVxuICAgICAgdmFyIF9sYXN0ID0gX21lZGlhUm9vdFtfbWVkaWFSb290Lmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKF9sYXN0ICE9IFwiL1wiICYmIF9sYXN0ICE9IFwiXFxcXFwiKSB7XG4gICAgICAgIF9tZWRpYVJvb3QgKz0gXCIvXCJcbiAgICAgIH1cbiAgICAgIF9tZWRpYVJvb3QgPSBmYWJyaWMudXRpbC5wYXRoLnJlc29sdmUoX2Rpcm5hbWUgKyBfbWVkaWFSb290KTtcbiAgICAgIGZhYnJpYy51dGlsLm1lZGlhUm9vdCA9IF9tZWRpYVJvb3Q7XG4gICAgfVxuICB9XG59KTtcblxuXG5cblxuLy8gaWYoIWZhYnJpYy5pc0xpa2VseU5vZGUpe1xuLy9cbi8vICAgdmFyIFVSTCA9IHJlcXVpcmUoJ3VybCcpLFxuLy8gICAgIEhUVFAgPSByZXF1aXJlKCdodHRwJyksXG4vLyAgICAgSFRUUFMgPSByZXF1aXJlKCdodHRwcycpLFxuLy8gICAgIEltYWdlID0gcmVxdWlyZSgnY2FudmFzJykuSW1hZ2U7XG4vL1xuLy8gICAvKiogQHByaXZhdGUgKi9cbi8vICAgdmFyIHJlcXVlc3QgPSBmdW5jdGlvbiAodXJsLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbi8vICAgICB2YXIgb1VSTCA9IFVSTC5wYXJzZSh1cmwpO1xuLy9cbi8vICAgICAvLyBkZXRlY3QgaWYgaHR0cCBvciBodHRwcyBpcyB1c2VkXG4vLyAgICAgaWYgKCAhb1VSTC5wb3J0ICkge1xuLy8gICAgICAgb1VSTC5wb3J0ID0gKCBvVVJMLnByb3RvY29sLmluZGV4T2YoJ2h0dHBzOicpID09PSAwICkgPyA0NDMgOiA4MDtcbi8vICAgICB9XG4vL1xuLy8gICAgIC8vIGFzc2lnbiByZXF1ZXN0IGhhbmRsZXIgYmFzZWQgb24gcHJvdG9jb2xcbi8vICAgICB2YXIgcmVxSGFuZGxlciA9IChvVVJMLnByb3RvY29sLmluZGV4T2YoJ2h0dHBzOicpID09PSAwICkgPyBIVFRQUyA6IEhUVFAsXG4vLyAgICAgICByZXEgPSByZXFIYW5kbGVyLnJlcXVlc3Qoe1xuLy8gICAgICAgICBob3N0bmFtZTogb1VSTC5ob3N0bmFtZSxcbi8vICAgICAgICAgcG9ydDogb1VSTC5wb3J0LFxuLy8gICAgICAgICBwYXRoOiBvVVJMLnBhdGgsXG4vLyAgICAgICAgIG1ldGhvZDogJ0dFVCdcbi8vICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4vLyAgICAgICAgIHZhciBib2R5ID0gJyc7XG4vLyAgICAgICAgIGlmIChlbmNvZGluZykge1xuLy8gICAgICAgICAgIHJlc3BvbnNlLnNldEVuY29kaW5nKGVuY29kaW5nKTtcbi8vICAgICAgICAgfVxuLy8gICAgICAgICByZXNwb25zZS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuLy8gICAgICAgICAgIGNhbGxiYWNrKGJvZHkpO1xuLy8gICAgICAgICB9KTtcbi8vICAgICAgICAgcmVzcG9uc2Uub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbi8vICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG4vLyAgICAgICAgICAgICBib2R5ICs9IGNodW5rO1xuLy8gICAgICAgICAgIH1cbi8vICAgICAgICAgfSk7XG4vLyAgICAgICB9KTtcbi8vXG4vLyAgICAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikge1xuLy8gICAgICAgaWYgKGVyci5lcnJubyA9PT0gcHJvY2Vzcy5FQ09OTlJFRlVTRUQpIHtcbi8vICAgICAgICAgZmFicmljLmxvZygnRUNPTk5SRUZVU0VEOiBjb25uZWN0aW9uIHJlZnVzZWQgdG8gJyArIG9VUkwuaG9zdG5hbWUgKyAnOicgKyBvVVJMLnBvcnQpO1xuLy8gICAgICAgfVxuLy8gICAgICAgZWxzZSB7XG4vLyAgICAgICAgIGZhYnJpYy5sb2coZXJyLm1lc3NhZ2UpO1xuLy8gICAgICAgfVxuLy8gICAgICAgY2FsbGJhY2sobnVsbCk7XG4vLyAgICAgfSk7XG4vL1xuLy8gICAgIHJlcS5lbmQoKTtcbi8vICAgfVxuLy9cbi8vICAgLyoqIEBwcml2YXRlICovXG4vLyAgIHZhciByZXF1ZXN0RnMgPSBmdW5jdGlvbiAocGF0aCwgY2FsbGJhY2spIHtcbi8vICAgICB2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuLy8gICAgIGZzLnJlYWRGaWxlKHBhdGgsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbi8vICAgICAgIGlmIChlcnIpIHtcbi8vICAgICAgICAgZmFicmljLmxvZyhlcnIpO1xuLy8gICAgICAgICB0aHJvdyBlcnI7XG4vLyAgICAgICB9XG4vLyAgICAgICBlbHNlIHtcbi8vICAgICAgICAgY2FsbGJhY2soZGF0YSk7XG4vLyAgICAgICB9XG4vLyAgICAgfSk7XG4vLyAgIH07XG4vL1xuLy8gICBmYWJyaWMudXRpbC5sb2FkSW1hZ2UgPSBmdW5jdGlvbih1cmwsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4vL1xuLy9cbi8vICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4vLyAgICAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbigpe1xuLy8gICAgICAgY29uc29sZS5sb2coXCJlcnJvclwiKTtcbi8vICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwoY29udGV4dCwgbnVsbCwgdHJ1ZSk7XG4vLyAgICAgfTtcbi8vICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24oKXtcbi8vICAgICAgIGNvbnNvbGUubG9nKFwic3VjY2Vzc1wiKTtcbi8vICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwoY29udGV4dCwgaW1nKTtcbi8vICAgICB9O1xuLy9cbi8vICAgICBmdW5jdGlvbiBjcmVhdGVJbWFnZUFuZENhbGxCYWNrKGRhdGEpIHtcbi8vICAgICAgIGlmIChkYXRhKSB7XG4vLyAgICAgICAgIGltZy5zcmMgPSBkYXRhO1xuLy8gICAgICAgICAvLyBwcmVzZXJ2aW5nIG9yaWdpbmFsIHVybCwgd2hpY2ggc2VlbXMgdG8gYmUgbG9zdCBpbiBub2RlLWNhbnZhc1xuLy8gICAgICAgICBpbWcuX3NyYyA9IHVybDtcbi8vICAgICAgIH1cbi8vICAgICAgIGVsc2Uge1xuLy8gICAgICAgICBpbWcgPSBudWxsO1xuLy8gICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjay5jYWxsKGNvbnRleHQsIG51bGwsIHRydWUpO1xuLy8gICAgICAgfVxuLy8gICAgIH1cbi8vXG4vLyAgICAgaWYgKHVybCAmJiAodXJsIGluc3RhbmNlb2YgQnVmZmVyIHx8IHVybC5pbmRleE9mKCdkYXRhJykgPT09IDApKSB7XG4vLyAgICAgICBpbWcuc3JjID0gaW1nLl9zcmMgPSB1cmw7XG4vLyAgICAgfVxuLy8gICAgIGVsc2UgaWYgKHVybCAmJiB1cmwuaW5kZXhPZignaHR0cCcpICE9PSAwKSB7XG4vLyAgICAgICB2YXIgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuLy8gICAgICAgdXJsID0gZmFicmljLnV0aWwuZ2V0VVJMKHVybCk7XG4vLyAgICAgICB1cmwgPSAgIHBhdGgucmVzb2x2ZShmYWJyaWMudXRpbC5tZWRpYVJvb3QsIHVybCk7XG4vLyAgICAgICBpbWcuc3JjID0gIHVybDtcbi8vICAgICAgIC8vIHJlcXVlc3RGcyh1cmwsIGNyZWF0ZUltYWdlQW5kQ2FsbEJhY2spO1xuLy8gICAgIH1cbi8vICAgICBlbHNlIGlmICh1cmwpIHtcbi8vICAgICAgIHJlcXVlc3QodXJsLCAnYmluYXJ5JywgY3JlYXRlSW1hZ2VBbmRDYWxsQmFjayk7XG4vLyAgICAgfVxuLy8gICAgIGVsc2Uge1xuLy8gICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbChjb250ZXh0LCB1cmwpO1xuLy8gICAgIH1cbi8vICAgfTtcbi8vIH1lbHNle1xuICBmYWJyaWMudXRpbC5sb2FkUmVzb3VyY2VzID0gZnVuY3Rpb24gKHJlc291cmNlcywgY2FsbGJhY2ssIGNvbnRleHQsIGNyb3NzT3JpZ2luKSB7XG5cbiAgICB2YXIgbG9hZGVkUmVzb3VyY2VzID0ge307XG4gICAgdmFyIGxvYWRlciA9IGZhYnJpYy51dGlsLnF1ZXVlTG9hZChPYmplY3Qua2V5cyhyZXNvdXJjZXMpLmxlbmd0aCxmdW5jdGlvbigpe1xuICAgICAgY2FsbGJhY2sobG9hZGVkUmVzb3VyY2VzKTtcbiAgICB9KTtcbiAgICBmb3IodmFyIGkgaW4gcmVzb3VyY2VzKXtcbiAgICAgIChmdW5jdGlvbihpKXtcbiAgICAgICAgZmFicmljLnV0aWwubG9hZEltYWdlKHJlc291cmNlc1tpXSwgZnVuY3Rpb24oaW1hZ2Upe1xuICAgICAgICAgIGxvYWRlZFJlc291cmNlc1tpXSA9IGltYWdlO1xuICAgICAgICAgIGxvYWRlcigpO1xuICAgICAgICB9LCBjb250ZXh0LCBjcm9zc09yaWdpbik7XG4gICAgICB9KGkpKTtcbiAgICB9XG4gIH07XG5cbiAgZmFicmljLnV0aWwubG9hZEltYWdlID0gZnVuY3Rpb24gKHVybCwgY2FsbGJhY2ssIGNvbnRleHQsIGNyb3NzT3JpZ2luKSB7XG4gICAgdXJsID0gZmFicmljLnV0aWwuZ2V0VVJMKHVybCk7XG4gICAgZnVuY3Rpb24gX2NoZWNrX2Vycm9ycyhpbWcpe1xuICAgICAgLy/QuNC30L7QsdGA0LDQttC10L3QuNC1INC90LUg0LHRi9C70L4g0LfQsNCz0YDRg9C20LXQvdC+XG4gICAgICBpZiAoaW1nKSB7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcyxpbWcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmFicmljLmVycm9ycy5wdXNoKHt0eXBlOiBcImltYWdlXCIsIG1lc3NhZ2U6IFwiSW1hZ2Ugd2FzIG5vdCBsb2FkZWRcIn0pO1xuICAgICAgICBmYWJyaWMudXRpbC5fbG9hZEltYWdlX292ZXJ3cml0dGVuKGZhYnJpYy5tZWRpYS5lcnJvciwgY2FsbGJhY2ssIGNvbnRleHQsIGNyb3NzT3JpZ2luIHx8ICdBbm9ueW1vdXMnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZihmYWJyaWMuZGVidWdUaW1lb3V0KXtcbiAgICAgIHNldFRpbWVvdXQoZmFicmljLnV0aWwuX2xvYWRJbWFnZV9vdmVyd3JpdHRlbi5iaW5kKHRoaXMsdXJsLCBfY2hlY2tfZXJyb3JzICwgY29udGV4dCwgY3Jvc3NPcmlnaW4gfHwgJ0Fub255bW91cycpLGZhYnJpYy5kZWJ1Z1RpbWVvdXQpXG4gICAgfWVsc2V7XG4gICAgICBmYWJyaWMudXRpbC5fbG9hZEltYWdlX292ZXJ3cml0dGVuKHVybCwgX2NoZWNrX2Vycm9ycyAsIGNvbnRleHQsIGNyb3NzT3JpZ2luIHx8ICdBbm9ueW1vdXMnKTtcbiAgICB9XG4gIH07XG5cblxuZmFicmljLnV0aWwuZ2V0VVJMID0gZnVuY3Rpb24odXJsKXtcbiAgaWYgKHVybC5pbmRleE9mKCdibG9iJykgIT09IDAgJiYgdXJsLmluZGV4T2YoJ2RhdGEnKSAhPT0gMCAmJiB1cmwuaW5kZXhPZignOi8vJykgPT0gLTEpIHtcbiAgICB1cmwgPSBmYWJyaWMudXRpbC5tZWRpYVJvb3QgKyB1cmw7XG4gIH1cbiAgaWYgKGZhYnJpYy51dGlsLmFkZE5vQ2FjaGUgJiYgL14oaHR0cHxodHRwcylcXDpcXC9cXC8vLnRlc3QodXJsKSkge1xuICAgIHVybCArPSAnP25vLWNhY2hlPScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICB9XG4gIHJldHVybiB1cmw7XG59O1xuXG5cbmZhYnJpYy51dGlsLmxvYWRWaWRlbyA9IGZ1bmN0aW9uIChzb3VyY2VzLCBjYWxsYmFjaywgY29udGV4dCwgY3Jvc3NPcmlnaW4pIHtcblxuICBmdW5jdGlvbiBsb2FkSXQodXJsKXtcbiAgICB2aWRlby5zcmMgPSBmYWJyaWMudXRpbC5nZXRVUkwodXJsKTtcbiAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKFwibG9hZGVkZGF0YVwiLCBmdW5jdGlvbigpe1xuICAgICAgY2FsbGJhY2sodmlkZW8pO1xuICAgIH0sIHRydWUpO1xuICAgIHZpZGVvLmxvYWQoKTtcbiAgfVxuXG5cblxuXG4gIHZhciB2aWRlbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG5cblxuICAvL3RyeWluZyB0byBmaW5kIHRoZSBtb3N0IHN1aXRhYmxlIHNvdXJjZSBmb3IgY3VycmVudCBicm93c2VyXG4gIGZvciAodmFyIHR5cGUgaW4gc291cmNlcykge1xuICAgIGlmKHZpZGVvLmNhblBsYXlUeXBlKHR5cGUpID09IFwieWVzXCIpe1xuICAgICAgdGhpcy5tZWRpYVR5cGUgPSB0eXBlO1xuICAgICAgbG9hZEl0KHNvdXJjZXNbdHlwZV0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciB0eXBlIGluIHNvdXJjZXMpIHtcbiAgICBpZih2aWRlby5jYW5QbGF5VHlwZSh0eXBlKSA9PSBcIm1heWJlXCIpe1xuICAgICAgdGhpcy5tZWRpYVR5cGUgPSB0eXBlO1xuICAgICAgbG9hZEl0KHNvdXJjZXNbdHlwZV0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBjb25zb2xlLndhcm4oXCJ2aWRlbyBzb3VyY2VzIGZvcm1hdHMgaXMgbm90IHN1cHBvcnRlZFwiKVxuXG5cbn07XG5cbmZhYnJpYy51dGlsLl9sb2FkU1ZHRnJvbVVSTF9vdmVyd3JpdHRlbiA9IGZhYnJpYy5sb2FkU1ZHRnJvbVVSTDtcbmZhYnJpYy5sb2FkU1ZHRnJvbVVSTCA9IGZ1bmN0aW9uICh1cmwsIGNhbGxiYWNrLCByZXZpdmVyKSB7XG4gIGlmICh1cmwuaW5kZXhPZignZGF0YScpICE9PSAwICYmIHVybC5pbmRleE9mKCc6Ly8nKSA9PSAtMSkge1xuICAgIHVybCA9IGZhYnJpYy51dGlsLm1lZGlhUm9vdCArIHVybDtcbiAgfVxuICBpZiAoZmFicmljLnV0aWwuYWRkTm9DYWNoZSAmJiAvXihodHRwfGh0dHBzKVxcOlxcL1xcLy8udGVzdCh1cmwpKSB7XG4gICAgdXJsICs9ICc/bm8tY2FjaGU9JyArIG1vbWVudCgpLmZvcm1hdCgneCcpO1xuICB9XG4gIGZhYnJpYy51dGlsLl9sb2FkU1ZHRnJvbVVSTF9vdmVyd3JpdHRlbih1cmwsIGZ1bmN0aW9uKGRhdGEpe1xuICAgICBpZihkYXRhKXtcbiAgICAgICByZXR1cm4gY2FsbGJhY2soZGF0YSk7XG4gICAgIH1cblxuICAgIHZhciB4bWwgPSBqUXVlcnkucGFyc2VYTUwoYXRvYihmYWJyaWMubWVkaWEuZXJyb3Iuc3Vic3RyKDI2KSkpO1xuXG4gICAgZmFicmljLnBhcnNlU1ZHRG9jdW1lbnQoeG1sLmRvY3VtZW50RWxlbWVudCwgZnVuY3Rpb24gKHJlc3VsdHMsIG9wdGlvbnMpIHtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHJlc3VsdHMsIG9wdGlvbnMpO1xuICAgIH0sIHJldml2ZXIpO1xuXG4gIH0sIHJldml2ZXIpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbW9kdWxlcy9mcm9tVVJMLmpzXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbi8qXG5leHBvcnQgaW50ZXJmYWNlIEdhbGxlcnlEYXRhIDoge1xuIHRhcmdldDogZmFicmljanMgb2JqZWN0XG59XG4qL1xuXG5cbmZhYnJpYy5BcHBsaWNhdGlvbi5wcm90b3R5cGUuc2V0RWxlbWVudEZyb21NZW51ID0gZnVuY3Rpb24gKHNlbGVjdGVkRGF0YSkge1xuICB0aGlzLmNhbnZhcy5jcmVhdGVJbWFnZU9iamVjdChzZWxlY3RlZERhdGEuaW1hZ2UsIHRoaXMudXBsb2FkQ2xhc3MpO1xufTtcblxuZmFicmljLkFwcGxpY2F0aW9uLnByb3RvdHlwZS5jcmVhdGVHYWxsZXJ5ID0gZnVuY3Rpb24gKHRhcmdldCwgJGVsLCBvcHRpb25zKSB7XG4gIGlmKCRlbC5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nKXtcbiAgICAkZWwgPSAkKFwiI1wiICsgJGVsKTtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZih0YXJnZXQuZ2FsbGVyeUNhdGVnb3J5KXtcbiAgICBvcHRpb25zLmNhdGVnb3J5ID0gdGFyZ2V0LmdhbGxlcnlDYXRlZ29yeTtcbiAgfVxuXG4gICRlbC5lbXB0eSgpO1xuICB2YXIgbGlicmFyeSA9IHRoaXMuZ2V0TGlicmFyeUVsZW1lbnRzKG9wdGlvbnMpO1xuXG4gIF8uZWFjaChsaWJyYXJ5LGZ1bmN0aW9uKGxpYnJhcnlJdGVtKXtcbiAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgaW1nLnNyYyA9IGZhYnJpYy51dGlsLm1lZGlhUm9vdCArIGxpYnJhcnlJdGVtLnNyYztcblxuICAgIHZhciAkaW1nID0gJChpbWcpLndpZHRoKDEwMCkuaGVpZ2h0KDEwMClcbiAgICAgIC5jbGljayhmdW5jdGlvbigpe1xuXG4gICAgICAgIHZhciBzZWxlY3RlZERhdGEgPSB7XG4gICAgICAgICAgaW1hZ2U6IGltZyxcbiAgICAgICAgICBkYXRhOiBsaWJyYXJ5SXRlbSxcbiAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICAgIH07XG5cbiAgICAgICAgdGFyZ2V0LnNldEVsZW1lbnRGcm9tTWVudShzZWxlY3RlZERhdGEpO1xuICAgICAgfSk7XG5cbiAgICAkZWwuYXBwZW5kKCRpbWcpO1xuICB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL21vZHVsZXMvZ2FsbGVyeS5qc1xuLy8gbW9kdWxlIGlkID0gNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgSGlzdG9yeSA9IHJlcXVpcmUoJy4vLi4vcGx1Z2lucy9oaXN0b3J5Jyk7XG5cbkhpc3RvcnkucHJvdG90eXBlLmluc2VydFJlY29yZHMgPSBmYWxzZTtcbkhpc3RvcnkucHJvdG90eXBlLmFjdGlvbnMgPSB7XG4gIHVuZG86IHtcbiAgICBrZXlDb2RlOiAneicsXG4gICAgY3RybEtleTogIHRydWUsXG4gICAgb2JzZXJ2ZTogJ2NoYW5nZWQnLFxuICAgIGNsYXNzTmFtZTogJ2ZhIGZhLXVuZG8nLFxuICAgIHRpdGxlOiAndW5kbycsXG4gICAgZW5hYmxlZDogJ2NhblVuZG8nLFxuICAgIGFjdGlvbjogZnVuY3Rpb24oKXtcbiAgICAgIHRoaXMudW5kbygpO1xuICAgIH1cbiAgfSxcbiAgcmVjb3Jkczoge1xuICAgIHRpdGxlOiAgICAgICAgICBcInJlY29yZHNcIixcbiAgICBpdGVtQ2xhc3NOYW1lOiAgXCJmaWx0ZXJzLXNlbGVjdG9yXCIsXG4gICAgY2xhc3NOYW1lOiAgICAgIFwiZmEgZmEtaGlzdG9yeVwiLFxuICAgIHR5cGU6ICAgICAgICAgICBcInNlbGVjdFwiLFxuICAgIHRlbXBsYXRlU2VsZWN0aW9uOiBmdW5jdGlvbihzdGF0ZSwgY29udGFpbmVyKSB7XG4gICAgICBpZiAoc3RhdGUuYW55KSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS50ZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuICQoJzxzcGFuPicgKyBzdGF0ZS5pZCArIFwiOlwiICsgc3RhdGUudHlwZSArICc8L3NwYW4+Jyk7XG4gICAgfSxcbiAgICB0ZW1wbGF0ZVJlc3VsdDogZnVuY3Rpb24oc3RhdGUsIGNvbnRhaW5lcixkYXRhKSB7XG4gICAgICBpZighc3RhdGUudHlwZSlyZXR1cm47XG4gICAgICB2YXIgX2tleXMgPSBzdGF0ZS5vcmlnaW5hbFN0YXRlICYmIE9iamVjdC5rZXlzKHN0YXRlLm9yaWdpbmFsU3RhdGUpLmpvaW4oJywnKSB8fCAnJztcbiAgICAgIHZhciB0eXBlID0gc3RhdGUub2JqZWN0ICYmIHN0YXRlLm9iamVjdC50eXBlIHx8ICcnO1xuICAgICAgcmV0dXJuICQoXCI8c3Bhbj57aWR9Ont0eXBlfSh7b3R5cGV9IHtrZXlzfSk8L3NwYW4+XCIuZm9ybWF0KGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoe2tleXMgOiBfa2V5cywgb3R5cGU6IHR5cGV9LHN0YXRlKSkpO1xuICAgICAgLy8gaWYoc3RhdGUuaWQgIT0gXCJub25lXCIpe1xuICAgICAgLy8gICB2YXIgJGNhbnZhcyA9ICQoJzxjYW52YXM+Jyk7XG4gICAgICAvLyAgICRlbC5wcmVwZW5kKCRjYW52YXMpO1xuICAgICAgLy8gfVxuICAgICAgLy8gcmV0dXJuICRlbDtcbiAgICB9LFxuICAgIHZhbHVlOiAgICAgIHtcbiAgICAgIG9ic2VydmU6ICdjaGFuZ2VkJyxcbiAgICAgIHNldCA6IGZ1bmN0aW9uKHZhbCxmaWx0ZXJzRGF0YSl7XG4gICAgICAgIHRoaXMuZ290byh2YWwpO1xuICAgICAgfSxcbiAgICAgIGdldDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVjb3Jkc1t0aGlzLmN1cnJlbnRdLmlkO1xuICAgICAgfSxcbiAgICAgIG9wdGlvbnM6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLnJlY29yZHM7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICByZWRvOiB7XG4gICAga2V5Q29kZTogJ3knLFxuICAgIGN0cmxLZXk6ICB0cnVlLFxuICAgIG9ic2VydmU6ICdjaGFuZ2VkJyxcbiAgICBjbGFzc05hbWU6ICdmYSBmYS1yZXBlYXQnLFxuICAgIHRpdGxlOiAncmVkbycsXG4gICAgZW5hYmxlZDogJ2NhblJlZG8nLFxuICAgIGFjdGlvbjogZnVuY3Rpb24oKXtcbiAgICAgIHRoaXMucmVkbygpO1xuICAgIH1cbiAgfVxufTtcblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuU2xpZGVDYW52YXMucHJvdG90eXBlLmFjdGlvbnMsIHtcbiAgaGlzdG9yeToge1xuICAgIHRpdGxlOiAnaGlzdG9yeScsXG4gICAgdHlwZTogJ21lbnUnLFxuICAgIHRhcmdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGlzdG9yeTtcbiAgICB9LFxuICAgIG1lbnU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmFjdGlvbnM7XG4gICAgfVxuICB9XG59KTtcblxuXG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLkNhbnZhcy5wcm90b3R5cGUsIHtcbiAgaW5zZXJ0SGlzdG9yeTogZmFsc2UsXG4gIG9uT2JqZWN0TW9kaWZpZWQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCF0aGlzLmhpc3RvcnkuZW5hYmxlZCB8fCB0aGlzLnByb2Nlc3NpbmcgfHwgdGhpcy5oaXN0b3J5LnByb2Nlc3NpbmcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIF9jYW52YXMgPSBlLnRhcmdldC5jYW52YXMgfHwgZS50YXJnZXQud3JhcHBlckVsICYmIGUudGFyZ2V0O1xuXG4gICAgdGhpcy5oaXN0b3J5LmFkZCh7XG4gICAgICBjYW52YXM6ICBlLnRhcmdldC5jYW52YXMub3JpZ2luYWxTbGlkZSB8fCBlLnRhcmdldC5jYW52YXMsXG4gICAgICBvcmlnaW5hbFN0YXRlOiAgZS5zdGF0ZXMub3JpZ2luYWwsXG4gICAgICBtb2RpZmllZFN0YXRlOiAgZS5zdGF0ZXMubW9kaWZpZWQsXG4gICAgICBvYmplY3Q6IGUudGFyZ2V0LFxuICAgICAgdHlwZTogJ29iamVjdDptb2RpZmllZCcsXG4gICAgICB1bmRvOiBmdW5jdGlvbiAoX2FjdGlvbikge1xuICAgICAgICBfYWN0aW9uLm9iamVjdC5zZXQoX2FjdGlvbi5vcmlnaW5hbFN0YXRlKTtcbiAgICAgICAgaWYoX2FjdGlvbi5jYW52YXMubWlycm9yU2xpZGUgPT0gdGhpcy5jYW52YXMpe1xuICAgICAgICAgIF9hY3Rpb24ub2JqZWN0LnNldENvb3JkcygpO1xuICAgICAgICAgIHZhciBfY2FudmFzID0gdGhpcy5jYW52YXMgfHwgdGhpcztcbiAgICAgICAgICBfY2FudmFzLnJlbmRlckFsbCgpO1xuICAgICAgICB9XG4gICAgICAgIF9hY3Rpb24uY2FudmFzLmZpcmUoJ29iamVjdDptb2RpZmllZCcsIHsgdGFyZ2V0OiBfYWN0aW9uLm9iamVjdCB9KTtcbiAgICAgICAgX2FjdGlvbi5vYmplY3QuZmlyZSgnbW9kaWZpZWQnKTtcbiAgICAgICAgX2FjdGlvbi5jYW52YXMucmVuZGVyQWxsKCk7XG4gICAgICB9LFxuICAgICAgcmVkbzogZnVuY3Rpb24gKF9hY3Rpb24pIHtcbiAgICAgICAgX2FjdGlvbi5vYmplY3Quc2V0KF9hY3Rpb24ubW9kaWZpZWRTdGF0ZSk7XG4gICAgICAgIF9hY3Rpb24ub2JqZWN0LnNldENvb3JkcygpO1xuICAgICAgICBpZihfYWN0aW9uLmNhbnZhcy5taXJyb3JTbGlkZSA9PSB0aGlzLmNhbnZhcyl7XG4gICAgICAgICAgX2FjdGlvbi5vYmplY3Quc2V0Q29vcmRzKCk7XG4gICAgICAgICAgdmFyIF9jYW52YXMgPSB0aGlzLmNhbnZhcyB8fCB0aGlzO1xuICAgICAgICAgIF9jYW52YXMucmVuZGVyQWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgX2FjdGlvbi5jYW52YXMuZmlyZSgnb2JqZWN0Om1vZGlmaWVkJywgeyB0YXJnZXQ6IF9hY3Rpb24ub2JqZWN0IH0pO1xuICAgICAgICBfYWN0aW9uLm9iamVjdC5maXJlKCdtb2RpZmllZCcpO1xuICAgICAgICBfYWN0aW9uLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgY2xlYXJIaXN0b3J5OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5oaXN0b3J5LmNsZWFyKCk7XG4gIH0sXG4gIGRpc2FibGVIaXN0b3J5OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5oaXN0b3J5LmVuYWJsZWQgPSBmYWxzZTtcbiAgfSxcbiAgX2FkZF9vYmplY3RfaGlzdG9yeV9hY3Rpb246IGZ1bmN0aW9uIChfYWN0aW9uKSB7XG4gICAgdmFyIF9jYW52YXMgPSB0aGlzLmNhbnZhcyB8fCB0aGlzO1xuICAgIGlmKHRoaXMuY2FudmFzICYmIF9hY3Rpb24uY2FudmFzLm1pcnJvclNsaWRlID09IHRoaXMuY2FudmFzKXtcbiAgICAgIF9jYW52YXMuYWRkKF9hY3Rpb24ub2JqZWN0KTtcbiAgICAgIF9jYW52YXMuc2V0QWN0aXZlT2JqZWN0KF9hY3Rpb24ub2JqZWN0KTtcbiAgICAgIF9jYW52YXMucmVuZGVyQWxsKCk7XG4gICAgfWVsc2V7XG4gICAgICBfYWN0aW9uLmNhbnZhcy5hZGQoX2FjdGlvbi5vYmplY3QpO1xuICAgIH1cbiAgICBfYWN0aW9uLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgfSxcblxuICBfcmVtb3ZlX29iamVjdF9oaXN0b3J5X2FjdGlvbjogZnVuY3Rpb24gKF9hY3Rpb24pIHtcbiAgICBfYWN0aW9uLmNhbnZhcy5yZW1vdmUoX2FjdGlvbi5vYmplY3QpO1xuICAgIF9hY3Rpb24uY2FudmFzLnJlbmRlckFsbCgpO1xuICAgIGlmKHRoaXMuY2FudmFzICYmIF9hY3Rpb24uY2FudmFzLm1pcnJvclNsaWRlID09IHRoaXMuY2FudmFzKXtcbiAgICAgIHRoaXMuY2FudmFzLnJlbmRlckFsbCgpO1xuICAgIH1cbiAgfSxcblxuICBvbk9iamVjdFJlbW92ZWQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCF0aGlzLmhpc3RvcnkuZW5hYmxlZCB8fCB0aGlzLnByb2Nlc3NpbmcgfHwgdGhpcy5oaXN0b3J5LnByb2Nlc3NpbmcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5oaXN0b3J5LmFkZCh7XG4gICAgICBjYW52YXM6IGUudGFyZ2V0LmNhbnZhcy5vcmlnaW5hbFNsaWRlIHx8IGUudGFyZ2V0LmNhbnZhcyxcbiAgICAgIG9iamVjdDogZS50YXJnZXQsXG4gICAgICB0eXBlOiAnb2JqZWN0OnJlbW92ZWQnLFxuICAgICAgcmVkbzogdGhpcy5fcmVtb3ZlX29iamVjdF9oaXN0b3J5X2FjdGlvbixcbiAgICAgIHVuZG86IHRoaXMuX2FkZF9vYmplY3RfaGlzdG9yeV9hY3Rpb25cbiAgICB9KTtcbiAgfSxcbiAgb25EcmF3QWZ0ZXI6IGZ1bmN0aW9uKGV2ZW50KXtcbiAgICBpZiAoIXRoaXMuaGlzdG9yeS5lbmFibGVkIHx8IHRoaXMucHJvY2Vzc2luZyB8fCB0aGlzLmhpc3RvcnkucHJvY2Vzc2luZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmhpc3RvcnkuYWRkKHRoaXMuZnJlZURyYXdpbmdCcnVzaC5nZXRIaXN0b3J5UmVjb3JkKGV2ZW50KSlcbiAgfSxcbiAgb25PYmplY3RBZGRlZDogZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoIXRoaXMuaGlzdG9yeS5lbmFibGVkIHx8IHRoaXMucHJvY2Vzc2luZyB8fCB0aGlzLmhpc3RvcnkucHJvY2Vzc2luZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmhpc3RvcnkuYWRkKHtcbiAgICAgIGNhbnZhczogIGUudGFyZ2V0LmNhbnZhcy5vcmlnaW5hbFNsaWRlIHx8IGUudGFyZ2V0LmNhbnZhcyxcbiAgICAgIG9iamVjdDogZS50YXJnZXQsXG4gICAgICB0eXBlOiAnb2JqZWN0OmFkZGVkJyxcbiAgICAgIHVuZG86IHRoaXMuX3JlbW92ZV9vYmplY3RfaGlzdG9yeV9hY3Rpb24sXG4gICAgICByZWRvOiB0aGlzLl9hZGRfb2JqZWN0X2hpc3RvcnlfYWN0aW9uXG4gICAgfSk7XG4gIH0sXG4gIGluaXRIaXN0b3J5OiBmdW5jdGlvbiAoaGlzdG9yeSkge1xuICAgIGlmKCFoaXN0b3J5KXtcbiAgICAgIGhpc3RvcnkgPSBuZXcgSGlzdG9yeSh0aGlzKTtcbiAgICAgIGhpc3RvcnkuYXBwbGljYXRpb24gPSB0aGlzLmFwcGxpY2F0aW9uO1xuICAgIH1cblxuICAgIHRoaXMuaGlzdG9yeSA9IGhpc3Rvcnk7XG4gICAgdGhpcy5vbih7XG4gICAgICAnbG9hZGluZzpiZWdpbic6ICAgIHRoaXMuY2xlYXJIaXN0b3J5LFxuICAgICAgJ2RyYXc6YWZ0ZXInOiAgICAgICB0aGlzLm9uRHJhd0FmdGVyLFxuICAgICAgJ29iamVjdDptb2RpZmllZCc6ICB0aGlzLm9uT2JqZWN0TW9kaWZpZWQsXG4gICAgICAnb2JqZWN0OmFkZGVkJzogICAgIHRoaXMub25PYmplY3RBZGRlZCxcbiAgICAgICdvYmplY3Q6cmVtb3ZlZCc6ICAgdGhpcy5vbk9iamVjdFJlbW92ZWRcbiAgICB9KTtcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5oaXN0b3J5Lm9uKCdjaGFuZ2VkJywgZnVuY3Rpb24oZSl7XG4gICAgICBpZih0aGlzLmFjdGl2ZUFjdGlvbi5jYW52YXMpe1xuICAgICAgICB0aGlzLmFjdGl2ZUFjdGlvbi5jYW52YXMubW9tZW50ID0gZS5hY3Rpb24ubW9tZW50O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBwcm90byA9IHRoaXMuYXBwbGljYXRpb24ucHJvdG90eXBlcy5IaXN0b3J5O1xuICAgIGlmKHByb3RvKXtcbiAgICAgIGlmKHByb3RvLmV2ZW50TGlzdGVuZXJzKXtcbiAgICAgICAgaGlzdG9yeS5vbihwcm90by5ldmVudExpc3RlbmVycyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlbmFibGVIaXN0b3J5OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5oaXN0b3J5LmVuYWJsZWQgPSB0cnVlO1xuICB9XG59KTtcblxuZmFicmljLkhJU1RPUllfT1BUSU9OUyA9IHtcbiAgSU5ESVZJRFVBTDogMCxcbiAgU0hBUkVEOiAxXG59O1xuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5BcHBsaWNhdGlvbi5wcm90b3R5cGUsIHtcbiAgaGlzdG9yeTogdHJ1ZSxcbiAgc2V0SGlzdG9yeTogZnVuY3Rpb24oaGlzdG9yeU9wdGlvbil7XG5cbiAgICBpZihoaXN0b3J5T3B0aW9uID09PSBmYWJyaWMuSElTVE9SWV9PUFRJT05TLlNIQVJFRCl7XG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgSGlzdG9yeSh0aGlzKTtcbiAgICAgIHRoaXMuZW5hYmxlSGlzdG9yeSgpO1xuXG4gICAgICB0aGlzLm9uKFwicmVhZHlcIixmdW5jdGlvbigpe1xuICAgICAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgICAgICB0aGlzLmNhbnZhcy5pbml0SGlzdG9yeSh0aGlzLmhpc3RvcnkpO1xuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgfVxuICAgIGlmKGhpc3RvcnlPcHRpb24gPT09IGZhYnJpYy5ISVNUT1JZX09QVElPTlMuSU5ESVZJRFVBTCl7XG4gICAgICAvL3RvZG8gdW5zdXBwb3J0ZWRcbiAgICB9XG5cbiAgfSxcbiAgYWN0aW9uczogZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuQXBwbGljYXRpb24ucHJvdG90eXBlLmFjdGlvbnMse1xuICAgIGhpc3Rvcnk6IHtcbiAgICAgIGluc2VydDogJ2hpc3RvcnlUb29scycsXG4gICAgICB0aXRsZTogJ2hpc3RvcnknLFxuICAgICAgdHlwZTogJ21lbnUnLFxuICAgICAgdGFyZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhpc3Rvcnk7XG4gICAgICB9LFxuICAgICAgbWVudTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb25zO1xuICAgICAgfVxuICAgIH1cbiAgfSksXG4gIF9kZWZhdWx0X2V2ZW50X2xpc3RlbmVycyA6IHtcbiAgICBcInNsaWRlOmNoYW5nZTpiZWdpblwiIDogZnVuY3Rpb24oKXtcbiAgICAgIHRoaXMucHJvY2Vzc2luZyA9IHRydWUgO1xuICAgICAgaWYodGhpcy5oaXN0b3J5KXtcbiAgICAgICAgdGhpcy5oaXN0b3J5LnByb2Nlc3NpbmcgPSB0cnVlIDtcbiAgICAgIH1cbiAgICB9LFxuICAgIFwic2xpZGU6Y2hhbmdlZFwiIDogZnVuY3Rpb24oKXtcbiAgICAgIHRoaXMucHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgaWYodGhpcy5oaXN0b3J5KXtcbiAgICAgICAgdGhpcy5oaXN0b3J5LnByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGhpc3RvcnlUb29sczogZmFsc2UsXG4gIGVuYWJsZUhpc3Rvcnk6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmhpc3RvcnkuZW5hYmxlZCA9IHRydWU7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9tb2R1bGVzL2hpc3RvcnkuanNcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcblxue1xuXG4gIC8qXG4gICBmYWJyaWMuSW1hZ2UuZmlsdGVycy5SZWRpZnkgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLCB7XG4gICB0eXBlOiAnUmVkaWZ5JyxcbiAgIGFwcGx5VG86IGZ1bmN0aW9uIChjYW52YXNFbCkge1xuICAgdmFyIGNvbnRleHQgPSBjYW52YXNFbC5nZXRDb250ZXh0KCcyZCcpLFxuICAgaW1hZ2VEYXRhID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCxcbiAgIGNhbnZhc0VsLndpZHRoLCBjYW52YXNFbC5oZWlnaHQpLFxuICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhO1xuICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgIGRhdGFbaSArIDFdID0gMDtcbiAgIGRhdGFbaSArIDJdID0gMDtcbiAgIH1cbiAgIGNvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG4gICB9XG4gICB9KTtcbiAgIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlJlZGlmeS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgcmV0dXJuIG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5SZWRpZnkob2JqZWN0KTtcbiAgIH07XG4gICAqL1xuXG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlNoYXJwZW4gPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db252b2x1dGUsIHtcbiAgICB0eXBlOiAnU2hhcnBlbicsXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgeyB9O1xuXG4gICAgICB0aGlzLm9wYXF1ZSA9IG9wdGlvbnMub3BhcXVlO1xuICAgICAgdGhpcy5tYXRyaXggPSBvcHRpb25zLm1hdHJpeCB8fCBbXG4gICAgICAgICAgMCwgLTEsIDAsXG4gICAgICAgICAgLTEsIDUsIC0xLFxuICAgICAgICAgIDAsIC0xLCAwXG4gICAgICAgIF07XG4gICAgfVxuICB9KTtcbiAgZmFicmljLkltYWdlLmZpbHRlcnMuU2hhcnBlbi5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuU2hhcnBlbihvYmplY3QpO1xuICB9O1xuXG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsdXIgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db252b2x1dGUsIHtcbiAgICB0eXBlOiAnQmx1cicsXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgeyB9O1xuXG4gICAgICB2YXIgX3YgPSAxIC8gOTtcbiAgICAgIHRoaXMub3BhcXVlID0gb3B0aW9ucy5vcGFxdWU7XG4gICAgICB0aGlzLm1hdHJpeCA9IG9wdGlvbnMubWF0cml4IHx8IFtcbiAgICAgICAgICBfdiwgX3YsIF92LFxuICAgICAgICAgIF92LCBfdiwgX3YsXG4gICAgICAgICAgX3YsIF92LCBfdlxuICAgICAgICBdO1xuICAgIH1cbiAgfSk7XG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsdXIuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsdXIob2JqZWN0KTtcbiAgfTtcblxuICBmYWJyaWMuSW1hZ2UuZmlsdGVycy5FbWJvc3MgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db252b2x1dGUsIHtcbiAgICB0eXBlOiAnRW1ib3NzJyxcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7IH07XG5cbiAgICAgIHRoaXMub3BhcXVlID0gb3B0aW9ucy5vcGFxdWU7XG4gICAgICB0aGlzLm1hdHJpeCA9IG9wdGlvbnMubWF0cml4IHx8IFtcbiAgICAgICAgICAxLCAgIDEsICAgMSxcbiAgICAgICAgICAxLCAwLjcsICAtMSxcbiAgICAgICAgICAtMSwgIC0xLCAgLTFcbiAgICAgICAgXTtcbiAgICB9XG4gIH0pO1xuICBmYWJyaWMuSW1hZ2UuZmlsdGVycy5FbWJvc3MuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkVtYm9zcyhvYmplY3QpO1xuICB9O1xuXG5cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuTWFzay5wcm90b3R5cGUubWFza0ZpbHRlciA9IHRydWU7XG5cbiAgdmFyIHByb3RvdHlwZU9wdGlvbnMgPSB7XG4gICAgQnJpZ2h0bmVzczoge1xuICAgICAgXCJicmlnaHRuZXNzXCI6IHt2YWx1ZTogMTAwLCBtaW46IDAsIG1heDogMjU1fVxuICAgIH0sXG4gICAgTm9pc2U6IHtcbiAgICAgIFwibm9pc2VcIjoge3ZhbHVlOiAxMDAsIG1pbjogMCwgbWF4OiAxMDAwfVxuICAgIH0sXG4gICAgQ29udm9sdXRlOiB7XG4gICAgICBcIm9wYXF1ZVwiOiB7dmFsdWU6IHRydWUsIHR5cGU6IFwiYm9vbGVhblwiIH0sXG4gICAgICBcIm1hdHJpeFwiOiB7dmFsdWU6IFsxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxXSwgdHlwZTogXCJtYXRyaXhcIiB9XG4gICAgfSxcbiAgICBCbHVyOiB7fSxcbiAgICBTaGFycGVuOiB7fSxcbiAgICBFbWJvc3M6IHt9LFxuICAgIE11bHRpcGx5OiB7XG4gICAgICBcImNvbG9yXCI6IHt0eXBlOiAnY29sb3InLCB2YWx1ZTogXCIjRjBGXCJ9XG4gICAgfSxcbiAgICBQaXhlbGF0ZToge1xuICAgICAgXCJibG9ja3NpemVcIjoge3ZhbHVlOiA0LCBtaW46IDIsIG1heDogMjB9XG4gICAgfSxcbiAgICBUaW50OiB7XG4gICAgICBcImNvbG9yXCI6ICB7dHlwZTogJ2NvbG9yJywgdmFsdWU6IFwiIzM1MTNCMFwifSxcbiAgICAgIFwib3BhY2l0eVwiOiB7dmFsdWU6IDEsIG1pbjogMCwgbWF4OiAxLCBzdGVwOiAwLjF9XG4gICAgfSxcbiAgICBNYXNrOiB7XG4gICAgICBtYXNrOiB7XG4gICAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgc3JjOiAgXCJwaG90b3MvZXhwbG9zaW9uLnBuZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjaGFubmVsOiB7IHZhbHVlOiAwfVxuICAgIH0sXG4gICAgQmxlbmQ6IHtcbiAgICAgIFwiY29sb3JcIjoge3R5cGU6ICdjb2xvcicsIHZhbHVlOiBcIiMzNTEzQjBcIn0sXG4gICAgICBcIm1vZGVcIjoge1xuICAgICAgICB2YWx1ZTogXCJhZGRcIixcbiAgICAgICAgb3B0aW9uczogW1xuICAgICAgICAgIHt2YWx1ZTogXCJhZGRcIiwgdGl0bGU6IFwiQWRkXCJ9LFxuICAgICAgICAgIHt2YWx1ZTogXCJkaWZmXCIsIHRpdGxlOiBcIkRpZmZcIn0sXG4gICAgICAgICAge3ZhbHVlOiBcInN1YnRyYWN0XCIsIHRpdGxlOiBcIlN1YnRyYWN0XCJ9LFxuICAgICAgICAgIHt2YWx1ZTogXCJtdWx0aXBseVwiLCB0aXRsZTogXCJNdWx0aXBseVwifSxcbiAgICAgICAgICB7dmFsdWU6IFwic2NyZWVuXCIsIHRpdGxlOiBcIlNjcmVlblwifSxcbiAgICAgICAgICB7dmFsdWU6IFwibGlnaHRlblwiLCB0aXRsZTogXCJMaWdodGVuXCJ9LFxuICAgICAgICAgIHt2YWx1ZTogXCJkYXJrZW5cIiwgdGl0bGU6IFwiRGFya2VuXCJ9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cblxuICBmb3IodmFyIGkgaW4gcHJvdG90eXBlT3B0aW9ucyl7XG4gICAgZmFicmljLkltYWdlLmZpbHRlcnNbaV0ucHJvdG90eXBlLm9wdGlvbnMgPSBwcm90b3R5cGVPcHRpb25zW2ldO1xuICB9XG5cblxuXG59XG5cblxuXG5cbmZhYnJpYy5JbWFnZS5nZXRGaWx0ZXJzTGlzdCA9IGZ1bmN0aW9uKGVsKXtcblxuICBlbCA9IGVsIHx8IGZhYnJpYy5JbWFnZS5wcm90b3R5cGU7XG4gIHZhciBmaWx0ZXJMaXN0ID0gW107XG4gIGZvcih2YXIgaSBpbiBlbC5hdmFpbGFibGVGaWx0ZXJzKXtcbiAgICB2YXIgX2YgPSBmYWJyaWMuSW1hZ2UuZmlsdGVyc1tlbC5hdmFpbGFibGVGaWx0ZXJzW2ldXTtcblxuICAgIHZhciBfZGF0YSA9IHtcbiAgICAgIHR5cGU6ICAgICBlbC5hdmFpbGFibGVGaWx0ZXJzW2ldXG4gICAgfTtcbiAgICBpZihfZi5wcm90b3R5cGUuY3VzdG9tKXtcbiAgICAgIGlmKCFlbC5jdXN0b21GaWx0ZXJzKXtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmKF9mLnByb3RvdHlwZS5tYXNrRmlsdGVyKXtcbiAgICAgIGlmKCFlbC5tYXNrRmlsdGVyKXtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmKF9mLnByb3RvdHlwZS5jYW1hbil7XG4gICAgICBpZighZWwuY2FtYW5GaWx0ZXJzKXtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBfZGF0YS5jYW1hbiA9IHRydWU7XG4gICAgfWVsc2V7XG4gICAgICBpZighZWwuZmFicmljRmlsdGVycyl7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZihfZi5wcm90b3R5cGUub3B0aW9ucyl7XG4gICAgICBfZGF0YS5vcHRpb25zID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lKF9mLnByb3RvdHlwZS5vcHRpb25zKTtcbiAgICB9XG4gICAgX2RhdGEudGV4dCA9IF9mLnByb3RvdHlwZS50aXRsZSB8fCBlbC5hdmFpbGFibGVGaWx0ZXJzW2ldO1xuXG4gICAgZmlsdGVyTGlzdC5wdXNoKF9kYXRhKVxuICB9XG4gIHJldHVybiBmaWx0ZXJMaXN0O1xufTtcblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuSW1hZ2UucHJvdG90eXBlLCB7XG4gIGNhbWFuRmlsdGVyczogZmFsc2UsXG4gIGZhYnJpY0ZpbHRlcnM6IHRydWUsXG4gIGN1c3RvbUZpbHRlcnM6IGZhbHNlLFxuICBtYXNrRmlsdGVyOiBmYWxzZSxcbiAgZ2V0RmlsdGVyc0RhdGEgOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9maWx0ZXJzID0gZmFicmljLkltYWdlLmdldEZpbHRlcnNMaXN0KHRoaXMpO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5maWx0ZXJzKSB7XG4gICAgICB2YXIgX2YgPSBmYWJyaWMudXRpbC5vYmplY3QuZmluZFdoZXJlKF9maWx0ZXJzLHt0eXBlOiBmYWJyaWMudXRpbC5zdHJpbmcuY2FwaXRhbGl6ZSh0aGlzLmZpbHRlcnNbaV0udHlwZSl9KVxuICAgICAgaWYoX2Ype1xuICAgICAgICBfZi5lbmFibGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9maWx0ZXJzO1xuICB9LFxuICBhdmFpbGFibGVGaWx0ZXJzOiBbXG4gICAgLy9mYWJyaWNKU1xuICAgIFwiR3JheXNjYWxlXCIsXG4gICAgXCJTZXBpYVwiLFxuICAgIFwiU2VwaWEyXCIsXG4gICAgXCJJbnZlcnRcIixcbiAgICBcIkJsdXJcIixcbiAgICBcIlNoYXJwZW5cIixcbiAgICBcIkVtYm9zc1wiLFxuICAgIFwiQmxlbmRcIixcbiAgICBcIlRpbnRcIixcbiAgICBcIk11bHRpcGx5XCIsXG4gICAgLy9cIkNvbnZvbHV0ZVwiLFxuICAgIFwiTm9pc2VcIixcbiAgICBcIkJyaWdodG5lc3NcIixcbiAgICBcIlBpeGVsYXRlXCIsXG4gICAgXCJHcmFkaWVudFRyYW5zcGFyZW5jeVwiLFxuICAgIFwiTWFza1wiXG4gIF0sXG4gIGdldEZpbHRlcjogZnVuY3Rpb24gKGZpbHRlck5hbWUpIHtcbiAgICBmaWx0ZXJOYW1lID0gZmFicmljLnV0aWwuc3RyaW5nLnVuY2FwaXRhbGl6ZShmaWx0ZXJOYW1lKTtcbiAgICBmb3IodmFyIGkgaW4gdGhpcy5maWx0ZXJzKXtcbiAgICAgIGlmKGZhYnJpYy51dGlsLnN0cmluZy51bmNhcGl0YWxpemUodGhpcy5maWx0ZXJzW2ldLnR5cGUpID09PSBmaWx0ZXJOYW1lKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBzZXRGaWx0ZXI6IGZ1bmN0aW9uIChmaWx0ZXIpIHtcblxuICAgIHZhciBfb2xkX2ZpbHRlciA9IGZhbHNlO1xuICAgIGlmKGZpbHRlci5yZXBsYWNlKXtcbiAgICAgIHRoaXMuZmlsdGVycyA9IFtdO1xuICAgIH1lbHNle1xuICAgICAgX29sZF9maWx0ZXIgPSBmYWJyaWMudXRpbC5vYmplY3QuZmluZFdoZXJlKHRoaXMuZmlsdGVycywge3R5cGU6IGZpbHRlci50eXBlfSk7XG4gICAgICBfb2xkX2ZpbHRlciA9IF9vbGRfZmlsdGVyICYmIF9vbGRfZmlsdGVyLnRvT2JqZWN0KCkgfHwgZmFsc2U7XG4gICAgfVxuXG5cbiAgICBpZihmaWx0ZXIudHlwZSl7XG4gICAgICB2YXIgX3R5cGUgPSBmYWJyaWMudXRpbC5zdHJpbmcuY2FwaXRhbGl6ZShmaWx0ZXIudHlwZSx0cnVlKTtcbiAgICAgIHZhciBfbmV3X2ZpbHRlciA9IGZpbHRlci5vcHRpb25zICYmIGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZShmaWx0ZXIub3B0aW9ucyk7XG5cblxuICAgIH1lbHNle1xuICAgICAgX3R5cGUgPSBmYWxzZTtcbiAgICAgIF9uZXdfZmlsdGVyID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyogdGhpcy5wcm9qZWN0Lmhpc3RvcnkuYWRkKHtcbiAgICAgZGF0YTogICBbJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuZGF0YSldLFxuICAgICBzbGlkZTogIHRoaXMuc2xpZGUsXG4gICAgIG9iamVjdDogdGhpcyxcbiAgICAgcmVkbzogICBmaWx0ZXIsXG4gICAgIHVuZG86ICAgX29sZF9maWx0ZXIgLFxuICAgICB0eXBlOiAgIFwiZmlsdGVyXCIsXG4gICAgIHVuZG9GbjogZnVuY3Rpb24oYWN0aW9uKXtcbiAgICAgYWN0aW9uLm9iamVjdC5fc2V0X2ZpbHRlcihhY3Rpb24udW5kbyk7XG4gICAgIH0sXG4gICAgIHJlZG9GbjogIGZ1bmN0aW9uKGFjdGlvbil7XG4gICAgIGFjdGlvbi5vYmplY3QuX3NldF9maWx0ZXIoYWN0aW9uLnJlZG8pO1xuICAgICB9XG4gICAgIH0pO1xuICAgICAqL1xuICAgIHRoaXMuX3NldF9maWx0ZXIoX3R5cGUsIF9uZXdfZmlsdGVyLCBfb2xkX2ZpbHRlcik7XG5cbiAgfSxcblxuICBfc2V0X2ZpbHRlcjogZnVuY3Rpb24gKF90eXBlLCBfbmV3X2ZpbHRlcikge1xuXG4gICAgaWYoX3R5cGUpe1xuICAgICAgdmFyIF9vbGRfZmlsdGVyID0gdGhpcy5nZXRGaWx0ZXIoX3R5cGUpO1xuICAgIH1cblxuICAgIGlmIChfb2xkX2ZpbHRlciAmJiBfbmV3X2ZpbHRlcikge1xuICAgICAgZm9yICh2YXIgaSBpbiBfbmV3X2ZpbHRlcikge1xuICAgICAgICBfb2xkX2ZpbHRlcltpXSA9IF9uZXdfZmlsdGVyW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX29sZF9maWx0ZXIgJiYgIV9uZXdfZmlsdGVyKSB7XG4gICAgICB0aGlzLmZpbHRlcnMuc3BsaWNlKHRoaXMuZmlsdGVycy5pbmRleE9mKF9vbGRfZmlsdGVyKSwgMSk7XG4gICAgfVxuICAgIGlmICghX29sZF9maWx0ZXIgJiYgX25ld19maWx0ZXIpIHtcbiAgICAgIHRoaXMuZmlsdGVycy5wdXNoKG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVyc1tfdHlwZV0oX25ld19maWx0ZXIpKTtcbiAgICB9XG4gICAgdGhpcy5hcHBseUZpbHRlcnModGhpcy5jYW52YXMucmVuZGVyQWxsLmJpbmQodGhpcy5jYW52YXMpKTtcbiAgfSxcblxuICBpbnNlcnRJbWFnZUZpbHRlcnM6IGZhbHNlLFxuICBhY3Rpb25zIDogZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuSW1hZ2UucHJvdG90eXBlLmFjdGlvbnMsIHtcbiAgICBpbWFnZUZpbHRlcnM6IHtcbiAgICAgIHRpdGxlOiBcItGE0LjQu9GM0YLRgFwiLFxuICAgICAgaXRlbUNsYXNzTmFtZTogXCJmaWx0ZXJzLXNlbGVjdG9yXCIsXG4gICAgICBjbGFzc05hbWU6IFwiZmEgZmEtZmlsdGVyXCIsXG4gICAgICB0eXBlOiBcInNlbGVjdFwiLFxuICAgICAgdGVtcGxhdGVTZWxlY3Rpb246IGZ1bmN0aW9uIChzdGF0ZSwgY29udGFpbmVyKSB7XG4gICAgICAgIGlmIChzdGF0ZS5hbnkpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUudGV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJCgnPHNwYW4+PHNwYW4gY2xhc3M9XCJjb2xvci1zcGFuXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOicgKyBzdGF0ZS50ZXh0ICsgJ1wiPjwvc3Bhbj4nICsgc3RhdGUudGV4dCArICc8L3NwYW4+Jyk7XG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVSZXN1bHQ6IGZ1bmN0aW9uIChzdGF0ZSwgY29udGFpbmVyLCBkYXRhKSB7XG4gICAgICAgIHZhciAkZWwgPSAkKCc8c3Bhbj4nICsgc3RhdGUudGV4dCArICc8L3NwYW4+Jyk7XG4gICAgICAgIGlmIChzdGF0ZS5pZCAhPSBcIm5vbmVcIikge1xuICAgICAgICAgIHZhciAkY2FudmFzID0gJCgnPGNhbnZhcz4nKTtcbiAgICAgICAgICBmYWJyaWMudXRpbC5kcmF3RmlsdGVyKCRjYW52YXNbMF0sIGRhdGEudGFyZ2V0Ll9lbGVtZW50LCBzdGF0ZS5pZCwge1xuICAgICAgICAgICAgaGVpZ2h0OiAyMlxuICAgICAgICAgIH0pO1xuICAgICAgICAgICRlbC5wcmVwZW5kKCRjYW52YXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkZWw7XG4gICAgICB9LFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsLCBmaWx0ZXJzRGF0YSkge1xuICAgICAgICAgIHZhciBvcHRpb25zID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHZhbCA9PSBcIm5vbmVcIikge1xuICAgICAgICAgICAgdmFsID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBfZiA9IF8uZmluZFdoZXJlKGZpbHRlcnNEYXRhLCB7aWQ6IHZhbH0pO1xuICAgICAgICAgICAgX2YuZW5hYmxlZCA9ICFfZi5lbmFibGVkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBfZi5vcHRpb25zKSB7XG4gICAgICAgICAgICAgIGlmICgkLmlzTnVtZXJpYyhfZi5vcHRpb25zW2ldKSkge1xuICAgICAgICAgICAgICAgIF9mLm9wdGlvbnNbaV0gPSBwYXJzZUZsb2F0KF9mLm9wdGlvbnNbaV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX2YuZW5hYmxlZCkge1xuICAgICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gX2Yub3B0aW9ucykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnNbaV0gPSBfZi5vcHRpb25zW2ldLnZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNldEZpbHRlcih7XG4gICAgICAgICAgICB0eXBlOiB2YWwsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJzLmxlbmd0aCA/IGZhYnJpYy51dGlsLnN0cmluZy5jYXBpdGFsaXplKHRoaXMuZmlsdGVyc1swXS50eXBlLCB0cnVlKSA6IFwibm9uZVwiXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgIHZhciBfZmlsdGVycyA9IHRoaXMuZ2V0RmlsdGVyc0RhdGEoKTtcbiAgICAgICAgICBmb3IgKHZhciBpIGluIF9maWx0ZXJzKSB7XG4gICAgICAgICAgICBfZmlsdGVyc1tpXS5pZCA9IF9maWx0ZXJzW2ldLnR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBbe1xuICAgICAgICAgICAgaWQ6ICdub25lJyxcbiAgICAgICAgICAgIHRleHQ6ICdvcmlnaW5hbCcsXG4gICAgICAgICAgICBlbmFibGVkOiAhdGhpcy5maWx0ZXJzIHx8ICF0aGlzLmZpbHRlcnMubGVuZ3RoXG4gICAgICAgICAgfV0uY29uY2F0KF9maWx0ZXJzKTtcblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KVxufSk7XG5cbi8vXG4vLyBmYWJyaWMuSW1hZ2UuZmlsdGVyTWFuYWdlciA9IHtcbi8vXG4vLyAgIC8vaGlkZTogZnVuY3Rpb24ob2JqZWN0KXtcbi8vICAgLy9cbi8vICAgLy99LFxuLy8gICBzaG93OiBmdW5jdGlvbiAob2JqZWN0KSB7XG4vLyAgICAgdGhpcy5hY3RpdmVPYmplY3QgPSBvYmplY3Q7XG4vLyAgICAgdGhpcy5maXJlKCdzaG93Jywgb2JqZWN0KTtcbi8vICAgICB0aGlzLm9uKCd0YXJnZXQ6Y2hhbmdlZCcsIG9iamVjdClcbi8vICAgfVxuLy8gLy8gfTtcblxuXG5cbi8vIGZhYnJpYy51dGlsLm9ic2VydmFibGUoZmFicmljLkltYWdlLmZpbHRlck1hbmFnZXIpO1xuXG5mYWJyaWMudXRpbC5kcmF3RmlsdGVyID0gZnVuY3Rpb24oZWxlbWVudCxzcmMsIGZpbHRlck5hbWUgLG9wdGlvbnMpe1xuICBpZihzcmMuY29uc3RydWN0b3IgPT09IFN0cmluZyl7XG4gICAgZmFicmljLnV0aWwubG9hZEltYWdlKHNyYyxmdW5jdGlvbihlbCl7XG4gICAgICBmYWJyaWMudXRpbC5fZHJhd0ZpbHRlcihlbGVtZW50LCBlbCwgZmlsdGVyTmFtZSAsb3B0aW9ucyk7XG4gICAgfSlcbiAgfWVsc2V7XG4gICAgZmFicmljLnV0aWwuX2RyYXdGaWx0ZXIoZWxlbWVudCxzcmMsIGZpbHRlck5hbWUgLG9wdGlvbnMpO1xuICB9XG59O1xuXG5mYWJyaWMudXRpbC5fZHJhd0ZpbHRlciA9IGZ1bmN0aW9uKGVsZW1lbnQsIGVsLCBmaWx0ZXJOYW1lICxvcHRpb25zKXtcblxuICB2YXIgY3R4ID1lbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcbiAgaWYob3B0aW9ucyl7XG4gICAgaWYob3B0aW9ucy53aWR0aCAmJiBvcHRpb25zLmhlaWdodCl7XG4gICAgICBlbGVtZW50LndpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICAgIGVsZW1lbnQuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQ7XG4gICAgfWVsc2UgaWYob3B0aW9ucy53aWR0aCl7XG4gICAgICBlbGVtZW50LndpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICAgIGVsZW1lbnQuaGVpZ2h0ID0gb3B0aW9ucy53aWR0aCAqIChlbC5oZWlnaHQgLyBlbC53aWR0aCk7XG4gICAgfWVsc2UgaWYob3B0aW9ucy5oZWlnaHQpe1xuICAgICAgZWxlbWVudC5oZWlnaHQgPSBvcHRpb25zLmhlaWdodDtcbiAgICAgIGVsZW1lbnQud2lkdGggPSBvcHRpb25zLmhlaWdodCAqIChlbC53aWR0aCAvIGVsLmhlaWdodCk7XG4gICAgfVxuICB9XG5cbiAgY3R4LmRyYXdJbWFnZShlbCwwLDAsZWxlbWVudC53aWR0aCxlbGVtZW50LmhlaWdodCk7XG4gIGlmKCFmaWx0ZXJOYW1lKXJldHVybjtcbiAgZmlsdGVyTmFtZSA9IGZhYnJpYy51dGlsLnN0cmluZy5jYXBpdGFsaXplKGZpbHRlck5hbWUsdHJ1ZSk7XG5cbiAgaWYoZmFicmljLkltYWdlLmZpbHRlcnNbZmlsdGVyTmFtZV0pe1xuICAgIHZhciBfZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzW2ZpbHRlck5hbWVdKClcbiAgfWVsc2V7XG4gICAgdmFyIF9maWx0ZXIgPWZhYnJpYy5JbWFnZS5maWx0ZXJzW2ZpbHRlck5hbWVdLmNyZWF0ZSh7fSk7XG4gIH1cblxuICAvL3ZhciBfZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzW2ZpbHRlck5hbWVdO1xuICBpZihfZmlsdGVyKXtcbiAgICB2YXIgX2ZvID0gZmFicmljLkltYWdlLmZpbHRlcnNbZmlsdGVyTmFtZV0ucHJvdG90eXBlLm9wdGlvbnM7XG4gICAgdmFyIGZpbHRlck9wdGlvbnMgPSB7fTtcbiAgICBmb3IodmFyIGkgaW4gX2ZvKXtcbiAgICAgIGZpbHRlck9wdGlvbnNbaV0gPSBfZm9baV0udmFsdWU7XG5cbiAgICB9XG4gICAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChfZmlsdGVyLGZpbHRlck9wdGlvbnMpO1xuICAgIF9maWx0ZXIuaW1hZ2VEYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLDAsZWxlbWVudC53aWR0aCxlbGVtZW50LmhlaWdodCk7XG4gICAgX2ZpbHRlci5hcHBseVRvKGVsZW1lbnQpO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9tb2R1bGVzL2ltYWdlLmZpbHRlcnMuanNcbi8vIG1vZHVsZSBpZCA9IDUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuKiBJbnRlcmFjdGl2ZU1vZGUgbWl4aW4uIEFsbG93IHRvIHN3aXRjaCBiZXR3ZWVuIHBhbi9lZGl0L2RyYXdpbmcgY2FudmFzIG1vZGVzLlxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBfbW91c2VfZG93bl9vdmVyd3JpdHRlbiA9IGZhYnJpYy5DYW52YXMucHJvdG90eXBlLl9vbk1vdXNlRG93bjtcbnZhciBfbW91c2VfdXBfb3ZlcndyaXR0ZW4gPSBmYWJyaWMuQ2FudmFzLnByb3RvdHlwZS5fb25Nb3VzZVVwO1xudmFyIF9tb3VzZV9tb3ZlX292ZXJ3cml0dGVuID0gZmFicmljLkNhbnZhcy5wcm90b3R5cGUuX29uTW91c2VNb3ZlO1xuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5TbGlkZUNhbnZhcy5wcm90b3R5cGUsIHtcbiAgX2luaXRFdmVudExpc3RlbmVyc19vdmVyd3JpdHRlbjogZmFicmljLkNhbnZhcy5wcm90b3R5cGUuX2luaXRFdmVudExpc3RlbmVycyxcbiAgX2luaXRFdmVudExpc3RlbmVyczogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2luaXRFdmVudExpc3RlbmVyc19vdmVyd3JpdHRlbigpO1xuICAgIHRoaXMuX19fb25LZXlEb3duID0gdGhpcy5fb25LZXlEb3duLmJpbmQodGhpcyk7XG4gICAgZmFicmljLnV0aWwuYWRkTGlzdGVuZXIoZmFicmljLndpbmRvdywgJ2tleWRvd24nLCB0aGlzLl9fX29uS2V5RG93bik7XG4gIH0sXG4gIF9yZW1vdmVMaXN0ZW5lcnNfb3ZlcndyaXR0ZW46IGZhYnJpYy5DYW52YXMucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVycyxcbiAgcmVtb3ZlTGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzX292ZXJ3cml0dGVuKCk7XG4gICAgZmFicmljLnV0aWwucmVtb3ZlTGlzdGVuZXIoZmFicmljLndpbmRvdywgJ2tleWRvd24nLCB0aGlzLl9fX29uS2V5RG93bik7XG4gIH0sXG4gIF9vbktleURvd246IGZ1bmN0aW9uIChlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FwcGx5TWl4ZWRNb2RlKGUpO1xuICB9LFxuICBnZXRJbnRlcmFjdGl2ZU1vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcmFjdGl2ZU1vZGU7XG4gIH0sXG4gIHNldEludGVyYWN0aXZlTW9kZTogZnVuY3Rpb24gKHRvb2wpIHtcbiAgICAvL3RvZG8gY2hlY2t0aGlzIG91dFxuICAgIC8vIGlmICh0b29sID09PSAnaGFuZCcpIHtcbiAgICAvLyAgIHRoaXMuc2V0Q3Vyc29yKCdwb2ludGVyJyk7XG4gICAgLy8gfVxuICAgIHRoaXMuaXNEcmF3aW5nTW9kZSA9ICh0b29sID09PSAnZHJhdycpO1xuICAgIHRoaXMuaXNIYW5kTW9kZSA9ICh0b29sID09PSAnaGFuZCcpO1xuICAgIHRoaXMuaW50ZXJhY3RpdmUgPSAodG9vbCAhPT0gJ2Rpc2FibGVkJyk7XG4gICAgdGhpcy5pc01peGVkTW9kZSA9ICh0b29sID09PSAnbWl4ZWQnKTtcblxuICAgIGlmICghdGhpcy5pbnRlcmFjdGl2ZSkge1xuICAgICAgdGhpcy51cHBlckNhbnZhc0VsLnN0eWxlLmN1cnNvciA9ICdkZWZhdWx0JztcbiAgICB9XG4gICAgdGhpcy5pbnRlcmFjdGl2ZU1vZGUgPSB0b29sO1xuICB9LFxuXG4gIC8qKlxuICAgKiAgY3VycmVudCBtb2RlXG4gICAqICBAdmFsdWVzIGRlZmF1bHQgfCBoYW5kIHwgc2VsZWN0aW9uXG4gICAqICBAY29tbWVudFxuICAgKiAgICAgIGhhbmQgICAgICAtIG1vdmluZyBjYW52YXNcbiAgICogICAgICBkcmF3IC0gZHJhd2luZyByZWFjdGFuZ2xlc1xuICAgKiAgICAgIHNlbGVjdGlvbiAtIGRlZmF1bHQgYmVoYXZpb3JcbiAgICovXG4gIGludGVyYWN0aXZlTW9kZTogJ2RlZmF1bHQnLFxuXG4gIGlzSGFuZE1vZGU6IGZhbHNlLFxuICBfaGFuZE1vZGVDdXJzb3JNb3ZlOiBmYWxzZSxcbiAgX2hhbmRNb2RlQ3Vyc29yRG93bjogZmFsc2UsXG4gIF9oYW5kTW9kZUN1cnNvclBvc2l0aW9uOiB7eDogMCwgeTogMH0sXG4gIF9oYW5kTW9kZU1vdXNlTW92ZTogZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAodGhpcy5faGFuZE1vZGVDdXJzb3JEb3duID09PSB0cnVlKSB7XG5cbiAgICAgIGlmIChlLnBhZ2VZID09PSB0aGlzLl9oYW5kTW9kZUN1cnNvclBvc2l0aW9uLnkgJiYgZS5wYWdlWCA9PT0gdGhpcy5faGFuZE1vZGVDdXJzb3JQb3NpdGlvbi54KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faGFuZE1vZGVDdXJzb3JNb3ZlID0gdHJ1ZTtcblxuICAgICAgdmFyIHNjcm9sbCA9IHt4OiB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzRdLCB5OiB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzVdfTtcblxuICAgICAgdmFyIG5ld1Njcm9sbCA9IHtcbiAgICAgICAgeDogc2Nyb2xsLnggLSAodGhpcy5faGFuZE1vZGVDdXJzb3JQb3NpdGlvbi54IC0gZS5wYWdlWCksXG4gICAgICAgIHk6IHNjcm9sbC55IC0gKHRoaXMuX2hhbmRNb2RlQ3Vyc29yUG9zaXRpb24ueSAtIGUucGFnZVkpXG4gICAgICB9O1xuXG4gICAgICB2YXIgZGltcyA9IHtcbiAgICAgICAgd2lkdGg6IHRoaXMuc2l6ZS53aWR0aCAqIHRoaXMuem9vbSAtIHRoaXMubG93ZXJDYW52YXNFbC53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLnNpemUuaGVpZ2h0ICogdGhpcy56b29tIC0gdGhpcy5sb3dlckNhbnZhc0VsLmhlaWdodFxuICAgICAgfTtcbiAgICAgIC8qICB0b2RvIG5lZWQgdG8gYWRkIHNvbWUgcmVzdHJpY3Rpb25zIGxhdGVyXG4gICAgICAgLy9NYXRoLm1heChNYXRoLm1pbigwLG5ld1Njcm9sbC54KSwtZGltcy53aWR0aCk7XG4gICAgICAgLy9NYXRoLm1heChNYXRoLm1pbigwLG5ld1Njcm9sbC55KSwtZGltcy5oZWlnaHQpO1xuICAgICAgICovXG4gICAgICB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzRdID0gbmV3U2Nyb2xsLng7XG4gICAgICB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzVdID0gbmV3U2Nyb2xsLnk7XG5cbiAgICAgIHRoaXMuZmlyZSgndmlld3BvcnQ6dHJhbnNsYXRlJyk7XG5cbiAgICAgIHRoaXMucmVuZGVyQWxsKCk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fb2JqZWN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0aGlzLl9vYmplY3RzW2ldLnNldENvb3JkcygpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9oYW5kTW9kZUN1cnNvclBvc2l0aW9uLnkgPSBlLnBhZ2VZO1xuICAgICAgdGhpcy5faGFuZE1vZGVDdXJzb3JQb3NpdGlvbi54ID0gZS5wYWdlWDtcbiAgICB9XG4gIH0sXG4gIF9oYW5kTW9kZU1vdXNlVXA6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9oYW5kTW9kZUN1cnNvckRvd24gPSBmYWxzZTtcbiAgICBpZiAoIXRoaXMuX2hhbmRNb2RlQ3Vyc29yTW92ZSkge1xuXG4gICAgfVxuICB9LFxuICBfaGFuZE1vZGVNb3VzZURvd246IGZ1bmN0aW9uIChlKSB7XG5cbiAgICB0aGlzLl9oYW5kTW9kZUN1cnNvck1vdmUgPSBmYWxzZTtcbiAgICB0aGlzLl9oYW5kTW9kZUN1cnNvckRvd24gPSB0cnVlO1xuICAgIHRoaXMuX2hhbmRNb2RlQ3Vyc29yUG9zaXRpb24gPSB7XG4gICAgICB5OiBlLnBhZ2VZLFxuICAgICAgeDogZS5wYWdlWFxuICAgIH07XG4gIH0sXG4gIGhhbmRNb2RlRW5hYmxlZDogZmFsc2UsXG4gIGhhbmRNb2RlS2V5OiBcIkFsdFwiLFxuICBfYXBwbHlNaXhlZE1vZGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgdGhpcy5fY3VycmVudF90YXJnZXQgPSB0aGlzLmZpbmRUYXJnZXQoZSk7XG5cbiAgICBpZiAodGhpcy5oYW5kTW9kZUVuYWJsZWQgJiYgZS5hbHRLZXkgfHwgZS5rZXkgPT09IHRoaXMuaGFuZE1vZGVLZXkpIHtcbiAgICAgIC8vaWYgc2hpZnQgdXNlIGhhbmQgbW9kZVxuICAgICAgaWYgKCF0aGlzLmlzSGFuZE1vZGUpIHtcbiAgICAgICAgdGhpcy5pc0hhbmRNb2RlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pc0RyYXdpbmdNb2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2V0Q3Vyc29yKCdwb2ludGVyJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzTWl4ZWRNb2RlICYmICF0aGlzLl9pc0N1cnJlbnRseURyYXdpbmcgJiYgIXRoaXMuX2N1cnJlbnRUcmFuc2Zvcm0pIHtcblxuICAgICAgdGhpcy5pc0hhbmRNb2RlID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLl9jdXJyZW50X3RhcmdldCkge1xuICAgICAgICBpZiAodGhpcy5mcmVlRHJhd2luZ0JydXNoICYmIHRoaXMuX2N1cnJlbnRfdGFyZ2V0LmFsbG93RHJhd2luZykge1xuICAgICAgICAgIHZhciBjb3JuZXIgPSB0aGlzLl9jdXJyZW50X3RhcmdldC5fZmluZFRhcmdldENvcm5lcih0aGlzLmdldFBvaW50ZXIoZSwgdHJ1ZSkpO1xuICAgICAgICAgIGlmICghY29ybmVyKSB7XG4gICAgICAgICAgICB0aGlzLmlzRHJhd2luZ01vZGUgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzRHJhd2luZ01vZGUgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0RyYXdpbmdNb2RlKSB7XG4gICAgICAgICAgdGhpcy5pc0RyYXdpbmdNb2RlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmZyZWVEcmF3aW5nQnJ1c2ggJiYgIXRoaXMuaXNEcmF3aW5nTW9kZSkge1xuICAgICAgICAgIHRoaXMuc2V0Q3Vyc29yKHRoaXMuZnJlZURyYXdpbmdDdXJzb3IpO1xuICAgICAgICAgIHRoaXMuaXNEcmF3aW5nTW9kZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pc0hhbmRNb2RlID0gZmFsc2U7XG4gICAgfVxuXG4gIH0sXG4gIF9vbk1vdXNlTW92ZTogZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoIXRoaXMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9hcHBseU1peGVkTW9kZShlKTtcblxuICAgIGlmICh0aGlzLmlzSGFuZE1vZGUpIHtcblxuICAgICAgaWYgKHRoaXMuX2N1cnJlbnRfdGFyZ2V0ICYmIHRoaXMuX2N1cnJlbnRfdGFyZ2V0LnNlbGVjdGFibGVfb3ZlcndyaXR0ZW4pIHtcbiAgICAgICAgdGhpcy5fY3VycmVudF90YXJnZXQuc2VsZWN0YWJsZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9oYW5kTW9kZUFjdGl2ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFuZE1vZGVNb3VzZU1vdmUoZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmZpcmUoJ21vdXNlOm1vdmUnLCB7dGFyZ2V0OiB0aGlzLl9jdXJyZW50X3RhcmdldCwgZTogZX0pO1xuICAgICAgdGhpcy5fY3VycmVudF90YXJnZXQgJiYgdGhpcy5fY3VycmVudF90YXJnZXQuZmlyZSgnbW91c2Vtb3ZlJywge2U6IGV9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gX21vdXNlX21vdmVfb3ZlcndyaXR0ZW4uY2FsbCh0aGlzLCBlKTtcbiAgICB9XG4gIH0sIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uU2NhbGU6IGZ1bmN0aW9uIChlLCB0cmFuc2Zvcm0sIHgsIHkpIHtcblxuICAgIHZhciB1c2VVbmlTY2FsZSA9IGUuc2hpZnRLZXkgXiB0aGlzLnNoaWZ0SW52ZXJ0ZWQ7XG4gICAgLy8gcm90YXRlIG9iamVjdCBvbmx5IGlmIHNoaWZ0IGtleSBpcyBub3QgcHJlc3NlZFxuICAgIC8vIGFuZCBpZiBpdCBpcyBub3QgYSBncm91cCB3ZSBhcmUgdHJhbnNmb3JtaW5nXG4gICAgaWYgKCh1c2VVbmlTY2FsZSB8fCB0aGlzLnVuaVNjYWxlVHJhbnNmb3JtKSAmJiAhdHJhbnNmb3JtLnRhcmdldC5nZXQoJ2xvY2tVbmlTY2FsaW5nJykpIHtcbiAgICAgIHRyYW5zZm9ybS5jdXJyZW50QWN0aW9uID0gJ3NjYWxlJztcbiAgICAgIHJldHVybiB0aGlzLl9zY2FsZU9iamVjdCh4LCB5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBTd2l0Y2ggZnJvbSBhIG5vcm1hbCByZXNpemUgdG8gcHJvcG9ydGlvbmFsXG4gICAgICBpZiAoIXRyYW5zZm9ybS5yZXNldCAmJiB0cmFuc2Zvcm0uY3VycmVudEFjdGlvbiA9PT0gJ3NjYWxlJykge1xuICAgICAgICB0aGlzLl9yZXNldEN1cnJlbnRUcmFuc2Zvcm0oZSk7XG4gICAgICB9XG5cbiAgICAgIHRyYW5zZm9ybS5jdXJyZW50QWN0aW9uID0gJ3NjYWxlRXF1YWxseSc7XG4gICAgICByZXR1cm4gdGhpcy5fc2NhbGVPYmplY3QoeCwgeSwgJ2VxdWFsbHknKTtcbiAgICB9XG4gIH0sXG4gIHNoaWZ0SW52ZXJ0ZWQ6IGZhbHNlLFxuICBfc2V0Q3Vyc29yRnJvbUV2ZW50X292ZXJ3cml0dGVuOiBmYWJyaWMuQ2FudmFzLnByb3RvdHlwZS5fc2V0Q3Vyc29yRnJvbUV2ZW50LFxuICBfc2V0Q3Vyc29yRnJvbUV2ZW50OiBmdW5jdGlvbiAoZSwgdGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuaXNIYW5kTW9kZSkge1xuICAgICAgdGhpcy5zZXRDdXJzb3IoJ3BvaW50ZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2V0Q3Vyc29yRnJvbUV2ZW50X292ZXJ3cml0dGVuKGUsIHRhcmdldCk7XG4gICAgfVxuICB9LFxuICBfb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCF0aGlzLmludGVyYWN0aXZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICB0aGlzLl9hcHBseU1peGVkTW9kZShlKTtcbiAgICBpZiAodGhpcy5pc0hhbmRNb2RlICYmIHRoaXMuX2N1cnJlbnRfdGFyZ2V0KSB7XG4gICAgICB0aGlzLl9jdXJyZW50X3RhcmdldC5zZWxlY3RhYmxlX292ZXJ3cml0dGVuID0gdGhpcy5fY3VycmVudF90YXJnZXQuc2VsZWN0YWJsZTtcbiAgICAgIHRoaXMuX2N1cnJlbnRfdGFyZ2V0LnNlbGVjdGFibGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBfbW91c2VfZG93bl9vdmVyd3JpdHRlbi5jYWxsKHRoaXMsIGUpO1xuXG5cbiAgICBpZiAodGhpcy5pc0hhbmRNb2RlKSB7XG5cbiAgICAgIGlmICh0aGlzLl9jdXJyZW50X3RhcmdldCAmJiB0aGlzLl9jdXJyZW50X3RhcmdldC5zZWxlY3RhYmxlX292ZXJ3cml0dGVuKSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRfdGFyZ2V0LnNlbGVjdGFibGUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5faGFuZE1vZGVBY3RpdmUgPSB0cnVlO1xuICAgICAgdGhpcy5faGFuZE1vZGVNb3VzZURvd24oZSk7XG4gICAgfVxuICB9LFxuXG4gIF9vbk1vdXNlVXA6IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCF0aGlzLmludGVyYWN0aXZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIF9tb3VzZV91cF9vdmVyd3JpdHRlbi5jYWxsKHRoaXMsIGUpO1xuXG4gICAgaWYgKHRoaXMuaXNIYW5kTW9kZSkge1xuICAgICAgdGhpcy5faGFuZE1vZGVBY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9tb2R1bGVzL2ludGVyYWN0aXZlTW9kZS5qc1xuLy8gbW9kdWxlIGlkID0gNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5mYWJyaWMub2JqZWN0c0xpYnJhcnkgPSB7XG4gIHRleHQ6IHtcbiAgICB0aXRsZTogXCJUZXh0XCIsXG4gICAgdHlwZTogXCJpLXRleHRcIixcbiAgICB0ZXh0OiBcItCi0LXQutGB0YJcIlxuICB9LFxuICBsaW5lOiB7XG4gICAgdHlwZTogXCJsaW5lXCIsXG4gICAgc3Ryb2tlV2lkdGg6IDUsXG4gICAgc3Ryb2tlOiBcImJsYWNrXCIsXG4gICAgc2NhbGVYOiAxLFxuICAgIHNjYWxlWTogMSxcbiAgICB4MTogMCxcbiAgICB4MjogMTAwLFxuICAgIHkxOiAwLFxuICAgIHkyOiA1MFxuICB9LFxuICB0cmlhbmdsZToge1xuICAgIHR5cGU6IFwidHJpYW5nbGVcIixcbiAgICB3aWR0aDogZnVuY3Rpb24odyxoKXsgcmV0dXJuIE1hdGgubWluKHcsaCkgLSA0fSxcbiAgICBoZWlnaHQ6IGZ1bmN0aW9uKHcsaCl7IHJldHVybiBNYXRoLm1pbih3LGgpIC0gNH1cbiAgfSxcbiAgcmVjdGFuZ2xlOiB7XG4gICAgdHlwZTogXCJyZWN0XCIsXG4gICAgd2lkdGg6IGZ1bmN0aW9uKHcsaCl7IHJldHVybiBNYXRoLm1pbih3LGgpIC0gNH0sXG4gICAgaGVpZ2h0OiBmdW5jdGlvbih3LGgpeyByZXR1cm4gTWF0aC5taW4odyxoKSAtIDR9XG4gIH0sXG4gIHBvbHlnb246IHtcbiAgICBzY2FsZVg6IDEsXG4gICAgc2NhbGVZOiAxLFxuICAgIHR5cGU6IFwicG9seWdvblwiLFxuICAgIHBvaW50czogZnVuY3Rpb24odyxoKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB7eDogMjUsIHk6IDF9LFxuICAgICAgICB7eDogMzEsIHk6IDE4fSxcbiAgICAgICAge3g6IDQ5LCB5OiAxOH0sXG4gICAgICAgIHt4OiAzNSwgeTogMjl9LFxuICAgICAgICB7eDogNDAsIHk6IDQ2fSxcbiAgICAgICAge3g6IDI1LCB5OiAzNn0sXG4gICAgICAgIHt4OiAxMCwgeTogNDZ9LFxuICAgICAgICB7eDogMTUsIHk6IDI5fSxcbiAgICAgICAge3g6ICAxLCB5OiAxOH0sXG4gICAgICAgIHt4OiAxOSwgeTogMTh9XG4gICAgICBdO1xuICAgIH1cbiAgfSxcbiAgcGF0aDoge1xuICAgIFwidHlwZVwiOiBcInBhdGhcIixcbiAgICBcInBhdGhcIjogIFwibTU4MS4wNzc5NDIsMi41MzczNTljLTIuMDUzMjIzLDAuMDQ3MDcxIC00LjA0MDcxLDAuMTg4MzQ4IC02LjEwODA5MywwLjM1MjkwN2MtMzMuMDU1NDIsMi42NjM5MTggLTYyLjIzNTkwMSwxOS42NDA1NDEgLTc3LjA1NzY3OCw0NC45MjU5NTNsLTcuODU3MywxOS4xMzUzMTljMS42OTg4MjIsLTYuNjMzMTQ0IDQuMzAyOTc5LC0xMy4wNjUzODQgNy44NTczLC0xOS4xMzUzMTljLTI2LjQzMDY5NSwtMjIuMTYyOTMgLTYzLjUzMTY3NywtMzIuMzg4NDQ1IC0xMDAuMTkyMzgzLC0yNy41NzQzNzNjLTM2LjY2MTQ2OSw0Ljc4ODM1MyAtNjguNTAzMDgyLDI0LjA0MTc1OCAtODUuOTAxOTc4LDUxLjkzNTIyNWMtNDkuMTE2NDg2LC0yNC40OTAwMTMgLTExMC4zNDI4OCwtMjIuOTk5NDU0IC0xNTcuNzExODA3LDMuODYwMDkyYy00Ny4zNjkxNjQsMjYuODYwNjggLTcyLjYxNjczLDc0LjQwNTUxIC02NC45NDExNjIsMTIyLjM4MzA4bDUuMDIxMzU1LDE5LjQ5OTY4Yy0yLjI2MzMyOSwtNi4zODUwMSAtMy45NjA3OTMsLTEyLjg4NzY5NSAtNS4wMjEzNTUsLTE5LjQ5OTY4bC0wLjc2MTk0OCwxLjc5ODU2OWMtNDEuMTc5MTY1LDMuNjI1MjQ0IC03NC45NDUzNzUsMjkuNDY1MTM0IC04My43MTYzOTgsNjQuMDU5MjM1Yy04Ljc3MTgwNSwzNC41OTc3NDggOS40NjcwMSw3MC4wODU4NzYgNDUuMTg1NjIxLDg3Ljk2NzAxbDU1Ljc3NjU1OCwxMC45NzMxMTRjLTE5LjQ4MDIxNywxLjI5MTk2MiAtMzguOTE1NTQzLC0yLjUzNDUxNSAtNTUuNzc2NTU4LC0xMC45NzMxMTRjLTI3LjU0NzgsMjQuOTY4MTcgLTMzLjg4ODUxNiw2MS45MzUzMDMgLTE1LjcxNDkyLDkyLjQ2NzgzNGMxOC4xNzM3MzMsMzAuNTI0NzE5IDU2Ljk4ODg5OSw0OC4xMTA2ODcgOTcuMDMwNDU3LDQ0LjExNzM0bDI0LjMzOTcyMiwtNS4yMTEwOWMtNy44Mjc0OTksMi42NTE2MTEgLTE1Ljk2MDk4Myw0LjM3OTA1OSAtMjQuMzM5NzIyLDUuMjExMDljMjIuNzMwMDQyLDMzLjg1NzI2OSA2MC40MjgxOTIsNTguNTU2MjQ0IDEwNC42Njg5Myw2OC4zODM1MTRjNDQuMjQ5MSw5LjgxMzY2IDkxLjI0MDk1Miw0LjAxNDc3MSAxMzAuNDI1OTQ5LC0xNi4wOTQ2MDRjMzEuOTY3MDEsNDAuNzkzODIzIDg4LjcwNzY0Miw2Mi4yMTc0NjggMTQ1LjU5NjMxMyw1NC45OTcwN2M1Ni45MDI0NjYsLTcuMjE5NjY2IDEwMy44MzM5ODQsLTQxLjgxNDI3IDEyMC41MDEzNDMsLTg4Ljc3MDk5Nmw1Ljc4MTQzMywtMjYuMjM5NTMyYy0wLjg2MzcwOCw4LjkwOTU0NiAtMi43NDIyNDksMTcuNjgxMzY2IC01Ljc4MTQzMywyNi4yMzk1MzJjMzkuMTMzMzAxLDIwLjc1MzY2MiA4OC4zNTMzMzMsMjEuOTI3MzA3IDEyOC43ODUwOTUsMy4wNDkzMTZjNDAuNDM5ODE5LC0xOC44NzQwODQgNjUuNjY1NzcxLC01NC44NjkwNDkgNjYuMDM2MTMzLC05NC4wNzgyNDdsLTE0LjQ5NTYwNSwtNTguNTgwNTk3bC01Ny4xMDU3MTMsLTM5LjYzMDc2OGM0NC4xNjM0NTIsMjIuMzc0NTczIDcxLjk5MjYxNSw1Ni40NjcyNTUgNzEuNjAxMzE4LDk4LjIxMTM2NWM1Mi40OTcwNywwLjQ0ODE4MSA5Ny4xMDMzOTQsLTM1Ljk1NjU3MyAxMTcuMTEyNDI3LC03Ny43MjYyODhjMjAuMDExNTk3LC00MS43Njk4MzYgMTIuNDQzNjA0LC04OS4zOTY3NTkgLTE5Ljg2NDkyOSwtMTI1LjE2NDY0MmMxMy40MDExODQsLTI2LjYzNzY5NSAxMi42MDk5ODUsLTU2LjkzNzMzMiAtMi4xODM0NzIsLTgzLjAzNDA4OGMtMTQuNzg2MTk0LC0yNi4wOTc4OTMgLTQyLjA2NTQ5MSwtNDUuNDc2ODkxIC03NC44NzMwNDcsLTUzLjA5ODMzNWMtNy4zNDE0MzEsLTM0LjU4MDkyOSAtMzcuNjAyNjYxLC02Mi40MDQ0ODIgLTc3LjYwMDcwOCwtNzEuNTI2MjkzYy0zOS45OTg0NzQsLTkuMTIxMzY4IC04Mi41ODQ4MzksMi4xMjM5OTIgLTEwOS4zNjQ4MDcsMjguOTI2MTIzbC0xNi4yNTgxNzksMjIuMTk4MTdjNC4xNTc5NTksLTguMDE4NjEyIDkuNTgzOTIzLC0xNS40OTUyMTMgMTYuMjU4MTc5LC0yMi4xOTgxN2MtMTguODc2OTUzLC0yMS4wNjA3MTMgLTQ4LjQ4NjAyMywtMzIuOTU0MDYxIC03OS4zNDg5MzgsLTMyLjE1NTQwMWwwLDB6XCIsXG4gICAgXCJ3aWR0aFwiOiBmdW5jdGlvbih3LGgpe3JldHVybiB3IC0gNCB9LFxuICAgIFwiaGVpZ2h0XCI6IGZ1bmN0aW9uKHcsaCl7cmV0dXJuIGggLSA0fVxuICB9LFxuICBlbGxpcHNlOiB7XG4gICAgXCJ0eXBlXCI6IFwiZWxsaXBzZVwiLFxuICAgIFwicnhcIjogZnVuY3Rpb24odyxoKXtyZXR1cm4gdyAvMiAtIDR9LFxuICAgIFwicnlcIjogZnVuY3Rpb24odyxoKXtyZXR1cm4gaC8gMiAtIDR9XG4gIH0sXG4gIGNpcmNsZToge1xuICAgIHR5cGU6IFwiY2lyY2xlXCIsXG4gICAgcmFkaXVzOiBmdW5jdGlvbih3LGgpeyByZXR1cm4gTWF0aC5taW4odyxoKS8yIC0gNH1cbiAgfVxufTtcblxuZmFicmljLmdldE9iamVjdHNMaXN0ID0gZnVuY3Rpb24odyxoKXtcbiAgdmFyIF9saWIgPSBbXTtcbiAgZm9yKHZhciBpIGluIHRoaXMub2JqZWN0c0xpYnJhcnkpe1xuICAgIHZhciBvID0gX2xpYltpXSA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZURlZXAodGhpcy5vYmplY3RzTGlicmFyeVtpXSk7XG4gICAgby50aXRsZSA9IG8udGl0bGUgfHwgby50eXBlO1xuICAgIGlmKG8ud2lkdGggPT09IDAgKSBvLndpZHRoID0gdztcbiAgICBpZihvLmhlaWdodCA9PT0gMCApIG8uaGVpZ2h0ID0gaDtcbiAgICBmb3IodmFyIGogaW4gbyl7XG4gICAgICBpZihvW2pdLmNvbnN0cnVjdG9yID09IEZ1bmN0aW9uKXtcbiAgICAgICAgb1tqXSA9IG9bal0uY2FsbChvLHcsaCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBfbGliO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbW9kdWxlcy9saWJyYXJ5LmpzXG4vLyBtb2R1bGUgaWQgPSA1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuQXBwbGljYXRpb24ucHJvdG90eXBlLCB7XG4gIC8vIGxvYWRlclRlbXBsYXRlOiBcIjxzcGFuIGNsYXNzPSdmYSBmYS1wdWxzZSBmYS1zcGlubmVyIGNhbnZhcy1sb2FkLXNwaW5uZXInPjwvc3Bhbj5cIixcbiAgbG9hZGVySWNvbjogICAnZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwnICsgcmVxdWlyZSgnYmFzZTY0LWxvYWRlciEuLy4uL21lZGlhL2xvYWRlci5zdmcnKSxcbiAgbG9hZGVyQ29udGFpbmVyOiBudWxsLFxuICBfc2hvd01haW5Mb2FkZXJJbmRpY2F0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxvYWRlckVsLnNob3coKTtcbiAgICB0aGlzLmxvYWRlckNvbnRhaW5lci5hZGRDbGFzcyhcInByb2Nlc3NpbmdcIik7XG4gIH0sXG4gIF9oaWRlTWFpbkxvYWRlckluZGljYXRvcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubG9hZGVyRWwuaGlkZSgpO1xuICAgIHRoaXMubG9hZGVyQ29udGFpbmVyLnJlbW92ZUNsYXNzKFwicHJvY2Vzc2luZ1wiKTtcbiAgfSxcbiAgc2V0TG9hZGVyVGVtcGxhdGU6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICBpZih0aGlzLnZpcnR1YWwpIHJldHVybiBmYWxzZTtcbiAgICB0aGlzLmxvYWRlclRlbXBsYXRlID0gdmFsLnJlcGxhY2UoXCJ7bG9hZGVySWNvbn1cIix0aGlzLmxvYWRlckljb24pO1xuICAgIGlmKHZhbCkge1xuICAgICAgdGhpcy5sb2FkZXJDb250YWluZXIgPSAkKHRoaXMubG9hZGVyQ29udGFpbmVyKTtcbiAgICAgIHRoaXMubG9hZGVyRWwgPSAkKHRoaXMubG9hZGVyVGVtcGxhdGUpLmhpZGUoKTtcbiAgICAgIHRoaXMubG9hZGVyQ29udGFpbmVyLmFwcGVuZCh0aGlzLmxvYWRlckVsKTtcbiAgICAgIC8vIHRoaXMub24oXCJsb2FkaW5nOmJlZ2luXCIsIHRoaXMuX3Nob3dNYWluTG9hZGVySW5kaWNhdG9yKTtcbiAgICAgIC8vIHRoaXMub24oXCJsb2FkaW5nOmVuZFwiLCB0aGlzLl9oaWRlTWFpbkxvYWRlckluZGljYXRvcik7XG5cblxuICAgICAgdGhpcy5vbihcInByb2plY3Q6Y2hhbmdlZFwiLGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMucHJvamVjdC5vbihcInNsaWRlOmNoYW5nZTpiZWdpblwiLCB0aGlzLl9zaG93TWFpbkxvYWRlckluZGljYXRvci5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5wcm9qZWN0Lm9uKFwic2xpZGU6Y2hhbmdlZFwiLCB0aGlzLl9oaWRlTWFpbkxvYWRlckluZGljYXRvci5iaW5kKHRoaXMpKTtcbiAgICAgIH0pXG5cbiAgICB9XG4gIH1cbn0pO1xuXG5cbi8vIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLlNsaWRlQ2FudmFzLnByb3RvdHlwZSwge1xuLy8gICAvLyBsb2FkZXJUZW1wbGF0ZTogXCI8c3BhbiBjbGFzcz0nZmEgZmEtcHVsc2UgZmEtc3Bpbm5lciBjYW52YXMtbG9hZC1zcGlubmVyJz48L3NwYW4+XCIsXG4vLyAgIHNldExvYWRlclRlbXBsYXRlOiBmdW5jdGlvbiAodmFsKSB7XG4vLyAgICAgaWYodGhpcy52aXJ0dWFsKSByZXR1cm4gZmFsc2U7XG4vLyAgICAgdGhpcy5sb2FkZXJUZW1wbGF0ZSA9IHZhbDtcbi8vICAgICBpZih2YWwpIHtcbi8vICAgICAgIHRoaXMubG9hZGVyRWwgPSAkKHRoaXMubG9hZGVyVGVtcGxhdGUpLmhpZGUoKTtcbi8vICAgICAgICQodGhpcy53cmFwcGVyRWwpLmFwcGVuZCh0aGlzLmxvYWRlckVsKTtcbi8vICAgICAgIHRoaXMub24oXCJsb2FkaW5nOmJlZ2luXCIsIGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgdGhpcy5sb2FkZXJFbC5zaG93KCk7XG4vLyAgICAgICAgICQodGhpcy53cmFwcGVyRWwpLmFkZENsYXNzKFwicHJvY2Vzc2luZ1wiKTtcbi8vICAgICAgIH0pO1xuLy8gICAgICAgdGhpcy5vbihcImxvYWRpbmc6ZW5kXCIsIGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgdGhpcy5sb2FkZXJFbC5oaWRlKCk7XG4vLyAgICAgICAgICQodGhpcy53cmFwcGVyRWwpLnJlbW92ZUNsYXNzKFwicHJvY2Vzc2luZ1wiKTtcbi8vICAgICAgIH0pO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL21vZHVsZXMvbG9hZGVyLmpzXG4vLyBtb2R1bGUgaWQgPSA1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmZhYnJpYy5NYWdpY1dhbmQgPSByZXF1aXJlKCcuLi9wbHVnaW5zL21hZ2ljd2FuZCcpO1xuXG52YXIgTWFnaWNXYW5kID0gZmFicmljLk1hZ2ljV2FuZCA7XG5cbi8qKlxuICogUGF0aGZpbmRlciAoUGF0aGZpbmRlcikgSW50ZXJmYWNlIGZvciBNYWdpY1dhbmQgc2VsZWN0aW9uIHRvb2xcbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGF0aGZpbmRlcihvcHRpb25zKSB7XG4gIHRoaXMuaW5pdGlhbGl6ZShvcHRpb25zKTtcbn1cblxuUGF0aGZpbmRlci5wcm90b3R5cGUgPSB7XG4gIHR5cGU6ICdwYXRoZmluZGVyJyxcbiAga2VlcE9sZFNlbGVjdGlvbjogdHJ1ZSxcbiAgYWxwaGFDaGFubmVsOiB0cnVlLFxuICBwYXRoZmluZGVyTW9kZTogJ25ldycsXG4gIHNlbGVjdGlvblRvb2w6ICdtYWdpYycsXG4gIGFkamFjZW50UGl4ZWxzOiB0cnVlLFxuICBhc3luYzogZmFsc2UsXG4gIHBhdGhmaW5kZXJUb29sczogZmFsc2UsXG4gIGJsdXJSYWRpdXM6IDAsXG4gIGhhdGNoTGVuZ3RoOiA0LFxuICBjb2xvclRocmVzaG9sZDogMTUsXG4gIHNpbXBsaWZ5VG9sZXJhbnQ6IDAsXG4gIHNpbXBsaWZ5Q291bnQ6IDMwLFxuICBoYXRjaE9mZnNldDogMCxcbiAgaW1hZ2VJbmZvOiBudWxsLFxuICBtYXNrOiBudWxsLFxuICBkb3duUG9pbnQ6IG51bGwsXG4gIGFsbG93RHJhdzogZmFsc2UsXG4gIHNoYXBlU2VsZWN0aW9uVG9vbHM6IGZhbHNlLFxuICBpbml0aWFsaXplOiBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgb3B0aW9ucy5hcHBsaWNhdGlvbiAmJiBvcHRpb25zLmFwcGxpY2F0aW9uLmZpcmUoJ2VudGl0eTpjcmVhdGVkJyx7dGFyZ2V0IDogdGhpcyxvcHRpb25zIDogb3B0aW9uc30pXG5cbiAgICBmb3IgKHZhciBpIGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXNbaV0gPSBvcHRpb25zW2ldO1xuICAgIH1cbiAgfSxcbiAgYXN5bmNyb25vdXM6IGZ1bmN0aW9uIChjYikge1xuICAgIGlmICh0aGlzLmFzeW5jKSB7XG4gICAgICBzZXRUaW1lb3V0KGNiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH0sXG4gIGZpbGxXaXRoQ3VycmVudENvbG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5maWxsKHRoaXMuY29sb3IpO1xuICB9LFxuICBjbGVhck1lbW9yeTogZnVuY3Rpb24gKCkge1xuICAgIGRlbGV0ZSB0aGlzLnJlc3VsdENhbnZhcztcbiAgICBkZWxldGUgdGhpcy5lZGl0ZWRJbWFnZUNhbnZhcztcbiAgICBkZWxldGUgdGhpcy50ZXN0X3BpY3R1cmU7XG4gICAgZGVsZXRlIHRoaXMubWFzaztcbiAgfSxcbiAgaGlkZTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmVkaXRlZEltYWdlQ2FudmFzKSB7XG4gICAgICB0aGlzLmVkaXRlZEltYWdlQ2FudmFzLnJlbW92ZSgpO1xuICAgICAgdGhpcy5yZXN1bHRDYW52YXMucmVtb3ZlKCk7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgICAgdGhpcy5jbGVhck1lbW9yeSgpO1xuICAgICAgdGhpcy5maXJlKCdoaWRkZW4nKTtcbiAgICB9XG4gIH0sXG4gIHNldENvbnRhaW5lcjogZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgIGlmIChjb250YWluZXIuY29uc3RydWN0b3IgPT09IFN0cmluZykge1xuICAgICAgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29udGFpbmVyKTtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG5cbiAgICB0aGlzLnRlc3RfcGljdHVyZSA9IG5ldyBJbWFnZSgpO1xuICAgIHRoaXMudGVzdF9waWN0dXJlLm9ubG9hZCA9IHRoaXMuaW5pdENhbnZhcy5iaW5kKHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBnZXRTZWxlY3Rpb25Ub29sOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uVG9vbDtcbiAgfSxcbiAgc2V0U2VsZWN0aW9uVG9vbDogZnVuY3Rpb24gKHRvb2wpIHtcbiAgICB0aGlzLnNlbGVjdGlvblRvb2wgPSB0b29sO1xuICAgIHRoaXMuZG93blBvaW50ID0gZmFsc2UgO1xuICAgIHRoaXMuZmlyZSgndG9vbDpjaGFuZ2VkJywgdG9vbCk7XG4gIH0sXG4gIGdldFRocmVzaG9sZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmNvbG9yVGhyZXNob2xkO1xuICB9LFxuICBzZXRUaHJlc2hvbGQ6IGZ1bmN0aW9uICh0aHJlcykge1xuICAgIGlmKHRocmVzICE9PSB1bmRlZmluZWQpe1xuICAgICAgdGhpcy5jb2xvclRocmVzaG9sZCA9IHRocmVzO1xuICAgIH1cbiAgICBpZiAodGhpcy5kb3duUG9pbnQpIHtcbiAgICAgIHRoaXMuZHJhd01hc2sodGhpcy5kb3duUG9pbnQueCwgdGhpcy5kb3duUG9pbnQueSwgdGhpcy5hZGphY2VudFBpeGVscyk7XG4gICAgfVxuICAgIHRoaXMuZmlyZSgndGhyZXNob2xkOmNoYW5nZWQnLCB7dGhyZXNob2xkOiB0aGlzLmNvbG9yVGhyZXNob2xkfSk7XG4gIH0sXG4gIHNldFBpY3R1cmU6IGZ1bmN0aW9uIChpbWcpIHtcbiAgICB0aGlzLnNldEltYWdlKGltZyk7XG4gICAgdmFyIGN2cyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcblxuICAgIGN2cy5vbm1vdXNldXAgPSB0aGlzLm9uTW91c2VVcC5iaW5kKHRoaXMpO1xuICAgIGN2cy5vbm1vdXNlZG93biA9IHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKTtcbiAgICBjdnMub25tb3VzZW1vdmUgPSB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyk7XG4gICAgY3ZzLm9uY29udGV4dG1lbnUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICB0aGlzLmluaXRDYW52YXMoY3ZzKTtcbiAgfSxcbiAgbG9hZDogZnVuY3Rpb24gKGZpbGUpIHtcbiAgICBpZiAoIWZpbGUpcmV0dXJuO1xuXG4gICAgaWYgKGZpbGUuY29uc3RydWN0b3IgPT09IFN0cmluZykge1xuICAgICAgUGF0aGZpbmRlci50ZXN0X3BpY3R1cmUuc2V0QXR0cmlidXRlKCdzcmMnLGZpbGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB0aGlzLnRlc3RfcGljdHVyZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIGUudGFyZ2V0LnJlc3VsdCk7XG4gICAgICB9LmJpbmQodGhpcyk7XG4gICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcbiAgICB9XG4gIH0sXG4gIGluaXRDYW52YXM6IGZ1bmN0aW9uIChjdnMpIHtcbiAgICB2YXIgaW1nID0gdGhpcy5lZGl0ZWRJbWFnZUNhbnZhcztcbiAgICBpZih0aGlzLnJlc3VsdENhbnZhcyl7XG4gICAgICAkKHRoaXMucmVzdWx0Q2FudmFzKS5yZW1vdmUoKVxuICAgIH1cbiAgICB0aGlzLnJlc3VsdENhbnZhcyA9IGN2cztcbiAgICB0aGlzLmNyZWF0ZVNlbGVjdGlvbkRyYXdDYW52YXMoKTtcblxuXG4gICAgdGhpcy5jb250ZXh0ID0gY3ZzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY3ZzLndpZHRoID0gaW1nLndpZHRoO1xuICAgIGN2cy5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xuICAgIC8vdGhpcy5zZXRJbWFnZShpbWcpO1xuICB9LFxuICBzZXRJbWFnZTogZnVuY3Rpb24gKGltZykge1xuICAgIHRoaXMuX3Rlc3RfdG9kb19pbWcgPSBpbWc7XG4gICAgLy90aGlzLm1hc2sgPSBudWxsOy8vTWFnaWNXYW5kLmNyZWF0ZU1hc2soaW1nLndpZHRoLGltZy5oZWlnaHQpO1xuICAgIHRoaXMuZWRpdGVkSW1hZ2VDYW52YXMgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCk7XG4gICAgdGhpcy5lZGl0ZWRJbWFnZUNhbnZhcy53aWR0aCA9IGltZy53aWR0aDtcbiAgICB0aGlzLmVkaXRlZEltYWdlQ2FudmFzLmhlaWdodCA9IGltZy5oZWlnaHQ7XG4gICAgdGhpcy5lZGl0ZWRJbWFnZUNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmRyYXdJbWFnZShpbWcsIDAsIDApO1xuICAgIHRoaXMuaW5pdENhbnZhcyhmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCkpXG4gIH0sXG4gIGdldEluZm86IGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBjdHggPSB0aGlzLmVkaXRlZEltYWdlQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgdmFyIGltYWdlSW5mbyA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy5lZGl0ZWRJbWFnZUNhbnZhcy53aWR0aCwgdGhpcy5lZGl0ZWRJbWFnZUNhbnZhcy5oZWlnaHQpO1xuICAgIGltYWdlSW5mby5ieXRlcyA9IDQ7XG4gICAgcmV0dXJuIGltYWdlSW5mbztcbiAgfSxcbiAgZ2V0TW91c2VQb3NpdGlvbjogZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgc2NhbGUgPSB0aGlzLnJlc3VsdENhbnZhcy53aWR0aCAvICQodGhpcy5yZXN1bHRDYW52YXMpLndpZHRoKCk7XG4gICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudCxcbiAgICAgIHJlY3QgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBvZmZzZXRYID0gZS5jbGllbnRYIC0gcmVjdC5sZWZ0LFxuICAgICAgb2Zmc2V0WSA9IGUuY2xpZW50WSAtIHJlY3QudG9wO1xuICAgIHJldHVybiB7eDogTWF0aC5yb3VuZChvZmZzZXRYICogc2NhbGUpLCB5OiBNYXRoLnJvdW5kKG9mZnNldFkgKiBzY2FsZSl9O1xuICB9LFxuICByYWRpdXM6IDIwLFxuICByZXNldFNlbGVjdGlvbkRyYXdDYW52YXM6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNlbGVjdGlvbkRyYXdDb250ZXh0LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcbiAgICAvL3RoaXMuc2VsZWN0aW9uRHJhd0NvbnRleHQoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICB0aGlzLnNlbGVjdGlvbkRyYXdDb250ZXh0LmZpbGxSZWN0KDAsMCx0aGlzLnNlbGVjdGlvbkRyYXdDYW52YXMud2lkdGgsdGhpcy5zZWxlY3Rpb25EcmF3Q2FudmFzLmhlaWdodCk7XG4gICAgdGhpcy5zZWxlY3Rpb25EcmF3Q29udGV4dC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XG4gICAgdGhpcy5zZWxlY3Rpb25EcmF3Q29udGV4dC5zdHJva2VTdHlsZSA9IFwid2hpdGVcIjtcbiAgfSxcbiAgY3JlYXRlU2VsZWN0aW9uRHJhd0NhbnZhczogZnVuY3Rpb24gKCkge1xuXG4gICAgaWYodGhpcy5zZWxlY3Rpb25EcmF3Q2FudmFzICl7XG4gICAgICAkKHRoaXMuc2VsZWN0aW9uRHJhd0NhbnZhcyApLnJlbW92ZSgpO1xuICAgIH1cbiAgICB0aGlzLnNlbGVjdGlvbkRyYXdDYW52YXMgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCk7XG4gICAgdGhpcy5zZWxlY3Rpb25EcmF3Q2FudmFzLndpZHRoICA9IHRoaXMucmVzdWx0Q2FudmFzLndpZHRoO1xuICAgIHRoaXMuc2VsZWN0aW9uRHJhd0NhbnZhcy5oZWlnaHQgPSB0aGlzLnJlc3VsdENhbnZhcy5oZWlnaHQ7XG4gICAgdGhpcy5zZWxlY3Rpb25EcmF3Q29udGV4dCA9IHRoaXMuc2VsZWN0aW9uRHJhd0NhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgdGhpcy5yZXNldFNlbGVjdGlvbkRyYXdDYW52YXMoKTtcbiAgfSxcbiAgX29uTW91c2VEb3duOiBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICBwb2ludC54ID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgcGFyc2VJbnQocG9pbnQueCkpLCB0aGlzLnJlc3VsdENhbnZhcy53aWR0aCAtIDEpO1xuICAgIHBvaW50LnkgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBwYXJzZUludChwb2ludC55KSksIHRoaXMucmVzdWx0Q2FudmFzLmhlaWdodCAtIDEpO1xuICAgIHRoaXMuYWxsb3dEcmF3ID0gdHJ1ZTtcbiAgICB0aGlzLmRyYXdpbmdUb29sc1t0aGlzLnNlbGVjdGlvblRvb2xdLm1vdXNlRG93bi5jYWxsKHRoaXMscG9pbnQpO1xuICB9LFxuICBvbk1vdXNlRG93bjogZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLl9vbk1vdXNlRG93bih0aGlzLmdldE1vdXNlUG9zaXRpb24oZSkpO1xuXG4gIH0sXG4gIF9vbk1vdXNlTW92ZTogZnVuY3Rpb24gKHApIHtcbiAgICBwLnggPSBNYXRoLm1pbihNYXRoLm1heCgwLCBwYXJzZUludChwLngpKSwgdGhpcy5yZXN1bHRDYW52YXMud2lkdGggLSAxKTtcbiAgICBwLnkgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBwYXJzZUludChwLnkpKSwgdGhpcy5yZXN1bHRDYW52YXMuaGVpZ2h0IC0gMSk7XG4gICAgdGhpcy5kcmF3aW5nVG9vbHNbdGhpcy5zZWxlY3Rpb25Ub29sXS5tb3VzZU1vdmUuY2FsbCh0aGlzLHApO1xuICB9LFxuICBvbk1vdXNlTW92ZTogZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgcCA9IHRoaXMuZ2V0TW91c2VQb3NpdGlvbihlKTtcbiAgICB0aGlzLl9vbk1vdXNlTW92ZShwKTtcbiAgfSxcbiAgY29sb3I6IFsyNTUsIDAsIDAsIDI1NV0sXG4gIG9uTW91c2VVcDogZnVuY3Rpb24gKGUpIHtcbiAgICB0aGlzLmFsbG93RHJhdyA9IGZhbHNlO1xuICAgIHRoaXMuZHJhd2luZ1Rvb2xzW3RoaXMuc2VsZWN0aW9uVG9vbF0ubW91c2VVcC5jYWxsKHRoaXMsZSk7XG4gIH0sXG4gIGFwcGx5TWFzazogZnVuY3Rpb24gKGNhbnZhcywgbGVmdCwgdG9wKSB7XG4gICAgaWYgKGNhbnZhcy53aWR0aCA9PT0gMCB8fCBjYW52YXMuaGVpZ2h0ID09PSAwKSB7XG4gICAgICBkZWxldGUgdGhpcy5tYXNrO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGluZm8gPSB0aGlzLmdldEluZm8oKSxcbiAgICAgIG1hc2sgPSBNYWdpY1dhbmQubWFza1NlbGVjdGlvbihjYW52YXMsbGVmdCx0b3ApIDtcblxuICAgIHRoaXMubWFzayA9IG1hc2s7XG4gICAgdGhpcy5maXJlKCdzZWxlY3Rpb246Y2hhbmdlZCcsIHttYXNrOiBtYXNrLCB0YXJnZXQ6IHRoaXMudGFyZ2V0fSk7XG4gIH0sXG4gIHNldFBhdGhmaW5kZXJNb2RlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLnBhdGhmaW5kZXJNb2RlID0gdmFsdWU7XG4gIH0sXG4gIGdldFBhdGhmaW5kZXJNb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGF0aGZpbmRlck1vZGU7XG4gIH0sXG4gIG1vZGlmeVNlbGVjdGlvbjogZnVuY3Rpb24gKG1hc2ssIHBhdGhmaW5kZXJNb2RlLCBub0V2ZW50cykge1xuICAgIHRoaXMuc2hvdWxkTW9kaWZ5ID0gZmFsc2U7XG4gICAgaWYodGhpcy5zZWxlY3Rpb25PYmplY3Qpe1xuICAgICAgdGhpcy5zZWxlY3Rpb25PYmplY3QucmVtb3ZlKCk7XG4gICAgfVxuICAgIHRoaXMuZG93blBvaW50ID0gZmFsc2U7XG4gICAgaWYgKG1hc2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbWFzayA9IHRoaXMubWFzaztcbiAgICB9XG4gICAgaWYgKHBhdGhmaW5kZXJNb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhdGhmaW5kZXJNb2RlID0gdGhpcy5wYXRoZmluZGVyTW9kZTtcbiAgICB9XG4gICAgaWYgKHBhdGhmaW5kZXJNb2RlICE9PSAnbmV3JyAmJiB0aGlzLm9sZE1hc2spIHtcbiAgICAgIG1hc2sgPSBNYWdpY1dhbmRbcGF0aGZpbmRlck1vZGVdKG1hc2ssIHRoaXMub2xkTWFzayk7XG4gICAgfVxuICAgIGlmICh0aGlzLmJsdXJSYWRpdXMpIHtcbiAgICAgIG1hc2sgPSBNYWdpY1dhbmQuZ2F1c3NCbHVyT25seUJvcmRlcihtYXNrLCB0aGlzLmJsdXJSYWRpdXMpO1xuICAgIH1cbiAgICAvL2lmIChwYXRoZmluZGVyTW9kZSAhPT0gJ25ldycgJiYgdGhpcy5vbGRNYXNrIHx8IHRoaXMuYmx1clJhZGl1cykge1xuICAgIC8vICBtYXNrLmNhY2hlSW5kID0gTWFnaWNXYW5kLmdldEJvcmRlckluZGljZXMobWFzayk7XG4gICAgLy99XG5cbiAgICBpZihtYXNrICYmIG1hc2suY291bnQgJiYgdGhpcy5rZWVwT2xkU2VsZWN0aW9uKXtcbiAgICAgIG1hc2subWFrZUNhY2hlKCk7XG4gICAgICB0aGlzLm9sZE1hc2sgPSBtYXNrO1xuICAgIH1lbHNle1xuICAgICAgZGVsZXRlIHRoaXMub2xkTWFzayA7XG4gICAgfVxuXG5cbiAgICB0aGlzLm1hc2sgPSBNYWdpY1dhbmQuY3JlYXRlTWFzayh0aGlzLmVkaXRlZEltYWdlQ2FudmFzLndpZHRoLCB0aGlzLmVkaXRlZEltYWdlQ2FudmFzLmhlaWdodCk7XG4gICAgaWYgKCFub0V2ZW50cykge1xuICAgICAgdGhpcy5maXJlKCdzZWxlY3Rpb246Y2hhbmdlZCcsIHttYXNrOiBtYXNrLCB0YXJnZXQ6IHRoaXMudGFyZ2V0fSk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH0sXG4gIGNyZWF0ZVNlbGVjdGlvbjogZnVuY3Rpb24gKG1hc2spIHtcbiAgICBpZiAodGhpcy5zaG91bGRNb2RpZnkpIHtcbiAgICAgIHRoaXMubW9kaWZ5U2VsZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgdGhpcy5tYXNrID0gbWFzayB8fCBNYWdpY1dhbmQuY3JlYXRlTWFzayh0aGlzLmVkaXRlZEltYWdlQ2FudmFzLndpZHRoLCB0aGlzLmVkaXRlZEltYWdlQ2FudmFzLmhlaWdodCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfSxcbiAgc2V0U2VsZWN0aW9uOiBmdW5jdGlvbiAobWFzaykge1xuICAgIHRoaXMubWFzayA9IG1hc2s7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLmZpcmUoJ3NlbGVjdGlvbjpjaGFuZ2VkJywge21hc2s6IG1hc2ssIHRhcmdldDogdGhpcy50YXJnZXR9KTtcbiAgfSxcbiAgZmlsbDogZnVuY3Rpb24gKGNvbG9yLCBjYWxsYmFjaykge1xuICAgIHRoaXMuYXN5bmNyb25vdXMoZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5fZmlsbChjb2xvciwgZmFsc2UpO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbCh0aGlzKTtcbiAgICB9LmJpbmQodGhpcyksIDApO1xuICB9LFxuICBfZmlsbDogZnVuY3Rpb24gKGNvbG9yLCBpbnZlcnQsIGNhbnZhcykge1xuXG5cbiAgICBpZiAoIXRoaXMubWFzaykgcmV0dXJuO1xuXG5cbiAgICBjYW52YXMgPSBjYW52YXMgfHwgdGhpcy5lZGl0ZWRJbWFnZUNhbnZhcztcbiAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7Ly9iLm1pblgsIGIubWluWSwgYi5tYXhYIC0gYi5taW5YLCBiLm1heFkgLSBiLm1pblkpO1xuXG4gICAgTWFnaWNXYW5kLmZpbGxNYXNrKGN0eCwgdGhpcy5tYXNrLCBjb2xvcik7XG5cbiAgICB0aGlzLmZpcmUoJ2ltYWdlOmNoYW5nZWQnLCB0aGlzLmVkaXRlZEltYWdlQ2FudmFzKTtcbiAgfSxcbiAgaGF0Y2hUaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5oYXRjaE9mZnNldCA9ICh0aGlzLmhhdGNoT2Zmc2V0ICsgMSkgJSAodGhpcy5oYXRjaExlbmd0aCAqIDIpO1xuICAgIHRoaXMucmVuZGVyKHRydWUpO1xuICB9LFxuICBzaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgd2hpbGUgKHRoaXMuY29udGFpbmVyLmxhc3RDaGlsZCkge1xuICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5jb250YWluZXIubGFzdENoaWxkKTtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5lZGl0ZWRJbWFnZUNhbnZhcyk7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5yZXN1bHRDYW52YXMpO1xuICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh0aGlzLmhhdGNoVGljay5iaW5kKHRoaXMpLCAzMDApO1xuXG4gICAgdGhpcy5maXJlKCdzaG93Jyk7XG4gIH0sXG4gIGNsZWFyOiBmdW5jdGlvbiAoaW52ZXJ0LCBjYW52YXMsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5hc3luY3Jvbm91cyhmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9maWxsKFswLCAwLCAwLCAwXSwgaW52ZXJ0LCBjYW52YXMpO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbCh0aGlzKTtcbiAgICB9LmJpbmQodGhpcyksIDApO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIChub0JvcmRlcikge1xuICAgIGlmICghdGhpcy5jb250ZXh0IHx8ICF0aGlzLm1hc2spcmV0dXJuO1xuXG4gICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dDtcbiAgICBpZiAoIW5vQm9yZGVyKSB7XG4gICAgICB0aGlzLm1hc2suY2FjaGVJbmQgPSBNYWdpY1dhbmQuZ2V0Qm9yZGVySW5kaWNlcyh0aGlzLm1hc2spO1xuICAgIH1cbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMubWFzay53aWR0aCwgdGhpcy5tYXNrLmhlaWdodCk7XG5cbiAgICB2YXIgX25ld19jb2xvciA9ICghdGhpcy5vbGRNYXNrIHx8IHRoaXMucGF0aGZpbmRlck1vZGUgPT0gXCJuZXdcIiB8fCB0aGlzLnBhdGhmaW5kZXJNb2RlID09IFwiYWRkXCJ8fCB0aGlzLnBhdGhmaW5kZXJNb2RlID09IFwiZXhjbHVkZVwiKVxuICAgICAgPyB0aGlzLm5ld01hc2tDb2xvciA6IHRoaXMucmVtb3ZlZE1hc2tDb2xvcjtcblxuICAgIHZhciBfaW50ZXJzZWN0aW9uX2NvbG9yO1xuICAgIGlmKHRoaXMucGF0aGZpbmRlck1vZGUgPT0gXCJhZGRcIiB8fCB0aGlzLnBhdGhmaW5kZXJNb2RlID09IFwibmV3XCJ8fCB0aGlzLnBhdGhmaW5kZXJNb2RlID09IFwiaW50ZXJzZWN0XCIpe1xuICAgICAgX2ludGVyc2VjdGlvbl9jb2xvciA9IHRoaXMubmV3TWFza0NvbG9yO1xuICAgIH1lbHNle1xuICAgICAgX2ludGVyc2VjdGlvbl9jb2xvciA9IHRoaXMucmVtb3ZlZE1hc2tDb2xvciA7Ly9pbnRlcnNlY3Rpb25SZW1vdmVkTWFza0NvbG9yO1xuICAgIH1cbiAgICB2YXIgX29sZF9jb2xvcjtcbiAgICBpZih0aGlzLnBhdGhmaW5kZXJNb2RlID09IFwiZXhjbHVkZVwiIHx8IHRoaXMucGF0aGZpbmRlck1vZGUgPT0gXCJzdWJzdHJhY3RcInx8IHRoaXMucGF0aGZpbmRlck1vZGUgPT0gXCJhZGRcIil7XG4gICAgICBfb2xkX2NvbG9yID0gdGhpcy5uZXdNYXNrQ29sb3I7XG4gICAgfWVsc2V7XG4gICAgICBfb2xkX2NvbG9yID0gdGhpcy5yZW1vdmVkTWFza0NvbG9yO1xuICAgIH1cblxuICAgIHRoaXMub2xkTWFzayAmJiB0aGlzLm9sZE1hc2sucmVuZGVyKGN0eCx7XG4gICAgICBmaWxsOiBfb2xkX2NvbG9yXG4gICAgfSk7XG5cblxuICAgIHRoaXMubWFzay5yZW5kZXIoY3R4LHtcbiAgICAgIGZpbGw6IF9uZXdfY29sb3IsXG4gICAgICBpbnRlcnNlY3Rpb25Db2xvciA6IF9pbnRlcnNlY3Rpb25fY29sb3IsXG4gICAgICBvdXRlckludGVyc2VjdGlvbkNvbG9yIDogX29sZF9jb2xvcixcbiAgICAgIC8vIG91dGVyRmlsbCA6IFwicmdiYSgwLDAsMCwwLjUpXCJcbiAgICB9KTtcblxuICAgIGlmKHRoaXMucmVuZGVyQm9yZGVyKXtcbiAgICAgIHRoaXMub2xkTWFzayAmJiB0aGlzLm9sZE1hc2sucmVuZGVyQm9yZGVyKGN0eCx7fSk7XG5cbiAgICAgIHRoaXMubWFzay5yZW5kZXJCb3JkZXIoY3R4LHtcbiAgICAgICAgaGF0Y2hPZmZzZXQ6IHRoaXMuaGF0Y2hPZmZzZXRcbiAgICAgIH0pO1xuICAgIH1cblxuICB9LFxuICByZW5kZXJCb3JkZXI6IHRydWUsXG4gIGludGVyc2VjdGlvblJlbW92ZWRNYXNrQ29sb3I6ICcjZmZhYWFhJyxcbiAgcmVtb3ZlZE1hc2tDb2xvcjogJyNhYWFhZmYnLFxuICBuZXdNYXNrQ29sb3I6ICAnI2FhRkZhYScgLFxuICByZW5kZXJNYXNrOiBmdW5jdGlvbiAoY3R4LCBtYXNrLCBjb2xvciwgbGVmdCwgdG9wKSB7XG4gICAgbWFzayA9IG1hc2sgfHwgdGhpcy5tYXNrO1xuICAgIG1hc2sgJiYgbWFzay5yZW5kZXIoY3R4LHtcbiAgICAgIGludGVyc2VjdGlvbkNvbG9yOiAnI2ZmZicsXG4gICAgICBvdXRlckludGVyc2VjdGlvbkNvbG9yOiAnIzAwMCcsXG4gICAgICBmaWxsIDpjb2xvciB8fCAnI2ZmZicsXG4gICAgICBsZWZ0IDogbGVmdCxcbiAgICAgIHRvcCA6IHRvcFxuICAgIH0pXG4gIH0sXG4gIGdldENvbnRvdXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9fY3MpIHtcbiAgICAgIHRoaXMuX19jcyA9IE1hZ2ljV2FuZC50cmFjZUNvbnRvdXJzKHRoaXMubWFzayk7XG4gICAgICB0aGlzLl9fY3MgPSBNYWdpY1dhbmQuc2ltcGxpZnlDb250b3Vycyh0aGlzLl9fY3MsIHRoaXMuc2ltcGxpZnlUb2xlcmFudCwgdGhpcy5zaW1wbGlmeUNvdW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX19jcztcbiAgfSxcbiAgdHJhY2VJbm5lcjogZnVuY3Rpb24gKGN0eCkge1xuXG4gICAgdmFyIGNzID0gdGhpcy5nZXRDb250b3VycygpO1xuICAgIHZhciBjdHggPSBjdHggfHwgdGhpcy5jb250ZXh0O1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWNzW2ldLmlubmVyKSBjb250aW51ZTtcbiAgICAgIHZhciBwcyA9IGNzW2ldLnBvaW50cztcbiAgICAgIGN0eC5tb3ZlVG8ocHNbMF0ueCwgcHNbMF0ueSk7XG4gICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHBzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGN0eC5saW5lVG8ocHNbal0ueCwgcHNbal0ueSk7XG4gICAgICB9XG4gICAgfVxuICAgIGN0eC5zdHJva2UoKTtcbiAgfSxcbiAgZ2V0Q29sb3I6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ3JnYmEoJyArIHRoaXMuY29sb3Iuam9pbignLCAnKSArICcpJztcbiAgfSxcbiAgc2V0Q29sb3I6IGZ1bmN0aW9uIChjb2xvcikge1xuICAgIHZhciBfYXJyID0gY29sb3Iuc3Vic3RyaW5nKGNvbG9yLmluZGV4T2YoJygnKSArIDEsIGNvbG9yLmxlbmd0aCAtIDEpLnNwbGl0KCcsICcpO1xuICAgIGZvciAodmFyIGkgaW4gX2Fycikge1xuICAgICAgX2FycltpXSA9IHBhcnNlRmxvYXQoX2FycltpXSk7XG4gICAgfVxuICAgIF9hcnJbM10gPSBNYXRoLnJvdW5kKF9hcnJbM10gKiAyNTUpO1xuICAgIHRoaXMuY29sb3IgPSBfYXJyO1xuICB9LFxuICB0cmFjZTogZnVuY3Rpb24gKGN0eCkge1xuICAgIHZhciBpbmZvID0gdGhpcy5nZXRJbmZvKCk7XG4gICAgdmFyIGNzID0gTWFnaWNXYW5kLnRyYWNlQ29udG91cnModGhpcy5tYXNrKTtcbiAgICBjcyA9IE1hZ2ljV2FuZC5zaW1wbGlmeUNvbnRvdXJzKGNzLCB0aGlzLnNpbXBsaWZ5VG9sZXJhbnQsIHRoaXMuc2ltcGxpZnlDb3VudCk7XG5cbiAgICAvLyBkcmF3IGNvbnRvdXJzXG4gICAgdmFyIGN0eCA9IGN0eCB8fCB0aGlzLmNvbnRleHQ7XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBpbmZvLndpZHRoLCBpbmZvLmhlaWdodCk7XG4gICAgLy9pbm5lclxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWNzW2ldLmlubmVyKSBjb250aW51ZTtcbiAgICAgIHZhciBwcyA9IGNzW2ldLnBvaW50cztcbiAgICAgIGN0eC5tb3ZlVG8ocHNbMF0ueCwgcHNbMF0ueSk7XG4gICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHBzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGN0eC5saW5lVG8ocHNbal0ueCwgcHNbal0ueSk7XG4gICAgICB9XG4gICAgfVxuICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZWQnO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgICAvL291dGVyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjc1tpXS5pbm5lcikgY29udGludWU7XG4gICAgICB2YXIgcHMgPSBjc1tpXS5wb2ludHM7XG4gICAgICBjdHgubW92ZVRvKHBzWzBdLngsIHBzWzBdLnkpO1xuICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBwcy5sZW5ndGg7IGorKykge1xuICAgICAgICBjdHgubGluZVRvKHBzW2pdLngsIHBzW2pdLnkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAnYmx1ZSc7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9LFxuICByZW1vdmVOb2lzZTogZnVuY3Rpb24gKHRocmVzaG9sZCkge1xuXG4gICAgaWYoIXRoaXMubWFzayB8fCAhdGhpcy5tYXNrLmNvdW50KXJldHVybjtcbiAgICB0aGlzLmNyZWF0ZVNlbGVjdGlvbkRyYXdDYW52YXMoKTtcbiAgICAvL3RoaXMucmVuZGVyTWFzayh0aGlzLnNlbGVjdGlvbkRyYXdDb250ZXh0LCB0aGlzLm1hc2spO1xuXG4gICAgdmFyIGNzID0gTWFnaWNXYW5kLnRyYWNlQ29udG91cnModGhpcy5tYXNrKTtcbiAgICBjcyA9IE1hZ2ljV2FuZC5zaW1wbGlmeUNvbnRvdXJzKGNzLCB0aGlzLnNpbXBsaWZ5VG9sZXJhbnQsIHRoaXMuc2ltcGxpZnlDb3VudCk7XG5cbiAgICB2YXIgY3R4ID0gdGhpcy5zZWxlY3Rpb25EcmF3Q29udGV4dCwgdiA9IHRoaXMuY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtO1xuXG4gICAgLy8gIGNzID0gTWFnaWNXYW5kLnNpbXBsaWZ5Q29udG91cnMoY3MsIHRoaXMuc2ltcGxpZnlUb2xlcmFudCwgdGhpcy5zaW1wbGlmeUNvdW50KTtcblxuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnRyYW5zbGF0ZSgwLjUsMC41KTtcbiAgICBjdHguZmlsbFN0eWxlPSBcIiNmZmZcIjtcbiAgICAvL2N0eC5maWxsU3R5bGU9IFwiIzBmMFwiO1xuICAgIGN0eC5zdHJva2VTdHlsZT0gXCIjZmZmXCI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFjc1tpXS5pbm5lciAmJiBjc1tpXS5wb2ludHMubGVuZ3RoID4gdGhyZXNob2xkKSB7XG4gICAgICAgIHZhciBwcyA9IGNzW2ldLnBvaW50cztcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHBzWzBdLngsIHBzWzBdLnkpO1xuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHBzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY3R4LmxpbmVUbyhwc1tqXS54LCBwc1tqXS55KTtcbiAgICAgICAgfVxuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICB9XG5cbiAgICB9XG4gICAgdGhpcy5tYXNrID0gTWFnaWNXYW5kLm1hc2tTZWxlY3Rpb24oIHRoaXMuc2VsZWN0aW9uRHJhd0NhbnZhcyk7XG4gICAgdGhpcy5zZXRTZWxlY3Rpb24odGhpcy5tYXNrKTtcblxuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH0sXG5cbiAgdG9vbHM6IFtcbiAgICBcImFkamFjZW50UGl4ZWxzXCIsXG4gICAgXCJwYXRoZmluZGVyUmFkaXVzXCIsXG4gICAgXCJwYXRoZmluZGVyVGhyZXNob2xkXCIsXG4gICAgXCJzZWxlY3Rpb25Ub29sXCIsXG4gICAgXCJwYXRoZmluZGVyXCIsXG4gICAgXCJmaWxsV2l0aEN1cnJlbnRDb2xvclwiLFxuICAgIFwiY2xlYXJcIixcbiAgICBcInBhdGhmaW5kZXJDb2xvclwiXG4gIF0sXG4gIGFjdGlvbnMgOiB7XG5cbiAgICBjYW5jZWxTZWxlY3Rpb246IHtcbiAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAga2V5OiAgJ0VzY2FwZScsXG4gICAgICBhY3Rpb246IGZ1bmN0aW9uKCl7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnNob3VsZE1vZGlmeTtcbiAgICAgICAgdGhpcy5tYXNrID0gTWFnaWNXYW5kLmNyZWF0ZU1hc2sodGhpcy5lZGl0ZWRJbWFnZUNhbnZhcy53aWR0aCwgdGhpcy5lZGl0ZWRJbWFnZUNhbnZhcy5oZWlnaHQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbW9kaWZ5U2VsZWN0aW9uOiB7XG4gICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgIGtleTogICdFbnRlcicsXG4gICAgICBhY3Rpb246IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKHRoaXMuc2hvdWxkTW9kaWZ5KXtcbiAgICAgICAgICB0aGlzLm1vZGlmeVNlbGVjdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBhZGphY2VudFBpeGVsczoge1xuICAgICAgY2xhc3NOYW1lOiAnYnV0dG9uLWFkamFjZW50JyxcbiAgICAgIHRpdGxlOiAnc2VsZXQgYWxsJyxcbiAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICB2YWx1ZTogJ2FkamFjZW50UGl4ZWxzJyxcbiAgICAgIHZpc2libGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uVG9vbCA9PT0gJ21hZ2ljJztcbiAgICAgIH0sXG4gICAgICBvYnNlcnZlOiAndG9vbDpjaGFuZ2VkJ1xuICAgIH0sXG4gICAgcGF0aGZpbmRlclJhZGl1czoge1xuICAgICAgdGl0bGU6ICdyYWRpdXMnLFxuICAgICAgdHlwZTogJ3JhbmdlJyxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJhZGl1c1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICB0aGlzLnJhZGl1cyA9IHZhbDtcbiAgICAgICAgfSxcbiAgICAgICAgbWluOiAxLFxuICAgICAgICBtYXg6IDI1NVxuICAgICAgfSxcbiAgICAgIHZpc2libGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uVG9vbCA9PT0gJ2JydXNoJztcbiAgICAgIH0sXG4gICAgICBvYnNlcnZlOiAndG9vbDpjaGFuZ2VkJ1xuICAgIH0sXG4gICAgcGF0aGZpbmRlclRocmVzaG9sZDoge1xuICAgICAgdGl0bGU6ICdUaHJlc2hvbGQnLFxuICAgICAgdHlwZTogJ3JhbmdlJyxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIG9ic2VydmU6ICd0aHJlc2hvbGQ6Y2hhbmdlZCcsXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNvbG9yVGhyZXNob2xkXG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgIHRoaXMuc2V0VGhyZXNob2xkKHZhbCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgbWF4OiAyNTVcbiAgICAgIH0sXG4gICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvblRvb2wgPT09ICdtYWdpYyc7XG4gICAgICB9LFxuICAgICAgb2JzZXJ2ZTogJ3Rvb2w6Y2hhbmdlZCdcbiAgICB9LFxuICAgIHNlbGVjdGlvblRvb2w6IHtcbiAgICAgIHRpdGxlOiAnc2VsZWN0aW9uLXRvb2wnLFxuICAgICAgdHlwZTogJ29wdGlvbnMnLFxuICAgICAgdmFsdWU6ICdzZWxlY3Rpb25Ub29sJyxcbiAgICAgIG1lbnU6IHtcbiAgICAgICAgc2VsZWN0aW9uVG9vbEJydXNoOiB7XG4gICAgICAgICAgY2xhc3NOYW1lOiAnZmEgZmEtcGFpbnQtYnJ1c2gnLFxuICAgICAgICAgIHRpdGxlOiAnc2VsZWN0LWJydXNoJyxcbiAgICAgICAgICBvcHRpb246ICdicnVzaCdcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0aW9uVG9vbFJlY3RhbmdsZToge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLXNxdWFyZScsXG4gICAgICAgICAgdGl0bGU6ICdzZWxlY3QtcmVjdGFuZ2xlJyxcbiAgICAgICAgICBvcHRpb246ICdyZWN0YW5nbGUnXG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdGlvbkVsbGlwdGljYWw6IHtcbiAgICAgICAgICBjbGFzc05hbWU6ICdmYSBmYS1jaXJjbGUnLFxuICAgICAgICAgIHRpdGxlOiAnc2VsZWN0LWNpcmNsZScsXG4gICAgICAgICAgb3B0aW9uOiAnY2lyY2xlJ1xuICAgICAgICB9LFxuICAgICAgICBzZWxlY3Rpb25Ub29sTWFnaWM6IHtcbiAgICAgICAgICBjbGFzc05hbWU6ICdmYSBmYS1tYWdpYycsXG4gICAgICAgICAgdGl0bGU6ICdzZWxlY3QtbWFnaWMnLFxuICAgICAgICAgIG9wdGlvbjogJ21hZ2ljJ1xuICAgICAgICB9LFxuICAgICAgICBzZWxlY3Rpb25Ub29sTGFzc286IHtcbiAgICAgICAgICB1c2U6ICdzaGFwZVNlbGVjdGlvblRvb2xzJyxcbiAgICAgICAgICB0aXRsZTogJ3NlbGVjdC1sYXNzbycsXG4gICAgICAgICAgb3B0aW9uOiAnbGFzc28nLFxuICAgICAgICAgIGljb246ICdkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCcrIHJlcXVpcmUoJ2Jhc2U2NC1sb2FkZXIhLi8uLi9tZWRpYS9sYXNzby5zdmcnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBwYXRoZmluZGVyOiB7XG4gICAgICB0aXRsZTogJ3BhdGhmaW5kZXInLFxuICAgICAgdHlwZTogJ29wdGlvbnMnLFxuICAgICAgdmFsdWU6ICdwYXRoZmluZGVyTW9kZScsXG4gICAgICBtZW51OiB7XG4gICAgICAgIHBhdGhmaW5kZXJOZXc6IHtcbiAgICAgICAgICB0aXRsZTogJ3BhdGhmaW5kZXItbmV3JyxcbiAgICAgICAgICBvcHRpb246ICduZXcnXG4gICAgICAgIH0sXG4gICAgICAgIHBhdGhmaW5kZXJFeGNsdWRlOiB7XG4gICAgICAgICAgdGl0bGU6ICdwYXRoZmluZGVyLWV4Y2x1ZGUnLFxuICAgICAgICAgIG9wdGlvbjogJ2V4Y2x1ZGUnXG4gICAgICAgIH0sXG4gICAgICAgIHBhdGhmaW5kZXJTdWJzdHJhY3Q6IHtcbiAgICAgICAgICB0aXRsZTogJ3BhdGhmaW5kZXItc3Vic3RyYWN0JyxcbiAgICAgICAgICBvcHRpb246ICdzdWJzdHJhY3QnXG4gICAgICAgIH0sXG4gICAgICAgIHBhdGhmaW5kZXJBZGQ6IHtcbiAgICAgICAgICB0aXRsZTogJ3BhdGhmaW5kZXItYWRkJyxcbiAgICAgICAgICBvcHRpb246ICdhZGQnXG4gICAgICAgIH0sXG4gICAgICAgIHBhdGhmaW5kZXJJbnRlcnNlY3Q6IHtcbiAgICAgICAgICB0aXRsZTogJ3BhdGhmaW5kZXItaW50ZXJzZWN0JyxcbiAgICAgICAgICBvcHRpb246ICdpbnRlcnNlY3QnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGZpbGxXaXRoQ3VycmVudENvbG9yOiB7XG4gICAgICB0aXRsZTogJ2ZpbGxXaXRoQ3VycmVudENvbG9yJyxcbiAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLXBhaW50LWJydXNoJ1xuICAgIH0sXG4gICAgY2xlYXI6IHtcbiAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLWVyYXNlcicsXG4gICAgICBpZDogICAgICdQYXRoZmluZGVyLWNsZWFyJyxcbiAgICAgIHRpdGxlOiAgJ2NsZWFyJ1xuICAgIH0sXG4gICAgcGF0aGZpbmRlckNvbG9yOiB7XG4gICAgICB0aXRsZTogICdjb2xvcicsXG4gICAgICB0eXBlOiAgICdjb2xvcicsXG4gICAgICB2YWx1ZTogICdjb2xvcidcbiAgICB9XG4gIH1cbn07XG5cbmZhYnJpYy51dGlsLm9ic2VydmFibGUoUGF0aGZpbmRlci5wcm90b3R5cGUpO1xuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKFBhdGhmaW5kZXIucHJvdG90eXBlLCB7XG4gIHNlbGVjdEJhY2tncm91bmQ6IGZ1bmN0aW9uIChmcm9tQ29ybmVycykge1xuICAgIHZhciBpbmZvID0gdGhpcy5nZXRJbmZvKCksIG1hc2s7XG5cbiAgICBpZiAoZnJvbUNvcm5lcnMpIHtcbiAgICAgIHZhciBtYXNrMSA9IE1hZ2ljV2FuZC5zZWxlY3RCYWNrZ3JvdW5kKGluZm8sIFsyNTUsIDI1NSwgMjU1LCBmYWxzZV0sIHRoaXMuY29sb3JUaHJlc2hvbGQpO1xuICAgICAgdmFyIG1hc2syID0gTWFnaWNXYW5kLnNlbGVjdEJhY2tncm91bmQoaW5mbywgW2ZhbHNlLCBmYWxzZSwgZmFsc2UsIDBdLCB0aGlzLmNvbG9yVGhyZXNob2xkKTtcbiAgICAgIG1hc2sgPSBNYWdpY1dhbmQuYWRkKG1hc2sxLCBtYXNrMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hc2sgPSBNYWdpY1dhbmQuc2VsZWN0QWxsQnlDb2xvcihpbmZvLCBbMjU1LCAyNTUsIDI1NSwgMjU1XSwgdGhpcy5jb2xvclRocmVzaG9sZCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYmx1clJhZGl1cykge1xuICAgICAgbWFzayA9IE1hZ2ljV2FuZC5nYXVzc0JsdXJPbmx5Qm9yZGVyKG1hc2ssIHRoaXMuYmx1clJhZGl1cyk7XG4gICAgfVxuICAgIHRoaXMuc2V0U2VsZWN0aW9uKG1hc2spO1xuICB9LFxuICBjb2xvclNlbGVjdGlvbjogZnVuY3Rpb24gKGNvbG9ycywgdGhyZXNob2xkKSB7XG4gICAgdmFyIGluZm8gPSB0aGlzLmdldEluZm8oKSwgbWFzazIsXG4gICAgICBtYXNrID0gTWFnaWNXYW5kLmNyZWF0ZU1hc2soaW5mby53aWR0aCwgaW5mby5oZWlnaHQpO1xuICAgIGZvciAodmFyIGkgaW4gY29sb3JzKSB7XG4gICAgICB2YXIgX2NvbG9yID0gbmV3IGZhYnJpYy5Db2xvcihjb2xvcnNbaV0pLl9zb3VyY2U7XG4gICAgICBfY29sb3JbM10gPSBNYXRoLnJvdW5kKF9jb2xvclszXSAqIDI1NSk7XG4gICAgICBtYXNrMiA9IE1hZ2ljV2FuZC5zZWxlY3RBbGxCeUNvbG9yKGluZm8sIF9jb2xvciwgdGhyZXNob2xkW2ldKVxuICAgICAgbWFzayA9IE1hZ2ljV2FuZC5hZGQobWFzaywgbWFzazIpO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5vbGRNYXNrO1xuICAgIHRoaXMubW9kaWZ5U2VsZWN0aW9uKG1hc2spO1xuICB9LFxuICBzbWFydFNlbGVjdGlvbjogZnVuY3Rpb24gKHRocmVzaG9sZCkge1xuICAgIHZhciBpbmZvID0gdGhpcy5nZXRJbmZvKCksIG1hc2s7XG4gICAgbWFzayA9IE1hZ2ljV2FuZC5zZWxlY3RCYWNrZ3JvdW5kKGluZm8sIG51bGwsIHRocmVzaG9sZCB8fCB0aGlzLmNvbG9yVGhyZXNob2xkKTtcbiAgICBtYXNrID0gTWFnaWNXYW5kLmludmVydE1hc2sobWFzayk7XG4gICAgZGVsZXRlIHRoaXMub2xkTWFzaztcbiAgICB0aGlzLm1vZGlmeVNlbGVjdGlvbihtYXNrKTtcbiAgfVxufSk7XG5cblxuUGF0aGZpbmRlci5wcm90b3R5cGUuZHJhd2luZ1Rvb2xzID0ge1xuICBicnVzaDoge1xuICAgIG1vdXNlVXA6IGZ1bmN0aW9uKCl7XG4gICAgICB0aGlzLm1vZGlmeVNlbGVjdGlvbigpO1xuICAgICAgdGhpcy5yZXNldFNlbGVjdGlvbkRyYXdDYW52YXMoKTtcbiAgICB9LFxuICAgIG1vdXNlTW92ZTogZnVuY3Rpb24ocCl7XG4gICAgICBpZiAoIXRoaXMuYWxsb3dEcmF3KSByZXR1cm47XG4gICAgICB0aGlzLmRyYXdDaXJjbGUocC54LCBwLnksIHRoaXMucmFkaXVzKTtcbiAgICB9LFxuICAgIG1vdXNlRG93bjogZnVuY3Rpb24ocG9pbnQpe1xuICAgICAgdGhpcy5jcmVhdGVTZWxlY3Rpb24oKTtcbiAgICAgIHRoaXMuZG93blBvaW50ID0gcG9pbnQ7XG4gICAgICB0aGlzLmNyZWF0ZVNlbGVjdGlvbkRyYXdDYW52YXMoKTtcbiAgICAgIHRoaXMuZHJhd0NpcmNsZShwb2ludC54LCBwb2ludC55LCB0aGlzLnJhZGl1cyk7XG4gICAgfSxcbiAgICB1dGlsczoge1xuICAgICAgZHJhd0NpcmNsZTogZnVuY3Rpb24gKHgsIHksIHIpIHtcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuc2VsZWN0aW9uRHJhd0NvbnRleHQsXG4gICAgICAgICAgdiA9IHRoaXMuY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtO1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAvLyAgY3R4LnRyYW5zZm9ybSh2WzBdLCB2WzFdLCB2WzJdLCB2WzNdLCB2WzRdLCB2WzVdKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguYXJjKHgsIHksIHRoaXMucmFkaXVzLCAwLCBNYXRoLlBJICogMiwgZmFsc2UpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIE1hZ2ljV2FuZC5tYXNrU2VsZWN0aW9uKCB0aGlzLnNlbGVjdGlvbkRyYXdDYW52YXMsIDAsMCwgdGhpcy5tYXNrLCAnYWRkJyk7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0aW9uKHRoaXMubWFzayk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBtYWdpYzoge1xuICAgIG1vdXNlVXA6IGZ1bmN0aW9uKCl7XG4gICAgICB0aGlzLnNob3VsZE1vZGlmeSA9IHRydWU7XG4gICAgfSxcbiAgICBtb3VzZU1vdmU6IGZ1bmN0aW9uIChwKXtcbiAgICAgIGlmICghdGhpcy5hbGxvd0RyYXcpIHJldHVybjtcbiAgICAgIHZhciBkaXN0ID0gcC54IC0gdGhpcy5kb3duUG9pbnQueDtcblxuICAgICAgdmFyIHZhbCA9IHRoaXMuX2luaXRfdGhyZXMgKyBkaXN0O1xuICAgICAgdmFyIHRocmVzID0gTWF0aC5taW4oTWF0aC5tYXgodmFsLCAxKSwgMjU1KTtcbiAgICAgIGlmICh0aHJlcyAhPSB0aGlzLmNvbG9yVGhyZXNob2xkKSB7XG4gICAgICAgIHRoaXMuc2V0VGhyZXNob2xkKHRocmVzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1vdXNlRG93bjogZnVuY3Rpb24gKHBvaW50KXtcbiAgICAgIGlmICh0aGlzLnNob3VsZE1vZGlmeSkge1xuICAgICAgICB0aGlzLm1vZGlmeVNlbGVjdGlvbigpO1xuICAgICAgfVxuICAgICAgdGhpcy5kb3duUG9pbnQgPSBwb2ludDtcbiAgICAgIHRoaXMuY29sb3JUaHJlc2hvbGQgPSAxNTtcbiAgICAgIHRoaXMuZmlyZSgndGhyZXNob2xkOmNoYW5nZWQnLCB7dGhyZXNob2xkOiB0aGlzLmNvbG9yVGhyZXNob2xkfSk7XG4gICAgICB0aGlzLl9pbml0X3RocmVzID0gdGhpcy5jb2xvclRocmVzaG9sZDtcbiAgICAgIHRoaXMuZHJhd01hc2sodGhpcy5kb3duUG9pbnQueCwgdGhpcy5kb3duUG9pbnQueSwgdGhpcy5hZGphY2VudFBpeGVscyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICB1dGlsczp7XG4gICAgICBkcmF3TWFzazogZnVuY3Rpb24gKHgsIHksIGFkamFjZW50UGl4ZWxzKSB7XG4gICAgICAgIHRoaXMuYXN5bmNyb25vdXModGhpcy5fZHJhd01hc2suYmluZCh0aGlzLCB4LCB5LCBhZGphY2VudFBpeGVscyksIDApO1xuICAgICAgfSxcbiAgICAgIF9kcmF3TWFzazogZnVuY3Rpb24gKHgsIHksIGFkamFjZW50UGl4ZWxzKSB7XG4gICAgICAgIE1hZ2ljV2FuZC5hbHBoYUNoYW5uZWwgPSB0aGlzLmFscGhhQ2hhbm5lbDtcbiAgICAgICAgdmFyIGluZm8gPSB0aGlzLmdldEluZm8oKSwgbWFzaztcbiAgICAgICAgaWYgKGFkamFjZW50UGl4ZWxzKSB7XG4gICAgICAgICAgTWFnaWNXYW5kLmZsb29kRmlsbChpbmZvLCB4LCB5LCB0aGlzLmNvbG9yVGhyZXNob2xkLHt9LG51bGwsZnVuY3Rpb24obWFzayl7XG4gICAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvbihtYXNrKTtcbiAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hc2sgPSBNYWdpY1dhbmQuc2VsZWN0QWxsKGluZm8sIHgsIHksIHRoaXMuY29sb3JUaHJlc2hvbGQpO1xuICAgICAgICAgIHRoaXMuc2V0U2VsZWN0aW9uKG1hc2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICByZWN0YW5nbGU6IHtcbiAgICBtb3VzZURvd246IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICBpZiAodGhpcy5zaG91bGRNb2RpZnkpIHtcbiAgICAgICAgdGhpcy5tb2RpZnlTZWxlY3Rpb24oKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZG93blBvaW50ID0gcG9pbnQ7XG4gICAgICB0aGlzLnNob3VsZE1vZGlmeSA9IHRydWU7XG4gICAgfSxcbiAgICBtb3VzZVVwOiBmdW5jdGlvbigpe1xuICAgICAgLy90aGlzLm1vZGlmeVNlbGVjdGlvbigpO1xuICAgICAgLy90aGlzLnJlc2V0U2VsZWN0aW9uRHJhd0NhbnZhcygpO1xuICAgIH0sXG4gICAgbW91c2VNb3ZlOiBmdW5jdGlvbihwKXtcbiAgICAgIGlmICghdGhpcy5hbGxvd0RyYXcpIHJldHVybjtcbiAgICAgIHRoaXMuZHJhd1JlY3RhbmdsZSh0aGlzLmRvd25Qb2ludC54LCB0aGlzLmRvd25Qb2ludC55LCBwLngsIHAueSk7XG4gICAgfSxcbiAgICB1dGlsczp7XG4gICAgICBkcmF3UmVjdGFuZ2xlOiBmdW5jdGlvbiAoeCwgeSwgeDIsIHkyKSB7XG4gICAgICAgIHZhciBpbmZvID0gdGhpcy5nZXRJbmZvKCksXG4gICAgICAgICAgbWFzayA9IE1hZ2ljV2FuZC5zZWxlY3RSZWN0YW5nbGUoaW5mbywgeCwgeSwgeDIsIHkyKTtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb24obWFzayk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBjaXJjbGU6IHtcbiAgICBtb3VzZURvd246IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICBpZiAodGhpcy5zaG91bGRNb2RpZnkpIHtcbiAgICAgICAgdGhpcy5tb2RpZnlTZWxlY3Rpb24oKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZG93blBvaW50ID0gcG9pbnQ7XG4gICAgICB0aGlzLmNyZWF0ZVNlbGVjdGlvbkRyYXdDYW52YXMoKTtcbiAgICAgIHRoaXMuc2VsZWN0aW9uT2JqZWN0ID0gbmV3IGZhYnJpYy5FbGxpcHNlKHtcbiAgICAgICAgbGVmdDogcG9pbnQueCArIHRoaXMudGFyZ2V0LmxlZnQsXG4gICAgICAgIHRvcDogIHBvaW50LnkgKyB0aGlzLnRhcmdldC50b3AsXG4gICAgICAgIHJ4OjEsXG4gICAgICAgIHJ5OjEsXG4gICAgICAgIGhhc0JvcmRlcnM6IGZhbHNlLFxuICAgICAgICBvcmlnaW5YOiAnY2VudGVyJyxcbiAgICAgICAgb3JpZ2luWTogJ2NlbnRlcicsXG4gICAgICAgIHN0cm9rZVdpZHRoOiAxLFxuICAgICAgICBmaWxsOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBzdHJva2U6ICd0cmFuc3BhcmVudCdcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jYW52YXMuYWRkKHRoaXMuc2VsZWN0aW9uT2JqZWN0KTtcbiAgICAgIHRoaXMudXBkYXRlU2hhcGUoKTtcbiAgICB9LFxuICAgIG1vdXNlVXA6IGZ1bmN0aW9uKCl7XG4gICAgICB0aGlzLmNhbnZhcy5zZXRJbnRlcmFjdGl2ZU1vZGUoXCJtaXhlZFwiKTtcbiAgICAgIHRoaXMuc2VsZWN0aW9uT2JqZWN0LnNldENvb3JkcygpO1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMuc2VsZWN0aW9uT2JqZWN0Lm9uKCdzY2FsaW5nIG1vdmluZyByb3RhdGluZycsZnVuY3Rpb24oKXtcbiAgICAgICAgX3RoaXMudXBkYXRlU2hhcGUoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jYW52YXMuc2V0QWN0aXZlT2JqZWN0KHRoaXMuc2VsZWN0aW9uT2JqZWN0KTtcbiAgICAgIHRoaXMuc2hvdWxkTW9kaWZ5ID0gdHJ1ZTtcbiAgICAgIC8vICB0aGlzLm1vZGlmeVNlbGVjdGlvbigpO1xuICAgICAgLy8gIHRoaXMucmVzZXRTZWxlY3Rpb25EcmF3Q2FudmFzKCk7XG4gICAgfSxcbiAgICBtb3VzZU1vdmU6IGZ1bmN0aW9uKHApe1xuICAgICAgaWYgKCF0aGlzLmFsbG93RHJhdykgcmV0dXJuO1xuICAgICAgdGhpcy5zZWxlY3Rpb25PYmplY3Quc2V0KHtcbiAgICAgICAgcng6IE1hdGguYWJzKChwLnggKyB0aGlzLnRhcmdldC5sZWZ0IC0gIHRoaXMuc2VsZWN0aW9uT2JqZWN0LmdldCgnbGVmdCcpKSkgLFxuICAgICAgICByeTogTWF0aC5hYnMoKHAueSArIHRoaXMudGFyZ2V0LnRvcCAgLSB0aGlzLnNlbGVjdGlvbk9iamVjdC5nZXQoJ3RvcCcpKSlcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnVwZGF0ZVNoYXBlKCk7XG5cbiAgICB9LFxuICAgIHV0aWxzOntcbiAgICAgIHVwZGF0ZVNoYXBlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmVzZXRTZWxlY3Rpb25EcmF3Q2FudmFzKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uT2JqZWN0LmZpbGwgPSAnd2hpdGUnO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbkRyYXdDb250ZXh0LnNhdmUoKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25EcmF3Q29udGV4dC50cmFuc2xhdGUoLXRoaXMudGFyZ2V0LmxlZnQsIC0gdGhpcy50YXJnZXQudG9wKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25PYmplY3QucmVuZGVyKHRoaXMuc2VsZWN0aW9uRHJhd0NvbnRleHQpO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbkRyYXdDb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25PYmplY3QuZmlsbCA9ICd0cmFuc3BhcmVudCc7XG4gICAgICAgIHRoaXMubWFzayA9IE1hZ2ljV2FuZC5tYXNrU2VsZWN0aW9uKCB0aGlzLnNlbGVjdGlvbkRyYXdDYW52YXMpO1xuICAgICAgICB0aGlzLnNldFNlbGVjdGlvbih0aGlzLm1hc2spO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbGFzc286IHtcbiAgICBtb3VzZVVwOiBmdW5jdGlvbigpe1xuICAgICAgaWYodGhpcy5yZWFkeVRvQ2xvc2VQYXRoKSB7XG4gICAgICAgIHRoaXMuX2Nsb3NlUGF0aCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbW91c2VNb3ZlOiBmdW5jdGlvbihwKXtcbiAgICAgIGlmICghdGhpcy5hbGxvd0RyYXcpIHJldHVybjtcbiAgICAgIHRoaXMuZHJhd0xpbmUodGhpcy5fbGFzdF9wb2ludCwgcClcbiAgICAgIHRoaXMuX3BvaW50cy5wdXNoKHApO1xuICAgICAgdGhpcy5fbGFzdF9wb2ludCA9IHA7XG4gICAgfSxcbiAgICBtb3VzZURvd246IGZ1bmN0aW9uKHBvaW50KXtcbiAgICAgIGlmKCF0aGlzLmRvd25Qb2ludCl7XG4gICAgICAgIHRoaXMuY3JlYXRlU2VsZWN0aW9uKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlU2VsZWN0aW9uRHJhd0NhbnZhcygpO1xuICAgICAgICB0aGlzLl9wYXRoX291dCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRvd25Qb2ludCA9IHBvaW50O1xuICAgICAgICB0aGlzLl9wb2ludHMgPSBbXTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25EcmF3Q29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgdGhpcy5jYW52YXMub24oJ21vdXNlOm1vdmUnLCB0aGlzLl9jaGFuZ2VDdXJzb3JPdmVyQ2xvc2VQb2ludCk7XG4gICAgICB9XG4gICAgICBpZih0aGlzLl9sYXN0X3BvaW50KXtcbiAgICAgICAgaWYodGhpcy5yZWFkeVRvQ2xvc2VQYXRoKXtcbiAgICAgICAgICB0aGlzLl9jbG9zZVBhdGgoKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgdGhpcy5kcmF3TGluZSh0aGlzLl9sYXN0X3BvaW50LCBwb2ludClcbiAgICAgICAgICB0aGlzLl9sYXN0X3BvaW50ID0gcG9pbnQ7XG4gICAgICAgICAgdGhpcy5fcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICB9XG4gICAgICB9ZWxzZXtcblxuICAgICAgICB0aGlzLmRyYXdMaW5lKHt4OnBvaW50LnggLSAwLjUseTogcG9pbnQueX0sIHt4OnBvaW50LnggKyAwLjUseTogcG9pbnQueSB9KVxuICAgICAgICB0aGlzLl9sYXN0X3BvaW50ID0ge3g6cG9pbnQueCArIDAuNSx5OiBwb2ludC55IH07XG4gICAgICAgIHRoaXMuX3BvaW50cy5wdXNoKHBvaW50KTtcbiAgICAgICAgdGhpcy5zaG91bGRNb2RpZnkgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXRpbHM6IHtcbiAgICAgIGRyYXdMaW5lOiBmdW5jdGlvbiAocDEgLHAyICkge1xuICAgICAgICB2YXIgY3R4ID0gdGhpcy5zZWxlY3Rpb25EcmF3Q29udGV4dCxcbiAgICAgICAgICB2ID0gdGhpcy5jYW52YXMudmlld3BvcnRUcmFuc2Zvcm07XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIC8vY3R4LnRyYW5zZm9ybSh2WzBdLCB2WzFdLCB2WzJdLCB2WzNdLCB2WzRdLCB2WzVdKTtcbiAgICAgICAgY3R4Lm1vdmVUbyhwMS54LHAxLnkpO1xuICAgICAgICBjdHgubGluZVRvKHAyLngscDIueSk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgTWFnaWNXYW5kLm1hc2tTZWxlY3Rpb24odGhpcy5zZWxlY3Rpb25EcmF3Q2FudmFzLDAsMCx0aGlzLm1hc2ssJ2FkZCcpO1xuICAgICAgICB0aGlzLnNldFNlbGVjdGlvbih0aGlzLm1hc2spO1xuICAgICAgfSxcbiAgICAgIF9jbG9zZVBhdGg6ICBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgIHRoaXMuYWxsb3dEcmF3ID0gZmFsc2U7XG4gICAgICAgIHZhciBjdHggPSB0aGlzLnNlbGVjdGlvbkRyYXdDb250ZXh0O1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8odGhpcy5fcG9pbnRzWzBdLngsdGhpcy5fcG9pbnRzWzBdLnkpXG4gICAgICAgIGZvcih2YXIgaSA9IDEgOyBpIDwgdGhpcy5fcG9pbnRzLmxlbmd0aDtpICsrKXtcbiAgICAgICAgICBjdHgubGluZVRvKHRoaXMuX3BvaW50c1tpXS54LHRoaXMuX3BvaW50c1tpXS55KVxuICAgICAgICB9XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgTWFnaWNXYW5kLm1hc2tTZWxlY3Rpb24odGhpcy5zZWxlY3Rpb25EcmF3Q2FudmFzLDAsMCx0aGlzLm1hc2ssJ2FkZCcpO1xuICAgICAgICB0aGlzLnNldFNlbGVjdGlvbih0aGlzLm1hc2spO1xuICAgICAgICB0aGlzLnJlc2V0U2VsZWN0aW9uRHJhd0NhbnZhcygpO1xuICAgICAgICB0aGlzLl9wb2ludHMgPSBbXTtcbiAgICAgICAgZGVsZXRlIHRoaXMuZG93blBvaW50O1xuICAgICAgICBkZWxldGUgdGhpcy5yZWFkeVRvQ2xvc2VQYXRoO1xuICAgICAgICBkZWxldGUgdGhpcy5fbGFzdF9wb2ludDtcbiAgICAgICAgdGhpcy5jYW52YXMub2ZmKCdtb3VzZTptb3ZlJywgdGhpcy5fY2hhbmdlQ3Vyc29yT3ZlckNsb3NlUG9pbnQpO1xuICAgICAgICB0aGlzLmNhbnZhcy5mcmVlRHJhd2luZ0N1cnNvciA9ICdjcm9zc2hhaXInO1xuICAgICAgICB0aGlzLmNhbnZhcy5zZXRDdXJzb3IodGhpcy5jYW52YXMuZnJlZURyYXdpbmdDdXJzb3IpO1xuICAgICAgICAvLyB0aGlzLmRyYXdMaW5lKHRoaXMuX2xhc3RfcG9pbnQsIHRoaXMuZG93blBvaW50KTtcbiAgICAgIH0sXG4gICAgICBfY2hhbmdlQ3Vyc29yT3ZlckNsb3NlUG9pbnQ6ICBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgY2FudmFzID0gdGhpcyxcbiAgICAgICAgICBwYXRoZmluZGVyID0gY2FudmFzLnBhdGhmaW5kZXI7XG4gICAgICAgIGlmKCFwYXRoZmluZGVyLnRhcmdldClyZXR1cm47XG4gICAgICAgIHZhciBpdnQgPSBmYWJyaWMudXRpbC5pbnZlcnRUcmFuc2Zvcm0oY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtKSxcbiAgICAgICAgICBwID0gZmFicmljLnV0aWwudHJhbnNmb3JtUG9pbnQoY2FudmFzLmdldFBvaW50ZXIoZS5lLCB0cnVlKSwgaXZ0KTtcbiAgICAgICAgcC54IC09IHBhdGhmaW5kZXIudGFyZ2V0LmxlZnQ7XG4gICAgICAgIHAueSAtPSBwYXRoZmluZGVyLnRhcmdldC50b3A7XG4gICAgICAgIGlmICggcGF0aGZpbmRlci5kb3duUG9pbnQgJiYgcGF0aGZpbmRlci5kb3duUG9pbnQuZGlzdGFuY2VGcm9tKHApIDwgMTApIHtcbiAgICAgICAgICBpZighcGF0aGZpbmRlci5fcGF0aF9vdXQpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXRoZmluZGVyLnJlYWR5VG9DbG9zZVBhdGggPSB0cnVlO1xuICAgICAgICAgIGNhbnZhcy5mcmVlRHJhd2luZ0N1cnNvciA9IGNhbnZhcy50YXJnZXRDdXJzb3I7XG4gICAgICAgICAgY2FudmFzLnNldEN1cnNvcihjYW52YXMuZnJlZURyYXdpbmdDdXJzb3IpO1xuICAgICAgICAgIC8vY29uc29sZS5sb2coY2FudmFzLmZyZWVEcmF3aW5nQ3Vyc29yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXRoZmluZGVyLl9wYXRoX291dCA9IHRydWU7XG4gICAgICAgICAgcGF0aGZpbmRlci5yZWFkeVRvQ2xvc2VQYXRoID0gZmFsc2U7XG4gICAgICAgICAgY2FudmFzLmZyZWVEcmF3aW5nQ3Vyc29yID0gJ2Nyb3NzaGFpcic7XG4gICAgICAgICAgY2FudmFzLnNldEN1cnNvcihjYW52YXMuZnJlZURyYXdpbmdDdXJzb3IpO1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNhbnZhcy5mcmVlRHJhd2luZ0N1cnNvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5mb3IodmFyIGkgaW4gUGF0aGZpbmRlci5wcm90b3R5cGUuZHJhd2luZ1Rvb2xzKXtcbiAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChQYXRoZmluZGVyLnByb3RvdHlwZSwgUGF0aGZpbmRlci5wcm90b3R5cGUuZHJhd2luZ1Rvb2xzW2ldLnV0aWxzKVxufVxuZmFicmljLlBhdGhmaW5kZXIgPSBQYXRoZmluZGVyO1xuXG5cblxuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5TbGlkZUNhbnZhcy5wcm90b3R5cGUsIHtcbiAgcGF0aGZpbmRlcjogZmFsc2UsXG4gIHNldFBhdGhmaW5kZXI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnBhdGhmaW5kZXIgPSBuZXcgZmFicmljLlBhdGhmaW5kZXIoJ3BhdGhmaW5kZXInKTtcbiAgICAgIHRoaXMucGF0aGZpbmRlci5jYW52YXMgPSB0aGlzO1xuICAgIH1cbiAgfSxcbiAgZ2V0UGF0aGZpbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnBhdGhmaW5kZXIgfHwgdGhpcy5hcHBsaWNhdGlvbiAmJiB0aGlzLmFwcGxpY2F0aW9uLnBhdGhmaW5kZXI7XG4gIH1cbn0pO1xuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5BcHBsaWNhdGlvbi5wcm90b3R5cGUsIHtcbiAgaW5pdFBhdGhmaW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAvL2lmKHRoaXMucGF0aGZpbmRlcil7XG5cbiAgICAgIHRoaXMucGF0aGZpbmRlciA9IG5ldyBmYWJyaWMuUGF0aGZpbmRlcih7XG4gICAgICAgIGFwcGxpY2F0aW9uOiB0aGlzXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5wYXRoZmluZGVyLm9uKFwiaW1hZ2U6Y2hhbmdlZFwiLCBmdW5jdGlvbiAoaW1nKSB7XG4gICAgICAgIHZhciBkYXRhVXJsID0gaW1nLnRvRGF0YVVSTCgpO1xuICAgICAgICBpZiAoIXRoaXMudGFyZ2V0Ll9vcmlnaW5hbEVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLnRhcmdldC5fb3JpZ2luYWxFbGVtZW50ID0gdGhpcy50YXJnZXQuX2VsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50YXJnZXQuX2VsZW1lbnQgPSBuZXcgSW1hZ2UoKTtcblxuICAgICAgICB0aGlzLnRhcmdldC5fZWxlbWVudC5vbmxvYWQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgIHRoaXMudGFyZ2V0LmZpcmUoXCJjb250ZW50Om1vZGlmaWVkXCIpXG4gICAgICAgICAgdGhpcy50YXJnZXQuY2FudmFzICYmIHRoaXMudGFyZ2V0LmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMudGFyZ2V0Ll9lbGVtZW50LnNyYyA9IGRhdGFVcmw7XG4gICAgICAgIHRoaXMudGFyZ2V0Ll9lZGl0ZWQgPSB0cnVlXG4gICAgICAgIGlmKHRoaXMudGFyZ2V0LmRpcnR5ICE9PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgICB0aGlzLnRhcmdldC5kaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cblxuXG4gICAgICB9KTtcbiAgICAvL31cbiAgfVxufSk7XG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLkFwcGxpY2F0aW9uLnByb3RvdHlwZSwge1xuICBldmVudExpc3RlbmVyczogZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZEFycmF5c09iamVjdChmYWJyaWMuQXBwbGljYXRpb24ucHJvdG90eXBlLmV2ZW50TGlzdGVuZXJzLCB7XG4gICAgXCJyZWFkeVwiOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmluaXRQYXRoZmluZGVyKCk7XG4gICAgfVxuICB9KVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL21vZHVsZXMvcGF0aGZpbmRlci5qc1xuLy8gbW9kdWxlIGlkID0gNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBfc2V0X3NiYWNrZ3JvdW5kX2ltYWdlX292ZXJ3cml0dGVuID0gZmFicmljLkNhbnZhcy5wcm90b3R5cGUuc2V0QmFja2dyb3VuZEltYWdlO1xuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5DYW52YXMucHJvdG90eXBlLCB7XG4gIC8qKlxuICAgKiBiYWNrZ3JvdW5kUG9zaXRpb25cbiAgICogQHZhbHVlcyBtYW51YWwgfCBjb3ZlciB8IGZpdFxuICAgKi9cbiAgYmFja2dyb3VuZFBvc2l0aW9uOiAnbWFudWFsJyxcbiAgc2V0QmFja2dyb3VuZFBvc2l0aW9uOiBmdW5jdGlvbiAoc3JjKSB7XG4gICAgdGhpcy5iYWNrZ3JvdW5kUG9zaXRpb24gPSBzcmM7XG4gICAgdGhpcy5fdXBkYXRlX2JhY2tncm91bmRfaW1hZ2UoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgb2Zmc2V0czoge1xuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIHRvcDogMFxuICB9LFxuXG4gIC8vIHNldEJhY2tncm91bmRJbWFnZTogZnVuY3Rpb24gKHNyYywgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgLy9cbiAgLy8gICBfc2V0X3NiYWNrZ3JvdW5kX2ltYWdlX292ZXJ3cml0dGVuLmNhbGwodGhpcywgc3JjLCBmdW5jdGlvbiAoKSB7XG4gIC8vICAgICB0aGlzLl91cGRhdGVfYmFja2dyb3VuZF9pbWFnZSgpO1xuICAvLyAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sodGhpcy5iYWNrZ3JvdW5kSW1hZ2UpO1xuICAvLyAgIH0uYmluZCh0aGlzKSwgb3B0aW9ucyk7XG4gIC8vICAgcmV0dXJuIHRoaXM7XG4gIC8vIH0sXG4gIGZpbGxCYWNrZ3JvdW5kQ29sb3JPdmVyQ2FudmFzOiBmYWxzZSxcbiAgX3JlbmRlckJhY2tncm91bmRPck92ZXJsYXk6IGZ1bmN0aW9uKGN0eCwgcHJvcGVydHkpIHtcbiAgICB2YXIgb2JqZWN0ID0gdGhpc1twcm9wZXJ0eSArICdDb2xvciddO1xuICAgIGlmIChvYmplY3QpIHtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBvYmplY3QudG9MaXZlXG4gICAgICAgID8gb2JqZWN0LnRvTGl2ZShjdHgpXG4gICAgICAgIDogb2JqZWN0O1xuXG4gICAgICBpZighdGhpcy5maWxsQmFja2dyb3VuZENvbG9yT3ZlckNhbnZhcyl7XG4gICAgICAgIGN0eC5maWxsUmVjdChcbiAgICAgICAgICBvYmplY3Qub2Zmc2V0WCB8fCB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzRdLyB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzBdLFxuICAgICAgICAgIG9iamVjdC5vZmZzZXRZIHx8IHRoaXMudmlld3BvcnRUcmFuc2Zvcm1bNV0vIHRoaXMudmlld3BvcnRUcmFuc2Zvcm1bMF0sXG4gICAgICAgICAgdGhpcy53aWR0aCAqIHRoaXMudmlld3BvcnRUcmFuc2Zvcm1bMF0sXG4gICAgICAgICAgdGhpcy5oZWlnaHQgICogdGhpcy52aWV3cG9ydFRyYW5zZm9ybVswXSk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgY3R4LmZpbGxSZWN0KFxuXG4gICAgICAgICAgb2JqZWN0Lm9mZnNldFggfHwgMCxcbiAgICAgICAgICBvYmplY3Qub2Zmc2V0WSB8fCAwLFxuICAgICAgICAgIHRoaXMub3JpZ2luYWxXaWR0aCAsXG4gICAgICAgICAgdGhpcy5vcmlnaW5hbEhlaWdodCk7XG4gICAgICB9XG4gICAgfVxuICAgIG9iamVjdCA9IHRoaXNbcHJvcGVydHkgKyAnSW1hZ2UnXTtcbiAgICBpZihvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yICE9PSBTdHJpbmcgJiYgIG9iamVjdC5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0KXtcbiAgICAgICAgb2JqZWN0LnJlbmRlcihjdHgpO1xuICAgIH1cbiAgfSxcbiAgZ2V0SW1hZ2VEYXRhOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKHtcbiAgICAgIGNsaXBwZWRfYXJlYTogZmFsc2UsXG4gICAgICBjbGlwcGVkX2FyZWFfb25seTogZmFsc2UsXG4gICAgICBkcmF3X2JhY2tncm91bmQ6IHRydWUsXG4gICAgICBmb3JtYXQ6ICdwbmcnLFxuICAgICAgcXVhbGl0eTogMC44XG4gICAgfSwgb3B0aW9ucyB8fCB7fSk7XG5cbiAgICB2YXIgc2l6ZTtcbiAgICBpZiAob3B0aW9ucy5jbGlwcGVkX2FyZWEpIHtcbiAgICAgIHNpemUgPSBvcHRpb25zLmNsaXBwZWRfYXJlYS5nZXRCb3VuZGluZ1JlY3QoKTtcbiAgICAgIHZhciBfem9vbSA9IHRoaXMuZ2V0Wm9vbSgpO1xuICAgICAgc2l6ZS5sZWZ0ICAgLz0gX3pvb207XG4gICAgICBzaXplLnRvcCAgICAvPSBfem9vbTtcbiAgICAgIHNpemUud2lkdGggIC89IF96b29tO1xuICAgICAgc2l6ZS5oZWlnaHQgLz0gX3pvb207XG4gICAgICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKG9wdGlvbnMsIHNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaXplID0ge1xuICAgICAgICB3aWR0aDogb3B0aW9ucy53aWR0aCB8fCB0aGlzLm9yaWdpbmFsV2lkdGggfHwgdGhpcy53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodCB8fCB0aGlzLm9yaWdpbmFsSGVpZ2h0IHx8IHRoaXMuaGVpZ2h0LFxuICAgICAgfTtcblxuICAgICAgaWYgKG9wdGlvbnMuY2xpcHBlZF9hcmVhX29ubHkpIHtcbiAgICAgICAgc2l6ZS53aWR0aCAtPSB0aGlzLm9mZnNldHMubGVmdCArIHRoaXMub2Zmc2V0cy5yaWdodDtcbiAgICAgICAgc2l6ZS5oZWlnaHQgLT0gdGhpcy5vZmZzZXRzLnRvcCArIHRoaXMub2Zmc2V0cy5ib3R0b207XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnpvb20pIHtcbiAgICAgIHNpemUud2lkdGggKj0gb3B0aW9ucy56b29tO1xuICAgICAgc2l6ZS5oZWlnaHQgKj0gb3B0aW9ucy56b29tO1xuICAgIH1cblxuICAgIHZhciBjYW52YXMgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCk7XG4gICAgY2FudmFzLndpZHRoID0gc2l6ZS53aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG5cbiAgICBvcHRpb25zLmxlZnQgPSBNYXRoLmZsb29yKG9wdGlvbnMubGVmdCk7XG4gICAgb3B0aW9ucy50b3AgPSBNYXRoLmZsb29yKG9wdGlvbnMudG9wKTtcbiAgICBvcHRpb25zLmhlaWdodCA9IE1hdGguY2VpbChvcHRpb25zLmhlaWdodCk7XG4gICAgb3B0aW9ucy53aWR0aCA9IE1hdGguY2VpbChvcHRpb25zLndpZHRoKTtcblxuICAgIHRoaXMucmVuZGVyVGh1bWIoY2FudmFzLCBvcHRpb25zKTtcblxuICAgIHZhciBzcmMgPSBjYW52YXMudG9EYXRhVVJMKG9wdGlvbnMpO1xuXG4gICAgdmFyIGJsb2IgPSBmYWJyaWMudXRpbC5kYXRhVVJJdG9CbG9iKHNyYywgJ2ltYWdlLycgKyBvcHRpb25zLmZvcm1hdCk7XG4gICAgdmFyIG9iamVjdFVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGFVUkw6IHNyYyxcbiAgICAgIGJsb2I6IGJsb2IsXG4gICAgICB1cmw6IG9iamVjdFVSTCxcbiAgICAgIGNhbnZhczogY2FudmFzXG4gICAgfTtcbiAgfSxcbiAgZ2V0T3JpZ2luYWxTaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiB0aGlzLm9yaWdpbmFsV2lkdGgsXG4gICAgICBoZWlnaHQ6IHRoaXMub3JpZ2luYWxIZWlnaHRcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyVGh1bWI6IGZ1bmN0aW9uIChjYW52YXMsIG9wdGlvbnMpIHtcblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHtcbiAgICAgICAgb2JqZWN0czogdHJ1ZSxcbiAgICAgICAgY2xpcHBlZF9hcmVhX29ubHk6IGZhbHNlLFxuICAgICAgICBkcmF3X2JhY2tncm91bmQ6IHRydWVcbiAgICAgIH07XG5cbiAgICBpZiAob3B0aW9ucy56b29tKSB7XG4gICAgICB2YXIgX3pvb20gPSBvcHRpb25zLnpvb207XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjYW52YXMud2lkdGgpIHtcbiAgICAgICAgdmFyIF96b29tID0gY2FudmFzLndpZHRoIC8gKHRoaXMub3JpZ2luYWxXaWR0aCB8fCB0aGlzLndpZHRoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF96b29tID0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIF9vbGRfU2NhbGUgPSB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzBdO1xuICAgIHZhciBvbGRfeCA9IHRoaXMudmlld3BvcnRUcmFuc2Zvcm1bNF07XG4gICAgdmFyIG9sZF95ID0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybVs1XTtcbiAgICB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzRdID0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybVs1XSA9IDA7XG4gICAgdGhpcy52aWV3cG9ydFRyYW5zZm9ybVswXSA9IHRoaXMudmlld3BvcnRUcmFuc2Zvcm1bM10gPSAxO1xuXG4gICAgdGhpcy52aWV3cG9ydFRyYW5zZm9ybVswXSA9IHRoaXMudmlld3BvcnRUcmFuc2Zvcm1bM10gPSBfem9vbTtcbiAgICAvL3RoaXMuX3VwZGF0ZV9jbGlwX3JlY3QoKTtcblxuICAgIGlmICh0aGlzLmNsaXBSZWN0KSB7XG4gICAgICB0aGlzLmNsaXBSZWN0LnNldE9wYWNpdHkoMCk7XG4gICAgfVxuXG4gICAgdmFyIHNpemUgPSB7XG4gICAgICB3aWR0aDogdGhpcy5vcmlnaW5hbFdpZHRoIHx8IHRoaXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHRoaXMub3JpZ2luYWxIZWlnaHQgfHwgdGhpcy5oZWlnaHRcbiAgICB9O1xuICAgIHNpemUud2lkdGggPSBNYXRoLmNlaWwoc2l6ZS53aWR0aCAqIF96b29tKTtcbiAgICBzaXplLmhlaWdodCA9IE1hdGguY2VpbChzaXplLmhlaWdodCAqIF96b29tKTtcblxuICAgIHZhciBfY2FudmFzID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuICAgIF9jYW52YXMud2lkdGggPSBzaXplLndpZHRoO1xuICAgIF9jYW52YXMuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG5cbiAgICB2YXIgY2FudmFzVG9EcmF3T24gPSBfY2FudmFzLmdldENvbnRleHQoJzJkJyksIG9ianNUb1JlbmRlcjtcblxuICAgIHRoaXMuY2xlYXJDb250ZXh0KGNhbnZhc1RvRHJhd09uKTtcbiAgICBjYW52YXNUb0RyYXdPbi5zYXZlKCk7XG4gICAgY2FudmFzVG9EcmF3T24udHJhbnNmb3JtLmFwcGx5KGNhbnZhc1RvRHJhd09uLCB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtKTtcblxuICAgIGlmIChvcHRpb25zLmRyYXdfYmFja2dyb3VuZCkge1xuICAgICAgdGhpcy5fcmVuZGVyQmFja2dyb3VuZChjYW52YXNUb0RyYXdPbik7XG4gICAgICAvL2lmICh0aGlzLl9iYWNrZ3JvdW5kTGF5ZXIpIHtcbiAgICAgIC8vICB0aGlzLl9yZW5kZXJPYmplY3RzKGNhbnZhc1RvRHJhd09uLCB0aGlzLl9iYWNrZ3JvdW5kTGF5ZXIpO1xuICAgICAgLy99XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLmNsaXBwZWRfYXJlYV9vbmx5ICYmIHRoaXMuY2xpcFRvKSB7XG4gICAgICBmYWJyaWMudXRpbC5jbGlwQ29udGV4dCh0aGlzLCBjYW52YXNUb0RyYXdPbik7XG4gICAgfVxuXG4gICAgdmFyIF9vYmplY3RzO1xuICAgIGlmIChvcHRpb25zLm9iamVjdHMgJiYgb3B0aW9ucy5vYmplY3RzLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgX29iamVjdHMgPSBvcHRpb25zLm9iamVjdHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9vYmplY3RzID0gb3B0aW9ucy5vYmplY3RzICE9PSBmYWxzZSA/IHRoaXMuX29iamVjdHMgOiBbXTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuY2xpcHBlZF9hcmVhKSB7XG4gICAgICBfb2JqZWN0cyA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZShfb2JqZWN0cyk7XG4gICAgICBmb3IgKHZhciBpID0gX29iamVjdHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgIGlmIChfb2JqZWN0c1tpXS5jbGlwVG8gIT09IG9wdGlvbnMuY2xpcHBlZF9hcmVhKSB7XG4gICAgICAgICAgX29iamVjdHMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGlmIChmYWJyaWMudmVyc2lvbiA+PSAxLjYpIHtcbiAgICAgIHRoaXMuX3JlbmRlck9iamVjdHMoY2FudmFzVG9EcmF3T24sIF9vYmplY3RzKTtcbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IF9vYmplY3RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgLy8gICAgIHRoaXMuX2RyYXcoY2FudmFzVG9EcmF3T24sIF9vYmplY3RzW2ldKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9XG5cblxuICAgIGNhbnZhc1RvRHJhd09uLnJlc3RvcmUoKTtcbiAgICBpZiAoIW9wdGlvbnMuY2xpcHBlZF9hcmVhX29ubHkgJiYgdGhpcy5jbGlwVG8pIHtcbiAgICAgIGNhbnZhc1RvRHJhd09uLnJlc3RvcmUoKTtcbiAgICB9XG4gICAgdGhpcy5fcmVuZGVyT3ZlcmxheShjYW52YXNUb0RyYXdPbik7XG4gICAgY2FudmFzVG9EcmF3T24ucmVzdG9yZSgpO1xuICAgIGlmICh0aGlzLmNsaXBSZWN0KSB7XG4gICAgICB0aGlzLmNsaXBSZWN0LnNldE9wYWNpdHkoMSk7XG4gICAgfVxuICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgaWYgKG9wdGlvbnMuY2xpcHBlZF9hcmVhX29ubHkgJiYgdGhpcy5jbGlwUmVjdCkge1xuICAgICAgdmFyIF9yZWN0ID0ge1xuICAgICAgICBsZWZ0OiB0aGlzLmNsaXBSZWN0LmxlZnQgKiBfem9vbSxcbiAgICAgICAgdG9wOiB0aGlzLmNsaXBSZWN0LnRvcCAqIF96b29tLFxuICAgICAgICB3aWR0aDogdGhpcy5jbGlwUmVjdC53aWR0aCAqIF96b29tLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuY2xpcFJlY3QuaGVpZ2h0ICogX3pvb21cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfcmVjdCA9IHtcbiAgICAgICAgbGVmdDogb3B0aW9ucy5sZWZ0ICogX3pvb20gfHwgMCxcbiAgICAgICAgdG9wOiBvcHRpb25zLnRvcCAqIF96b29tIHx8IDAsXG4gICAgICAgIHdpZHRoOiBvcHRpb25zLndpZHRoICogX3pvb20gfHwgc2l6ZS53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodCAqIF96b29tIHx8IHNpemUuaGVpZ2h0XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5hbmdsZSkge1xuICAgICAgY3R4LnJvdGF0ZSgtb3B0aW9ucy5hbmdsZSAqIE1hdGguUEkgLyAxODApO1xuICAgICAgY3R4LmRyYXdJbWFnZShfY2FudmFzLFxuICAgICAgICAwLCAwLCBfcmVjdC53aWR0aCArIF9yZWN0LmxlZnQgKyBfY2FudmFzLndpZHRoLCBfcmVjdC5oZWlnaHQgKyBfcmVjdC50b3AgKyBfY2FudmFzLmhlaWdodCxcbiAgICAgICAgLV9yZWN0LmxlZnQsIC1fcmVjdC50b3AsIGNhbnZhcy53aWR0aCArIF9yZWN0LmxlZnQgKyBfY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0ICsgX3JlY3QudG9wICsgX2NhbnZhcy5oZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHguZHJhd0ltYWdlKF9jYW52YXMsIF9yZWN0LmxlZnQsIF9yZWN0LnRvcCwgX3JlY3Qud2lkdGgsIF9yZWN0LmhlaWdodCwgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICB9XG5cbiAgICB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzBdID0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybVszXSA9IF9vbGRfU2NhbGU7XG4gICAgLy8gdGhpcy5fdXBkYXRlX2JhY2tncm91bmRfaW1hZ2UoKTtcbiAgICAvL3RoaXMuX3VwZGF0ZV9jbGlwX3JlY3QoKTtcblxuICAgIHRoaXMudmlld3BvcnRUcmFuc2Zvcm1bNF0gPSBvbGRfeDtcbiAgICB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzVdID0gb2xkX3k7XG5cblxuICAgIHJldHVybiBjYW52YXM7XG4gIH0sXG5cbiAgLy8gc2V0T2Zmc2V0czogZnVuY3Rpb24gKF9vZmZzZXRzKSB7XG4gIC8vICAgdGhpcy5vZmZzZXRzID0gX29mZnNldHMgfHwgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCh7fSwgZmFicmljLlNsaWRlQ2FudmFzLnByb3RvdHlwZS5vZmZzZXRzKTtcbiAgLy8gICAvL3RoaXMuX3VwZGF0ZV9jbGlwX3JlY3QoKTtcbiAgLy8gICByZXR1cm4gdGhpcztcbiAgLy8gfSxcbiAgZ2V0UmVjdDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuXG4gICAgdmFyIHJlY3QgPSB7fTtcblxuICAgIHZhciBfdyA9IHRoaXMub3JpZ2luYWxXaWR0aCB8fCB0aGlzLndpZHRoOyAvL3RoaXMub3JpZ2luYWxXaWR0aFxuICAgIHZhciBfZmxleEFycmF5ID0gZmFicmljLnV0aWwuZmxleChfdyAsIFt7dmFsdWU6IG9wdGlvbnMubGVmdCwgZmxleDogMH0se3ZhbHVlOiBvcHRpb25zLndpZHRoLCBmbGV4OiAxfSx7dmFsdWU6IG9wdGlvbnMucmlnaHQsIGZsZXg6IDB9XSApO1xuICAgIHJlY3QubGVmdCA9IF9mbGV4QXJyYXlbMF07XG4gICAgcmVjdC53aWR0aCA9IF9mbGV4QXJyYXlbMV07XG4gICAgcmVjdC5yaWdodCA9IF9mbGV4QXJyYXlbMl07XG5cbiAgICB2YXIgX2ggPSB0aGlzLm9yaWdpbmFsSGVpZ2h0fHwgdGhpcy5oZWlnaHQ7ICAgLy90aGlzLm9yaWdpbmFsSGVpZ2h0XG4gICAgdmFyIF9mbGV4QXJyYXkgPSBmYWJyaWMudXRpbC5mbGV4KF9oICwgW3t2YWx1ZTogb3B0aW9ucy50b3AsIGZsZXg6IDB9LHt2YWx1ZTogb3B0aW9ucy5oZWlnaHQsIGZsZXg6IDF9LHt2YWx1ZTogb3B0aW9ucy5ib3R0b20sIGZsZXg6IDB9XSApO1xuICAgIHJlY3QudG9wID0gX2ZsZXhBcnJheVswXTtcbiAgICByZWN0LmhlaWdodCA9IF9mbGV4QXJyYXlbMV07XG4gICAgcmVjdC5ib3R0b20gPSBfZmxleEFycmF5WzJdO1xuXG4gICAgcmV0dXJuIHJlY3Q7XG4gIH0sXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbW9kdWxlcy9yZW5kZXIuanNcbi8vIG1vZHVsZSBpZCA9IDU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgX3NldF9vYmplY3Rfc2NhbGVfb3ZlcndyaXR0ZW4gPSBmYWJyaWMuQ2FudmFzLnByb3RvdHlwZS5fc2V0T2JqZWN0U2NhbGU7XG52YXIgX3NldHVwX2N1cnJlbnRfdHJhbnNmb3JtID0gZmFicmljLkNhbnZhcy5wcm90b3R5cGUuX3NldHVwQ3VycmVudFRyYW5zZm9ybTtcblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuQ2FudmFzLnByb3RvdHlwZSwge1xuICBfc2V0dXBDdXJyZW50U2NhbGVUcmFuc2Zvcm06IF9zZXR1cF9jdXJyZW50X3RyYW5zZm9ybSxcbiAgX3NldHVwQ3VycmVudFRyYW5zZm9ybTogZnVuY3Rpb24gKGUsIHRhcmdldCkge1xuICAgIGlmICghdGFyZ2V0KXJldHVybjtcbiAgICBpZiAodGFyZ2V0LnNldHVwQ3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgcmV0dXJuIHRhcmdldC5zZXR1cEN1cnJlbnRUcmFuc2Zvcm0oZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0YXJnZXQucmVzaXphYmxlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR1cEN1cnJlbnRSZXNpemVUcmFuc2Zvcm0oZSwgdGFyZ2V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR1cEN1cnJlbnRTY2FsZVRyYW5zZm9ybS5jYWxsKHRoaXMsIGUsIHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBfc2V0T2JqZWN0U2NhbGU6IGZ1bmN0aW9uIChsb2NhbE1vdXNlLCB0cmFuc2Zvcm0sIGxvY2tTY2FsaW5nWCwgbG9ja1NjYWxpbmdZLCBieSwgbG9ja1NjYWxpbmdGbGlwLCBfZGltKSB7XG5cbiAgICB2YXIgdCA9IHRyYW5zZm9ybS50YXJnZXQ7XG5cbiAgICBpZiAoIV9kaW0pIHtcbiAgICAgIHZhciBzdHJva2VXaWR0aCA9IHQuc3Ryb2tlID8gdC5zdHJva2VXaWR0aCA6IDA7XG4gICAgICBfZGltID0ge1xuICAgICAgICB4OiAodC53aWR0aCArIChzdHJva2VXaWR0aCAvIDIpKSxcbiAgICAgICAgeTogKHQuaGVpZ2h0ICsgKHN0cm9rZVdpZHRoIC8gMikpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHQuc2V0T2JqZWN0U2NhbGUpIHtcbiAgICAgIHJldHVybiB0LnNldE9iamVjdFNjYWxlKGxvY2FsTW91c2UsIHRyYW5zZm9ybSxcbiAgICAgICAgbG9ja1NjYWxpbmdYLCBsb2NrU2NhbGluZ1ksIGJ5LCBsb2NrU2NhbGluZ0ZsaXAsIF9kaW0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmICh0LnJlc2l6YWJsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2V0T2JqZWN0U2l6ZShsb2NhbE1vdXNlLCB0cmFuc2Zvcm0sXG4gICAgICAgICAgbG9ja1NjYWxpbmdYLCBsb2NrU2NhbGluZ1ksIGJ5LCBsb2NrU2NhbGluZ0ZsaXAsIF9kaW0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9zZXRfb2JqZWN0X3NjYWxlX292ZXJ3cml0dGVuLmNhbGwodGhpcywgbG9jYWxNb3VzZSwgdHJhbnNmb3JtLFxuICAgICAgICAgIGxvY2tTY2FsaW5nWCwgbG9ja1NjYWxpbmdZLCBieSwgbG9ja1NjYWxpbmdGbGlwLCBfZGltKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIF9zZXRPYmplY3RTaXplOiBmdW5jdGlvbiAobG9jYWxNb3VzZSwgdHJhbnNmb3JtLCBsb2NrU2NhbGluZ1gsIGxvY2tTY2FsaW5nWSwgYnksIGxvY2tTY2FsaW5nRmxpcCwgX2RpbSkge1xuXG4gICAgdmFyIHRhcmdldCA9IHRyYW5zZm9ybS50YXJnZXQsIGZvcmJpZFNjYWxpbmdYID0gZmFsc2UsIGZvcmJpZFNjYWxpbmdZID0gZmFsc2U7XG4gICAgdmFyIF9zdHJva2UgPSB0cmFuc2Zvcm0udGFyZ2V0LnN0cm9rZVdpZHRoIHx8IDA7XG4gICAgdHJhbnNmb3JtLm5ld1dpZHRoID0gdGhpcy53aWR0aCAqICgobG9jYWxNb3VzZS54IC8gdHJhbnNmb3JtLnNjYWxlWCkgLyAodGhpcy53aWR0aCArIF9zdHJva2UpKTtcbiAgICB0cmFuc2Zvcm0ubmV3SGVpZ2h0ID0gdGhpcy5oZWlnaHQgKiAoKGxvY2FsTW91c2UueSAvIHRyYW5zZm9ybS5zY2FsZVkpIC8gKHRoaXMuaGVpZ2h0ICsgX3N0cm9rZSkpO1xuXG4gICAgaWYodGhpcy53aG9sZUNvb3JkaW5hdGVzIHx8IHRhcmdldC53aG9sZUNvb3JkaW5hdGVzKXtcbiAgICAgIHRyYW5zZm9ybS5uZXdXaWR0aCA9IE1hdGgucm91bmQodHJhbnNmb3JtLm5ld1dpZHRoKTtcbiAgICAgIHRyYW5zZm9ybS5uZXdIZWlnaHQgPSBNYXRoLnJvdW5kKHRyYW5zZm9ybS5uZXdIZWlnaHQpO1xuICAgIH1cbiAgICBpZih0cmFuc2Zvcm0ubmV3SGVpZ2h0IDwgMCApe1xuICAgICAgdGFyZ2V0LnRvcCA9IHRyYW5zZm9ybS50b3AgLSB0cmFuc2Zvcm0ubmV3SGVpZ2h0O1xuICAgIH1cbiAgICBpZiAodGFyZ2V0Lm1pbldpZHRoICYmIHRyYW5zZm9ybS5uZXdXaWR0aCA8PSB0YXJnZXQubWluV2lkdGgpIHtcbiAgICAgIHRyYW5zZm9ybS5uZXdXaWR0aCA9IHRhcmdldC5taW5XaWR0aDtcbiAgICB9XG4gICAgaWYgKHRhcmdldC5taW5IZWlnaHQgJiYgdHJhbnNmb3JtLm5ld0hlaWdodCA8PSB0YXJnZXQubWluSGVpZ2h0KSB7XG4gICAgICB0cmFuc2Zvcm0ubmV3SGVpZ2h0ID0gdGFyZ2V0Lm1pbkhlaWdodDtcbiAgICB9XG4gICAgaWYgKGxvY2tTY2FsaW5nRmxpcCAmJiB0cmFuc2Zvcm0ubmV3V2lkdGggPCB0YXJnZXQud2lkdGgpIHtcbiAgICAgIGZvcmJpZFNjYWxpbmdYID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGxvY2tTY2FsaW5nRmxpcCAmJiB0cmFuc2Zvcm0ubmV3SGVpZ2h0IDwgdGFyZ2V0LmhlaWdodCkge1xuICAgICAgZm9yYmlkU2NhbGluZ1kgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChieSA9PT0gJ2VxdWFsbHknKSB7XG4gICAgICBmb3JiaWRTY2FsaW5nWCB8fCBmb3JiaWRTY2FsaW5nWSB8fCB0aGlzLl9yZXNpemVPYmplY3RFcXVhbGx5KGxvY2FsTW91c2UsIHRhcmdldCwgdHJhbnNmb3JtLCBfZGltKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWJ5KSB7XG4gICAgICBmb3JiaWRTY2FsaW5nWCB8fCB0YXJnZXQuc2V0V2lkdGgodHJhbnNmb3JtLm5ld1dpZHRoKTtcbiAgICAgIGZvcmJpZFNjYWxpbmdZIHx8IHRhcmdldC5zZXRIZWlnaHQodHJhbnNmb3JtLm5ld0hlaWdodCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGJ5ID09PSAneCcgJiYgIXRhcmdldC5nZXQoJ2xvY2tVbmlTY2FsaW5nJykpIHtcbiAgICAgIGZvcmJpZFNjYWxpbmdYIHx8IHRhcmdldC5zZXRXaWR0aCh0cmFuc2Zvcm0ubmV3V2lkdGgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChieSA9PT0gJ3knICYmICF0YXJnZXQuZ2V0KCdsb2NrVW5pU2NhbGluZycpKSB7XG4gICAgICBmb3JiaWRTY2FsaW5nWSB8fCB0YXJnZXQuc2V0SGVpZ2h0KHRyYW5zZm9ybS5uZXdIZWlnaHQpO1xuICAgIH1cbiAgICByZXR1cm4gIWZvcmJpZFNjYWxpbmdYICYmICFmb3JiaWRTY2FsaW5nWTtcbiAgICAvL3RyYW5zZm9ybS5uZXdXaWR0aCAtPSBfc3Ryb2tlO1xuICAgIC8vdHJhbnNmb3JtLm5ld0hlaWdodCAtPSBfc3Ryb2tlO1xuICB9LFxuICBfc2V0dXBDdXJyZW50UmVzaXplVHJhbnNmb3JtOiBmdW5jdGlvbiAoZSwgdGFyZ2V0KSB7XG4gICAgdGhpcy5fc2V0dXBDdXJyZW50U2NhbGVUcmFuc2Zvcm0oZSwgdGFyZ2V0KTtcbiAgICB0aGlzLl9jdXJyZW50VHJhbnNmb3JtLm9yaWdpbmFsLmhlaWdodCA9IHRhcmdldC5oZWlnaHQ7XG4gICAgdGhpcy5fY3VycmVudFRyYW5zZm9ybS5vcmlnaW5hbC53aWR0aCA9IHRhcmdldC53aWR0aDtcbiAgfSxcbiAgX3Jlc2l6ZU9iamVjdEVxdWFsbHk6IGZ1bmN0aW9uIChsb2NhbE1vdXNlLCB0YXJnZXQsIHRyYW5zZm9ybSwgX2RpbSkge1xuXG4gICAgdmFyIGRpc3QgPSBsb2NhbE1vdXNlLnkgKyBsb2NhbE1vdXNlLngsXG4gICAgICBsYXN0RGlzdCA9IF9kaW0ueSAqIHRyYW5zZm9ybS5vcmlnaW5hbC5oZWlnaHQgLyB0YXJnZXQuaGVpZ2h0ICtcbiAgICAgICAgX2RpbS54ICogdHJhbnNmb3JtLm9yaWdpbmFsLndpZHRoIC8gdGFyZ2V0LndpZHRoO1xuXG4gICAgdHJhbnNmb3JtLm5ld1dpZHRoID0gdHJhbnNmb3JtLm9yaWdpbmFsLndpZHRoICogZGlzdCAvIGxhc3REaXN0O1xuICAgIHRyYW5zZm9ybS5uZXdIZWlnaHQgPSB0cmFuc2Zvcm0ub3JpZ2luYWwuaGVpZ2h0ICogZGlzdCAvIGxhc3REaXN0O1xuXG4gICAgdmFyIHJhdGlvID0gdHJhbnNmb3JtLm9yaWdpbmFsLmhlaWdodCAvIHRyYW5zZm9ybS5vcmlnaW5hbC53aWR0aDtcbiAgICBpZiAocmF0aW8gPiAxKSB7XG4gICAgICBpZiAodGFyZ2V0Lm1pbldpZHRoICYmIHRyYW5zZm9ybS5uZXdXaWR0aCA8PSB0YXJnZXQubWluV2lkdGgpIHtcbiAgICAgICAgdHJhbnNmb3JtLm5ld1dpZHRoID0gdGFyZ2V0Lm1pbldpZHRoO1xuICAgICAgICB0cmFuc2Zvcm0ubmV3SGVpZ2h0ID0gdGFyZ2V0Lm1pbkhlaWdodCAqIHJhdGlvO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGFyZ2V0Lm1pbkhlaWdodCAmJiB0cmFuc2Zvcm0ubmV3SGVpZ2h0IDw9IHRhcmdldC5taW5IZWlnaHQpIHtcbiAgICAgICAgdHJhbnNmb3JtLm5ld0hlaWdodCA9IHRhcmdldC5taW5IZWlnaHQ7XG4gICAgICAgIHRyYW5zZm9ybS5uZXdXaWR0aCA9IHRhcmdldC5taW5XaWR0aCAvIHJhdGlvO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRhcmdldC5zZXRXaWR0aCh0cmFuc2Zvcm0ubmV3V2lkdGgpO1xuICAgIHRhcmdldC5zZXRIZWlnaHQodHJhbnNmb3JtLm5ld0hlaWdodCk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9tb2R1bGVzL3Jlc2l6YWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG5pZih0eXBlb2Ygc2F2ZUFzID09IFwidW5kZWZpbmVkXCIpe1xuICBmYWJyaWMuc2F2ZUFzICA9IHJlcXVpcmUoXCIuLy4uLy4uL3BsdWdpbnMvc2F2ZUFzLmpzXCIpLnNhdmVBcztcbn1lbHNle1xuICBmYWJyaWMuc2F2ZUFzID0gc2F2ZUFzO1xufVxuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5TbGlkZUNhbnZhcy5wcm90b3R5cGUsIHtcbiAgaW5zZXJ0UmVuZGVyQXJlYTogZmFsc2UsXG4gIGluc2VydFJlbmRlckZ1bGw6IGZhbHNlLFxufSk7XG5cblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuU2xpZGVDYW52YXMucHJvdG90eXBlLmFjdGlvbnMsIHtcbiAgcmVuZGVyQXJlYToge1xuICAgIGNsYXNzTmFtZTogJ2ZhIGZhLWRvd25sb2FkJyxcbiAgICB0aXRsZTogJ2Rvd25sb2FkJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZhYnJpYy5zYXZlQXModGhpcy5nZXRJbWFnZURhdGEoe1xuICAgICAgICBjbGlwcGVkX2FyZWE6IHRoaXMuYWN0aXZlQXJlYSxcbiAgICAgICAgem9vbTogdGhpcy5kb3RzUGVyVW5pdCxcbiAgICAgICAgY2xpcHBlZF9hcmVhX29ubHk6IHRydWUsXG4gICAgICAgIGRyYXdfYmFja2dyb3VuZDogdHJ1ZVxuICAgICAgfSkuYmxvYiwgdGhpcy50aXRsZSk7XG4gICAgfVxuICB9LFxuICByZW5kZXJGdWxsOiB7XG4gICAgdGl0bGU6ICdkb3dubG9hZCB3aXRoIGJhY2tncm91bmQnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgZmFicmljLnNhdmVBcyh0aGlzLmdldEltYWdlRGF0YSh7XG4gICAgICAgIHpvb206IHRoaXMuZG90c1BlclVuaXQsXG4gICAgICAgIGNsaXBwZWRfYXJlYV9vbmx5OiBmYWxzZSxcbiAgICAgICAgZHJhd19iYWNrZ3JvdW5kOiB0cnVlXG4gICAgICB9KS5ibG9iLCB0aGlzLnRpdGxlKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9tb2R1bGVzL3NhdmVBcy5qc1xuLy8gbW9kdWxlIGlkID0gNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyp0b2RvXG5mYWJyaWMuU2xpZGVDYW52YXMuYWRkUGx1Z2luKFwiaW5pdGlhbGl6ZVwiLGZ1bmN0aW9uKCl7XG4gIGlmKHR5cGVvZiB0aGlzLmZyZWVEcmF3aW5nQnJ1c2ggPT0gXCJzdHJpbmdcIiApe1xuICAgIHRoaXMuc2V0RnJlZURyYXdpbmdCcnVzaCh0aGlzLmZyZWVEcmF3aW5nQnJ1c2gpO1xuICB9XG59KTsqL1xuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5TbGlkZUNhbnZhcy5wcm90b3R5cGUse1xuICAvKipcbiAgICogWydQZW5jaWxCcnVzaCcsJ1JlY3RhbmdsZUJydXNoJ11cbiAgICovXG4gIGFjdGl2ZURyYXdpbmdUb29sczogW10sXG4gIC8qKlxuICAgKlxuICAgICB7XG4gICAgICBCcnVzaENsYXNzTmFtZToge1xuICAgICAgICBjbGFzc05hbWU6ICdicnVzaCBjbGFzc05hbWUnLFxuICAgICAgICB0aXRsZTogJ2JydXNoIHRpdGxlJ1xuICAgICAgfVxuICAgIH1cbiAgICovXG4gIGRyYXdpbmdUb29sczoge30sXG4gIGluc2VydERyYXdpbmdUb29sOiBmYWxzZSxcbiAgYWN0aW9uczogZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuU2xpZGVDYW52YXMucHJvdG90eXBlLmFjdGlvbnMse1xuICAgIGRyYXdpbmdUb29sOiB7XG4gICAgICB0aXRsZTogJ2RyYXdpbmctdG9vbCcsXG4gICAgICB0eXBlOiAnb3B0aW9ucycsXG4gICAgICB2YWx1ZTogJ2ZyZWVEcmF3aW5nQnJ1c2gnLFxuICAgICAgbWVudTogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIF90b29scyA9IHt9O1xuICAgICAgICBmb3IodmFyIGkgaW4gdGhpcy5hY3RpdmVEcmF3aW5nVG9vbHMpe1xuICAgICAgICAgIHZhciBfdG9vbCA9IHRoaXMuYWN0aXZlRHJhd2luZ1Rvb2xzW2ldO1xuICAgICAgICAgIF90b29sc1tfdG9vbF0gPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKHtvcHRpb246IF90b29sfSx0aGlzLmRyYXdpbmdUb29sc1tfdG9vbF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdG9vbHM7XG4gICAgICB9XG4gICAgfVxuICB9KSxcbiAgZnJlZURyYXdpbmdCcnVzaDogJ1BlbmNpbEJydXNoJyxcbiAgZHJhd2luZ0NvbG9yOiBbMCwwLDAsMjU1XSxcbiAgX29uTW91c2VEb3duSW5EcmF3aW5nTW9kZTogZnVuY3Rpb24oZSkge1xuICAgIHRoaXMuX2lzQ3VycmVudGx5RHJhd2luZyA9IHRydWU7XG4gICAgaWYoIXRoaXMuZnJlZURyYXdpbmdCcnVzaC50YXJnZXQpe1xuICAgICAgdGhpcy5kaXNjYXJkQWN0aXZlT2JqZWN0KGUpLnJlbmRlckFsbCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5jbGlwVG8pIHtcbiAgICAgIGZhYnJpYy51dGlsLmNsaXBDb250ZXh0KHRoaXMsIHRoaXMuY29udGV4dFRvcCk7XG4gICAgfVxuICAgIHZhciBwb2ludGVyID0gdGhpcy5nZXRQb2ludGVyKGUpO1xuICAgIHRoaXMuZnJlZURyYXdpbmdCcnVzaC5vbk1vdXNlRG93bihwb2ludGVyKTtcbiAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAnZG93bicpO1xuICB9LFxuICBnZXRGcmVlRHJhd2luZ0JydXNoOiBmdW5jdGlvbigpIHtcbiAgICBpZighdGhpcy5mcmVlRHJhd2luZ0JydXNoKXtcbiAgICAgIHJldHVybiBcIlNlbGVjdGlvblwiO1xuICAgIH1cbiAgICByZXR1cm4gIGZhYnJpYy51dGlsLnN0cmluZy5jYXBpdGFsaXplKGZhYnJpYy51dGlsLnN0cmluZy5jYW1lbGl6ZSh0aGlzLmZyZWVEcmF3aW5nQnJ1c2gudHlwZSksdHJ1ZSk7XG4gIH0sXG4gIHNldEZyZWVEcmF3aW5nQnJ1c2g6IGZ1bmN0aW9uKGJydXNoKSB7XG5cbiAgICBpZihicnVzaCA9PSAnU2VsZWN0aW9uJyl7XG4gICAgICB0aGlzLmlzRHJhd2luZ01vZGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZnJlZURyYXdpbmdCcnVzaCA9IFwiXCI7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBjbGFzc05hbWUgPSBmYWJyaWMudXRpbC5zdHJpbmcuY2FwaXRhbGl6ZShmYWJyaWMudXRpbC5zdHJpbmcuY2FtZWxpemUoYnJ1c2gpLHRydWUpO1xuICAgIGlmKHRoaXNbXCJfX1wiICsgY2xhc3NOYW1lXSl7XG4gICAgICB0aGlzLmZyZWVEcmF3aW5nQnJ1c2ggPSB0aGlzW1wiX19cIiArIGNsYXNzTmFtZV0gO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy5mcmVlRHJhd2luZ0JydXNoID0gdGhpc1tcIl9fXCIgKyBjbGFzc05hbWVdID0gbmV3ICBmYWJyaWNbY2xhc3NOYW1lXSh0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5maXJlKFwiYnJ1c2g6Y2hhbmdlZFwiLHticnVzaDogdGhpcy5mcmVlRHJhd2luZ0JydXNofSk7XG4gIH0sXG4gIGRyYXdab29tZWRBcmVhIDogZnVuY3Rpb24oY3R4LGxlZnQsIHRvcCAsd2lkdGgsIGhlaWdodCAsIHBvaW50ZXIgKSB7XG5cbiAgICB3aWR0aCA9IHdpZHRoIHx8IDkwO1xuICAgIGhlaWdodCA9IGhlaWdodCB8fCA5MDtcblxuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnRyYW5zbGF0ZShsZWZ0IHx8IDAsIHRvcCB8fCAwKTtcblxuICAgIGN0eC5maWxsU3R5bGUgPSAnYmxhY2snO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiI2ZmZlwiO1xuICAgIGN0eC5zdHJva2VXaWR0aCA9IDE7XG4gICAgY3R4LnNldExpbmVEYXNoKFsyLCAyXSk7XG4gICAgY3R4LmRyYXdJbWFnZSh0aGlzLmJhY2tncm91bmRJbWFnZS5fZWxlbWVudCxNYXRoLmZsb29yKHBvaW50ZXIueCkgLSA0LCBNYXRoLmZsb29yKHBvaW50ZXIueSkgLSA0ICwgOSAsIDksIDAsMCAsIHdpZHRoLCB3aWR0aCApO1xuICAgIGN0eC5zdHJva2VSZWN0KDAsMCAsIHdpZHRoLCB3aWR0aCk7XG4gICAgY3R4LnN0cm9rZVJlY3QoNDAgLCA0MCAsIDEwLCAxMCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxufSk7XG5cbmZhYnJpYy5TbGlkZUNhbnZhcy5wcm90b3R5cGUuZHJhd2luZ1Rvb2xzLlNlbGVjdGlvbiA9IHtcbiAgY2xhc3NOYW1lOiAnZmEgZmEtbW91c2UtcG9pbnRlcicsXG4gIHRpdGxlOiAnU2VsZWN0aW9uJ1xufTtcbmZhYnJpYy5TbGlkZUNhbnZhcy5wcm90b3R5cGUuYWN0aXZlRHJhd2luZ1Rvb2xzLnB1c2goXCJTZWxlY3Rpb25cIik7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL21vZHVsZXMvc2xpZGUuZHJhd2luZy10b29scy5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZmFicmljLnV0aWwuY3JlYXRlVGh1bWIgPSBmdW5jdGlvbihzbGlkZSwgJGVsKXtcblxuICB2YXIgX2NhbnZhcyA9IHNsaWRlLmNhbnZhcyxcbiAgICAgIGZpcnN0RHJhdyA9IHRydWUsXG4gICAgICBtb2RpZmllZCxcbiAgICAgIF93ID0gKyRlbC5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKSxcbiAgICAgIF9oID0gKyRlbC5nZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIik7XG5cbiAgaWYgKF9oKSB7XG4gICAgJGVsLnN0eWxlLmhlaWdodCA9ICRlbC5oZWlnaHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXJUaHVtYigpIHtcbiAgICBpZiAoX2NhbnZhcy5wcm9jZXNzaW5nIHx8ICFfY2FudmFzLmxvYWRlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBfY2FudmFzLnJlbmRlclRodW1iKCRlbCk7XG4gICAgbW9kaWZpZWQgPSBfY2FudmFzLm1vZGlmaWVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yY2VSZW5kZXJUaHVtYigpIHtcbiAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgIGlmICh0aGlzLmNhbnZhcy5sb2FkZWQpIHtcbiAgICAgICAgdGhpcy5jYW52YXMucmVuZGVyVGh1bWIoJGVsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGZpcnN0RHJhdyAmJiB0aGlzLmRhdGEudGh1bWIpIHtcbiAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjdHggPSAkZWwuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsICRlbC53aWR0aCwgJGVsLmhlaWdodCk7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCAwLCAkZWwud2lkdGgsICRlbC5oZWlnaHQpO1xuICAgICAgICBtb2RpZmllZCA9IHRoaXMubW9kaWZpZWQ7XG4gICAgICB9O1xuICAgICAgaW1nLnNyYyA9IHRoaXMuZGF0YS50aHVtYjtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoYXR0cnMuZm9yY2UgIT09IFwidHJ1ZVwiKSByZXR1cm47XG4gICAgdmFyIGNhbnZhcyA9IG5ldyBmYWJyaWMuU2xpZGVDYW52YXMobnVsbCwgdGhpcy5kYXRhLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjYW52YXMucmVuZGVyVGh1bWIoJGVsKTtcbiAgICAgIC8vbW9kaWZpZWQgPSBzbGlkZS5tb2RpZmllZDtcbiAgICB9KTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gc2NhbGVUaHVtYigpIHtcblxuICAgIHZhciBfY29udGFpbmVyID0ge1xuICAgICAgd2lkdGg6IF93LFxuICAgICAgaGVpZ2h0OiBfaCxcbiAgICB9O1xuXG4gICAgdmFyIHNpemUgPSB7XG4gICAgICB3aWR0aDogc2xpZGUuY2FudmFzLm9yaWdpbmFsV2lkdGggfHwgc2xpZGUuY2FudmFzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBzbGlkZS5jYW52YXMub3JpZ2luYWxIZWlnaHQgfHwgc2xpZGUuY2FudmFzLmhlaWdodFxuICAgIH07XG5cbiAgICB2YXIgX2ZpdFNpemUgPSBmYWJyaWMudXRpbC5nZXRQcm9wb3J0aW9ucyggc2l6ZSxfY29udGFpbmVyLFwiZml0XCIpO1xuXG4gICAgJGVsLndpZHRoID0gX2ZpdFNpemUud2lkdGg7XG4gICAgJGVsLmhlaWdodCA9IF9maXRTaXplLmhlaWdodDtcblxuXG4gICAgJGVsLnN0eWxlLndpZHRoID0gX2ZpdFNpemUud2lkdGggKyAncHgnO1xuICAgICRlbC5zdHlsZS5oZWlnaHQgPSBfZml0U2l6ZS5oZWlnaHQgICsgJ3B4JztcbiAgICByZW5kZXJUaHVtYigpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FudmFzQ2hhbmdlZCgpIHtcbiAgICAvLyBfY2FudmFzICYmIF9jYW52YXMub2ZmKCdhZnRlcjpyZW5kZXInLCByZW5kZXJUaHVtYik7XG4gICAgLy8gaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICAvLyBfY2FudmFzID0gc2NvcGUuZmZUaHVtYi5jYW52YXM7XG4gICAgICB0aGlzLmNhbnZhcy5vbignYWZ0ZXI6cmVuZGVyJywgcmVuZGVyVGh1bWIpO1xuICAgICAgdGhpcy5jYW52YXMub24oXCJkaW1lbnNpb25zOm1vZGlmaWVkXCIsIHNjYWxlVGh1bWIpO1xuICAgICAgdGhpcy5jYW52YXMub24oXCJsb2FkaW5nOmVuZFwiLCBzY2FsZVRodW1iKTtcbiAgICAvLyB9XG4gIH1cblxuXG4gICRlbC5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBzbGlkZS50aXRsZSk7XG4gIHNsaWRlLm9uKCdjYW52YXM6Y2hhbmdlZCcsIGNhbnZhc0NoYW5nZWQpO1xuICBzbGlkZS5vbignbW9kaWZpZWQnLCBmb3JjZVJlbmRlclRodW1iKTtcblxuICBzY2FsZVRodW1iLmNhbGwoc2xpZGUpO1xuICBmb3JjZVJlbmRlclRodW1iLmNhbGwoc2xpZGUpO1xuICBjYW52YXNDaGFuZ2VkLmNhbGwoc2xpZGUpO1xuXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9tb2R1bGVzL3RodW1iLmpzXG4vLyBtb2R1bGUgaWQgPSA2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5pZighVG9vbGJhcil7XG4gIHZhciBUb29sYmFyID0gcmVxdWlyZSgnLi8uLi8uLi90b29sYmFyL3NyYy90b29sYmFyJyk7XG4gIHJlcXVpcmUoJy4vLi4vLi4vdG9vbGJhci9tb2R1bGVzL3Rvb2xiYXIuY29sb3JzJyk7XG4gIHJlcXVpcmUoJy4vLi4vLi4vdG9vbGJhci9tb2R1bGVzL3Rvb2xiYXIuZm9udHMnKTtcbiAgcmVxdWlyZSgnLi8uLi8uLi90b29sYmFyL21vZHVsZXMvdG9vbGJhci5vcHRpb25zJyk7XG4gIHJlcXVpcmUoJy4vLi4vLi4vdG9vbGJhci9tb2R1bGVzL3Rvb2xiYXIuc2VsZWN0Jyk7XG4gIHJlcXVpcmUoJy4vLi4vLi4vdG9vbGJhci9tb2R1bGVzL3Rvb2xiYXIuZWZmZWN0Jyk7XG59XG5cblRvb2xiYXIucHJvdG90eXBlLnNldEZ1bmN0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbih0YXJnZXQpe1xuICBpZih0YXJnZXQuY2FudmFzKXtcbiAgICByZXR1cm4gdGFyZ2V0LmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgfVxuICBpZih0YXJnZXQucmVuZGVyQWxsKXtcbiAgICByZXR1cm4gdGFyZ2V0LnJlbmRlckFsbCgpXG4gIH1cbn07XG5cblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuT2JqZWN0LnByb3RvdHlwZSx7XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gdG9vbHMgW1wieFwiLCBcIipcIiwgXCJ5XCJdXG4gICAqIEBwYXJhbSBwcm90b1xuICAgKiBAcmV0dXJucyBbXCJ4XCIsIFwiYVwiLCBcImJcIiwgXCJjXCIsIFwieVwiXVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFRvb2xzOiBmdW5jdGlvbih0b29scyxwcm90byl7XG4gICAgdmFyIGluZGV4T2ZTdGFyID0gLTE7XG4gICAgaWYoKGluZGV4T2ZTdGFyID0gdG9vbHMuaW5kZXhPZihcIipcIikpID09IC0xKXtcbiAgICAgIHJldHVybiB0b29scztcbiAgICB9XG5cbiAgICB2YXIga2xhc3NuYW1lID0gZmFicmljLnV0aWwuc3RyaW5nLmNhcGl0YWxpemUoZmFicmljLnV0aWwuc3RyaW5nLmNhbWVsaXplKHByb3RvLnR5cGUpLHRydWUpO1xuICAgIHZhciBwcm90b0ZhYnJpYyA9IGZhYnJpY1trbGFzc25hbWVdLnByb3RvdHlwZTtcbiAgICB2YXIgcHJvdG9BcHAgPSB0aGlzLmFwcGxpY2F0aW9uLnByb3RvdHlwZXNba2xhc3NuYW1lXTtcblxuICAgIHZhciB0b29sczIgPSBwcm90b0FwcCAmJiBwcm90b0FwcC50b29scyB8fCBwcm90b0ZhYnJpYy50b29scztcbiAgICBpZih0b29sczIpe1xuICAgICAgdG9vbHMuc3BsaWNlLmFwcGx5KHRvb2xzLCBbaW5kZXhPZlN0YXIsIDFdLmNvbmNhdCh0b29sczIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2dldFRvb2xzKHRvb2xzLCBwcm90b0ZhYnJpYy5fX3Byb3RvX18gKTtcbiAgfSxcbiAgc2V0VG9vbHM6IGZ1bmN0aW9uKHRvb2xzKXtcbiAgICB0aGlzLnRvb2xzID0gdGhpcy5fZ2V0VG9vbHModG9vbHMgLCB0aGlzLl9fcHJvdG9fXy5fX3Byb3RvX18pO1xuICB9LFxuICBtYWtlQWN0aW9uczogZnVuY3Rpb24oKXtcbiAgICBUb29sYmFyLm1ha2VBY3Rpb25zKHRoaXMpXG4gIH1cbn0pO1xuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5BcHBsaWNhdGlvbi5wcm90b3R5cGUse1xuICB0b29sYmFyOiBmYWxzZSxcbiAgc2V0QXBwbGljYXRpb25Ub29sYmFyQ29udGFpbmVyOiBmdW5jdGlvbihjb250YWluZXJJZCkge1xuICAgIHRoaXMuYXBwbGljYXRpb25Ub29sYmFyQ29udGFpbmVyID0gY29udGFpbmVySWQ7XG4gICAgbmV3IFRvb2xiYXIodGhpcywgY29udGFpbmVySWQpO1xuICB9LFxuICBzZXRDYW52YXNUb29sYmFyQ29udGFpbmVyOiBmdW5jdGlvbihjb250YWluZXJJZCkge1xuICAgIHRoaXMuY2FudmFzVG9vbGJhckNvbnRhaW5lciA9IGNvbnRhaW5lcklkO1xuICAgIG5ldyBUb29sYmFyKHRoaXMuY2FudmFzLCBjb250YWluZXJJZCk7XG4gIH0sXG4gIHNldE9iamVjdHNUb29sYmFyT3B0aW9uczogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBfLmRlZmF1bHRzKG9wdGlvbnMgfHwge1xuICAgICAgb3JpZ2luWDogXCJsZWZ0XCIsXG4gICAgICBvcmlnaW5ZOiBcInRvcFwiLFxuICAgICAgbWFyZ2luWDogMCxcbiAgICAgIG1hcmdpblk6IDBcbiAgICB9KTtcblxuICAgIHRoaXMub2JqZWN0c1Rvb2xiYXJPcHRpb25zID0gb3B0aW9ucztcbiAgfSxcbiAgc2V0T2JqZWN0c1Rvb2xiYXJDb250YWluZXI6IGZ1bmN0aW9uKGNvbnRhaW5lcklkKSB7XG4gICAgdGhpcy5vYmplY3RzVG9vbGJhckNvbnRhaW5lciA9IGNvbnRhaW5lcklkO1xuXG4gICAgdmFyIGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuXG4gICAgaWYgKGNvbnRhaW5lcklkKSB7XG4gICAgICB0aGlzLiRtZW51ID0gJChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb250YWluZXJJZCkpLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kbWVudSA9IHRoaXMuJG1lbnUgfHwgJCgnPGRpdj4nKTtcbiAgICAgICQodGhpcy53cmFwcGVyRWwpLnByZXBlbmQodGhpcy4kbWVudSk7XG4gICAgfVxuICAgIHRoaXMuJG1lbnUuaGlkZSgpO1xuXG4gICAgdmFyIF9sYXN0X3RhcmdldCA9IGNhbnZhcy50YXJnZXQ7XG4gICAgY2FudmFzLm9uKHtcbiAgICAgICdvYmplY3Q6bW92aW5nJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciAkbWVudSA9IHRoaXMuZ2V0VG9vbGJhckNvbnRhaW5lcigpO1xuICAgICAgICBjYW52YXMuc2V0VG9vbGJhckNvb3JkcygkbWVudSwgY2FudmFzLnRhcmdldCwgY2FudmFzLmFwcGxpY2F0aW9uLm9iamVjdHNUb29sYmFyT3B0aW9ucyk7XG4gICAgICB9LFxuICAgICAgJ3RhcmdldDpjbGVhcmVkJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChfbGFzdF90YXJnZXQpIHtcbiAgICAgICAgICB2YXIgJG1lbnUgPSB0aGlzLmdldFRvb2xiYXJDb250YWluZXIoKTtcbiAgICAgICAgICAkbWVudS5oaWRlKCk7XG4gICAgICAgICAgY2FudmFzLm9iamVjdFRvb2xiYXIuZGVzdHJveSgpO1xuICAgICAgICAgIGRlbGV0ZSBjYW52YXMub2JqZWN0VG9vbGJhcjtcbiAgICAgICAgICBfbGFzdF90YXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJ3RhcmdldDpjaGFuZ2VkJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChfbGFzdF90YXJnZXQpIHtcbiAgICAgICAgICBjYW52YXMub2JqZWN0VG9vbGJhci5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FudmFzLmNyZWF0ZUZsb2F0ZWRNZW51KHRoaXMuYXBwbGljYXRpb24ub2JqZWN0c1Rvb2xiYXJPcHRpb25zKTtcbiAgICAgICAgX2xhc3RfdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBzZXRUb29sYmFyT3B0aW9uczogZnVuY3Rpb24odG9vbGJhck9wdGlvbnMpe1xuXG4gICAgZmFicmljLnV0aWwub2JqZWN0LmRlZXBFeHRlbmQoVG9vbGJhci50b29scywgdG9vbGJhck9wdGlvbnMudG9vbHMpO1xuICAgIGZvciAodmFyIGtsYXNzTmFtZSBpbiB0b29sYmFyT3B0aW9ucy5hY3Rpb25zKSB7XG4gICAgICB2YXIgYWN0aW9ucyA9IHRvb2xiYXJPcHRpb25zLmFjdGlvbnNba2xhc3NOYW1lXTtcbiAgICAgIGlmKCFmYWJyaWNba2xhc3NOYW1lXS5wcm90b3R5cGUuYWN0aW9ucyl7XG4gICAgICAgIGZhYnJpY1trbGFzc05hbWVdLnByb3RvdHlwZS5hY3Rpb25zID0ge31cbiAgICAgIH1cbiAgICAgIHZhciBwcm90b0FjdGlvbnMgPSBmYWJyaWNba2xhc3NOYW1lXS5wcm90b3R5cGUuYWN0aW9ucztcblxuICAgICAgaWYgKGFjdGlvbnMuY29uc3RydWN0b3IgPT0gRnVuY3Rpb24pIHtcbiAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnMuY2FsbChmYWJyaWNba2xhc3NOYW1lXS5wcm90b3R5cGUpXG4gICAgICB9ZWxzZXtcbiAgICAgICAgYWN0aW9ucyA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZURlZXAoYWN0aW9ucyk7XG4gICAgICB9XG4gICAgIC8vIHZhciAkb3JkZXIgPSBhY3Rpb25zW1wiJG9yZGVyXCJdO1xuICAgICAvLyBkZWxldGUgYWN0aW9uc1tcIiRvcmRlclwiXTtcblxuICAgICAgZm9yICh2YXIgaiBpbiBhY3Rpb25zKSB7XG4gICAgICAgIGlmKHByb3RvQWN0aW9uc1tqXSl7XG4gICAgICAgICAgaWYgKGFjdGlvbnNbal1bXCIkY2xvbmVcIl0pIHtcbiAgICAgICAgICAgIHByb3RvQWN0aW9uc1tqXSA9IGZhYnJpYy51dGlsLm9iamVjdC5kZWVwRXh0ZW5kKHt9LCBwcm90b0FjdGlvbnNbal0pO1xuICAgICAgICAgICAgZGVsZXRlIGFjdGlvbnNbal1bXCIkY2xvbmVcIl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZhYnJpYy51dGlsLm9iamVjdC5kZWVwRXh0ZW5kKHByb3RvQWN0aW9uc1tqXSwgYWN0aW9uc1tqXSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIHByb3RvQWN0aW9uc1tqXSA9IGFjdGlvbnNbal07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgLyogaWYoJG9yZGVyKXtcbiAgICAgICAgZmFicmljW2tsYXNzTmFtZV0ucHJvdG90eXBlLmFjdGlvbnMgPSBmYWJyaWMudXRpbC5vYmplY3QucmVhcnJhbmdlKHByb3RvQWN0aW9ucywgJG9yZGVyKTtcbiAgICAgIH0qL1xuICAgIH1cbiAgfSxcbiAgZXZlbnRMaXN0ZW5lcnM6IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmRBcnJheXNPYmplY3QoZmFicmljLkFwcGxpY2F0aW9uLnByb3RvdHlwZS5ldmVudExpc3RlbmVycywge1xuICAgLy8gXCJjYW52YXM6Y3JlYXRlZFwiIDogZnVuY3Rpb24oKXtcbiAgICAvLyAgdGhpcy5pbml0VG9vbHMoKTtcbiAgIC8vIH0sXG4gICAvLyAgXCJjYW52YXM6Y3JlYXRlZFwiOiBmdW5jdGlvbigpe1xuICAgLy8gICAgdGhpcy5jcmVhdGVUb29sYmFycygpO1xuICAgLy8gIH1cbiAgfSlcbn0pO1xuXG5cbmZhYnJpYy5Ub29sYmFyID0gVG9vbGJhcjtcblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuQ2FudmFzLnByb3RvdHlwZSwge1xuICBzZXRUb29sYmFyQ29vcmRzOiBmdW5jdGlvbiAoJG1lbnUsIHRhcmdldCwgb3B0aW9ucykge1xuXG4gICAgb3B0aW9ucyA9IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoe1xuICAgICAgb3JpZ2luWDogXCJsZWZ0XCIsXG4gICAgICBvcmlnaW5ZOiBcInRvcFwiLFxuICAgICAgbWFyZ2luWDogMCxcbiAgICAgIG1hcmdpblk6IDBcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIHRhcmdldC5zZXRDb29yZHMoKTtcbiAgICB2YXIgciA9IHRhcmdldC5nZXRCb3VuZGluZ1JlY3QoKTtcblxuICAgIHZhciBfbGVmdDtcbiAgICBzd2l0Y2ggKG9wdGlvbnMub3JpZ2luWCkge1xuICAgICAgY2FzZSBcImxlZnRcIjpcbiAgICAgICAgX2xlZnQgPSByLmxlZnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICAgIF9sZWZ0ID0gci5sZWZ0ICsgci53aWR0aDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiY2VudGVyXCI6XG4gICAgICAgIF9sZWZ0ID0gci5sZWZ0ICsgci53aWR0aCAvIDI7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICA7XG4gICAgdmFyIF90b3A7XG4gICAgc3dpdGNoIChvcHRpb25zLm9yaWdpblkpIHtcbiAgICAgIGNhc2UgXCJ0b3BcIjpcbiAgICAgICAgX3RvcCA9IHIudG9wIC0gJG1lbnUuaGVpZ2h0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImJvdHRvbVwiOlxuICAgICAgICBfdG9wID0gci50b3AgKyByLmhlaWdodDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiY2VudGVyXCI6XG4gICAgICAgIF90b3AgPSByLnRvcCArIHIuaGVpZ2h0IC8gMiAtICRtZW51LmhlaWdodCgpIC8gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIDtcblxuXG4gICAgX3RvcCArPSBvcHRpb25zLm1hcmdpblk7XG4gICAgX2xlZnQgKz0gb3B0aW9ucy5tYXJnaW5YXG5cbiAgICB2YXIgX21lbnVDb250YWluZXJPZmZzZXQgPSAkKCRtZW51LnBhcmVudHMoKVswXSkub2Zmc2V0KCk7XG4gICAgdmFyIF9jYW52YXNPZmZzZXQgPSAkKHRoaXMud3JhcHBlckVsKS5vZmZzZXQoKTtcblxuICAgIF90b3AgKz0gX2NhbnZhc09mZnNldC50b3AgLSBfbWVudUNvbnRhaW5lck9mZnNldC50b3A7XG4gICAgX2xlZnQgKz0gX2NhbnZhc09mZnNldC5sZWZ0IC0gX21lbnVDb250YWluZXJPZmZzZXQubGVmdDtcblxuICAgIHZhciBjb29yZHMgPSB7XG4gICAgICB0b3A6IE1hdGgubWF4KDMsIF90b3ApLFxuICAgICAgbGVmdDogTWF0aC5taW4oTWF0aC5tYXgoMywgX2xlZnQpLCAkKHRoaXMud3JhcHBlckVsKS53aWR0aCgpIC0gJG1lbnUud2lkdGgoKSAtIDUpXG4gICAgfTtcblxuXG4gICAgJCh0aGlzLndyYXBwZXJFbCkub2Zmc2V0KCk7XG5cbiAgICAkbWVudS5jc3MoY29vcmRzKTtcbiAgICByZXR1cm4gY29vcmRzO1xuICB9LFxuICBnZXRUb29sYmFyQ29udGFpbmVyOiBmdW5jdGlvbiAoaWQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gJChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmFwcGxpY2F0aW9uLm9iamVjdHNUb29sYmFyQ29udGFpbmVyKSk7XG4gIH0sXG4gIGNyZWF0ZUZsb2F0ZWRNZW51OiBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgdmFyICRtZW51ID0gdGhpcy5nZXRUb29sYmFyQ29udGFpbmVyKCk7XG5cbiAgICAkbWVudS5zaG93KCk7XG4gICAgLy90aGlzLnRvb2xzQ29udGFpbmVyID0gdGhpcy4kbWVudTtcbiAgIC8qIHZhciBfdGMgPSAkbWVudS5maW5kKFwiLnRvb2xiYXItdG9vbHMtY29udGFpbmVyXCIpO1xuICAgIGlmIChfdGMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnRvb2xzQ29udGFpbmVyID0gX3RjO1xuICAgIH0qL1xuICAgLy8gdGhpcy50b29sc0NvbnRhaW5lci5lbXB0eSgpO1xuICAgIGlmICh0aGlzLnRhcmdldC5hY3Rpb25zKSB7XG4gICAgICB0aGlzLm9iamVjdFRvb2xiYXIgPSBuZXcgVG9vbGJhciAodGhpcy50YXJnZXQsICRtZW51LCBvcHRpb25zKTtcbiAgICB9XG4gICAgdGhpcy5zZXRUb29sYmFyQ29vcmRzKCRtZW51LCB0aGlzLnRhcmdldCwgdGhpcy5hcHBsaWNhdGlvbi5vYmplY3RzVG9vbGJhck9wdGlvbnMpO1xuICB9XG59KTtcblxuXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL21vZHVsZXMvdG9vbGJhci5qc1xuLy8gbW9kdWxlIGlkID0gNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbmZhYnJpYy51dGlsLnVwbG9hZEltYWdlTWF4U2l6ZSA9IHtcbiAgd2lkdGg6IDQwMCxcbiAgaGVpZ2h0OiA0MDBcbn07XG5cbmZhYnJpYy51dGlsLnVwbG9hZEltYWdlTWluU2l6ZSA9IHtcbiAgd2lkdGg6IDEwMCxcbiAgaGVpZ2h0OiAxMDBcbn07XG5cbmZhYnJpYy51dGlsLm11bHRpVXBsb2FkID0gZmFsc2U7XG5cbmZhYnJpYy51dGlsLnJlYWRGaWxlID0gZnVuY3Rpb24oZmlsZSxjYWxsYmFjayl7XG5cbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciByZXN1bHQgPSBlLnRhcmdldC5yZXN1bHQ7XG4gICAgdmFyIHR5cGUgPSByZXN1bHQuc3Vic3RyKDExLCByZXN1bHQuaW5kZXhPZihcIjtcIikgLSAxMSk7XG4gICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xuICAgIGltZy50eXBlID0gdHlwZTtcbiAgICBpbWcubmFtZSA9IGZpbGUubmFtZTtcbiAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICBpZighZmFicmljLnV0aWwubXVsdGlVcGxvYWQpe1xuICAgICAgICBpZiAoZmFicmljLnV0aWwudXBsb2FkUHJlcHJvY2Vzc29yKSB7XG4gICAgICAgICAgZmFicmljLnV0aWwudXBsb2FkUHJlcHJvY2Vzc29yKFt0aGlzXSwgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgY2FsbGJhY2sodmFsKTtcbiAgICAgICAgICB9LG9wdGlvbnMpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2sodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1lbHNle1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07XG4gICAgaW1nLnNyYyA9IHJlc3VsdDtcbiAgfTtcbiAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSApO1xufTtcblxuXG5mYWJyaWMudXRpbC5jcmVhdGVVcGxvYWRJbnB1dCA9IGZ1bmN0aW9uIChvcHRpb25zLCBjb21wbGV0ZSwgcHJvZ3Jlc3MpIHtcblxuICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIGlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJmaWxlXCIpO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiLCB0cnVlKTtcbiAgaW5wdXQuY2xhc3NOYW1lID0gXCJoaWRkZW5cIjtcblxuICAkKGlucHV0KS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xuXG4gICAgaWYoaW5wdXQuZmlsZXMgJiYgaW5wdXQuZmlsZXMubGVuZ3RoKXtcblxuICAgICAgdmFyIF9sb2FkZXIgPSBmYWJyaWMudXRpbC5xdWV1ZUxvYWQoaW5wdXQuZmlsZXMubGVuZ3RoLGZ1bmN0aW9uKGxvYWRlZCl7XG5cbiAgICAgICAgaWYoZmFicmljLnV0aWwubXVsdGlVcGxvYWQpe1xuICAgICAgICAgIGlmIChmYWJyaWMudXRpbC51cGxvYWRQcmVwcm9jZXNzb3IpIHtcbiAgICAgICAgICAgIGZhYnJpYy51dGlsLnVwbG9hZFByZXByb2Nlc3Nvcihsb2FkZWQsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgY29tcGxldGUodmFsLG9wdGlvbnMpO1xuICAgICAgICAgICAgfSxvcHRpb25zKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wbGV0ZShsb2FkZWQsb3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICBjb21wbGV0ZShsb2FkZWRbMF0sb3B0aW9ucyk7XG5cbiAgICAgICAgfVxuICAgICAgfSxmdW5jdGlvbih0b3RhbCwgY3VycmVudCwgaW1hZ2Upe1xuICAgICAgICBpZihmYWJyaWMudXRpbC5tdWx0aVVwbG9hZCkge1xuICAgICAgICAgIGlmIChwcm9ncmVzcykge1xuICAgICAgICAgICAgcHJvZ3Jlc3ModG90YWwsIGN1cnJlbnQsIGltYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG5cblxuICAgICAgZm9yKHZhciBpID0wOyBpPCBpbnB1dC5maWxlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGZhYnJpYy51dGlsLnJlYWRGaWxlKGlucHV0LmZpbGVzW2ldLF9sb2FkZXIpO1xuICAgICAgfVxuXG5cblxuICAgIH1cblxuICB9KTtcblxuICBmYWJyaWMudXRpbC51cGxvYWRJbnB1dCA9IGlucHV0O1xufTtcblxuXG4vL2ZhYnJpYy51dGlsLnJlc2l6ZUltYWdlKGltZywgY2FsbGJhY2spO1xuZmFicmljLnV0aWwudXBsb2FkUHJlcHJvY2Vzc29yID0gbnVsbDtcblxuXG5mYWJyaWMudXRpbC51cGxvYWRJbWFnZSA9IGZ1bmN0aW9uIChjYixwcm9ncmVzcyxvcHRpb25zKSB7XG4gIGZhYnJpYy51dGlsLmNyZWF0ZVVwbG9hZElucHV0KG9wdGlvbnMsY2IscHJvZ3Jlc3MpO1xuICAkKGZhYnJpYy51dGlsLnVwbG9hZElucHV0KS50cmlnZ2VyKCdjbGljaycpO1xufTtcblxuXG5mYWJyaWMudXRpbC5yZXNpemVVcGxvYWRlZEltYWdlID0gZnVuY3Rpb24gKGltZywgY2FsbGJhY2spIHtcblxuICBpZiAoaW1nLnR5cGUgPT09IFwic3ZnK3htbFwiKSB7XG4gICAgY2FsbGJhY2soaW1nKTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy9IZXJlIHdlIGNhbiBwdXQgYSByZXN0cmljdGlvbiB0byB1cGxvYWQgYSBtaW5pbSBzaXplZCBsb2dvXG4gIGlmIChpbWcud2lkdGggPCBmYWJyaWMudXRpbC51cGxvYWRJbWFnZU1pblNpemUud2lkdGggfHwgaW1nLmhlaWdodCA8IGZhYnJpYy51dGlsLnVwbG9hZEltYWdlTWluU2l6ZS5oZWlnaHQpIHtcbiAgICBhbGVydChcIkxvZ28gaXMgdG9vIHNtYWxsLiBNSW5pbXVtIHNpemUgaXMgXCIgKyBmYWJyaWMudXRpbC51cGxvYWRJbWFnZU1pblNpemUud2lkdGggKyBcInhcIiArIGZhYnJpYy51dGlsLnVwbG9hZEltYWdlTWluU2l6ZS5oZWlnaHQpO1xuICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW1nLndpZHRoID4gZmFicmljLnV0aWwudXBsb2FkSW1hZ2VNYXhTaXplLndpZHRoIHx8IGltZy5oZWlnaHQgPiBmYWJyaWMudXRpbC51cGxvYWRJbWFnZU1heFNpemUuaGVpZ2h0KSB7XG5cbiAgICB2YXIgc2l6ZSA9IGZhYnJpYy51dGlsLmdldFByb3BvcnRpb25zKGltZywgZmFicmljLnV0aWwudXBsb2FkSW1hZ2VNYXhTaXplLCBcImZpdFwiKTtcblxuICAgIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuUmVzaXplRFAoKTtcblxuICAgIHZhciBjYW52YXMgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50V2l0aFNpemUoaW1nKTtcbiAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCk7XG4gICAgZmlsdGVyLmFwcGx5VG8oY2FudmFzLCBzaXplLndpZHRoLCBzaXplLmhlaWdodCk7XG4gICAgY2FsbGJhY2soY2FudmFzKTtcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjayhpbWcpO1xuICB9XG59O1xuXG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLkNhbnZhcy5wcm90b3R5cGUse1xuICB1cGxvYWRDbGFzczogJ0ltYWdlJyxcbiAgdXBsb2FkSW1hZ2VUb29sOiBmYWxzZSxcbiAgY3JlYXRlSW1hZ2VPYmplY3Q6IGZ1bmN0aW9uIChpbWcsIG9iamVjdFR5cGUpIHtcbiAgICBpZiAoIWltZylyZXR1cm47XG4gICAgdGhpcy5jcmVhdGVPYmplY3Qoe1xuICAgICAgcG9zaXRpb246IFwiY2VudGVyXCIsXG4gICAgICBhY3RpdmU6IHRydWUsXG4gICAgICB0eXBlOiB0aGlzLnVwbG9hZENsYXNzLFxuICAgICAgaW1hZ2U6IGltZyxcbiAgICAgIGNsaXBUbzogdGhpcy5hY3RpdmVBcmVhLFxuICAgICAgbW92ZW1lbnRMaW1pdHM6IHRoaXMuYWN0aXZlQXJlYVxuICAgIH0pO1xuICB9LFxuICBhY3Rpb25zOiBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5TbGlkZUNhbnZhcy5wcm90b3R5cGUuYWN0aW9ucyx7XG4gICAgdXBsb2FkSW1hZ2U6IHtcbiAgICAgIGNsYXNzTmFtZTogICdmYSBmYS11cGxvYWQnLFxuICAgICAga2V5OiAnVScsXG4gICAgICB0aXRsZTogJ3VwbG9hZCBpbWFnZScsXG4gICAgICBhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZmFicmljLnV0aWwudXBsb2FkSW1hZ2UoZnVuY3Rpb24oaW1nKXtcbiAgICAgICAgICB0aGlzLmNyZWF0ZUltYWdlT2JqZWN0KGltZyx0aGlzLnVwbG9hZENsYXNzKVxuICAgICAgICB9LmJpbmQodGhpcykpXG4gICAgICB9XG4gICAgfVxuICB9KVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL21vZHVsZXMvdXBsb2FkLmpzXG4vLyBtb2R1bGUgaWQgPSA2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vL21vZHVsZSByZXNwb25zaXZlIGJvcmRlcnMvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuT2JqZWN0LnByb3RvdHlwZSwge1xuICByZXNwb25zaXZlQm9yZGVyczogZmFsc2Vcbn0pO1xuXG5pZighZmFicmljLlNsaWRlQ2FudmFzLnByb3RvdHlwZS5fZGVmYXVsdF9ldmVudF9saXN0ZW5lcnMpe1xuICBmYWJyaWMuU2xpZGVDYW52YXMucHJvdG90eXBlLl9kZWZhdWx0X2V2ZW50X2xpc3RlbmVycyA9IHt9O1xufTtcblxuZmFicmljLk9iamVjdC5wcm90b3R5cGUudXBkYXRlUmVzcG9uc2l2ZUJvcmRlciA9IGZ1bmN0aW9uKCl7XG4gIGlmKHRoaXMucmVzcG9uc2l2ZUJvcmRlcnMpe1xuICAgIGlmKCF0aGlzLm9yaWdpbmFsU3Ryb2tlV2lkdGgpe1xuICAgICAgdGhpcy5vcmlnaW5hbFN0cm9rZVdpZHRoID0gdGhpcy5zdHJva2VXaWR0aDtcbiAgICB9XG4gICAgdGhpcy5zdHJva2VXaWR0aCA9IHRoaXMuY2FudmFzID8gdGhpcy5vcmlnaW5hbFN0cm9rZVdpZHRoIC8gdGhpcy5jYW52YXMudmlld3BvcnRUcmFuc2Zvcm1bMF0gOiAwO1xuICB9XG59O1xuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5TbGlkZUNhbnZhcy5wcm90b3R5cGUsIHtcbiAgX2RlZmF1bHRfZXZlbnRfbGlzdGVuZXJzOiB7XG4gICAgXCJkaW1lbnNpb25zOm1vZGlmaWVkXCI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY2VudGVyQW5kWm9vbU91dCgpO1xuICAgIH0sXG4gICAgJ3ZpZXdwb3J0OnNjYWxlZCc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLmJhY2tncm91bmRJbWFnZSkge1xuICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZS51cGRhdGVSZXNwb25zaXZlQm9yZGVyKCk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpIGluIHRoaXMuX29iamVjdHMpIHtcbiAgICAgICAgdGhpcy5fb2JqZWN0c1tpXS51cGRhdGVSZXNwb25zaXZlQm9yZGVyKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBcImJhY2tncm91bmQtaW1hZ2U6bG9hZGVkXCI6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKHRoaXMuYXV0b0NlbnRlckFuZFpvb21PdXRFbmFibGVkKSB7XG4gICAgICAgIHRoaXMuY2VudGVyQW5kWm9vbU91dCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJsb2FkaW5nOmVuZFwiOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLmF1dG9DZW50ZXJBbmRab29tT3V0RW5hYmxlZCAmJiAodGhpcy5vcmlnaW5hbEhlaWdodCB8fCB0aGlzLm9yaWdpbmFsV2lkdGgpKSB7XG4gICAgICAgIHRoaXMuY2VudGVyQW5kWm9vbU91dCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJvYmplY3Q6YWRkZWRcIjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC50YXJnZXQudXBkYXRlUmVzcG9uc2l2ZUJvcmRlcigpXG4gICAgfVxuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLlNsaWRlQ2FudmFzLnByb3RvdHlwZSwge1xuICB6b29tQ3RybEtleTogdHJ1ZSxcbiAgbW91c2VXaGVlbEVuYWJsZWQgOiBmYWxzZSxcbiAgX3NldFpvb21OYXRpdmUgIDogZmFicmljLkNhbnZhcy5wcm90b3R5cGUuc2V0Wm9vbSxcbiAgX3pvb21Ub1BvaW50TmF0aXZlICA6IGZhYnJpYy5DYW52YXMucHJvdG90eXBlLnpvb21Ub1BvaW50LFxuICBjaGFuZ2VEaW1lbnNpb25Pblpvb206IGZhbHNlLFxuICBkcmF3Wm9vbUFyZWEgOiBmdW5jdGlvbihfY3R4LGxlZnQsIHRvcCAsd2lkdGgsIGhlaWdodCApe1xuICAgIF9jdHguc2F2ZSgpO1xuICAgIF9jdHgudHJhbnNsYXRlKGxlZnQgfHwgMCwgdG9wIHx8IDApO1xuICAgIHZhciBfc2NhbGUgPSB0aGlzLmdldFpvb20oKTtcbiAgICB2YXIgX3NpemUgPSBmYWJyaWMudXRpbC5nZXRQcm9wb3J0aW9ucyh0aGlzLmJhY2tncm91bmRJbWFnZSwge3dpZHRoOiB3aWR0aCB8fCAxMDAsIGhlaWdodDogaGVpZ2h0IHx8IDEwMH0pO1xuICAgIF9jdHguZ2xvYmFsQWxwaGEgPSAwLjU7XG4gICAgX2N0eC5maWxsUmVjdCgwLDAsX3NpemUud2lkdGgsIF9zaXplLmhlaWdodCk7XG4gICAgX2N0eC5zdHJva2VTdHlsZSA9IFwicmVkXCI7XG5cbiAgICB2YXIgdiA9IHRoaXMudmlld3BvcnRUcmFuc2Zvcm07XG5cbiAgICB2YXIgeDEgPSAtdls0XSAqIF9zaXplLnNjYWxlIC8gX3NjYWxlO1xuICAgIHZhciB5MSA9IC12WzVdICogX3NpemUuc2NhbGUgLyBfc2NhbGU7XG4gICAgdmFyIHgyID0geDEgKyB0aGlzLndpZHRoICogX3NpemUuc2NhbGUgLyBfc2NhbGU7XG4gICAgdmFyIHkyID0geTEgKyB0aGlzLmhlaWdodCAqIF9zaXplLnNjYWxlIC8gX3NjYWxlO1xuXG4gICAgeDEgPSBNYXRoLm1heCh4MSwwKTtcbiAgICB5MSA9IE1hdGgubWF4KHkxLDApO1xuICAgIHgyID0gTWF0aC5taW4oeDIsX3NpemUud2lkdGgpO1xuICAgIHkyID0gTWF0aC5taW4oeTIsX3NpemUuaGVpZ2h0KTtcblxuICAgIF9jdHguZ2xvYmFsQWxwaGEgPSAxO1xuICAgIF9jdHguYmVnaW5QYXRoKCk7XG4gICAgX2N0eC5tb3ZlVG8oeDEseTEpO1xuICAgIF9jdHgubGluZVRvKHgyLHkxKTtcbiAgICBfY3R4LmxpbmVUbyh4Mix5Mik7XG4gICAgX2N0eC5saW5lVG8oeDEseTIpO1xuICAgIF9jdHgubGluZVRvKHgxLHkxKTtcblxuICAgIF9jdHguZmlsbCgpO1xuICAgIF9jdHguY2xpcCgpO1xuICAgIC8vIF9jdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2UtaW5cIjtcbiAgICBfY3R4LmRyYXdJbWFnZSh0aGlzLmJhY2tncm91bmRJbWFnZS5fZWxlbWVudCwwLDAsX3NpemUud2lkdGgsIF9zaXplLmhlaWdodClcbiAgICAvLyBfY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwic291cmNlLW92ZXJcIjtcbiAgICAvLyBfY3R4LmRyYXdJbWFnZSh0aGlzLmJhY2tncm91bmRJbWFnZS5fZWxlbWVudCwwLDAsX3NpemUud2lkdGgsIF9zaXplLmhlaWdodClcbiAgICBfY3R4LnN0cm9rZSgpO1xuICAgIF9jdHguc3Ryb2tlUmVjdCgwLDAsX3NpemUud2lkdGgsIF9zaXplLmhlaWdodCk7XG4gICAgX2N0eC5yZXN0b3JlKCk7XG4gIH0sXG4gIHNldFpvb206IGZ1bmN0aW9uIChfc2NhbGUpe1xuICAgIGlmKHRoaXMuY2hhbmdlRGltZW5zaW9uT25ab29tKXtcbiAgICAgIHZhciBfdyA9IE1hdGgucm91bmQodGhpcy5vcmlnaW5hbFdpZHRoICogX3NjYWxlKTtcbiAgICAgIHZhciBfaCA9IE1hdGgucm91bmQodGhpcy5vcmlnaW5hbEhlaWdodCAqIF9zY2FsZSk7XG4gICAgICB0aGlzLnNldERpbWVuc2lvbnMoe1xuICAgICAgICB3aWR0aDogX3csXG4gICAgICAgIGhlaWdodDogX2hcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl96b29tVG9Qb2ludE5hdGl2ZSggbmV3IGZhYnJpYy5Qb2ludCgwLCAwKSwgX3NjYWxlKVxuICAgIC8vICB0aGlzLl9zZXRab29tTmF0aXZlKF9zY2FsZSk7XG4gICAgdGhpcy5maXJlKCd2aWV3cG9ydDpzY2FsZWQnLCB7c2NhbGU6IF9zY2FsZX0pO1xuICB9LFxuICB6b29tVG9Qb2ludDogZnVuY3Rpb24ocG9pbnQsIG5ld1pvb20pe1xuICAgIHZhciBfbWF4ID0gIHRoaXMuZ2V0TWF4Wm9vbSgpO1xuICAgIHZhciBfbWluID0gIHRoaXMuZ2V0TWluWm9vbSgpLnNjYWxlO1xuICAgIGlmKG5ld1pvb20gPiBfbWF4KXtcbiAgICAgIG5ld1pvb20gPSBfbWF4O1xuICAgIH1cbiAgICBpZihuZXdab29tIDwgX21pbil7XG4gICAgICBuZXdab29tID0gX21pbjtcbiAgICB9XG4gICAgdGhpcy5fem9vbVRvUG9pbnROYXRpdmUoIHBvaW50LCBuZXdab29tKTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX29iamVjdHMpIHtcbiAgICAgIHRoaXMuX29iamVjdHNbaV0uc2V0Q29vcmRzKCk7XG4gICAgfVxuICAgIHRoaXMuZmlyZSgndmlld3BvcnQ6c2NhbGVkJywge3NjYWxlOiBuZXdab29tfSk7XG4gIH0sXG4gIHJlc2V0Vmlld3BvcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICBfY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtWzBdID0gMTtcbiAgICBfY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtWzNdID0gMTtcbiAgICBfY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtWzRdID0gMDtcbiAgICBfY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtWzVdID0gMDtcbiAgICBfY2FudmFzLnJlbmRlckFsbCgpO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fb2JqZWN0cykge1xuICAgICAgdGhpcy5fb2JqZWN0c1tpXS5zZXRDb29yZHMoKTtcbiAgICB9XG4gIH0sXG4gIHpvb21Ub1BvaW50RW5hYmxlZDogdHJ1ZSxcbiAgbWluWm9vbUZhY3RvcjogMSxcbiAgbWF4Wm9vbTogMjAsXG4gIGF1dG9DZW50ZXJBbmRab29tT3V0RW5hYmxlZDogZmFsc2UsXG4gIGdldE1heFpvb206IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXhab29tO1xuICB9LFxuICBnZXRNaW5ab29tOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9jb250YWluZXJTaXplID0ge1xuICAgICAgd2lkdGg6ICQodGhpcy53cmFwcGVyRWwpLndpZHRoKCksXG4gICAgICBoZWlnaHQ6ICQodGhpcy53cmFwcGVyRWwpLmhlaWdodCgpXG4gICAgfTtcbiAgICB2YXIgX2JnU2l6ZSA9IHtcbiAgICAgIHdpZHRoOiB0aGlzLm9yaWdpbmFsV2lkdGgsXG4gICAgICBoZWlnaHQ6IHRoaXMub3JpZ2luYWxIZWlnaHRcbiAgICB9O1xuICAgIHZhciBfbWF4U2l6ZSA9IHtcbiAgICAgIHdpZHRoOiBfY29udGFpbmVyU2l6ZS53aWR0aCAqIHRoaXMubWluWm9vbUZhY3RvcixcbiAgICAgIGhlaWdodDogX2NvbnRhaW5lclNpemUuaGVpZ2h0ICogdGhpcy5taW5ab29tRmFjdG9yXG4gICAgfTtcblxuICAgIHJldHVybiBmYWJyaWMudXRpbC5nZXRQcm9wb3J0aW9ucyhfYmdTaXplLCBfbWF4U2l6ZSwgJ2ZpdCcpO1xuICB9LFxuICBjZW50ZXJBbmRab29tT3V0OiBmdW5jdGlvbiAoKSB7XG5cbiAgICBpZih0aGlzLnZpcnR1YWwpe1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuZ2V0TWluWm9vbSgpO1xuXG4gICAgdmFyIF9jb250YWluZXJTaXplID0ge1xuICAgICAgd2lkdGg6ICQodGhpcy53cmFwcGVyRWwpLndpZHRoKCksXG4gICAgICBoZWlnaHQ6ICQodGhpcy53cmFwcGVyRWwpLmhlaWdodCgpXG4gICAgfTtcblxuICAgIHZhciB2cHQgPSB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtLnNsaWNlKDApO1xuICAgIHZwdFswXSA9IG9wdGlvbnMuc2NhbGU7XG4gICAgdnB0WzNdID0gb3B0aW9ucy5zY2FsZTtcbiAgICB2cHRbNF0gPSAoX2NvbnRhaW5lclNpemUud2lkdGggLSBvcHRpb25zLndpZHRoICkgLyAyO1xuICAgIHZwdFs1XSA9IChfY29udGFpbmVyU2l6ZS5oZWlnaHQgLSBvcHRpb25zLmhlaWdodCkgLyAyO1xuXG4gICAgdGhpcy5zZXRWaWV3cG9ydFRyYW5zZm9ybSh2cHQpO1xuXG5cbiAgICB0aGlzLl91cGRhdGVfYmFja2dyb3VuZF9pbWFnZSgpO1xuICAgIC8vIHRoaXMuZmlyZShcInZpZXdwb3J0OnNjYWxlZFwiLHtzY2FsZTogb3B0aW9ucy5zY2FsZX0pXG4gICAgLy90aGlzLnJlbmRlckFsbCgpO1xuICB9LFxuICBjZW50ZXJPbk9iamVjdDogZnVuY3Rpb24odGFnKXtcbiAgICB2YXIgYnIgPSB0YWcuZ2V0Qm91bmRpbmdSZWN0KCk7XG4gICAgdmFyIGN0ID0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybTtcbiAgICBici53aWR0aCAvPSBjdFswXTtcbiAgICBici5oZWlnaHQgLz0gY3RbM107XG4gICAgdmFyIHNpemUgPSB7XG4gICAgICB3aWR0aDogYnIud2lkdGggKiAxLjEsXG4gICAgICBoZWlnaHQ6IGJyLmhlaWdodCAqIDEuMVxuICAgIH07XG5cbiAgICB2YXIgcHJvcCA9IGZhYnJpYy51dGlsLmdldFByb3BvcnRpb25zKHNpemUsdGhpcyk7XG4gICAgdmFyIF93ID0gKHRoaXMud2lkdGggLyBwcm9wLnNjYWxlIC0gc2l6ZS53aWR0aCApIC8gMjtcbiAgICB2YXIgX2ggPSAodGhpcy5oZWlnaHQgLyBwcm9wLnNjYWxlIC0gc2l6ZS5oZWlnaHQpIC8gMjtcbiAgICB2YXIgX2wgPSAoYnIubGVmdCAgLSBjdFs0XSkgLyBjdFswXTtcbiAgICB2YXIgX3QgPSAoYnIudG9wIC0gY3RbNV0pIC8gY3RbM107XG5cbiAgICB2YXIgeDEgPSBbXG4gICAgICBwcm9wLnNjYWxlLFxuICAgICAgMCwwLFxuICAgICAgcHJvcC5zY2FsZSxcbiAgICAgIC0gdGFnLmxlZnQgKiBwcm9wLnNjYWxlICsgKHRhZy53aWR0aCAqIDAuMDUgKyBfdykgKiBwcm9wLnNjYWxlLFxuICAgICAgLSB0YWcudG9wICogcHJvcC5zY2FsZSArICh0YWcuaGVpZ2h0ICogMC4wNSArIF9oICkqIHByb3Auc2NhbGVcbiAgICBdO1xuICAgIHZhciB4MiA9IFtcbiAgICAgIHByb3Auc2NhbGUsXG4gICAgICAwLDAsXG4gICAgICBwcm9wLnNjYWxlLFxuICAgICAgLSBfbCAgKiBwcm9wLnNjYWxlICsgKGJyLndpZHRoICogMC4wNSArIF93KSAqIHByb3Auc2NhbGUsXG4gICAgICAtIF90ICAqIHByb3Auc2NhbGUgKyAoYnIuaGVpZ2h0ICogMC4wNSArIF9oICkqIHByb3Auc2NhbGVcbiAgICBdO1xuXG4gICAgdGhpcy5zZXRWaWV3cG9ydFRyYW5zZm9ybSh4Mik7XG4gICAgdGhpcy5maXJlKFwidmlld3BvcnQ6c2NhbGVkXCIse3NjYWxlOiBwcm9wLnNjYWxlfSlcbiAgICB0aGlzLnJlbmRlckFsbCgpO1xuICB9LFxuXG4gIF9fb25Nb3VzZVdoZWVsOiBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgIGlmKCF0aGlzLm1vdXNlV2hlZWxFbmFibGVkIHx8IHRoaXMuem9vbUN0cmxLZXkgJiYgIWV2ZW50LmN0cmxLZXkpe1xuICAgICAgcmV0dXJuO1xuICAgIH1cbi8vRmluZCBuZWFyZXN0IHBvaW50LCB0aGF0IGlzIGluc2lkZSBpbWFnZSBFTkRcbiAgICB2YXIgem9vbVN0ZXA7Ly8gPSAwLjEgKiBldmVudC5kZWx0YVk7XG4gICAgaWYgKGV2ZW50LmRlbHRhWSA8IDApIHtcbiAgICAgIHpvb21TdGVwID0gMS4xO1xuICAgIH0gZWxzZSB7XG4gICAgICB6b29tU3RlcCA9IDAuOTtcbiAgICB9XG5cbiAgICB2YXIgbmV3Wm9vbSA9IHRoaXMuZ2V0Wm9vbSgpICogem9vbVN0ZXA7XG4gICAgdmFyIG1pblpvb20gPSB0aGlzLmdldE1pblpvb20oKS5zY2FsZTtcblxuXG4gICAgaWYodGhpcy56b29tVG9Qb2ludEVuYWJsZWQpe1xuICAgICAgdmFyIHBvaW50ID0gbmV3IGZhYnJpYy5Qb2ludChldmVudC5vZmZzZXRYLCBldmVudC5vZmZzZXRZKTtcbiAgICAgIHZhciBfeCA9IHRoaXMudmlld3BvcnRUcmFuc2Zvcm1bNF07XG4gICAgICB2YXIgX3kgPSB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzVdO1xuXG4gICAgICAvLyBGaW5kIG5lYXJlc3QgcG9pbnQsIHRoYXQgaXMgaW5zaWRlIGltYWdlIEJFR0lOXG4gICAgICAvLyBJdCBpcyBuZWVkZWQgdG8gcHJldmVudCBjYW52YXMgdG8gem9vbSBvdXRzaWRlIGltYWdlXG4gICAgICB2YXIgX3cgPSB0aGlzLm9yaWdpbmFsV2lkdGggKiB0aGlzLmdldFpvb20oKSArIF94O1xuICAgICAgdmFyIF9oID0gdGhpcy5vcmlnaW5hbEhlaWdodCAqIHRoaXMuZ2V0Wm9vbSgpICsgX3k7XG5cblxuICAgICAgaWYgKHBvaW50LnggPCBfeCkge1xuICAgICAgICBwb2ludC54ID0gX3g7XG4gICAgICB9XG4gICAgICBpZiAocG9pbnQueSA8IF95KSB7XG4gICAgICAgIHBvaW50LnkgPSBfeTtcbiAgICAgIH1cbiAgICAgIGlmIChwb2ludC54ID4gX3cpIHtcbiAgICAgICAgcG9pbnQueCA9IF93O1xuICAgICAgfVxuICAgICAgaWYgKHBvaW50LnkgPiBfaCkge1xuICAgICAgICBwb2ludC55ID0gX2g7XG4gICAgICB9XG4gICAgICBpZiAobWluWm9vbSA+IG5ld1pvb20pIHtcbiAgICAgICAgaWYodGhpcy5hdXRvQ2VudGVyQW5kWm9vbU91dEVuYWJsZWQpe1xuICAgICAgICAgIHRoaXMuY2VudGVyQW5kWm9vbU91dCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnpvb21Ub1BvaW50KHBvaW50LCBuZXdab29tKTtcbiAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuc2V0Wm9vbShuZXdab29tKTtcbiAgICB9XG5cblxuXG5cbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX29iamVjdHMpIHtcbiAgICAgIHRoaXMuX29iamVjdHNbaV0uc2V0Q29vcmRzKCk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyQWxsKCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICByZXR1cm4gZmFsc2U7IC8vcHJldmVudGluZyBzY3JvbGwgcGFnZVxuICB9LFxuICBzY2FsZUZhY3RvcjogMS4xLFxuICBnZXRPcmlnbmFsQ2VudGVyIDogZnVuY3Rpb24oKXtcbiAgICB2YXIgcG9pbnQgPSB0aGlzLmdldENlbnRlcigpO1xuICAgIHBvaW50LmxlZnQgKz0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybVs0XSA7XG4gICAgcG9pbnQudG9wICs9IHRoaXMudmlld3BvcnRUcmFuc2Zvcm1bNV07XG4gICAgcmV0dXJuIHBvaW50O1xuICB9XG59KTtcblxuXG5cblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuU2xpZGVDYW52YXMucHJvdG90eXBlLmFjdGlvbnMsIHtcbiAgem9vbU91dDoge1xuICAgIGNsYXNzTmFtZTogJ2ZhIGZhLXNlYXJjaC1taW51cycsXG4gICAgdGl0bGU6ICd6b29tLW91dCcsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAobSkge1xuICAgICAgdmFyIHBvaW50ID0gdGhpcy5nZXRPcmlnbmFsQ2VudGVyKCk7XG4gICAgICB2YXIgc2NhbGVWYWx1ZSA9IHRoaXMuZ2V0Wm9vbSgpIC8gdGhpcy5zY2FsZUZhY3RvcjtcbiAgICAgIHRoaXMuem9vbVRvUG9pbnQoe3g6IHBvaW50LmxlZnQsIHk6IHBvaW50LnRvcH0sc2NhbGVWYWx1ZSk7XG4gICAgfVxuICB9LFxuICB6b29tTnVtYmVyOiB7XG4gICAgdHlwZTogJ251bWJlcicsXG4gICAgdmFsdWU6IHtcbiAgICAgIG1pbjogIGZ1bmN0aW9uKCl7cmV0dXJuIDAuMDF9LFxuICAgICAgbWF4OiAgZnVuY3Rpb24oKXtyZXR1cm4gMTB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHRoaXMuc2V0Wm9vbSh2YWwpXG4gICAgICB9LFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFpvb20oKVxuICAgICAgfSxcbiAgICAgIG9ic2VydmU6IFwidmlld3BvcnQ6c2NhbGVkXCJcbiAgICB9XG4gIH0sXG4gIHpvb21Jbjoge1xuICAgIGNsYXNzTmFtZTogJ2ZhIGZhLXNlYXJjaC1wbHVzJyxcbiAgICB0aXRsZTogJ3pvb20taW4nLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKG0pIHtcbiAgICAgIHZhciBwb2ludCA9IHRoaXMuZ2V0T3JpZ25hbENlbnRlcigpO1xuICAgICAgdmFyIHNjYWxlVmFsdWUgPSB0aGlzLmdldFpvb20oKSAqIHRoaXMuc2NhbGVGYWN0b3I7XG4gICAgICB0aGlzLnpvb21Ub1BvaW50KHt4OiBwb2ludC5sZWZ0LCB5OiBwb2ludC50b3B9LHNjYWxlVmFsdWUpO1xuICAgIH1cbiAgfVxuICAvLyB6b29tOiB7XG4gIC8vICAgdGl0bGU6IFwiem9vbVwiLFxuICAvLyAgIG1lbnU6IHpvb21PdXRcbiAgLy8gfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL21vZHVsZXMvem9vbS5qc1xuLy8gbW9kdWxlIGlkID0gNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWwvdXRpbC5qcycpO1xudXRpbHMub2JqZWN0ID0gcmVxdWlyZSgnLi8uLi91dGlsL29iamVjdC5qcycpO1xuXG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICoqIERQSGlzdG9yeVxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cbnZhciBEUEhpc3RvcnkgPSBmdW5jdGlvbiAocGFyZW50LCBpbml0QWN0aW9uKSB7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5jbGVhcihpbml0QWN0aW9uKTtcbn07XG5cbkRQSGlzdG9yeS5wcm90b3R5cGUuc2V0UmVjb3JkcyA9IGZ1bmN0aW9uIChyZWNvcmRzLGN1cnJlbnQpIHtcbiAgdGhpcy5jYW5VbmRvID0gcmVjb3Jkcy5sZW5ndGg7XG4gIHRoaXMuY2FuUmVkbyA9IGZhbHNlO1xuXG4gIGlmKCFyZWNvcmRzLmxlbmd0aCl7XG4gICAgcmVjb3JkcyA9IFt7XG4gICAgICB0eXBlOiAnaW5pdGlhbGl6ZWQnLFxuICAgICAgaWQ6IDAsXG4gICAgICB0ZXh0IDogJ2luaXRpYWxpemVkJ1xuICAgIH1dXG4gIH1cbiAgdGhpcy5yZWNvcmRzID0gcmVjb3JkcztcbiAgdGhpcy5sZW5ndGggPSB0aGlzLnJlY29yZHMubGVuZ3RoIDtcbiAgdGhpcy5jdXJyZW50ID0gY3VycmVudCA9PT0gdW5kZWZpbmVkID8gcmVjb3Jkcy5sZW5ndGggLSAxIDogY3VycmVudDtcbiAgdGhpcy5hY3RpdmVBY3Rpb24gPSB0aGlzLnJlY29yZHNbdGhpcy5jdXJyZW50XTtcbiAgdGhpcy5maXJlKFwiY2hhbmdlZFwiLHthY3Rpb246IHRoaXMuYWN0aXZlQWN0aW9ufSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRFBIaXN0b3J5LnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnNldFJlY29yZHModGhpcy5zYXZlZC5yZWNvcmRzLHRoaXMuc2F2ZWQuY3VycmVudCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRFBIaXN0b3J5LnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnNhdmVkID0ge1xuICAgIGN1cnJlbnQ6IHRoaXMuY3VycmVudCxcbiAgICByZWNvcmRzOiB1dGlscy5vYmplY3QuY2xvbmVEZWVwKHRoaXMucmVjb3JkcylcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbkRQSGlzdG9yeS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoaW5pdEFjdGlvbikge1xuICAgIGlmIChpbml0QWN0aW9uKSB7XG4gICAgICAgIGluaXRBY3Rpb24uaWQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRBY3Rpb24gPSB7XG4gICAgICAgICAgICB0eXBlOiAnaW5pdGlhbGl6ZWQnLFxuICAgICAgICAgICAgaWQ6IDAsXG4gICAgICAgICAgdGV4dCA6ICdpbml0aWFsaXplZCdcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlY29yZHMgPSBbaW5pdEFjdGlvbl07XG4gICAgdGhpcy5jdXJyZW50ID0gMDtcbiAgICB0aGlzLmNhblVuZG8gPSBmYWxzZTtcbiAgICB0aGlzLmNhblJlZG8gPSBmYWxzZTtcbiAgICB0aGlzLmFjdGl2ZUFjdGlvbiA9IHRoaXMucmVjb3Jkc1t0aGlzLmN1cnJlbnRdO1xuICB0aGlzLmZpcmUoXCJjaGFuZ2VkXCIse2FjdGlvbjogdGhpcy5hY3RpdmVBY3Rpb259KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbkRQSGlzdG9yeS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oYWN0aW9uKXtcblxuXG4gICAgaWYgKCF0aGlzLmVuYWJsZWQgfHwgdGhpcy5wcm9jZXNzaW5nKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgYWN0aW9uLm1vbWVudCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHRoaXMuY2FuVW5kbyA9IHRydWU7XG4gICAgdGhpcy5jYW5SZWRvID0gZmFsc2U7XG4gICAgdGhpcy5yZWNvcmRzLnNwbGljZSh0aGlzLmN1cnJlbnQrIDEpO1xuICAgIHRoaXMucmVjb3Jkcy5wdXNoKGFjdGlvbik7XG4gICAgdGhpcy5sZW5ndGggPSB0aGlzLnJlY29yZHMubGVuZ3RoO1xuICAgIGFjdGlvbi5pZCA9IHRoaXMubGVuZ3RoIC0gMTtcbiAgICBhY3Rpb24udGV4dCA9IGFjdGlvbi50eXBlIHx8IGFjdGlvbi50ZXh0O1xuICAgIHRoaXMuY3VycmVudCA9IHRoaXMubGVuZ3RoIC0gMTtcblxuICB0aGlzLmFjdGl2ZUFjdGlvbiA9IHRoaXMucmVjb3Jkc1t0aGlzLmN1cnJlbnRdO1xuICB0aGlzLmZpcmUoXCJjaGFuZ2VkXCIse2FjdGlvbjogYWN0aW9ufSk7XG4gIHJldHVybiB0aGlzO1xufTtcbkRQSGlzdG9yeS5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuICByZXR1cm4gdGhpcztcbn07XG5EUEhpc3RvcnkucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gIHJldHVybiB0aGlzO1xufTtcbkRQSGlzdG9yeS5wcm90b3R5cGUudW5kbyA9IGZ1bmN0aW9uKG5vRmlyZSl7XG4gICAgdGhpcy5jYW5SZWRvID0gdHJ1ZTtcbiAgICB2YXIgX2FjdGlvbiA9IHRoaXMucmVjb3Jkc1t0aGlzLmN1cnJlbnRdO1xuICAgIHRoaXMuY3VycmVudC0tO1xuICB0aGlzLnByb2Nlc3NpbmcgPSB0cnVlO1xuICAgIF9hY3Rpb24udW5kby5jYWxsKHRoaXMucGFyZW50LF9hY3Rpb24pO1xuICB0aGlzLnByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICBpZih0aGlzLmN1cnJlbnQgPT0gMCl7XG4gICAgICAgIHRoaXMuY2FuVW5kbyA9IGZhbHNlO1xuICAgIH1cbiAgICBpZighbm9GaXJlKXtcbiAgICAgIHRoaXMuYWN0aXZlQWN0aW9uID0gdGhpcy5yZWNvcmRzW3RoaXMuY3VycmVudF07XG4gICAgICB0aGlzLmZpcmUoXCJjaGFuZ2VkXCIse2FjdGlvbjogX2FjdGlvbn0pO1xuICAgIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5EUEhpc3RvcnkucHJvdG90eXBlLmdvdG8gPSBmdW5jdGlvbihpbmRleCl7XG4gICAgaWYoaW5kZXggPT0gdGhpcy5jdXJyZW50KXJldHVybjtcbiAgICBpZihpbmRleCA8IHRoaXMuY3VycmVudCl7XG4gICAgICAgIGZvcih2YXIgaSA9IHRoaXMuY3VycmVudCAtIGluZGV4IDtpLS07ICl7XG4gICAgICAgICAgICB0aGlzLnVuZG8odHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9aWYoaW5kZXggPiB0aGlzLmN1cnJlbnQpe1xuICAgICAgICBmb3IodmFyIGkgPSBpbmRleCAtIHRoaXMuY3VycmVudCA7aS0tOyApe1xuICAgICAgICAgICAgdGhpcy5yZWRvKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICB0aGlzLmFjdGl2ZUFjdGlvbiA9IHRoaXMucmVjb3Jkc1t0aGlzLmN1cnJlbnRdO1xuICB0aGlzLmZpcmUoXCJjaGFuZ2VkXCIse2FjdGlvbjogdGhpcy5hY3RpdmVBY3Rpb259KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5EUEhpc3RvcnkucHJvdG90eXBlLnJlZG8gPSBmdW5jdGlvbihub0ZpcmUpe1xuICAgIGlmKHRoaXMuY3VycmVudCA9PSB0aGlzLmxlbmd0aCAtIDEpe1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICB0aGlzLnByb2Nlc3NpbmcgPSB0cnVlO1xuICAgIHRoaXMuY2FuVW5kbyA9IHRydWU7XG4gICAgdGhpcy5jdXJyZW50Kys7XG4gICAgdmFyIF9hY3Rpb24gPSB0aGlzLnJlY29yZHNbdGhpcy5jdXJyZW50XTtcblxuICAgIF9hY3Rpb24ucmVkby5jYWxsKHRoaXMucGFyZW50LF9hY3Rpb24pO1xuXG4gICAgaWYodGhpcy5jdXJyZW50ID09IHRoaXMubGVuZ3RoIC0gMSl7XG4gICAgICAgIHRoaXMuY2FuUmVkbyA9IGZhbHNlO1xuICAgIH1cbiAgdGhpcy5wcm9jZXNzaW5nID0gZmFsc2U7XG4gIGlmKCFub0ZpcmUpIHtcbiAgICB0aGlzLmFjdGl2ZUFjdGlvbiA9IHRoaXMucmVjb3Jkc1t0aGlzLmN1cnJlbnRdO1xuICAgIHRoaXMuZmlyZShcImNoYW5nZWRcIix7YWN0aW9uOiBfYWN0aW9ufSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xudXRpbHMub2JzZXJ2YWJsZShEUEhpc3RvcnkucHJvdG90eXBlKTtcbm1vZHVsZS5leHBvcnRzID0gRFBIaXN0b3J5O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9wbHVnaW5zL2hpc3RvcnkuanNcbi8vIG1vZHVsZSBpZCA9IDY2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuUGF0aEdyb3VwLnByb3RvdHlwZSx7XG4gIGluaXRpYWxpemVfb3ZlcndyaXR0ZW46IGZhYnJpYy5QYXRoR3JvdXAucHJvdG90eXBlLmluaXRpYWxpemUsXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKHBhdGhzLCBvcHRpb25zKXtcblxuICAgIGlmKHBhdGhzLmNvbnN0cnVjdG9yICE9IEFycmF5KXtcbiAgICAgIG9wdGlvbnMgPSBwYXRocy50b09iamVjdCgpO1xuICAgICAgZGVsZXRlIG9wdGlvbnMucGF0aHM7XG4gICAgICBwYXRocyA9IHBhdGhzLnBhdGhzO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdGlhbGl6ZV9vdmVyd3JpdHRlbihwYXRocywgb3B0aW9ucyk7XG4gIH0sXG4gIGV4dHJhY3RDb2xvcnM6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2NvbG9ycyA9IHt9O1xuICAgIHZhciBfcGF0aHMgPSB0aGlzLnBhdGhzO1xuICAgIGZvciAodmFyIGkgaW4gX3BhdGhzKSB7XG4gICAgICBpZiAoX3BhdGhzW2ldLmZpbGwudHlwZSkge1xuICAgICAgICBmb3IgKHZhciBqIGluIF9wYXRoc1tpXS5maWxsLmNvbG9yU3RvcHMpIHtcbiAgICAgICAgICB2YXIgX2NvbG9yID0gX3BhdGhzW2ldLmZpbGwuY29sb3JTdG9wc1tqXS5jb2xvcjtcbiAgICAgICAgICBpZiAoIV9jb2xvcnNbX2NvbG9yXSkgX2NvbG9yc1tfY29sb3JdID0gW107XG4gICAgICAgICAgX2NvbG9yc1tfY29sb3JdLnB1c2goe29iamVjdDogX3BhdGhzW2ldLCBzdG9wOiBfcGF0aHNbaV0uZmlsbC5jb2xvclN0b3BzW2pdfSk7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9jb2xvciA9IF9wYXRoc1tpXS5maWxsO1xuICAgICAgICBpZiAoIV9jb2xvcnNbX2NvbG9yXSkgX2NvbG9yc1tfY29sb3JdID0gW107XG4gICAgICAgIF9jb2xvcnNbX2NvbG9yXS5wdXNoKHtvYmplY3Q6IF9wYXRoc1tpXSwgY29sb3I6IF9wYXRoc1tpXX0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX2NvbG9ycztcbiAgfVxufSlcblxuZmFicmljLlBhdGhHcm91cC5mcm9tRWxlbWVudHMgPSBmdW5jdGlvbiAoZWxlbWVudHMsIG9iamVjdCwgdXJsKSB7XG4gIHZhciBfb3B0aW9ucyA9IHtcbiAgICB0b0JlUGFyc2VkOiB0cnVlLFxuICAgIC8vb3JpZ2luWDogXCJjZW50ZXJcIixcbiAgICAvL29yaWdpblk6IFwiY2VudGVyXCJcbiAgfTtcblxuICAvL9GB0LzQtdGJ0LDQtdC8INGN0LvQtdC80LXQvdGC0Ysg0YLQsNC6LCDRh9GC0L7QsdGLINC40YUg0LrQvtC+0YDQuNC90LDRgtGLINC90LDRh9C40L3QsNC70LjRgdGMINC+0YIgMC4wXG4gIGlmIChlbGVtZW50cy5sZW5ndGgpIHtcblxuICAgIHZhciBtaW5YID0gSW5maW5pdHksXG4gICAgICBtaW5ZID0gSW5maW5pdHk7XG4gICAgZm9yICh2YXIgaSBpbiBlbGVtZW50cykge1xuICAgICAgbWluWCA9IE1hdGgubWluKGVsZW1lbnRzW2ldLmxlZnQsIG1pblgpO1xuICAgICAgbWluWSA9IE1hdGgubWluKGVsZW1lbnRzW2ldLnRvcCwgbWluWSk7XG4gICAgfVxuXG5cbiAgICBtaW5YID0gTWF0aC5tYXgobWluWCwgMCk7XG4gICAgbWluWSA9IE1hdGgubWF4KG1pblksIDApO1xuICAgIC8qIGZvciAodmFyIGkgaW4gZWxlbWVudHMpIHtcbiAgICAgZWxlbWVudHNbaV0udHJhbnNsYXRlKC1taW5YLCAtbWluWSk7XG4gICAgIGVsZW1lbnRzW2ldLmxlZnQgLT0gbWluWDtcbiAgICAgZWxlbWVudHNbaV0ucGF0aE9mZnNldC54IC09IG1pblg7XG4gICAgIGVsZW1lbnRzW2ldLnRvcCAtPSBtaW5ZO1xuICAgICBlbGVtZW50c1tpXS5wYXRoT2Zmc2V0LnkgLT0gbWluWTtcbiAgICAgfSovXG4gIH1cblxuICB2YXIgZWwgPSBmYWJyaWMudXRpbC5ncm91cFNWR0VsZW1lbnRzKGVsZW1lbnRzLCBfb3B0aW9ucywgdXJsKTtcblxuICB2YXIgc2NhbGVYID0gb2JqZWN0LndpZHRoID8gb2JqZWN0LndpZHRoIC8gZWwud2lkdGggOiBudWxsLFxuICAgIHNjYWxlWSA9IG9iamVjdC5oZWlnaHQgPyBvYmplY3QuaGVpZ2h0IC8gZWwuaGVpZ2h0IDogbnVsbDtcbiAgaWYgKHNjYWxlWCAmJiAhc2NhbGVZKSB7XG4gICAgc2NhbGVZID0gc2NhbGVYO1xuICB9XG4gIGlmIChzY2FsZVkgJiYgIXNjYWxlWCkge1xuICAgIHNjYWxlWCA9IHNjYWxlWTtcbiAgfVxuICBpZiAoIXNjYWxlWSAmJiAhc2NhbGVYKSB7XG4gICAgc2NhbGVYID0gc2NhbGVZID0gMTtcbiAgfVxuXG4gIGRlbGV0ZSBvYmplY3QuaGVpZ2h0O1xuICBkZWxldGUgb2JqZWN0LndpZHRoO1xuICBlbC5zZXQoZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChvYmplY3QsIHtcbiAgICAvL2xlZnQ6IDAsIHRvcDogMCxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9KSk7XG4gIGVsLnNldExlZnQob2JqZWN0LmxlZnQpO1xuICBlbC5zZXRUb3Aob2JqZWN0LnRvcCk7XG4gIHJldHVybiBlbDtcbn07XG5cbi8vIGZhYnJpYy5QYXRoR3JvdXAucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKGN0eCxub1RyYW5zZm9ybSkge1xuLy8gICBpZiAoIXRoaXMudmlzaWJsZSkge1xuLy8gICAgIHJldHVybjtcbi8vICAgfVxuLy8gICB2YXIgeCA9IG5vVHJhbnNmb3JtID8gMCA6IC0gdGhpcy53aWR0aCAqIHRoaXMuc2NhbGVYIC8gMixcbi8vICAgICB5ID0gbm9UcmFuc2Zvcm0gPyAwIDogLSB0aGlzLmhlaWdodCAqIHRoaXMuc2NhbGVZIC8gMjtcbi8vXG4vLyAgIGN0eC5zYXZlKCk7XG4vLyAgIGN0eC50cmFuc2xhdGUoeCx5KTtcbi8vXG4vLyAgIGlmICh0aGlzLnRyYW5zZm9ybU1hdHJpeCkge1xuLy8gICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCB0aGlzLnRyYW5zZm9ybU1hdHJpeCk7XG4vLyAgIH1cbi8vICAgdGhpcy50cmFuc2Zvcm0oY3R4KTtcbi8vXG4vLyAgIHRoaXMuX3NldFNoYWRvdyhjdHgpO1xuLy8gICB0aGlzLmNsaXBUbyAmJiBmYWJyaWMudXRpbC5jbGlwQ29udGV4dCh0aGlzLCBjdHgpO1xuLy8gICBjdHgudHJhbnNsYXRlKC10aGlzLndpZHRoLzIsIC10aGlzLmhlaWdodC8yKTtcbi8vICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnBhdGhzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuLy8gICAgIHRoaXMucGF0aHNbaV0ucmVuZGVyKGN0eCwgdHJ1ZSk7XG4vLyAgIH1cbi8vICAgdGhpcy5jbGlwVG8gJiYgY3R4LnJlc3RvcmUoKTtcbi8vICAgY3R4LnJlc3RvcmUoKTtcbi8vIH1cblxuXG5cblxuXG5cbmZhYnJpYy5QYXRoR3JvdXAuZnJvbVVSTCA9IGZ1bmN0aW9uICh1cmwsIGNhbGxiYWNrLCBvYmplY3QpIHtcblxuICBmYWJyaWMubG9hZFNWR0Zyb21VUkwodXJsLGZ1bmN0aW9uKGVscyl7XG5cbiAgICB2YXIgZWwgPSBuZXcgZmFicmljLlBhdGhHcm91cChlbHMsIHt0b0JlUGFyc2VkOnRydWV9KTtcblxuICAgIC8vIC8v0YHQvNC10YnQsNC10Lwg0Y3Qu9C10LzQtdC90YLRiyDRgtCw0LosINGH0YLQvtCx0Ysg0LjRhSDQutC+0L7RgNC40L3QsNGC0Ysg0L3QsNGH0LjQvdCw0LvQuNGB0Ywg0L7RgiAwLjBcbiAgICAvLyBpZiAoZWwucGF0aHMubGVuZ3RoKSB7XG4gICAgLy9cbiAgICAvLyAgIHZhciBtaW5YID0gSW5maW5pdHksXG4gICAgLy8gICAgIG1pblkgPSBJbmZpbml0eTtcbiAgICAvLyAgIHZhciBtYXhYID0gLUluZmluaXR5LFxuICAgIC8vICAgICBtYXhZID0gLUluZmluaXR5O1xuICAgIC8vXG4gICAgLy8gICBmb3IgKHZhciBpIGluIGVsLnBhdGhzKSB7XG4gICAgLy8gICAgIHZhciBfcCA9IGVsLnBhdGhzW2ldO1xuICAgIC8vICAgICBtaW5YID0gTWF0aC5taW4oX3AubGVmdCwgbWluWCk7XG4gICAgLy8gICAgIG1pblkgPSBNYXRoLm1pbihfcC50b3AsIG1pblkpO1xuICAgIC8vICAgICBtYXhYID0gTWF0aC5tYXgoX3AubGVmdCArIF9wLndpZHRoLCBtYXhYKTtcbiAgICAvLyAgICAgbWF4WSA9IE1hdGgubWF4KF9wLnRvcCArIF9wLmhlaWdodCwgbWF4WSk7XG4gICAgLy8gICB9XG4gICAgLy9cbiAgICAvLyAgIHZhciBfVyA9IG1heFggLSBtaW5YO1xuICAgIC8vICAgdmFyIF9IID0gbWF4WSAtIG1pblk7XG4gICAgLy8gICAvL1xuICAgIC8vICAgLy9cbiAgICAvLyAgIC8vIG1pblggPSBNYXRoLm1heChtaW5YLCAwKTtcbiAgICAvLyAgIC8vIG1pblkgPSBNYXRoLm1heChtaW5ZLCAwKTtcbiAgICAvLyAgIC8qIGZvciAodmFyIGkgaW4gZWxlbWVudHMpIHtcbiAgICAvLyAgICBlbGVtZW50c1tpXS50cmFuc2xhdGUoLW1pblgsIC1taW5ZKTtcbiAgICAvLyAgICBlbGVtZW50c1tpXS5sZWZ0IC09IG1pblg7XG4gICAgLy8gICAgZWxlbWVudHNbaV0ucGF0aE9mZnNldC54IC09IG1pblg7XG4gICAgLy8gICAgZWxlbWVudHNbaV0udG9wIC09IG1pblk7XG4gICAgLy8gICAgZWxlbWVudHNbaV0ucGF0aE9mZnNldC55IC09IG1pblk7XG4gICAgLy8gICAgfSovXG4gICAgLy8gfWVsc2V7XG4gICAgLy8gICBfVyA9IDE7XG4gICAgLy8gICBfSCA9IDE7XG4gICAgLy8gfVxuXG4gICAgdmFyIHNjYWxlWCA9IG9iamVjdC53aWR0aCA/IG9iamVjdC53aWR0aCAvIGVsLndpZHRoIDogbnVsbCxcbiAgICAgIHNjYWxlWSA9IG9iamVjdC5oZWlnaHQgPyBvYmplY3QuaGVpZ2h0IC8gZWwuaGVpZ2h0IDogbnVsbDtcbiAgICBpZiAoc2NhbGVYICYmICFzY2FsZVkpIHtcbiAgICAgIHNjYWxlWSA9IHNjYWxlWDtcbiAgICB9XG4gICAgaWYgKHNjYWxlWSAmJiAhc2NhbGVYKSB7XG4gICAgICBzY2FsZVggPSBzY2FsZVk7XG4gICAgfVxuICAgIGlmICghc2NhbGVZICYmICFzY2FsZVgpIHtcbiAgICAgIHNjYWxlWCA9IHNjYWxlWSA9IDE7XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKG9iamVjdC53aWR0aCxlbC53aWR0aCxvYmplY3QuaGVpZ2h0LGVsLmhlaWdodClcbiAgICAvLyBjb25zb2xlLmxvZyhlbCk7XG4gICAgZWwuc2V0KCB7XG4gICAgICBzY2FsZVg6IHNjYWxlWCAsXG4gICAgICBzY2FsZVk6IHNjYWxlWVxuICAgIH0pO1xuXG4gICAgY2FsbGJhY2soZWwpO1xuICB9KTtcblxuICAvLyBmYWJyaWMubG9hZFNWR0Zyb21VUkwodXJsLGZ1bmN0aW9uKGVscyl7XG4gIC8vICAgY2FsbGJhY2soZmFicmljLlBhdGhHcm91cC5mcm9tRWxlbWVudHMoZWxzLCBvYmplY3QpKTtcbiAgLy8gfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zaGFwZXMvUGF0aEdyb3VwLmpzXG4vLyBtb2R1bGUgaWQgPSA2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoXCIuLi9taXhpbnMvU3Ryb2tlTWl4aW5cIik7XG5yZXF1aXJlKFwiLi4vbWl4aW5zL0NhY2hlTWl4aW5cIik7XG5yZXF1aXJlKFwiLi4vc2hhcGVzL1BhdGhHcm91cFwiKTtcbnJlcXVpcmUoXCIuLi9taXhpbnMvcHJvcG9ydGlhbmFsU2l6ZU1peGluXCIpO1xucmVxdWlyZShcIi4uL21vZHVsZXMvcmVzaXphYmxlXCIpO1xuXG4vKipcbiAqIEBhdXRob3IgRGVuaXMgUG9ub21hcmV2XG4gKiBAZW1haWwgZGVuLnBvbm9tYXJldkBnbWFpbC5jb21cbiAqL1xuZmFicmljLkNsaXBhcnQgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhcbiAgZmFicmljLkdyb3VwLFxuICBmYWJyaWMuU3Ryb2tlTWl4aW4sXG4gIGZhYnJpYy5DYWNoZU1peGluLFxuICBmYWJyaWMuSW1hZ2VNaXhpbiwge1xuICAgIHR5cGU6ICdjbGlwYXJ0JyxcbiAgICBjb2xvcnM6IG51bGwsXG4gICAgZm9ybWF0OiAnc3ZnJyxcbiAgICByZXNpemFibGU6IHRydWUsXG4gICAgcHJvY2Vzc2luZzogZmFsc2UsXG4gICAgc3RhdGVQcm9wZXJ0aWVzOiBmYWJyaWMuR3JvdXAucHJvdG90eXBlLnN0YXRlUHJvcGVydGllcy5jb25jYXQoW1wiY29sb3JzXCJdKSxcbiAgICBvcHRpb25zT3JkZXI6IFtcIipcIixcImNvbG9yc1wiLFwiZWxlbWVudFwiXSxcbiAgICBnZXRPcmlnaW5hbFNpemU6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogdGhpcy5lbGVtZW50LndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuZWxlbWVudC5oZWlnaHRcbiAgICAgIH1cbiAgICB9LFxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICBvcHRpb25zIHx8ICggb3B0aW9ucyA9IHt9KTtcblxuICAgICAgaWYgKG9wdGlvbnMuY29uc3RydWN0b3IgIT0gT2JqZWN0KSB7XG5cbiAgICAgICAgdmFyIF9vYmogPSBvcHRpb25zLnRvT2JqZWN0KCk7XG4gICAgICAgIGlmIChvcHRpb25zLmVsZW1lbnQpIHtcbiAgICAgICAgICBfb2JqLmVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQuY2xvbmVTeW5jKCk7XG4gICAgICAgICAgX29iai5lbGVtZW50LmNsaXBUbyA9IF9vYmouX2ZhYnJpY19zaGFwZTtcbiAgICAgICAgfVxuICAgICAgICBfb2JqLnNoYXBlID0gb3B0aW9ucy5zaGFwZTtcbiAgICAgICAgb3B0aW9ucyA9IF9vYmo7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub24oe1xuICAgICAgICBcInNjYWxpbmdcIjogdGhpcy51cGRhdGVFbGVtZW50XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5pbml0U2hhcGUob3B0aW9ucyk7XG4gICAgICB0aGlzLl9mYWJyaWNfc2hhcGUuc2V0KHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgb3JpZ2luWCA6ICdjZW50ZXInLFxuICAgICAgICBvcmlnaW5ZIDogJ2NlbnRlcicsXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBbdGhpcy5fZmFicmljX3NoYXBlXSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLl9zZXRXaWR0aEhlaWdodChvcHRpb25zKTtcbiAgICB9LFxuICAgIHNldFNoYXBlOiBmdW5jdGlvbihlbCxjYil7XG5cbiAgICAgIGVsID0gIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoe1xuICAgICAgICBzdHJva2VXaWR0aEZ1bGw6IHRoaXMuc2hhcGUuc3Ryb2tlV2lkdGhGdWxsLFxuICAgICAgICBzdHJva2VXaWR0aEVtcHR5OiB0aGlzLnNoYXBlLnN0cm9rZVdpZHRoRW1wdHksXG4gICAgICAgIHN0cm9rZVdpZHRoQWN0aXZlOiB0aGlzLnNoYXBlLnN0cm9rZVdpZHRoQWN0aXZlLFxuICAgICAgICBkYXNoQXJyYXkgOiB0aGlzLnNoYXBlLmRhc2hBcnJheSxcbiAgICAgICAgc3Ryb2tlRW1wdHk6ICB0aGlzLnNoYXBlLnN0cm9rZUVtcHR5LFxuICAgICAgICBzdHJva2VGdWxsOiAgdGhpcy5zaGFwZS5zdHJva2VGdWxsLFxuICAgICAgICBzdHJva2VBY3RpdmU6dGhpcy5zaGFwZS5zdHJva2VBY3RpdmVcbiAgICAgIH0sZWwpO1xuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgaWYoZWwgJiYgZWwuc3JjICYmICFlbC5wYXRocyl7XG4gICAgICAgIGZhYnJpYy5sb2FkU1ZHRnJvbVVSTChlbC5zcmMsZnVuY3Rpb24ocGF0aHMsb3B0aW9ucykge1xuICAgICAgICAgIGVsLnBhdGhzICA9IHBhdGhzO1xuICAgICAgICAgIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZWwsb3B0aW9ucyk7XG4gICAgICAgICAgX3RoaXMuX3NldF9zaGFwZShlbCk7XG4gICAgICAgICAgX3RoaXMuYWRkKF90aGlzLl9mYWJyaWNfc2hhcGUpXG4gICAgICAgICAgX3RoaXMuX2FwcGx5X3NoYXBlKCk7XG4gICAgICAgICAgY2IgJiYgY2IoKTtcbiAgICAgICAgfSlcbiAgICAgIH1lbHNle1xuICAgICAgICBfdGhpcy5fc2V0X3NoYXBlKGVsKTtcbiAgICAgICAgX3RoaXMuYWRkKF90aGlzLl9mYWJyaWNfc2hhcGUpO1xuICAgICAgICBfdGhpcy5fYXBwbHlfc2hhcGUoKTtcbiAgICAgICAgY2IgJiYgY2IoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldEVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZih0aGlzLmVsZW1lbnQpe1xuICAgICAgICB0aGlzLnJlbW92ZSh0aGlzLmVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgaWYoIWVsZW1lbnQpe1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbGVtZW50LnNldCh7XG4gICAgICAgIG9yaWdpblggOiAnY2VudGVyJyxcbiAgICAgICAgb3JpZ2luWSA6ICdjZW50ZXInXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYWRkKGVsZW1lbnQpO1xuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIGlmICh0aGlzLmZvcm1hdCA9PT0gJ3BuZycgfHwgdGhpcy5mb3JtYXQgPT09ICdpbWFnZS9wbmcnIHx8IHRoaXMuZm9ybWF0ID09PSAnanBlZycgfHwgdGhpcy5mb3JtYXQgPT09ICdpbWFnZS9qcGVnJykge1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHRoaXMuZWxlbWVudC5fZWxlbWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2luaXRfY29sb3JfYXJyYXkoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgdGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMucmVuZGVyQWxsKCk7XG4gICAgfSxcbiAgICB1cGRhdGVFbGVtZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZih0aGlzLmVsZW1lbnQpe1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2NhbGVYID0gdGhpcy53aWR0aCAvIHRoaXMuZWxlbWVudC53aWR0aDtcbiAgICAgICAgdGhpcy5lbGVtZW50LnNjYWxlWSA9IHRoaXMuaGVpZ2h0IC8gdGhpcy5lbGVtZW50LmhlaWdodDtcbiAgICAgIH1cbiAgICAgIGlmKHRoaXMuX2ZhYnJpY19zaGFwZSl7XG4gICAgICAgIHRoaXMuX2ZhYnJpY19zaGFwZS5zZXQoe1xuICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICB9LFxuICAgIF9yZW5kZXI6IGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHguc2NhbGUodGhpcy5lbGVtZW50LnNjYWxlWCx0aGlzLmVsZW1lbnQuc2NhbGVZKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmVsZW1lbnQucGF0aHMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5wYXRoc1tpXS5yZW5kZXIoY3R4LCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDQutC+0LHRitC10LrRgiDQs9C+0YLQvtCy0LjRgtGB0Y8g0Log0LfQsNC80LXQvdGDINGE0L7RgtC+XG4gICAgICovXG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX2FjdGl2YXRlZCA9IHRydWU7XG4gICAgICB0aGlzLl9mYWJyaWNfc2hhcGUuc2V0T3BhY2l0eSgxKTtcbiAgICAgIHRoaXMudXBkYXRlU3Ryb2tlKCk7XG4gICAgICB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqINC60L7QsdGK0LXQutGCINC90LUg0LPQvtGC0L7QstC40YLRgdGPINC6INC30LDQvNC10L3RgyDRhNC+0YLQvlxuICAgICAqL1xuICAgIGRlYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX2FjdGl2YXRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy51cGRhdGVTdHJva2UoKTtcbiAgICAgIHRoaXMuY2FudmFzLnJlbmRlckFsbCgpO1xuICAgIH0sXG4gICAgX2luaXRfY29sb3JfYXJyYXk6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgdGhpcy5wcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2NvbG9ycyA9IHRoaXMuZWxlbWVudC5leHRyYWN0Q29sb3JzKCk7XG5cbiAgICAgIHRoaXMuY29sb3JzID0gdGhpcy5jb2xvcnMgfHwge307XG5cbiAgICAgIGZvciAodmFyIF9jb2xvciBpbiB0aGlzLmNvbG9ycykge1xuICAgICAgICB0aGlzLnNldENsaXBhcnRDb2xvcihfY29sb3IsIHRoaXMuY29sb3JzW19jb2xvcl0sdHJ1ZSlcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldEVsZW1lbnRGcm9tTWVudTogZnVuY3Rpb24ob3B0aW9ucyl7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgZmFicmljLlBhdGhHcm91cC5mcm9tVVJMKG9wdGlvbnMuaW1hZ2Uuc3JjLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgX3RoaXMuc2V0RWxlbWVudChlbCk7XG4gICAgICAgIF90aGlzLm1ha2VBY3Rpb25zKCk7XG4gICAgICAgIF90aGlzLmNhbnZhcy5jcmVhdGVGbG9hdGVkTWVudShfdGhpcy5hcHBsaWNhdGlvbi5vYmplY3RzVG9vbGJhck9wdGlvbnMpO1xuICAgICAgfSx7XG4gICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0XG4gICAgICB9KTtcbiAgICB9LFxuICAgIC8vIHJlbmRlcjogZnVuY3Rpb24gKGN0eCkge1xuICAgIC8vICAgLy8gdmFyIHggPSBub1RyYW5zZm9ybSA/IDAgOiAtIHRoaXMud2lkdGggKiB0aGlzLnNjYWxlWCAvIDIsXG4gICAgLy8gICAvLyAgIHkgPSBub1RyYW5zZm9ybSA/IDAgOiAtIHRoaXMuaGVpZ2h0ICogdGhpcy5zY2FsZVkgLyAyO1xuICAgIC8vICAgLy9cbiAgICAvLyAgIC8vIGN0eC5zYXZlKCk7XG4gICAgLy8gICAvLyBjdHgudHJhbnNsYXRlKHgseSk7XG4gICAgLy8gICBmYWJyaWMuR3JvdXAucHJvdG90eXBlLnJlbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cylcbiAgICAvLyAgIC8vIGN0eC5yZXN0b3JlKCk7XG4gICAgLy8gfSxcbiAgICBzZXRDbGlwYXJ0Q29sb3I6IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBwcmV2ZW50Q2FjaGVVcGRhdGUpIHtcblxuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IGtleTtcbiAgICAgICAgZGVsZXRlIHRoaXMuY29sb3JzW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbG9yc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgX2NvbG9ycyA9IHRoaXMuX2NvbG9yc1trZXldO1xuICAgICAgZm9yICh2YXIgaSBpbiBfY29sb3JzKSB7XG4gICAgICAgIGlmIChfY29sb3JzW2ldLmNvbG9yKSB7XG4gICAgICAgICAgX2NvbG9yc1tpXS5jb2xvci5maWxsID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9jb2xvcnNbaV0uc3RvcCkge1xuICAgICAgICAgIF9jb2xvcnNbaV0uc3RvcC5jb2xvciA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgdGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMucmVuZGVyQWxsKCk7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHZhciBfb2JqID0gdGhpcy5jYWxsU3VwZXIoJ3RvT2JqZWN0JywgWydzcmMnLCAnY29sb3JzJ10uY29uY2F0KHByb3BlcnRpZXNUb0luY2x1ZGUpKTtcbiAgICAgIGRlbGV0ZSBfb2JqLm9iamVjdHM7XG4gICAgICByZXR1cm4gX29iajtcbiAgICB9LFxuICAgIGFjdGlvbnM6ICB7XG4gICAgICBzb3VyY2U6IHtcbiAgICAgICAgdHlwZTogJ2VmZmVjdCcsXG4gICAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLWZpbGUtaW1hZ2UtbycsXG4gICAgICAgIHRpdGxlOiBcInNvdXJjZVwiLFxuICAgICAgICBhY3Rpb25QYXJhbWV0ZXJzOiBmdW5jdGlvbiAoJGVsLCBkYXRhKSB7XG4gICAgICAgICAgZGF0YS50YXJnZXQuYXBwbGljYXRpb24uY3JlYXRlR2FsbGVyeShkYXRhLnRhcmdldCwgJGVsLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNvbG9yczoge1xuICAgICAgICB0eXBlOiAnbWVudScsXG4gICAgICAgIHRpdGxlOiAnY29sb3IgbWVudScsXG4gICAgICAgIG1lbnU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgX21lbnUgPSBbXTtcbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fY29sb3JzKSB7XG4gICAgICAgICAgICBfbWVudS5wdXNoKHtcbiAgICAgICAgICAgICAgdGl0bGU6IFwiQ29sb3IgKFwiICsga2V5ICsgXCIpXCIsXG4gICAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuY29sb3JzW2tleV0gfHwga2V5LFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JzW2tleV0gfHwga2V5O1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzLCBrZXkpLFxuICAgICAgICAgICAgICAgIHNldDogdGhpcy5zZXRDbGlwYXJ0Q29sb3IuYmluZCh0aGlzLCBrZXkpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHR5cGU6IFwiY29sb3JcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9tZW51O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4pO1xuXG5mYWJyaWMuQ2xpcGFydC5hc3luYyA9IHRydWU7XG5cbi8qKlxuICogQ3JlYXRlcyBmYWJyaWMuUGF0aEdyb3VwIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgZmFicmljLlBhdGhHcm91cFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFuIGZhYnJpYy5QYXRoR3JvdXAgaW5zdGFuY2UgaXMgY3JlYXRlZFxuICovXG5mYWJyaWMuQ2xpcGFydC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvYmplY3Quc3JjID09PSAnc3RyaW5nJykge1xuICAgIGlmIChvYmplY3QuZm9ybWF0ID09PSAncG5nJyB8fCBvYmplY3QuZm9ybWF0ID09PSBcImltYWdlL3BuZ1wiIHx8IG9iamVjdC5mb3JtYXQgPT09ICdqcGVnJyB8fCBvYmplY3QuZm9ybWF0ID09PSBcImltYWdlL2pwZWdcIikge1xuICAgICAgZmFicmljLkltYWdlLmZyb21VUkwob2JqZWN0LnNyYywgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIG9iamVjdC5lbGVtZW50ID0gZWw7XG4gICAgICAgIGNhbGxiYWNrKG5ldyBmYWJyaWMuQ2xpcGFydChvYmplY3QpKTtcbiAgICAgIH0sIHtcbiAgICAgICAgd2lkdGg6IG9iamVjdC53aWR0aCB8fCBmYWJyaWMuQ2xpcGFydC5wcm90b3R5cGUud2lkdGgsXG4gICAgICAgIGhlaWdodDogb2JqZWN0LmhlaWdodCB8fCBmYWJyaWMuQ2xpcGFydC5wcm90b3R5cGUuaGVpZ2h0XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmFicmljLlBhdGhHcm91cC5mcm9tVVJMKG9iamVjdC5zcmMsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBvYmplY3QuZWxlbWVudCA9IGVsO1xuICAgICAgICBjYWxsYmFjayhuZXcgZmFicmljLkNsaXBhcnQob2JqZWN0KSk7XG4gICAgICB9LCB7XG4gICAgICAgIHdpZHRoOiBvYmplY3Qud2lkdGggfHwgZmFicmljLkNsaXBhcnQucHJvdG90eXBlLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IG9iamVjdC5oZWlnaHQgfHwgZmFicmljLkNsaXBhcnQucHJvdG90eXBlLmhlaWdodFxuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgZmFicmljLkNsaXBhcnQob2JqZWN0KTtcbiAgfVxufTtcblxuZmFicmljLnV0aWwuY3JlYXRlQWNjZXNzb3JzKGZhYnJpYy5DbGlwYXJ0KTtcblxuaWYgKGZhYnJpYy5vYmplY3RzTGlicmFyeSkge1xuICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5vYmplY3RzTGlicmFyeSwge1xuICAgIGNsaXBhcnQ6IHtcbiAgICAgIFwid2lkdGhcIjogZnVuY3Rpb24gKHcsIGgpIHtcbiAgICAgICAgdmFyIF9hc3AgPSBNYXRoLm1pbigyODUgLyAzNjUsIHcgLyBoKTtcbiAgICAgICAgcmV0dXJuIHc7XG4gICAgICB9LFxuICAgICAgXCJoZWlnaHRcIjogZnVuY3Rpb24gKHcsIGgpIHtcbiAgICAgICAgdmFyIF9hc3AgPSBNYXRoLm1pbigyODUgLyAzNjUsIHcgLyBoKTtcbiAgICAgICAgcmV0dXJuIGg7XG4gICAgICB9LFxuICAgICAgXCJ0eXBlXCI6IFwiY2xpcGFydFwiLFxuICAgICAgXCJzcmNcIjogXCJkYXRhOmltYWdlL3N2Zyt4bWw7dXRmODtiYXNlNjQsUEQ5NGJXd2dkbVZ5YzJsdmJqMGlNUzR3SWlCbGJtTnZaR2x1WnowaWFYTnZMVGc0TlRrdE1TSS9QZ284SVMwdElFZGxibVZ5WVhSdmNqb2dRV1J2WW1VZ1NXeHNkWE4wY21GMGIzSWdNVGt1TUM0d0xDQlRWa2NnUlhod2IzSjBJRkJzZFdjdFNXNGdMaUJUVmtjZ1ZtVnljMmx2YmpvZ05pNHdNQ0JDZFdsc1pDQXdLU0FnTFMwK0NqeHpkbWNnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JaUI0Yld4dWN6cDRiR2x1YXowaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1UazVPUzk0YkdsdWF5SWdkbVZ5YzJsdmJqMGlNUzR4SWlCcFpEMGlUR0Y1WlhKZk1TSWdlRDBpTUhCNElpQjVQU0l3Y0hnaUlIWnBaWGRDYjNnOUlqQWdNQ0ExTVRJZ05URXlJaUJ6ZEhsc1pUMGlaVzVoWW14bExXSmhZMnRuY205MWJtUTZibVYzSURBZ01DQTFNVElnTlRFeU95SWdlRzFzT25Od1lXTmxQU0p3Y21WelpYSjJaU0lnZDJsa2RHZzlJalV4TW5CNElpQm9aV2xuYUhROUlqVXhNbkI0SWo0S1BHYytDZ2s4Y0dGMGFDQnpkSGxzWlQwaVptbHNiRG9qUmtZNFF6UTJPeUlnWkQwaVRURTJNeTR4T0Rrc05qY3VNVFE0UXpFeU9TNDJNVFlzTmpjdU1UUTRMREV5TVM0eU1qSXNNQ3czT1M0eU5UVXNNRU0xTWk0M01UTXNNQ3d5T0M0NE9UUXNNVFl1TnpnM0xESTRMamc1TkN3MU1DNHpOakVnSUNCek5UZ3VOelUwTERVd0xqTTJNU3cwTVM0NU5qY3NNVEE1TGpFeE5Vd3hOak11TVRnNUxEWTNMakUwT0hvaUx6NEtDVHh3WVhSb0lITjBlV3hsUFNKbWFXeHNPaU5HUmpoRE5EWTdJaUJrUFNKTk16UTNMamcwTlN3Mk55NHhORGhETXpneExqUXhPU3cyTnk0eE5EZ3NNemc1TGpneE1pd3dMRFF6TVM0M09Dd3dZekkyTGpVME1pd3dMRFV3TGpNMk1Td3hOaTQzT0Rjc05UQXVNell4TERVd0xqTTJNU0FnSUhNdE5UZ3VOelUwTERVd0xqTTJNUzAwTVM0NU5qY3NNVEE1TGpFeE5Vd3pORGN1T0RRMUxEWTNMakUwT0hvaUx6NEtQQzluUGdvOFp6NEtDVHh3WVhSb0lITjBlV3hsUFNKbWFXeHNPaU5HUmtWQ1JESTdJaUJrUFNKTk16TXhMalUwTVN3ME5qRXVOak01UXpNek1TNDFOREVzTkRnNUxqUTFNeXd6TVRFdU5qSTJMRFV4TWl3eU5UWXNOVEV5Y3kwM05TNDFOREV0TWpJdU5UUTNMVGMxTGpVME1TMDFNQzR6TmpGMkxUZ3VNemt6YURFMU1DNDFPVGtnSUNCTU16TXhMalUwTVN3ME5qRXVOak01ZWlJdlBnb0pQSEJoZEdnZ2MzUjViR1U5SW1acGJHdzZJMFpHUlVKRU1qc2lJR1E5SWswME5Ua3VNelk0TERFNE1pNDVNV016TkM0ME5EWXNOVFl1TXpBekxEUXdMakEwTWl3eE1ESXVORFkzTERRd0xqQTBNaXd4TURJdU5EWTNhQzB4Tmk0M09EY2dJQ0JqTUN3d0xERTJMamM0Tnl3ME1TNDBORE1zTVRZdU56ZzNMRFkzTGpFME9Hd3RNalV1TVRndE9DNHpPVE5qTUN3d0xERTJMamM0Tnl3ek55NDNOeXd4Tmk0M09EY3NOamN1TVRRNFl6QXNNQzQxTWpVdE1qVXVNVGd0T0M0ek9UTXRNalV1TVRndE9DNHpPVE1nSUNCek1USXVOVGtzTWpndU16STRMRGd1TXprekxEUXhMamsyTjJNdE1DNHhOVFFzTUM0MU1ERXRNalV1TVRndE9DNHpPVE10TWpVdU1UZ3RPQzR6T1ROek55NHpORFFzTVRrdU5UZzFMREFzTXpNdU5UYzBiQzAwTVM0NU5qY3RNVFl1TnpnM0lDQWdZekFzTUMwM0xqZzBOaXd5TlM0Mk9ERXRPQzR6T1RNc01qVXVNVGhqTFRFNExqTTJNUzB4Tmk0M09EY3ROREV1T1RZM0xUSTFMakU0TFRReExqazJOeTB5TlM0eE9FZ3hOVFV1TWpjNVl6QXNNQzB5TXk0Mk1EY3NPQzR6T1RNdE5ERXVPVFkzTERJMUxqRTRJQ0FnWXkwd0xqVTBPQ3d3TGpVdE9DNHpPVE10TWpVdU1UZ3RPQzR6T1RNdE1qVXVNVGhzTFRReExqazJOeXd4Tmk0M09EZGpMVGN1TXpRMExURXpMams0T1N3d0xUTXpMalUzTkN3d0xUTXpMalUzTkhNdE1qVXVNREkyTERndU9EazFMVEkxTGpFNExEZ3VNemt6SUNBZ1l5MDBMakU1TnkweE15NDJNemtzT0M0ek9UTXROREV1T1RZM0xEZ3VNemt6TFRReExqazJOM010TWpVdU1UZ3NPQzQ1TVRndE1qVXVNVGdzT0M0ek9UTmpNQzB5T1M0ek56Y3NNVFl1TnpnM0xUWTNMakUwT0N3eE5pNDNPRGN0TmpjdU1UUTRiQzB5TlM0eE9DdzRMak01TXlBZ0lHTXdMVEkxTGpjd05Td3hOaTQzT0RjdE5qY3VNVFE0TERFMkxqYzROeTAyTnk0eE5EaElNVEl1TlRsak1Dd3dMRFV1TlRrMUxUUTJMakUyTkN3ME1DNHdOREl0TVRBeUxqUTJOMGcwTlRrdU16WTRlaUl2UGdvOEwyYytDanhsYkd4cGNITmxJSE4wZVd4bFBTSm1hV3hzT2lOR1JrRTFORUk3SWlCamVEMGlNalUxTGpVeE55SWdZM2s5SWpJek1DNDRNaUlnY25nOUlqSXdPUzQ0TXpZaUlISjVQU0l4T1RjdU1qUTJJaTgrQ2p4blBnb0pDZ2tKUEdWc2JHbHdjMlVnZEhKaGJuTm1iM0p0UFNKdFlYUnlhWGdvTFRBdU5qQTBNaUF0TUM0M09UWTRJREF1TnprMk9DQXRNQzQyTURReUlEWXpMamswTnpVZ05EazVMamc1TWpZcElpQnpkSGxzWlQwaVptbHNiRG9qUmtaRlFrUXlPeUlnWTNnOUlqRTFOaTR4TWpNaUlHTjVQU0l5TXpRdU1EWTFJaUJ5ZUQwaU16Y3VOelk1SWlCeWVUMGlORFl1TVRZeklpOCtDZ2tLQ1FrOFpXeHNhWEJ6WlNCMGNtRnVjMlp2Y20wOUltMWhkSEpwZUNndE1DNDJNRFF5SURBdU56azJPQ0F0TUM0M09UWTRJQzB3TGpZd05ESWdOelUxTGpreU1EUWdPVEl1TnpBek1Ta2lJSE4wZVd4bFBTSm1hV3hzT2lOR1JrVkNSREk3SWlCamVEMGlNelUwTGprek55SWdZM2s5SWpJek5DNHdPRFlpSUhKNFBTSXpOeTQzTmpraUlISjVQU0kwTmk0eE5qTWlMejRLUEM5blBnbzhjR0YwYUNCemRIbHNaVDBpWm1sc2JEb2pSa1k0UXpRMk95SWdaRDBpVFRJMU5TNDFNalFzTWpZd0xqRTVOMmd0TUM0d01UTmpMVEk0TGpjeE1Td3dMVFUxTGpBME5Td3hPQzR5TmpndE5qZ3VOVE0yTERRM0xqVXhNU0FnWXkweE9DNHhOak1zTXprdU16YzBMVFF3TGpVM015dzVNUzQ1T1RZdE5EQXVOVGN6TERFeE1TNDVOalJvTWpFNExqSXlPV013TFRFNUxqazJOeTB5TWk0ME1Ea3ROekl1TlRrdE5EQXVOVGN6TFRFeE1TNDVOalFnSUVNek1UQXVOVFk1TERJM09DNDBOalFzTWpnMExqSXpOQ3d5TmpBdU1UazNMREkxTlM0MU1qUXNNall3TGpFNU4zb2lMejRLUEhCaGRHZ2djM1I1YkdVOUltWnBiR3c2STBaR1JFVkNOenNpSUdROUlrMHpNRFF1TnprMUxETTJPUzR6TVRGakxURTVMak01TXl3d0xUTTJMamcxTlN3MkxUUTVMakkzT0N3eE5TNDFPRGhqTFRFeUxqUXlNaTA1TGpVNE9DMHlPUzQ0T0RVdE1UVXVOVGc0TFRRNUxqSTNPQzB4TlM0MU9EZ2dJR010TXpjdU5qZ3lMREF0TmpndU1qTXNNakl1TlRRM0xUWTRMakl6TERVd0xqTTJNWE16TUM0MU5EZ3NOVEF1TXpZeExEWTRMakl6TERVd0xqTTJNV014TlM0M01qZ3NNQ3d6TUM0eE9EY3RNeTQ1TkRjc05ERXVOekUyTFRFd0xqVTFOQ0FnWXpRdU56WTBMVEl1TnpNc01UQXVNelUzTFRJdU56TXNNVFV1TVRJeUxEQmpNVEV1TlRJNUxEWXVOakEzTERJMUxqazRPQ3d4TUM0MU5UUXNOREV1TnpFMkxERXdMalUxTkdNek55NDJPRElzTUN3Mk9DNHlNeTB5TWk0MU5EY3NOamd1TWpNdE5UQXVNell4SUNCVE16UXlMalEzT0N3ek5qa3VNekV4TERNd05DNDNPVFVzTXpZNUxqTXhNWG9pTHo0S1BHYytDZ2s4Y0dGMGFDQnpkSGxzWlQwaVptbHNiRG9qTkRZME5qVTFPeUlnWkQwaVRUSXhOUzR6TkRRc016YzBMams1TVd3ek15NDBPQ3cwTkM0eU16SmpNeTR6TlRnc05DNDBNemNzTVRBdU1ESTJMRFF1TkRNM0xERXpMak00TkN3d2JETXpMalE0TFRRMExqSXpNaUFnSUdNMExqRTROQzAxTGpVeU9Dd3dMakkwTVMweE15NDBOVGt0Tmk0Mk9UTXRNVE11TkRVNWFDMDBMalZqTFRJdU5USXNNQzAxTGpBeU5pd3dMak0zT0MwM0xqUXpNaXd4TGpFeU1td3RNVFF1TVRFMkxEUXVNell4WXkwMExqZzBNaXd4TGpRNU5pMHhNQzR3TWpNc01TNDBPVFl0TVRRdU9EWTFMREFnSUNCc0xURTBMakV4TmkwMExqTTJNV010TWk0ME1EZ3RNQzQzTkRRdE5DNDVNVE10TVM0eE1qSXROeTQwTXpJdE1TNHhNakpvTFRRdU5EazVRekl4TlM0eE1ETXNNell4TGpVek1pd3lNVEV1TVRZc016WTVMalEyTXl3eU1UVXVNelEwTERNM05DNDVPVEY2SWk4K0NnazhZMmx5WTJ4bElITjBlV3hsUFNKbWFXeHNPaU0wTmpRMk5UVTdJaUJqZUQwaU1UVTBMamM1TmlJZ1kzazlJakl6TlM0d01UWWlJSEk5SWpFMkxqYzROeUl2UGdvSlBHTnBjbU5zWlNCemRIbHNaVDBpWm1sc2JEb2pORFkwTmpVMU95SWdZM2c5SWpNMU5pNHlNemtpSUdONVBTSXlNelV1TURFMklpQnlQU0l4Tmk0M09EY2lMejRLQ1R4d1lYUm9JSE4wZVd4bFBTSm1hV3hzT2lNME5qUTJOVFU3SWlCa1BTSk5OemN1TXpVNExETXpOUzR3TURGc05EWXVNakEyTFRNM0xqZ3dOV00wTGpBeE1pMHpMakk0TXl3eExqRXlNeTA1TGpjMk1TMDBMakF3TVMwNExqazJPV3d0TmpFdU5EYzRMRGt1TlNBZ0lFTTJNeTR4TWpNc016RXdMamcyTERZNUxqWXhPQ3d6TWpNdU16TXhMRGMzTGpNMU9Dd3pNelV1TURBeGVpSXZQZ29KUEhCaGRHZ2djM1I1YkdVOUltWnBiR3c2SXpRMk5EWTFOVHNpSUdROUlrMHhNakV1TkRrekxETTRNaTQxTnpkc01qVXVNRFV5TFRZMkxqZ3dOMk14TGpreU1pMDFMakV5TlMwMExqUTVOQzA1TGpJMU5pMDRMak0yTkMwMUxqTTROV3d0TkRVdU1UZ3pMRFExTGpFNE15QWdJRU14TURFdU5UVTFMRE0yTlM0ME1EWXNNVEV4TGpBNU9Dd3pOelF1TkRVMUxERXlNUzQwT1RNc016Z3lMalUzTjNvaUx6NEtDVHh3WVhSb0lITjBlV3hsUFNKbWFXeHNPaU0wTmpRMk5UVTdJaUJrUFNKTk1qSTJMalF3TlN3eE1Ea3VNVFE1YkMwMkxqWXpNeTAzTWk0Mk5qZGpMVGd1TVRBMkxERXVNekE0TFRFMkxqQTFNaXd6TGpBME5DMHlNeTQ0TVRFc05TNHlNREZzTWpFdU5UTXlMRFk1TGpJek9TQWdJRU15TVRrdU1USXNNVEUyTGpFMU55d3lNall1T1RBekxERXhOQzQyTURrc01qSTJMalF3TlN3eE1Ea3VNVFE1ZWlJdlBnb0pQSEJoZEdnZ2MzUjViR1U5SW1acGJHdzZJelEyTkRZMU5Uc2lJR1E5SWsweU9URXVNall6TERNMkxqUTRNbXd0Tmk0Mk16TXNOekl1TmpZM1l5MHdMalE1T0N3MUxqUTJMRGN1TWpnMExEY3VNREEzTERndU9URXpMREV1TnpjeWJESXhMalV6TWkwMk9TNHlNemtnSUNCRE16QTNMak14TlN3ek9TNDFNamNzTWprNUxqTTJPU3d6Tnk0M09Td3lPVEV1TWpZekxETTJMalE0TW5vaUx6NEtDVHh3WVhSb0lITjBlV3hsUFNKbWFXeHNPaU0wTmpRMk5UVTdJaUJrUFNKTk16TTNMak00Tnl3ME9TNHhOVFpzTFRJd0xqVXdPU3cwTnk0ME5EbGpMVEl1TVRNM0xEUXVPVFEyTERRdU5UUTVMRGd1T0RZNExEY3VPREl6TERRdU5UZzRiRE15TGpjekxUUXlMamM1TVNBZ0lFTXpOVEF1T1RRMkxEVTFMakF4TERNME5DNHlOekVzTlRFdU9Td3pNemN1TXpnM0xEUTVMakUxTm5vaUx6NEtDVHh3WVhSb0lITjBlV3hsUFNKbWFXeHNPaU0wTmpRMk5UVTdJaUJrUFNKTk1UazBMakUxTnl3NU5pNDJNRFZzTFRJd0xqVXdPUzAwTnk0ME5EbGpMVFl1T0RnMExESXVOelExTFRFekxqVTFPU3cxTGpnMU15MHlNQzR3TkRRc09TNHlORGRzTXpJdU56TXNOREl1TnprZ0lDQkRNVGc1TGpZd09Dd3hNRFV1TkRjekxERTVOaTR5T1RVc01UQXhMalUxTVN3eE9UUXVNVFUzTERrMkxqWXdOWG9pTHo0S0NUeHdZWFJvSUhOMGVXeGxQU0ptYVd4c09pTTBOalEyTlRVN0lpQmtQU0pOTWpjeUxqSXlOQ3d6TkM0eU5UTmpMVFV1TlRFNExUQXVOREE0TFRFeExqQTNOeTB3TGpZM09TMHhOaTQzTURjdE1DNDJOemxqTFRVdU5qTXNNQzB4TVM0eE9Ea3NNQzR5TnpFdE1UWXVOekEzTERBdU5qYzVJQ0FnYkRFeUxqRTJPU3d4TURNdU5EUmpNQzQyTXpNc05TNHpPQ3c0TGpRME1pdzFMak00TERrdU1EYzFMREJNTWpjeUxqSXlOQ3d6TkM0eU5UTjZJaTgrQ2drOGNHRjBhQ0J6ZEhsc1pUMGlabWxzYkRvak5EWTBOalUxT3lJZ1pEMGlUVFF6TkM0NE5qZ3NNek0xTGpBd01Xd3RORFl1TWpBMkxUTTNMamd3TldNdE5DNHdNVEl0TXk0eU9ETXRNUzR4TWpNdE9TNDNOakVzTkM0d01ERXRPQzQ1Tmpsc05qRXVORGM0TERrdU5TQWdJRU0wTkRrdU1UQTBMRE14TUM0NE5pdzBOREl1TmpBNExETXlNeTR6TXpFc05ETTBMamcyT0N3ek16VXVNREF4ZWlJdlBnb0pQSEJoZEdnZ2MzUjViR1U5SW1acGJHdzZJelEyTkRZMU5Uc2lJR1E5SWswek9UQXVOek16TERNNE1pNDFOemRzTFRJMUxqQTFNaTAyTmk0NE1EZGpMVEV1T1RJeUxUVXVNVEkxTERRdU5EazBMVGt1TWpVMkxEZ3VNelkwTFRVdU16ZzFiRFExTGpFNE15dzBOUzR4T0RNZ0lDQkROREV3TGpZM01Td3pOalV1TkRBMkxEUXdNUzR4TWprc016YzBMalExTlN3ek9UQXVOek16TERNNE1pNDFOemQ2SWk4K0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEdjK0Nqd3ZaejRLUEM5emRtYytDZz09XCJcbiAgICB9XG4gIH0pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zaGFwZXMvY2xpcGFydC5qc1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbnJlcXVpcmUoXCIuLi9tb2R1bGVzL3BhdGhmaW5kZXJcIik7XG4vL2ZhYnJpYy5yZXF1aXJlKFwiU2xpZGVJbWFnZVwiLFtcIlNsaWRlT2JqZWN0XCIvKixcIlBhdGhmaW5kZXJcIiovXSxmdW5jdGlvbigpIHtcblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuSW1hZ2UucHJvdG90eXBlLCB7XG4gIGNvbnRlbnRPZmZzZXRzOiBudWxsLFxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG5vVHJhbnNmb3JtXG4gICAqL1xuICBfcmVuZGVyOiBmdW5jdGlvbiAoY3R4LCBub1RyYW5zZm9ybSkge1xuICAgIHZhciB4LCB5LCBpbWFnZU1hcmdpbnMgPSB0aGlzLl9maW5kTWFyZ2lucygpLCBlbGVtZW50VG9EcmF3O1xuXG4gICAgeCA9IChub1RyYW5zZm9ybSA/IHRoaXMubGVmdCA6IC10aGlzLndpZHRoIC8gMik7XG4gICAgeSA9IChub1RyYW5zZm9ybSA/IHRoaXMudG9wIDogLXRoaXMuaGVpZ2h0IC8gMik7XG5cbiAgICBpZiAodGhpcy5tZWV0T3JTbGljZSA9PT0gJ3NsaWNlJykge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LnJlY3QoeCwgeSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgY3R4LmNsaXAoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc01vdmluZyA9PT0gZmFsc2UgJiYgdGhpcy5yZXNpemVGaWx0ZXJzLmxlbmd0aCAmJiB0aGlzLl9uZWVkc1Jlc2l6ZSgpKSB7XG4gICAgICB0aGlzLl9sYXN0U2NhbGVYID0gdGhpcy5zY2FsZVg7XG4gICAgICB0aGlzLl9sYXN0U2NhbGVZID0gdGhpcy5zY2FsZVk7XG4gICAgICBlbGVtZW50VG9EcmF3ID0gdGhpcy5hcHBseUZpbHRlcnMobnVsbCwgdGhpcy5yZXNpemVGaWx0ZXJzLCB0aGlzLl9maWx0ZXJlZEVsIHx8IHRoaXMuX29yaWdpbmFsRWxlbWVudCwgdHJ1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZWxlbWVudFRvRHJhdyA9IHRoaXMuX2VsZW1lbnQ7XG4gICAgfVxuICAgIHRoaXMuX3JlbmRlckZpbGwoY3R4KTtcbiAgICBlbGVtZW50VG9EcmF3ICYmIGN0eC5kcmF3SW1hZ2UoZWxlbWVudFRvRHJhdyxcbiAgICAgIHggKyBpbWFnZU1hcmdpbnMubWFyZ2luWCxcbiAgICAgIHkgKyBpbWFnZU1hcmdpbnMubWFyZ2luWSxcbiAgICAgIGltYWdlTWFyZ2lucy53aWR0aCxcbiAgICAgIGltYWdlTWFyZ2lucy5oZWlnaHRcbiAgICApO1xuXG4gICAgdGhpcy5fc3Ryb2tlKGN0eCk7XG4gICAgdGhpcy5fcmVuZGVyU3Ryb2tlKGN0eCk7XG4gIH0sXG4gIGltYWdlVG9vbHM6IGZhbHNlLFxuICBwaG90b3Nob3BUb29sczogZmFsc2UsXG4gIGNsb25lU3luYzogZnVuY3Rpb24gKCkge1xuICAgIHZhciBfb2JqZWN0ID0gdGhpcy50b09iamVjdCgpO1xuICAgIGRlbGV0ZSBfb2JqZWN0LmZpbHRlcnM7XG4gICAgdmFyIGNsb25lID0gbmV3IGZhYnJpYy5JbWFnZSh0aGlzLl9lbGVtZW50LCBfb2JqZWN0KTtcbiAgICBjbG9uZS5fZmlsdGVyZWRFbCA9IHRoaXMuX2ZpbHRlcmVkRWw7XG4gICAgY2xvbmUuZmlsdGVycyA9IHRoaXMuZmlsdGVycztcbiAgICByZXR1cm4gY2xvbmU7XG4gIH0sXG4gIHJldmVydENoYW5nZXM6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGF0aGZpbmRlciA9IHRoaXMuY2FudmFzLmdldFBhdGhmaW5kZXIoKTtcbiAgICBpZiAocGF0aGZpbmRlci50YXJnZXQgJiYgcGF0aGZpbmRlci50YXJnZXQgPT0gdGhpcykge1xuICAgICAgcGF0aGZpbmRlci5oaWRlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2VsZW1lbnQgPT0gdGhpcy5fb3JpZ2luYWxFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5maWx0ZXJzLmxlbmd0aCA9IDA7XG4gICAgaWYgKHRoaXMuX2ZpbHRlcmVkRWwpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9maWx0ZXJlZEVsO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5fZWRpdGVkO1xuICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9vcmlnaW5hbEVsZW1lbnQ7XG5cbiAgICB0aGlzLmZpcmUoXCJjb250ZW50Om1vZGlmaWVkXCIsIHtcbiAgICAgIGJvdW5kczoge21pblg6IDAsIG1pblk6IDAsIG1heFg6IHRoaXMuX2VsZW1lbnQud2lkdGgsIG1heFk6IHRoaXMuX2VsZW1lbnQuaGVpZ2h0fVxuICAgIH0pO1xuXG5cbiAgICB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgfSxcbiAgZXh0cmFjdENvbG9yczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIF9jb2xvcnMgPSBmYWJyaWMuTWFnaWNXYW5kLmV4dHJhY3RDb2xvcnModGhpcy5fZWxlbWVudCk7XG4gICAgdmFyIGNvbG9ycyA9IHt9O1xuICAgIGZvcih2YXIgaSBpbiBfY29sb3JzKXtcbiAgICAgIHZhciBfc3RyID0gXCJyZ2IoXCIgKyBfY29sb3JzW2ldLmpvaW4oXCIsXCIpICsgXCIpXCI7XG4gICAgICBjb2xvcnNbX3N0cl0gPSB7fTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9ycztcbiAgfSxcbiAgYWN0aW9uczogZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCggZmFicmljLkltYWdlLnByb3RvdHlwZS5hY3Rpb25zLCB7XG4gICAgcGhvdG9zaG9wVG9vbHM6IHtcbiAgICAgIHR5cGU6ICdlZmZlY3QnLFxuICAgICAgZWZmZWN0VHBsOiAnPGRpdiBpZD1cImVkaXRvci10b29sc1wiIGNsYXNzPVwiaW5saW5lLWFjdGlvbnMgY29tcGFjdFwiPjwvZGl2PicgK1xuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImNoZWNrYm9hcmRcIiA+PGRpdiBpZD1cInBhdGhmaW5kZXJcIj48L2Rpdj48L2Rpdj4nLFxuICAgICAgY2xhc3NOYW1lOiAnZmEgZmEtcGVuY2lsLXNxdWFyZS1vJyxcbiAgICAgIHRpdGxlOiBcImFkdmFuY2VkIHRvb2xzXCIsXG4gICAgICBhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhdGhmaW5kZXIgPSB0aGlzLmNhbnZhcy5nZXRQYXRoZmluZGVyKCk7XG4gICAgICAgIHBhdGhmaW5kZXIudGFyZ2V0ID0gdGhpcztcbiAgICAgICAgcGF0aGZpbmRlci5zZXRQaWN0dXJlKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICBwYXRoZmluZGVyLnNob3coKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb25QYXJhbWV0ZXJzOiBmdW5jdGlvbiAoZWwsIGRhdGEpIHtcblxuICAgICAgICB2YXIgcGF0aGZpbmRlciA9IHRoaXMuY2FudmFzLmdldFBhdGhmaW5kZXIoKTtcbiAgICAgICAgcGF0aGZpbmRlci5jYW52YXMgPSB0aGlzLmNhbnZhcztcblxuICAgICAgICBuZXcgZmFicmljLlRvb2xiYXIocGF0aGZpbmRlciwgJ2VkaXRvci10b29scycpO1xuXG5cbiAgICAgICAgcGF0aGZpbmRlci5zZXRDb250YWluZXIoJ3BhdGhmaW5kZXInKTtcblxuICAgICAgICAvLyBpZiAocGF0aGZpbmRlci50YXJnZXQpcGF0aGZpbmRlci5oaWRlKCk7XG4gICAgICAgIHBhdGhmaW5kZXIudGFyZ2V0ID0gdGhpcztcbiAgICAgICAgcGF0aGZpbmRlci5zZXRQaWN0dXJlKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICBwYXRoZmluZGVyLnNob3coKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJldmVydENoYW5nZXM6IHtcbiAgICAgIGNsYXNzTmFtZTogJ2ZhIGZhLWhpc3RvcnknLFxuICAgICAgdGl0bGU6IFwicmV2ZXJ0IHRvIG9yaWduYWwgaW1hZ2VcIixcbiAgICAgIGFjdGlvbjogXCJyZXZlcnRDaGFuZ2VzXCIsXG4gICAgICBvYnNlcnZlOiBcImNvbnRlbnQ6bW9kaWZpZWRcIixcbiAgICAgIHZpc2libGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZmlsdGVyZWRFbCB8fCB0aGlzLl9lZGl0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9KVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NoYXBlcy9pbWFnZS5waG90b3Nob3AtdG9vbHMuanNcbi8vIG1vZHVsZSBpZCA9IDY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxuLy8gcmVxdWlyZShcIi4uL21vZHVsZXMvcGF0aGZpbmRlclwiKTtcbnJlcXVpcmUoXCIuLi9maWx0ZXJzL3JlbW92ZVdoaXRlXCIpO1xuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5JbWFnZS5wcm90b3R5cGUsIHtcbiAgcmVtb3ZlV2hpdGU6IGZ1bmN0aW9uICh0aHJlc2hvbGQsIHJlbW92ZUFsbCwgY2FsbGJhY2spIHtcblxuXG4gICAgdmFyIHJ3ZiA9IF8uZmluZFdoZXJlKHRoaXMuZmlsdGVycywge3R5cGU6ICdSZW1vdmVXaGl0ZURQJ30pO1xuXG4gICAgaWYgKHJ3Zikge1xuICAgICAgcndmLm9wdGlvbnMuY29sb3JUaHJlc2hvbGQgPSB0aHJlc2hvbGQ7XG4gICAgICByd2Yub3B0aW9ucy5mcm9tQ29ybmVycyA9ICFyZW1vdmVBbGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJ3ZiA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5SZW1vdmVXaGl0ZURQKHtcbiAgICAgICAgZnJvbUNvcm5lcnM6ICFyZW1vdmVBbGwsXG4gICAgICAgIGJsdXJSYWRpdXM6IDIsXG4gICAgICAgIGNvbG9yVGhyZXNob2xkOiB0aHJlc2hvbGRcbiAgICAgIH0pO1xuICAgICAgdGhpcy5maWx0ZXJzLnB1c2gocndmKTtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuYXBwbHlGaWx0ZXJzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vX3RoaXMud2lkdGggPSBfdGhpcy5fZWxlbWVudC53aWR0aDtcbiAgICAgIC8vX3RoaXMuaGVpZ2h0ID0gX3RoaXMuX2VsZW1lbnQuaGVpZ2h0O1xuICAgICAgX3RoaXMuY2FudmFzLnJlbmRlckFsbCgpO1xuICAgICAgX3RoaXMuZmlyZShcImNvbnRlbnQ6bW9kaWZpZWRcIiwge2ZpbHRlcjogcndmLCBib3VuZHM6IHJ3Zi5ib3VuZHN9KTtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH0sXG4gIHJlbW92ZVdoaXRlQWxsOiB0cnVlLFxuXG4gIGFjdGlvbnM6IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLkltYWdlLnByb3RvdHlwZS5hY3Rpb25zLCB7XG4gICAgcmVtb3ZlV2hpdGVGcm9tQm9yZGVyczoge1xuICAgICAgdGl0bGU6ICdSZW1vdmUgQmFja2dyb3VuZCcsXG4gICAgICB0eXBlOiAnZWZmZWN0JyxcbiAgICAgIGNsYXNzTmFtZTogXCJmYSBmYS1kb3QtY2lyY2xlLW9cIixcbiAgICAgIGVmZmVjdFRwbDogJzxidXR0b24gaWQ9XCJzZWxlY3QtY29sb3JzLWFjdGlvbi1idXR0b25cIiBjbGFzcz1cImZhIGZhLWNoZWNrXCI+PC9idXR0b24+JyArXG4gICAgICAnPGlucHV0IGlkPVwic2VsZWN0LWNvbG9ycy1jaGVja2JveFwiIHR5cGU9XCJjaGVja2JveFwiPicgK1xuICAgICAgJzxpbnB1dCBpZD1cInNlbGVjdC1jb2xvcnMtdGhyZXNob2xkXCIgdHlwZT1cInJhbmdlXCIgICBtaW49XCIxXCIgbWF4PVwiMjU1XCI+JyxcbiAgICAgIGFjdGlvblBhcmFtZXRlcnM6IGZ1bmN0aW9uIChlbCwgZGF0YSkge1xuICAgICAgICB2YXJcbiAgICAgICAgICBhY3Rpb25DaGsgPSBlbC5maW5kKCcjc2VsZWN0LWNvbG9ycy1jaGVja2JveCcpLFxuICAgICAgICAgIGFjdGlvbkJ0biA9IGVsLmZpbmQoJyNzZWxlY3QtY29sb3JzLWFjdGlvbi1idXR0b24nKTtcbiAgICAgICAgZGF0YS50aHJlc2hvbGRFbCA9IGVsLmZpbmQoJyNzZWxlY3QtY29sb3JzLXRocmVzaG9sZCcpO1xuXG4gICAgICAgIGRhdGEucmVtb3ZlV2hpdGVBbGwgPSBhY3Rpb25DaGsuaXMoXCI6Y2hlY2tlZFwiKTtcbiAgICAgICAgYWN0aW9uQ2hrLmNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGF0YS5yZW1vdmVXaGl0ZUFsbCA9IGFjdGlvbkNoay5pcyhcIjpjaGVja2VkXCIpXG4gICAgICAgIH0pO1xuICAgICAgICBhY3Rpb25CdG4uY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRhdGEuYWN0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWRhdGEuX19hY3Rpb24pIHtcblxuICAgICAgICAgIGRhdGEuX19hY3Rpb24gPSBkYXRhLmFjdGlvbjtcbiAgICAgICAgICBkYXRhLmFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRhdGEuX19hY3Rpb24ocGFyc2VJbnQoZGF0YS50aHJlc2hvbGRFbC52YWwoKSksIGRhdGEucmVtb3ZlV2hpdGVBbGwpXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGFjdGlvbjogXCJyZW1vdmVXaGl0ZVwiLFxuICAgICAgaW5zZXJ0OiAnaW1hZ2VUb29scydcbiAgICB9XG4gIH0pXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc2hhcGVzL2ltYWdlLnJlbW92ZS13aGl0ZS5qc1xuLy8gbW9kdWxlIGlkID0gNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIExpc3RTdHlsZVxuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5UZXh0Ym94LnByb3RvdHlwZSwge1xuICBsaXN0U3R5bGVUeXBlOiBcIm5vbmVcIixcbiAgbGlzdFN0eWxlRm9ybWF0OiBcIk4uXCIsXG4gIGxpc3RUZXh0UGFkZGluZzogNDAsXG4gIHRleHRQYWRkaW5nOiAwLFxuICBzZXRUZXh0UGFkZGluZzogZnVuY3Rpb24odmFsKXtcbiAgICB0aGlzLnRleHRQYWRkaW5nID0gdmFsO1xuICAgIHRoaXMuX2luaXREaW1lbnNpb25zKCk7XG4gIH0sXG4gIHNldExpc3RTdHlsZVR5cGU6IGZ1bmN0aW9uKHZhbCl7XG4gICAgdGhpcy5saXN0U3R5bGVUeXBlID0gdmFsO1xuICAgIHRoaXMuc2V0VGV4dFBhZGRpbmcodmFsID09PSBcIm5vbmVcIiA/IDA6IHRoaXMubGlzdFRleHRQYWRkaW5nKTtcbiAgfSxcbiAgLyoqXG4gICAqIFdyYXBzIHRleHQgdXNpbmcgdGhlICd3aWR0aCcgcHJvcGVydHkgb2YgVGV4dGJveC4gRmlyc3QgdGhpcyBmdW5jdGlvblxuICAgKiBzcGxpdHMgdGV4dCBvbiBuZXdsaW5lcywgc28gd2UgcHJlc2VydmUgbmV3bGluZXMgZW50ZXJlZCBieSB0aGUgdXNlci5cbiAgICogVGhlbiBpdCB3cmFwcyBlYWNoIGxpbmUgdXNpbmcgdGhlIHdpZHRoIG9mIHRoZSBUZXh0Ym94IGJ5IGNhbGxpbmdcbiAgICogX3dyYXBMaW5lKCkuXG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byB1c2UgZm9yIG1lYXN1cmVtZW50c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUaGUgc3RyaW5nIG9mIHRleHQgdGhhdCBpcyBzcGxpdCBpbnRvIGxpbmVzXG4gICAqIEByZXR1cm5zIHtBcnJheX0gQXJyYXkgb2YgbGluZXNcbiAgICovXG4gIF93cmFwVGV4dDogZnVuY3Rpb24oY3R4LCB0ZXh0KSB7XG4gICAgdmFyIGxpbmVzID0gdGV4dC5zcGxpdCh0aGlzLl9yZU5ld2xpbmUpLCB3cmFwcGVkID0gW10sIGk7XG5cblxuICAgIHRoaXMuX3BhcmFncmFwaHMgPSB7fTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fcGFyYWdyYXBoc1t3cmFwcGVkLmxlbmd0aF0gPSB0aGlzLmxpc3RTdHlsZUZvcm1hdC5yZXBsYWNlKFwiTlwiLGkgKyAxKVxuICAgICAgd3JhcHBlZCA9IHdyYXBwZWQuY29uY2F0KHRoaXMuX3dyYXBMaW5lKGN0eCwgbGluZXNbaV0sIGkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd3JhcHBlZDtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBXcmFwcyBhIGxpbmUgb2YgdGV4dCB1c2luZyB0aGUgd2lkdGggb2YgdGhlIFRleHRib3ggYW5kIGEgY29udGV4dC5cbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHVzZSBmb3IgbWVhc3VyZW1lbnRzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFRoZSBzdHJpbmcgb2YgdGV4dCB0byBzcGxpdCBpbnRvIGxpbmVzXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXhcbiAgICogQHJldHVybnMge0FycmF5fSBBcnJheSBvZiBsaW5lKHMpIGludG8gd2hpY2ggdGhlIGdpdmVuIHRleHQgaXMgd3JhcHBlZFxuICAgKiB0by5cbiAgICovXG4gIF93cmFwTGluZTogZnVuY3Rpb24oY3R4LCB0ZXh0LCBsaW5lSW5kZXgpIHtcbiAgICB2YXIgbGluZVdpZHRoICAgICAgICA9IDAsXG4gICAgICBsaW5lcyAgICAgICAgICAgID0gW10sXG4gICAgICBsaW5lICAgICAgICAgICAgID0gJycsXG4gICAgICB3b3JkcyAgICAgICAgICAgID0gdGV4dC5zcGxpdCgnICcpLFxuICAgICAgd29yZCAgICAgICAgICAgICA9ICcnLFxuICAgICAgb2Zmc2V0ICAgICAgICAgICA9IDAsXG4gICAgICBpbmZpeCAgICAgICAgICAgID0gJyAnLFxuICAgICAgd29yZFdpZHRoICAgICAgICA9IDAsXG4gICAgICBpbmZpeFdpZHRoICAgICAgID0gMCxcbiAgICAgIGxhcmdlc3RXb3JkV2lkdGggPSAwLFxuICAgICAgbGluZUp1c3RTdGFydGVkID0gdHJ1ZSxcbiAgICAgIGFkZGl0aW9uYWxTcGFjZSA9IHRoaXMuX2dldFdpZHRoT2ZDaGFyU3BhY2luZygpO1xuXG5cblxuICAgIHZhciBfdGV4dEFyZWFXaWR0aCA9IHRoaXMud2lkdGg7XG4gICAgaWYodGhpcy50ZXh0UGFkZGluZyl7XG4gICAgICBfdGV4dEFyZWFXaWR0aCAtPSB0aGlzLnRleHRQYWRkaW5nXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHdvcmQgPSB3b3Jkc1tpXTtcbiAgICAgIHdvcmRXaWR0aCA9IHRoaXMuX21lYXN1cmVUZXh0KGN0eCwgd29yZCwgbGluZUluZGV4LCBvZmZzZXQpO1xuXG4gICAgICBvZmZzZXQgKz0gd29yZC5sZW5ndGg7XG5cbiAgICAgIGxpbmVXaWR0aCArPSBpbmZpeFdpZHRoICsgd29yZFdpZHRoIC0gYWRkaXRpb25hbFNwYWNlO1xuXG4gICAgICBpZiAobGluZVdpZHRoID49IF90ZXh0QXJlYVdpZHRoICYmICFsaW5lSnVzdFN0YXJ0ZWQpIHtcbiAgICAgICAgbGluZXMucHVzaChsaW5lKTtcbiAgICAgICAgbGluZSA9ICcnO1xuICAgICAgICBsaW5lV2lkdGggPSB3b3JkV2lkdGg7XG4gICAgICAgIGxpbmVKdXN0U3RhcnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbGluZVdpZHRoICs9IGFkZGl0aW9uYWxTcGFjZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFsaW5lSnVzdFN0YXJ0ZWQpIHtcbiAgICAgICAgbGluZSArPSBpbmZpeDtcbiAgICAgIH1cbiAgICAgIGxpbmUgKz0gd29yZDtcblxuICAgICAgaW5maXhXaWR0aCA9IHRoaXMuX21lYXN1cmVUZXh0KGN0eCwgaW5maXgsIGxpbmVJbmRleCwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCsrO1xuICAgICAgbGluZUp1c3RTdGFydGVkID0gZmFsc2U7XG4gICAgICAvLyBrZWVwIHRyYWNrIG9mIGxhcmdlc3Qgd29yZFxuICAgICAgaWYgKHdvcmRXaWR0aCA+IGxhcmdlc3RXb3JkV2lkdGgpIHtcbiAgICAgICAgbGFyZ2VzdFdvcmRXaWR0aCA9IHdvcmRXaWR0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpICYmIGxpbmVzLnB1c2gobGluZSk7XG5cbiAgICBpZiAobGFyZ2VzdFdvcmRXaWR0aCA+IHRoaXMuZHluYW1pY01pbldpZHRoKSB7XG4gICAgICB0aGlzLmR5bmFtaWNNaW5XaWR0aCA9IGxhcmdlc3RXb3JkV2lkdGggLSBhZGRpdGlvbmFsU3BhY2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpbmVzO1xuICB9LFxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVXaWR0aCBXaWR0aCBvZiB0ZXh0IGxpbmVcbiAgICogQHJldHVybiB7TnVtYmVyfSBMaW5lIGxlZnQgb2Zmc2V0XG4gICAqL1xuICBfZ2V0TGluZUxlZnRPZmZzZXQ6IGZ1bmN0aW9uKGxpbmVXaWR0aCkge1xuICAgIGlmICh0aGlzLnRleHRBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgIHJldHVybiAodGhpcy53aWR0aCAtIGxpbmVXaWR0aCkgLyAyICsgdGhpcy50ZXh0UGFkZGluZy8yO1xuICAgIH1cbiAgICBpZiAodGhpcy50ZXh0QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgIHJldHVybiB0aGlzLndpZHRoIC0gbGluZVdpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50ZXh0UGFkZGluZztcbiAgfSxcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBNZXRob2QgbmFtZSAoXCJmaWxsVGV4dFwiIG9yIFwic3Ryb2tlVGV4dFwiKVxuICAgKi9cbiAgX3JlbmRlclRleHRDb21tb246IGZ1bmN0aW9uKGN0eCwgbWV0aG9kKSB7XG5cbiAgICB2YXIgbGluZUhlaWdodHMgPSAwLCBsZWZ0ID0gdGhpcy5fZ2V0TGVmdE9mZnNldCgpLCB0b3AgPSB0aGlzLl9nZXRUb3BPZmZzZXQoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl90ZXh0TGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBoZWlnaHRPZkxpbmUgPSB0aGlzLl9nZXRIZWlnaHRPZkxpbmUoY3R4LCBpKSxcbiAgICAgICAgbWF4SGVpZ2h0ID0gaGVpZ2h0T2ZMaW5lIC8gdGhpcy5saW5lSGVpZ2h0LFxuICAgICAgICBsaW5lV2lkdGggPSB0aGlzLl9nZXRMaW5lV2lkdGgoY3R4LCBpKSxcbiAgICAgICAgbGVmdE9mZnNldCA9IHRoaXMuX2dldExpbmVMZWZ0T2Zmc2V0KGxpbmVXaWR0aCk7XG5cblxuICAgICAgdGhpcy5fcmVuZGVyVGV4dExpbmUoXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgY3R4LFxuICAgICAgICB0aGlzLl90ZXh0TGluZXNbaV0sXG4gICAgICAgIGxlZnQgKyBsZWZ0T2Zmc2V0LFxuICAgICAgICB0b3AgKyBsaW5lSGVpZ2h0cyArIG1heEhlaWdodCxcbiAgICAgICAgaVxuICAgICAgKTtcbiAgICAgIGxpbmVIZWlnaHRzICs9IGhlaWdodE9mTGluZTtcbiAgICB9XG4gIH0sXG5cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBNZXRob2QgbmFtZSAoXCJmaWxsVGV4dFwiIG9yIFwic3Ryb2tlVGV4dFwiKVxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBsaW5lIFRleHQgdG8gcmVuZGVyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBsZWZ0IExlZnQgcG9zaXRpb24gb2YgdGV4dFxuICAgKiBAcGFyYW0ge051bWJlcn0gdG9wIFRvcCBwb3NpdGlvbiBvZiB0ZXh0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXggSW5kZXggb2YgYSBsaW5lIGluIGEgdGV4dFxuICAgKi9cbiAgX3JlbmRlclRleHRMaW5lOiBmdW5jdGlvbihtZXRob2QsIGN0eCwgbGluZSwgbGVmdCwgdG9wLCBsaW5lSW5kZXgpIHtcblxuXG5cbiAgICAvLyBsaWZ0IHRoZSBsaW5lIGJ5IHF1YXJ0ZXIgb2YgZm9udFNpemVcbiAgICB0b3AgLT0gdGhpcy5mb250U2l6ZSAqIHRoaXMuX2ZvbnRTaXplRnJhY3Rpb247XG5cbiAgICBzd2l0Y2godGhpcy5saXN0U3R5bGVUeXBlKXtcbiAgICAgIGNhc2UgXCJkZWNpbWFsXCI6XG4gICAgICAgIGlmKCB0aGlzLl9wYXJhZ3JhcGhzW2xpbmVJbmRleF0pe1xuICAgICAgICAgIC8vIGxpZnQgdGhlIGxpbmUgYnkgcXVhcnRlciBvZiBmb250U2l6ZVxuICAgICAgICAgIHRoaXMuX3JlbmRlckNoYXJzKG1ldGhvZCwgY3R4LCB0aGlzLl9wYXJhZ3JhcGhzW2xpbmVJbmRleF0gLCBsZWZ0IC0gdGhpcy50ZXh0UGFkZGluZyAsIHRvcCAgLCBsaW5lSW5kZXgsIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyBzaG9ydC1jaXJjdWl0XG4gICAgdmFyIGxpbmVXaWR0aCA9IHRoaXMuX2dldExpbmVXaWR0aChjdHgsIGxpbmVJbmRleCk7XG4gICAgaWYgKHRoaXMudGV4dEFsaWduICE9PSAnanVzdGlmeScgfHwgdGhpcy53aWR0aCA8IGxpbmVXaWR0aCkge1xuXG4gICAgICB0aGlzLl9yZW5kZXJDaGFycyhtZXRob2QsIGN0eCwgbGluZSwgbGVmdCwgdG9wLCBsaW5lSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gc3RyZXRjaCB0aGUgbGluZVxuICAgIHZhciB3b3JkcyA9IGxpbmUuc3BsaXQoL1xccysvKSxcbiAgICAgIGNoYXJPZmZzZXQgPSAwLFxuICAgICAgd29yZHNXaWR0aCA9IHRoaXMuX2dldFdpZHRoT2ZXb3JkcyhjdHgsIHdvcmRzLmpvaW4oJycpLCBsaW5lSW5kZXgsIDApLFxuICAgICAgd2lkdGhEaWZmID0gdGhpcy53aWR0aCAtIHdvcmRzV2lkdGggLSB0aGlzLnRleHRQYWRkaW5nLFxuICAgICAgbnVtU3BhY2VzID0gd29yZHMubGVuZ3RoIC0gMSxcbiAgICAgIHNwYWNlV2lkdGggPSBudW1TcGFjZXMgPiAwID8gd2lkdGhEaWZmIC8gbnVtU3BhY2VzIDogMCxcbiAgICAgIGxlZnRPZmZzZXQgPSAwLCB3b3JkO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHdvcmRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB3aGlsZSAobGluZVtjaGFyT2Zmc2V0XSA9PT0gJyAnICYmIGNoYXJPZmZzZXQgPCBsaW5lLmxlbmd0aCkge1xuICAgICAgICBjaGFyT2Zmc2V0Kys7XG4gICAgICB9XG4gICAgICB3b3JkID0gd29yZHNbaV07XG4gICAgICB0aGlzLl9yZW5kZXJDaGFycyhtZXRob2QsIGN0eCwgd29yZCwgbGVmdCArIGxlZnRPZmZzZXQsIHRvcCwgbGluZUluZGV4LCBjaGFyT2Zmc2V0KTtcbiAgICAgIGxlZnRPZmZzZXQgKz0gdGhpcy5fZ2V0V2lkdGhPZldvcmRzKGN0eCwgd29yZCwgbGluZUluZGV4LCBjaGFyT2Zmc2V0KSArIHNwYWNlV2lkdGg7XG4gICAgICBjaGFyT2Zmc2V0ICs9IHdvcmQubGVuZ3RoO1xuICAgIH1cbiAgfSxcbiAgdG9nZ2xlTGlzdFN0eWxlVHlwZTogZnVuY3Rpb24oKXtcbiAgICB0aGlzLnNldExpc3RTdHlsZVR5cGUodGhpcy5saXN0U3R5bGVUeXBlID09IFwibm9uZVwiID8gXCJkZWNpbWFsXCIgOiBcIm5vbmVcIik7XG4gICAgdGhpcy5jYW52YXMucmVuZGVyQWxsKCk7XG4gIH0sXG4gIGFjdGlvbnM6IHtcbiAgICB0b2dnbGVMaXN0U3R5bGVUeXBlOiB7XG4gICAgICBjbGFzc05hbWU6ICdmYSBmYS1saXN0LW9sJyxcbiAgICAgIHRpdGxlOiAnb3JkZXJlZCBsaXN0J1xuICAgIH1cbiAgfVxuXG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zaGFwZXMvdGV4dGJveC5saXN0LmpzXG4vLyBtb2R1bGUgaWQgPSA3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpZighJC5taW5pY29sb3JzKXtcbiAgICByZXF1aXJlKFwiLi4vLi4vcGx1Z2lucy8kLm1pbmljb2xvcnNcIik7XG59XG5cbmlmKHR5cGVvZiBUb29sYmFyID09PSBcInVuZGVmaW5lZFwiKXtcbiAgdmFyIFRvb2xiYXIgPSByZXF1aXJlKFwiLi4vc3JjL3Rvb2xiYXJcIik7XG59XG5cblRvb2xiYXIucHJvdG90eXBlLmNvbG9ycGlja2VyID0gZnVuY3Rpb24gKGVsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMuZm9ybWF0ID0gJ3JnYic7XG4gIG9wdGlvbnMub3BhY2l0eSA9IHRydWU7XG4gIGVsLm1pbmljb2xvcnMob3B0aW9ucyk7XG59O1xuXG5Ub29sYmFyLnByb3RvdHlwZS50b29scy5jb2xvciA9IHtcbiAgdGVtcGxhdGU6XG4gICAgJzxkaXYgY2xhc3M9XCJvYmplY3QtbWVudS1pdGVtXCIgdGl0bGU9XCJ7dGl0bGV9XCI+JyArXG4gICAgJzxkaXYgY2xhc3M9XCJidG4gYnV0dG9uLXtpZH0ge2NsYXNzTmFtZX1cIj4nICtcbiAgICAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgZGF0YS1mb3JtYXQ9XCJyZ2JhXCIgZGF0YS1vcGFjaXR5PVwidHJ1ZVwiIGRhdGEtdGV4dD1cInRydWVcIiBkYXRhLWNvbnRyb2w9XCJzYXR1cmF0aW9uXCIgZGF0YS1zd2F0Y2hlcz1cIiNmZmZ8IzAwMHwjZjAwfCMwZjB8IzAwZnwjZmYwfCMwZmZcIiAgdmFsdWU9XCJ7dmFsdWVDdXJyZW50fVwiIHRyYW5zY2x1ZGU+JyxcbiAgcG9zdDogZnVuY3Rpb24gKCRpdGVtLCBkYXRhLCBvcHRpb25zLCB0cmFuc2NsdWRlKSB7XG4gICAgdmFyIHRhcmdldCA9IGRhdGEudGFyZ2V0O1xuXG4gICAgdmFyIF92aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5jb2xvcnBpY2tlcih0cmFuc2NsdWRlLCB7XG4gICAgICAvLyB2YWx1ZTogICAgICAgIGRhdGEudmFsdWUuZ2V0KCkgLC8vfHwgZGF0YS52YWx1ZS5nZXQoKSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogLypkYXRhLnZhbHVlLmRlZmF1bHRWYWx1ZSB8fCovIGRhdGEudmFsdWUuZ2V0KCksXG4gICAgICBjb250cm9sOiAgICAgIHRyYW5zY2x1ZGUuYXR0cignZGF0YS1jb250cm9sJykgfHwgJ2h1ZScsXG4gICAgICBmb3JtYXQ6ICAgICAgIHRyYW5zY2x1ZGUuYXR0cignZGF0YS1mb3JtYXQnKSB8fCAnaGV4JyxcbiAgICAgIGtleXdvcmRzOiAgICAgdHJhbnNjbHVkZS5hdHRyKCdkYXRhLWtleXdvcmRzJykgfHwgJycsXG4gICAgICBpbmxpbmU6ICAgICAgIHRyYW5zY2x1ZGUuYXR0cignZGF0YS1pbmxpbmUnKSA9PT0gJ3RydWUnLFxuICAgICAgbGV0dGVyQ2FzZTogICB0cmFuc2NsdWRlLmF0dHIoJ2RhdGEtbGV0dGVyQ2FzZScpIHx8ICdsb3dlcmNhc2UnLFxuICAgICAgb3BhY2l0eTogICAgICB0cmFuc2NsdWRlLmF0dHIoJ2RhdGEtb3BhY2l0eScpLFxuICAgICAgcG9zaXRpb246ICAgICB0cmFuc2NsdWRlLmF0dHIoJ2RhdGEtcG9zaXRpb24nKSB8fCB0aGlzLnRvb2xzLmNvbG9yLmNvbG9ycGlja2VyUG9zaXRpb24gfHwgJ3JpZ2h0IGJvdHRvbScsXG4gICAgICBzd2F0Y2hlczogICAgIHRyYW5zY2x1ZGUuYXR0cignZGF0YS1zd2F0Y2hlcycpID8gdHJhbnNjbHVkZS5hdHRyKCdkYXRhLXN3YXRjaGVzJykuc3BsaXQoJ3wnKSA6IFtdLFxuICAgICAgdGV4dDogICAgIHRyYW5zY2x1ZGUuYXR0cignZGF0YS10ZXh0JyksXG4gICAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF92aXNpYmxlID0gZmFsc2VcbiAgICAgIH0sXG4gICAgICBzaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF92aXNpYmxlID0gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBjaGFuZ2U6IGZ1bmN0aW9uICh2YWx1ZSwgb3BhY2l0eSkge1xuICAgICAgICBkYXRhLnZhbHVlLnNldCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgX2VsID0gJCh0cmFuc2NsdWRlLnBhcmVudHMoKVswXSkuZmluZChcIi5taW5pY29sb3JzLXBhbmVsXCIpO1xuXG4gICAgdmFyIF9ISURFID0gZnVuY3Rpb24oZSl7XG4gICAgICBpZihfdmlzaWJsZSAmJiAkKGUudGFyZ2V0KS5wYXJlbnRzKCkuaW5kZXgoX2VsKSA9PSAtMSl7XG4gICAgICAgIHRyYW5zY2x1ZGUubWluaWNvbG9ycyhcImhpZGVcIik7XG4gICAgICB9XG4gICAgfTtcbiAgICAkKFwiYm9keVwiKS5vbihcIm1vdXNlZG93blwiLF9ISURFKVxuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vdG9vbGJhci9tb2R1bGVzL3Rvb2xiYXIuY29sb3JzLmpzXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbmlmKHR5cGVvZiBUb29sYmFyID09PSBcInVuZGVmaW5lZFwiKXtcbiAgdmFyIFRvb2xiYXIgPSByZXF1aXJlKFwiLi4vc3JjL3Rvb2xiYXJcIik7XG59XG5cblRvb2xiYXIucHJvdG90eXBlLmNvbG9ycGlja2VyID0gZnVuY3Rpb24gKGVsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMuZm9ybWF0ID0gJ3JnYic7XG4gIG9wdGlvbnMub3BhY2l0eSA9IHRydWU7XG4gIGVsLm1pbmljb2xvcnMob3B0aW9ucyk7XG59O1xuXG5Ub29sYmFyLnByb3RvdHlwZS50b29scy5lZmZlY3QgPSB7XG4gIHNjb3BlOiBmdW5jdGlvbiAoZGF0YSwgb3B0aW9ucykge1xuICAgIHJldHVybiB7XG4gICAgICBidXR0b25zVGl0bGU6IG9wdGlvbnMuYnV0dG9ucyAmJiBvcHRpb25zLmJ1dHRvbnMudGl0bGUgfHwgZmFsc2UsXG4gICAgICBpc1BhcmFtZXRlcnM6ICEhZGF0YS5hY3Rpb25QYXJhbWV0ZXJzLFxuICAgICAgYnV0dG9uc2NDbGFzc05hbWU6IChvcHRpb25zLmJ1dHRvbnMgJiYgb3B0aW9ucy5idXR0b25zLmNsYXNzTmFtZSB8fCAnJylcbiAgICB9XG4gIH0sXG4gIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm9iamVjdC1tZW51LWl0ZW1cIiB0aXRsZT1cInt0aXRsZX1cIj4nICtcbiAgICAgICc8YnV0dG9uIGNsYXNzPVwiYnRuIGJ1dHRvbi17aWR9IHtjbGFzc05hbWV9IHtidXR0b25zY0NsYXNzTmFtZX1cIj4nICtcbiAgICAgICc8c3BhbiBkcC1pZj1cImJ1dHRvbnNUaXRsZVwiIGNsYXNzPVwiYnV0dG9uLXRpdGxlXCI+e3RpdGxlfTwvc3Bhbj4nICtcbiAgICAgICc8L2J1dHRvbj4nICtcbiAgICAgICc8ZGl2IGRwLWlmPVwiaXNQYXJhbWV0ZXJzXCIgY2xhc3M9XCJtZW51LWFjdGlvbi1wYXJhbWV0ZXJzXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lXCIgdHJhbnNjbHVkZT48L2Rpdj4nICtcbiAgICAnPC9kaXY+JyxcbiAgICBwb3N0OiBmdW5jdGlvbiAoJGl0ZW0sIGRhdGEsIG9wdGlvbnMsIHRyYW5zY2x1ZGUpIHtcblxuICAgIGlmKGRhdGEuY29udGFpbmVyKXtcbiAgICAgIHRyYW5zY2x1ZGUgPSAkKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRhdGEuY29udGFpbmVyKSk7XG4gICAgfVxuXG4gICAgdmFyICR0cGw7XG4gICAgdmFyIGZvbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChkYXRhLmVmZmVjdFRwbCkge1xuICAgICAgICAkdHBsID0gJChkYXRhLmVmZmVjdFRwbCk7XG4gICAgICAgIHRyYW5zY2x1ZGUuaHRtbCgkdHBsKTtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLmFjdGlvblBhcmFtZXRlcnNJZCkge1xuICAgICAgICAkdHBsID0gJChcIiNcIiArIGRhdGEuYWN0aW9uUGFyYW1ldGVyc0lkKS5jbG9uZSgpO1xuICAgICAgICB0cmFuc2NsdWRlLmh0bWwoJHRwbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YS5hY3Rpb25QYXJhbWV0ZXJzLmNhbGwoZGF0YS50YXJnZXQsIHRyYW5zY2x1ZGUsIGRhdGEsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgdGhpcy50b2dnbGVCeUJ1dHRvbigkaXRlbSwgdHJhbnNjbHVkZSwgZm9vICxkYXRhKTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL3Rvb2xiYXIvbW9kdWxlcy90b29sYmFyLmVmZmVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG5pZighJC5mb250U2VsZWN0b3Ipe1xuICByZXF1aXJlKFwiLi4vLi4vcGx1Z2lucy8kLmZvbnRTZWxlY3RvclwiKTtcbn1cblxuaWYodHlwZW9mIFRvb2xiYXIgPT09IFwidW5kZWZpbmVkXCIpe1xuICB2YXIgVG9vbGJhciA9IHJlcXVpcmUoXCIuLi9zcmMvdG9vbGJhclwiKTtcbn1cblxuVG9vbGJhci5wcm90b3R5cGUuZm9udHMgPSBbXG4gICdBcmlhbCxIZWx2ZXRpY2Esc2Fucy1zZXJpZicsXG4gICdBcmlhbCBCbGFjayxHYWRnZXQsc2Fucy1zZXJpZicsXG4gICdDb21pYyBTYW5zIE1TLGN1cnNpdmUnLFxuICAnQ291cmllciBOZXcsQ291cmllcixtb25vc3BhY2UnLFxuICAnR2VvcmdpYSxzZXJpZicsXG4gICdJbXBhY3QsQ2hhcmNvYWwsc2Fucy1zZXJpZicsXG4gICdMdWNpZGEgQ29uc29sZSxNb25hY28sbW9ub3NwYWNlJyxcbiAgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUsTHVjaWRhIEdyYW5kZSxzYW5zLXNlcmlmJyxcbiAgJ1BhbGF0aW5vIExpbm90eXBlLEJvb2sgQW50aXF1YSxQYWxhdGlubyxzZXJpZicsXG4gICdUYWhvbWEsR2VuZXZhLHNhbnMtc2VyaWYnLFxuICAnVGltZXMgTmV3IFJvbWFuLFRpbWVzLHNlcmlmJyxcbiAgJ1RyZWJ1Y2hldCBNUyxIZWx2ZXRpY2Esc2Fucy1zZXJpZicsXG4gICdWZXJkYW5hLEdlbmV2YSxzYW5zLXNlcmlmJyxcbiAgJ0dpbGwgU2FucyxHZW5ldmEsc2Fucy1zZXJpZidcbl07XG5cblxuVG9vbGJhci5wcm90b3R5cGUudG9vbHMuZm9udEZhbWlseSA9IHtcbiAgc2NvcGU6IGZ1bmN0aW9uIChkYXRhLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vY3VycmVudFZhbHVlOiBkYXRhLnZhbHVlLmdldCgpLFxuICAgICAgb25jaGFuZ2U6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGRhdGEudmFsdWUuc2V0KHBhcnNlRmxvYXQoJChlLnRhcmdldCkudmFsKCkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm9iamVjdC1tZW51LWl0ZW0gb2JqZWN0LW1lbnUtZm9udC1mYW1pbHlcIiB0aXRsZT1cInt0aXRsZX1cIj4nICtcbiAgJzxkaXYgY2xhc3M9XCJmb250U2VsZWN0XCIgdHJhbnNjbHVkZT48ZGl2IGNsYXNzPVwiYXJyb3ctZG93blwiPicsXG4gICAgcG9zdDogZnVuY3Rpb24gKCRpdGVtLCBkYXRhLCBvcHRpb25zLCB0cmFuc2NsdWRlKSB7XG5cbiAgICB0cmFuc2NsdWRlLmZvbnRTZWxlY3Rvcih7XG4gICAgICAnaGlkZV9mYWxsYmFja3MnOiB0cnVlLFxuICAgICAgJ2luaXRpYWwnOiBkYXRhLnZhbHVlLmdldCgpLC8vJ0NvdXJpZXIgTmV3LENvdXJpZXIgTmV3LENvdXJpZXIsbW9ub3NwYWNlJyxcbiAgICAgICdzZWxlY3RlZCc6IGRhdGEudmFsdWUuc2V0LmJpbmQoZGF0YS50YXJnZXQpLFxuICAgICAgJ2ZvbnRzJzogZGF0YS5kYXRhXG4gICAgfSk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi90b29sYmFyL21vZHVsZXMvdG9vbGJhci5mb250cy5qc1xuLy8gbW9kdWxlIGlkID0gNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiO1xuaWYodHlwZW9mIFRvb2xiYXIgPT09IFwidW5kZWZpbmVkXCIpe1xuICB2YXIgVG9vbGJhciA9IHJlcXVpcmUoXCIuLi9zcmMvdG9vbGJhclwiKTtcbn1cblxuVG9vbGJhci5wcm90b3R5cGUudXBkYXRlU2VsZWN0ZWRPcHRpb24gPSBmdW5jdGlvbihkYXRhKXtcbiAgdmFyICRjaGVja2VkID0gZGF0YS4kaXRlbS5maW5kKFwiOmNoZWNrZWRcIik7XG4gIHZhciAkY2hlY2tlZE9wdGlvbkVsID0gJCgkY2hlY2tlZC5wYXJlbnRzKClbMF0pO1xuXG5cbiAgdmFyIHNlbE9wdGlvbiA9IGRhdGEuJGl0ZW0uZmluZCgnLmJ0bi1zZWxlY3RlZC1vcHRpb24nKTtcbiAgc2VsT3B0aW9uLmh0bWwoICRjaGVja2VkT3B0aW9uRWwuZmluZChcImxhYmVsXCIpWzBdLm91dGVySFRNTCApO1xufTtcblxuVG9vbGJhci5wcm90b3R5cGUudG9vbHMub3B0aW9uID0ge1xuICBzY29wZTogZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgIHJldHVybiB7XG4gICAgICBwYXJlbnRJZDogZGF0YS5wYXJlbnQuaWQsXG4gICAgICB2YWx1ZUN1cnJlbnQ6IGRhdGEucGFyZW50LnZhbHVlLmdldCgpID09PSBkYXRhLm9wdGlvbixcbiAgICAgIG9uY2hhbmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8v0L7Qv9GC0LjQvNC40LfQuNGA0L7QstCw0YLRjFxuXG4gICAgICAgIHZhciAkY2hlY2tlZCA9IGRhdGEuJGl0ZW0uZmluZChcIjpjaGVja2VkXCIpO1xuICAgICAgICB2YXIgX3ZhbHVlID0gJGNoZWNrZWQudmFsKCk7XG4gICAgICAgIGlmIChfdmFsdWUgPT0gZGF0YS5vcHRpb24pIHtcbiAgICAgICAgICBkYXRhLnBhcmVudC52YWx1ZS5zZXQoX3ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBfc2VsZi51cGRhdGVTZWxlY3RlZE9wdGlvbihkYXRhLnBhcmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICB0ZW1wbGF0ZTpcbiAgICAnPGRpdiBjbGFzcz1cIm9iamVjdC1tZW51LWl0ZW0gb2JqZWN0LW1lbnUtb3B0aW9uIFwiIHRpdGxlPVwie3RpdGxlfVwiID4nICtcbiAgICAnPGlucHV0IHR5cGU9XCJyYWRpb1wiIGlkPVwidG9vbC17aWR9XCIgZHAtY2hlY2tlZD1cInt2YWx1ZUN1cnJlbnR9XCIgbmFtZT1cIntwYXJlbnRJZH1cIiB2YWx1ZT1cIntvcHRpb259XCIgb25jaGFuZ2U9XCJvbmNoYW5nZSgpXCI+JyArXG4gICAgJzxsYWJlbCBjbGFzcz1cImJ0biBidXR0b24te2lkfSB7Y2xhc3NOYW1lfVwiIGZvcj1cInRvb2wte2lkfVwiPicgK1xuICAgICAgJzxpbWcgZHAtaWY9XCJpY29uXCIgZHAtc3JjPVwiaWNvblwiPicgK1xuICAgICAgJzxzcGFuIGRwLWluY2x1ZGU9XCJzdmdcIiBkcC1pZj1cInN2Z1wiPjwvc3Bhbj4nICtcbiAgICAgICc8c3BhbiBkcC1pZj1cInRpdGxlXCIgY2xhc3M9XCJvcHRpb24tdGl0bGVcIj57dGl0bGV9PC9zcGFuPidcbn07XG5cblRvb2xiYXIucHJvdG90eXBlLnRvb2xzLm9wdGlvbnMgPSB7XG4gIHNjb3BlOiBmdW5jdGlvbiAoZGF0YSwgb3B0aW9ucykge1xuICAgIHJldHVybiB7XG4gICAgICBjbGFzc05hbWU6IGRhdGEuY2xhc3NOYW1lIHx8ICdpdGVtcy1jb2x1bW4nLFxuICAgICAgYnV0dG9uc1RpdGxlOiBvcHRpb25zLmJ1dHRvbnMgJiYgb3B0aW9ucy5idXR0b25zLnRpdGxlIHx8IGZhbHNlLFxuICAgICAgYnV0dG9uc0NsYXNzTmFtZTogKG9wdGlvbnMuYnV0dG9ucy5jbGFzc05hbWUgfHwgJycpXG4gICAgfVxuICB9LFxuICB0ZW1wbGF0ZTpcbiAgJzxkaXYgY2xhc3M9XCJvYmplY3QtbWVudS1pdGVtIG9iamVjdC1tZW51LW9wdGlvbnMge2NsYXNzTmFtZX1cIiB0aXRsZT1cInt0aXRsZX1cIj4nICtcbiAgJzxkaXYgY2xhc3M9XCJidG4gYnRuLXNlbGVjdGVkLW9wdGlvblwiPjwvZGl2PicgK1xuICAnPGRpdiBjbGFzcz1cIm9iamVjdC1tZW51LW9wdGlvbnMtY29udGFpbmVyXCIgdHJhbnNjbHVkZT4nLFxuICBwb3N0OiBmdW5jdGlvbiAoJGl0ZW0sIGRhdGEsIG9wdGlvbnMsIHRyYW5zY2x1ZGUpIHtcbiAgICB0aGlzLmdlbmVyYXRlTWVudShkYXRhLnRhcmdldCwgdHJhbnNjbHVkZSwgb3B0aW9ucywgZGF0YS5tZW51KTtcbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkT3B0aW9uKGRhdGEpO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vdG9vbGJhci9tb2R1bGVzL3Rvb2xiYXIub3B0aW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiO1xuaWYodHlwZW9mIFRvb2xiYXIgPT09IFwidW5kZWZpbmVkXCIpe1xuICB2YXIgVG9vbGJhciA9IHJlcXVpcmUoXCIuLi9zcmMvdG9vbGJhclwiKTtcbn1cblxuVG9vbGJhci5wcm90b3R5cGUudG9vbHMuc2VsZWN0ID0gIHtcbiAgc2NvcGU6IGZ1bmN0aW9uIChkYXRhLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldElucHV0VmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoZGF0YS4kaXRlbS5maW5kKFwiaW5wdXRcIikudmFsKCkpO1xuICAgICAgfSxcbiAgICAgIGdldFZhbHVlOiBkYXRhLnZhbHVlLmdldCxcbiAgICAgIHNldFZhbHVlOiBkYXRhLnZhbHVlLnNldCxcbiAgICAgIG9uY2hhbmdlOiBmdW5jdGlvbiAoZSxtb2RlbCkge1xuICAgICAgICBkYXRhLnZhbHVlLnNldChlLnBhcmFtcy5kYXRhLmlkLG1vZGVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm9iamVjdC1tZW51LWl0ZW0gb2JqZWN0LW1lbnUtc2VsZWN0IHtpdGVtQ2xhc3NOYW1lfVwiIHRpdGxlPVwie3RpdGxlfVwiID48bGFiZWwgZm9yPVwieHh4XCIgY2xhc3M9XCJidG4gYnV0dG9uLXtpZH0ge2NsYXNzTmFtZX1cIj48L2xhYmVsPjxzZWxlY3QgaWQ9XCJ4eHhcIj4nLFxuICBwb3N0OiBmdW5jdGlvbiAoJGl0ZW0sIGRhdGEsIG9wdGlvbnMsIHRvb2wsIHZhbCkge1xuICAgIHZhciBtb2RlbCA9ICBkYXRhLnZhbHVlLm9wdGlvbnMoKTtcbiAgICB2YXIgX3ZhbCA9IGRhdGEudmFsdWUuZ2V0KCk7XG4gICAgdmFyIF9zZWxlY3QgPSAkaXRlbS5maW5kKFwic2VsZWN0XCIpO1xuICAgIF9zZWxlY3QuZHBTZWxlY3Qoe1xuICAgICAgbWluaW11bVJlc3VsdHNGb3JTZWFyY2g6IEluZmluaXR5LFxuICAgICAgZHJvcGRvd25QYXJlbnQ6ICQoXCJib2R5XCIpLFxuICAgICAgZGF0YTogIG1vZGVsLFxuICAgICAgdGVtcGxhdGVTZWxlY3Rpb246IGZ1bmN0aW9uKHN0YXRlLCBjb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEudGVtcGxhdGVTZWxlY3Rpb24oc3RhdGUsIGNvbnRhaW5lcixkYXRhKTtcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVJlc3VsdDogZnVuY3Rpb24oc3RhdGUsIGNvbnRhaW5lcil7XG4gICAgICAgIHJldHVybiBkYXRhLnRlbXBsYXRlUmVzdWx0KHN0YXRlLCBjb250YWluZXIsZGF0YSk7XG4gICAgICB9LFxuICAgIH0pLm9uKFwic2VsZWN0MjpzZWxlY3RcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgZGF0YS5vbmNoYW5nZShlLCBtb2RlbCk7XG4gICAgfSk7XG4gICAgX3NlbGVjdC5kcFNlbGVjdChcInZhbFwiLFtfdmFsXSk7XG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL3Rvb2xiYXIvbW9kdWxlcy90b29sYmFyLnNlbGVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJmc1wiXG4vLyBtb2R1bGUgaWQgPSA3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBOzs7O0FDaEVBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUMvd0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUM1TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDblJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ25JQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUMxVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNwcERBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDbGFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDOU1BO0FBQ0E7QUFDQTs7Ozs7OztBQ0ZBO0FBQ0E7Ozs7Ozs7O0FDREE7Ozs7OztBQ0FBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNyTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDcHBDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7Ozs7O0FDclFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOzs7Ozs7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDMUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ3BJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUMvRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQzFGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQzdOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQzlQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDL09BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDektBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUMzVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDdmdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDaktBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDOVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQzlGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDdlpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQzdnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUN2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQzlRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNoTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ2pSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDcEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQzNJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQzFQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ3hRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNyYUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNsUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUMvRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUMxOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNqUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDeEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNoR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUN6RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDOU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUMvSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQy9VQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDdkpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUN2TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ2hTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUM5SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDbEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ3hOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUN0Q0E7OztBIiwic291cmNlUm9vdCI6IiJ9